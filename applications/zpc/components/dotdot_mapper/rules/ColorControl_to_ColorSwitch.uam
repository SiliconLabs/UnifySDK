// (Level or OnOff) + Color Switch CC <-> ColorControl

// Z-Wave Attributes
def zwSTATE              0x3303
def zwCOMPONENT_ID       0x3304
def zwCOLOR_VALUE        0x3305
def zwCOLOR_DURATION     0x3306

// CC versions
def zwBINARY_SWITCH_v   0x2501
def zwMULTILEVEL_v      0x2601
def zwCOLOR_SWITCH_v    0x3301

// Z-Wave Indictes for the Component IDs
def WARM_WHITE 0
def COLD_WHITE 1
def RED 2
def GREEN 3
def BLUE 4

// Aliases
def r_zwDURATION      r'zwSTATE.zwCOLOR_DURATION
def r_zw_WARM_WHITE   (r'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE or 0)
def r_zw_COLD_WHITE   (r'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE or 0)
def r_zw_RED          (r'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE or 0)
def r_zw_GREEN        (r'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE or 0)
def r_zw_BLUE         (r'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE or 0)
def e_zw_WARM_WHITE   e'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE
def e_zw_COLD_WHITE   e'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE
def e_zw_RED          e'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE
def e_zw_GREEN        e'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE
def e_zw_BLUE         e'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE
def d_zwDURATION      d'zwSTATE.zwCOLOR_DURATION

// ZCL ColorControl attributes
def zbREMAINING_TIME            0x03000002
def zbCURRENT_HUE               0x03000000
def zbCURRENT_SATURATION        0x03000001
def zbCOLOR_MODE                0x03000008
def zbCOLOR_CAPABILITIES        0x0300400A
def zbENHANCED_COLOR_MODE       0x03004001
def zbCOLOR_TEMPERATURE         0x03000007
def zbMIN_COLOR_TEMPERATURE     0x0300400B
def zbMAX_COLOR_TEMPERATURE     0x0300400C


// HS(V) to RGB
// https://www.rapidtables.com/convert/color/hsv-to-rgb.html

def H ((d'zbCURRENT_HUE) * 360 / 254)
def S ((d'zbCURRENT_SATURATION) / 254)

def H_diff (((H / 60) % 2 ) - 1)
def H_diff_abs (if(H_diff > 0) (H_diff) (0 - H_diff))
def X (S * (1 - H_diff_abs))

def Xp ((X + 1 - S) * 255)
def Zp ((1 - S) * 255)

// RGB to HS(V)
// https://www.rapidtables.com/convert/color/rgb-to-hsv.html

def Cmax (
  if ((r_zw_RED >= r_zw_GREEN) & (r_zw_RED >= r_zw_BLUE)) (r_zw_RED / 255)
  if ((r_zw_GREEN >= r_zw_RED) & (r_zw_GREEN >= r_zw_BLUE)) (r_zw_GREEN / 255)
  (r_zw_BLUE / 255)
)

def Cmin (
  if ((r_zw_RED <= r_zw_GREEN) & (r_zw_RED <= r_zw_BLUE)) (r_zw_RED / 255)
  if ((r_zw_GREEN <= r_zw_RED) & (r_zw_GREEN <= r_zw_BLUE))  (r_zw_GREEN / 255)
  (r_zw_BLUE / 255)
)

def Cdelta (Cmax - Cmin)

// Mired to 3000 & 5000

def CKelvin (1000000 / d'zbCOLOR_TEMPERATURE)

// 3000 to 5000

def KelvinMax (
  if (r_zw_WARM_WHITE > r_zw_COLD_WHITE) r_zw_WARM_WHITE
  r_zw_COLD_WHITE
)            

scope 0 {

  d'zwSTATE.zwCOMPONENT_ID[WARM_WHITE].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE < 2) 0
    if (r'zbCOLOR_MODE > 2) 0
    if (CKelvin <= 4000) 255
    (((5000 - CKelvin) / 1000) * 255)

  d'zwSTATE.zwCOMPONENT_ID[COLD_WHITE].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE < 2) 0
    if (r'zbCOLOR_MODE > 2) 0
    if (CKelvin >= 4000) 255
    (((CKelvin - 3003) / 1000) * 255)

  d'zwSTATE.zwCOMPONENT_ID[RED].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE > 0) 0
    if (H < 60) 255
    if (H < 120) Xp
    if (H < 240) Zp
    if (H < 300) Xp
    255

  d'zwSTATE.zwCOMPONENT_ID[GREEN].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE > 0) 0
    if (H < 60) Xp
    if (H < 180) 255
    if (H < 240) Xp
    Zp

  d'zwSTATE.zwCOMPONENT_ID[BLUE].zwCOLOR_VALUE =
    if (r'zbCOLOR_MODE > 0) 0
    if (H < 120) Zp
    if (H < 180) Xp
    if (H < 300) 255
    Xp

  // Adjust the desired transition time under all Color components ID
  d'zwSTATE.zwCOLOR_DURATION  =
    if ( d'zbREMAINING_TIME < 10) 0
    if ( d'zbREMAINING_TIME < 1270 ) (d'zbREMAINING_TIME / 10)
    (127 + d'zbREMAINING_TIME / 600)

  // Z-Wave to ZCL

  // Temperature
  r'zbCOLOR_TEMPERATURE =
    if ((r'zbCOLOR_CAPABILITIES & 0x10) == 0) undefined
    if (r'zbCOLOR_MODE < 2) 0
    if (r'zbCOLOR_MODE > 2) 0
    if (KelvinMax == r_zw_WARM_WHITE) (1000000 / (3000 + ((r_zw_COLD_WHITE * 1000) / 255)))
    (1000000 / (5000 - ((r_zw_WARM_WHITE * 1000) / 255 )))

  // Hue and Saturation
  r'zbCURRENT_HUE =
    if ((r'zbCOLOR_CAPABILITIES & 0x1) == 0) undefined
    if (Cdelta == 0) 0
    if (Cmax == (r_zw_RED / 255)) ((((360 + 60 * (r_zw_GREEN - r_zw_BLUE) / 255 / Cdelta) * 180 ) / 254 ) % 255 )
    if (Cmax == (r_zw_GREEN / 255)) (((120 + 60 * (r_zw_BLUE - r_zw_RED) / 255 / Cdelta) * 180 ) / 254 )
    (((240 + 60 * (r_zw_RED - r_zw_GREEN) / 255 / Cdelta) * 180 ) / 254 )

  r'zbCURRENT_SATURATION =
    if ((r'zbCOLOR_CAPABILITIES & 0x1) == 0) undefined
    if (Cmax == 0) 0
    (254 * ( Cdelta / Cmax ))

  r'zbREMAINING_TIME  =
    if ( r_zwDURATION == 0 ) 0
    if ( r_zwDURATION == 0xFF ) 0
    if ( r_zwDURATION == 0xFE ) 0
    if ( r_zwDURATION < 0x80 ) (r_zwDURATION * 10)
    if ( r_zwDURATION < 0xEC ) ((r_zwDURATION-127) * 600)
    if ( r_zwDURATION > 0xEB ) 65535
    undefined

  r'zbCOLOR_CAPABILITIES =
   if (e_zw_RED | e_zw_GREEN | e_zw_BLUE | e_zw_COLD_WHITE | e_zw_WARM_WHITE)
   ((( e_zw_RED & e_zw_GREEN & e_zw_BLUE) * 1) | (( e_zw_COLD_WHITE | e_zw_WARM_WHITE) * 0x10))
   undefined

  // Color mode will be toggled by incoming ZCL commands
  // At start, we try to based it on the reported state of the node.
  r'zbCOLOR_MODE =
    if(r_zw_WARM_WHITE>0) 2
    if(r_zw_COLD_WHITE>0) 2
    if(r_zw_RED>0) 0
    if(r_zw_GREEN>0) 0
    if(r_zw_BLUE>0) 0
    undefined

  // Mirror the value from Color Mode here.
  r'zbENHANCED_COLOR_MODE = r'zbCOLOR_MODE

  // Color temperature capabilities. We consider Warm White = 3000K and e_zw_COLD_WHITE = 5000K
  r'zbMIN_COLOR_TEMPERATURE =
    if ( e_zw_COLD_WHITE ) (1000000 / 5000)
    if ( e_zw_WARM_WHITE ) (1000000 / 3000)
    undefined

  r'zbMAX_COLOR_TEMPERATURE =
    if ( e_zw_WARM_WHITE ) (1000000 / 3000)
    if ( e_zw_COLD_WHITE ) (1000000 / 5000)
    undefined
}
