// The DotDot Basic cluster
def DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION 0xba5c0001
def DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION 0xba5c0002
def DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION 0xba5c0003
def DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME 0xba5c0004
def DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER 0xba5c0005
def DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE 0xba5c0006
def zbPOWER_SOURCE 0xba5c0007
def DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS 0xba5c0008
def DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE 0xba5c0009
def DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE 0xba5c000a
def DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL 0xba5c000b
def DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS 0xba5c000c
def DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER 0xba5c000d
def DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL 0xba5c000e
def DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION 0xba5c0010
def DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT 0xba5c0011
def DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED 0xba5c0012
def DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK 0xba5c0013
def DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG 0xba5c0014
def DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID 0xba5c4000
def zb_HWVersion 0xba5c0003

def DOTDOT_ATTRIBUTE_ID_BASIC_ZWAVE_GENERIC_DEVICE_CLASS 0xba5cff01
def DOTDOT_ATTRIBUTE_ID_BASIC_ZWAVE_SPECIFIC_DEVICE_CLASS 0xba5cff02


// Z-Wave Attributes
def ep 0x04
def zwSUPPORTED_NOTIFICATION_TYPES              0x7102
def zwNOTIFICATION_TYPE                         0x7103
def zwNOTIFICATION_SUPPORTED_STATES_OR_EVENTS   0x7104
def zwNOTIFICATION_STATE_OR_EVENT               0x7105
def zwNOTIFICATION_STATE_OR_EVENT_PARAMETERS    0x7106

def NOTIFICATION_SYSTEM_TYPE 0x09
def NOTIFICATION_SYSTEM_STATE_HARDWARE_FAILURE 0x01
def NOTIFICATION_SYSTEM_STATE_SOFTWARE_FAILURE 0x02

// This represents the Z-Wave Generic Device Type of a node/endpoint
def zwATTRIBUTE_ZWAVE_GENERIC_DEVICE_CLASS 0x0104
// This represents the Z-Wave Specific Device Type of a node/endpoint.
def zwATTRIBUTE_ZWAVE_SPECIFIC_DEVICE_CLASS 0x0105

// NIF flags
def zwLISTENING 0x0008
def zwOPTIONAL 0x0009

// Version CC data
def zw_VERSION_REPORT 0x8602
def zw_HW_VERSION     0x860F

// Higher level attributes
def NodeID 0x03

scope 0 {
  r'DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK =
    if (r'zwNOTIFICATION_TYPE[NOTIFICATION_SYSTEM_TYPE].zwNOTIFICATION_STATE_OR_EVENT == NOTIFICATION_SYSTEM_STATE_HARDWARE_FAILURE) 1
    if (r'zwNOTIFICATION_TYPE[NOTIFICATION_SYSTEM_TYPE].zwNOTIFICATION_STATE_OR_EVENT == NOTIFICATION_SYSTEM_STATE_SOFTWARE_FAILURE) 2
    undefined
}

// ZWave Generic / Specific Device class
scope 0 {
  r'DOTDOT_ATTRIBUTE_ID_BASIC_ZWAVE_GENERIC_DEVICE_CLASS = r'zwATTRIBUTE_ZWAVE_GENERIC_DEVICE_CLASS
  r'DOTDOT_ATTRIBUTE_ID_BASIC_ZWAVE_SPECIFIC_DEVICE_CLASS = r'zwATTRIBUTE_ZWAVE_SPECIFIC_DEVICE_CLASS
}

// Map at the NodeID level
scope 0 common_parent_type(0x03) {
  // TBD: UIC-1717 can we somehow get the path evaluation of the left-hand
  // side return a set of possible matches for path evaluation ? Child by type
  // always takes the first (ep 0 here), but it would be powerful to get a set
  // of ep for the lhs, so if we have several matches, we can make a map to
  // all of them simultaneously.
  r'ep.zbPOWER_SOURCE =
    if(fn_is_any_undefined(r'ep)) undefined // This adds a dependency that will trigger re-evaluation of this rule when a new endpoint is created.
    if (r'zwLISTENING & 0x80) 1 // AL Nodes: SinglePhaseMains
    if (e'zwOPTIONAL) 3 undefined // FL or NL nodes: Battery

    // Basic HWVersion
  r'ep.zb_HWVersion =
    if(fn_is_any_undefined(r'ep)) undefined // This adds a dependency that will trigger re-evaluation of this rule when a new endpoint is created/updated.
    r'ep[0].zw_VERSION_REPORT.zw_HW_VERSION
}

