// --------
// Z-Wave Meter attributes
def zwTYPE        0x3205
def zwSCALE       0x3206
def zwRATE_TYPE   0x3207
def zwVALUE       0x3208
def zwPRECISION   0x3209

// Z-Wave indices (i.e., Z-Wave Metering Type)
def zwELECTRIC_METER_TYPE 1
def zwGAS_METER_TYPE 2
def zwWATER_METERING_TYPE 3
def zwHEAT_METERING_TYPE 4
def zwCOOLING_METERING_TYPE 5

// Scale for Z-Wave Metering Types
def zwCUBIC_METER_SCALE 0
def zwCUBIC_FEET_SCALE 1
def zwKWH_SCALE 0
def zwKW_SCALE  2

// Z-Wave rate types
def DEFAULT   0
def IMPORT    1
def EXPORT    2

// ZCL Metering types
def zbELECTRIC_METER_TYPE 0
def zbGAS_METERING_TYPE 1
def zbWATER_METERING_TYPE 2
def zbHEAT_METERING_TYPE 5
def zbCOOLING_METERING_TYPE 6

// Scale for ZCL Metering
def zbKWH_KW 0
def zbCUBIC_METER 1
def zbCUBIC_FEET 2
def zbUS_GALLONS_US 4
def zbIMPERIAL_GALLONS 5
def zbLITERS 7
def zbUNIT_LESS 0x0B

// ZCL Metering attributes
def zbMETERING_CURRENT_SUMMATION_DELIVERED 0x07020000
def zbMETERING_UNIT_OF_MEASURE 0x07020300
def zbMETERING_SUMMATION_FORMATTING 0x07020303
def zbMETERING_METERING_DEVICE_TYPE 0x07020306

def zbMETERING_SUMMATION_FORMATTING_MASK 0xFF

// If different metering type is supported under the same endpoints,
// the dotdot Current Summation delivery metering report and its' related
// attribute such as device type and unit of measurements will be overwritten.
// Note this this issue would be solved using mapper changes (mapper change v2). 

scope 0 {

  r'zbMETERING_METERING_DEVICE_TYPE =
    if ( e'zwTYPE[zwGAS_METER_TYPE] ) zbGAS_METERING_TYPE
    if ( e'zwTYPE[zwWATER_METERING_TYPE] ) zbWATER_METERING_TYPE
    if ( e'zwTYPE[zwHEAT_METERING_TYPE] ) zbHEAT_METERING_TYPE
    if ( e'zwTYPE[zwCOOLING_METERING_TYPE] )  zbCOOLING_METERING_TYPE
    if ( e'zwTYPE[zwELECTRIC_METER_TYPE] ) zbELECTRIC_METER_TYPE
    undefined

  r' zbMETERING_UNIT_OF_MEASURE =
    if ( e'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE]) zbCUBIC_METER
    if ( e'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE]) zbCUBIC_FEET
    if ( e'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE]) zbCUBIC_METER
    if ( e'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE]) zbCUBIC_FEET
    if ( e'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE]) zbKWH_KW
    if ( e'zwTYPE[zwCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE]) zbKWH_KW
    if ( e'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE]) zbKWH_KW
    if ( e'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE]) zbKWH_KW
    undefined

  // Gas Metering m^3
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )
  // Gas Metering ft^3
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )
  
  // Water Metering with m^3
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )
  // Water Metering ft^3
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )

  // HEAT Metering with 
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )

  // COOLing Metering with 
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[ zbCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[ zbCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[ zbCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[ zbCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )

  // ELECTRIC Metering with KWH
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )
  // ELECTRIC Metering with KW
  r'zbMETERING_CURRENT_SUMMATION_DELIVERED =
    ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE].zwRATE_TYPE[IMPORT].zwVALUE / (10 ** r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION) )
    or ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE].zwRATE_TYPE[DEFAULT].zwVALUE/(10 ** r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION) )

  // Since it is challenging to identify the 'Number of Digits to the left of the Decimal Point'
  // without knowing the exactly METERING_CURRENT_SUMMATION_DELIVERED value,
  // we set a large number to reflect Number of Digits to the left of the Decimal Point,
  // and we set the Suppress leading zeros to TRUE. This will allows the suppressing all zeros
  // on the left size even if the "Digits to the left of the Decimal Point" larger than the actual reported one.
  // Note, the z-wave precision will be mapped to "Number of Digits to the right of the Decimal Point" on ZCL domain.
  // ====> The zbMETERING_SUMMATION_FORMATTING mask is 11111111 (0xFF)
  // Ref for interpreting the MASK:
  // ..... Bits 0 to 2: Number of Digits to the right of the Decimal Point.
  // ..... Bits 3 to 6: Number of Digits to the left of the Decimal Point.
  // ..... Bit 7: If set, suppress leading zeros.
  r'zbMETERING_SUMMATION_FORMATTING =
    ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwGAS_METER_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_METER_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwWATER_METERING_TYPE].zwSCALE[zwCUBIC_FEET_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwHEAT_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zbCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zbCOOLING_METERING_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKWH_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE].zwRATE_TYPE[IMPORT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
    or ( r'zwTYPE[zwELECTRIC_METER_TYPE].zwSCALE[zwKW_SCALE].zwRATE_TYPE[DEFAULT].zwPRECISION & zbMETERING_SUMMATION_FORMATTING_MASK)
}