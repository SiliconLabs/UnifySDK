/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

/**
 *
 * @defgroup aoxpc_attribute_store_dotdot_attributes Auto-Generated attribute store helper functions for dotdot attributes
 * @ingroup aoxpc_attribute_store
 *
 * @brief This component provides helpers for to read and store dotdot
 * attributes to the attribute store
 *
 * @{
 */

#ifndef AOXPC_ATTRIBUTE_STORE_DOTDOT_ATTRIBUTES_H
#define AOXPC_ATTRIBUTE_STORE_DOTDOT_ATTRIBUTES_H

#if !defined(ATTRIBUTE_TYPE_MAP) && !defined(ATTRIBUTE_VALUE_MAP)
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

// Dotdot MQTT definitions
#include "zap-types.h"

// Unify definitions
#include "sl_status.h"
#include "uic_typedefs.h"

// AoX Gecko SDK
#include "aoa_types.h"

// Unify components
#include "attribute_store.h"
#endif // !defined(ATTRIBUTE_TYPE_MAP) && !defined(ATTRIBUTE_VALUE_MAP)

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster {{label}}
////////////////////////////////////////////////////////////////////////////////

// Attribute Defines for {{label}}
{{#zcl_attributes}}
DEFINE_ATTRIBUTE({{asAttributeIdDefine parent.label label}}, 0x{{attributeID this}})
///< This represents the {{label}} attribute in the DotDot {{parent.label}} cluster
{{/zcl_attributes}}


#if !defined(ATTRIBUTE_TYPE_MAP) && !defined(ATTRIBUTE_VALUE_MAP)
#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

{{#zcl_attributes}}

// {{parent.label}} {{label}}
/**
 * @brief Verifies if the DotDot {{parent.label}} {{label}} is supported
 *
 * @returns true if {{label}} is supported
 * @returns false if {{label}} is not supported
 */
bool {{asAttributeIsSupportedFunction parent.label label}} (
  const aoa_id_t unid, dotdot_endpoint_id_t endpoint);

{{#if (isMonotonousArray label)}}
/**
 * @brief Gets the number of elements in the DotDot {{label}} attribute
 *
 * @param unid     UNID to get value for
 * @param endpoint Endpoint to get value for
 * @returns Number of elements in the array. 0 if empty of non-existing.
 */
size_t {{asAttributeGetCountFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint);

/**
 * @brief Gets the DotDot {{label}} reported attribute value
 *
 * @param unid        UNID to get value for
 * @param endpoint    Endpoint to get value for
 * @param value       Pointer where the value will be copied
 * @param index       Index value of the attribute array
 * @returns sl_status_ok if the value was copied to the value pointer.
 */
sl_status_t {{asAttributeGetFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint,
  {{#if (isString type)}}char* value{{else}}{{asUnderlyingType type}} *value{{/if}},
  size_t index);

{{else}}
/**
 * @brief Gets the DotDot {{label}} reported attribute value
 *
 * @param unid        UNID to get value for
 * @param endpoint    Endpoint to get value for
 * @param value       Pointer where the value will be copied
 * @returns sl_status_ok if the value was copied to the value pointer.
 */
sl_status_t {{asAttributeGetFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint,
  {{#if (isString type)}}char* value{{else}}{{asUnderlyingType type}} *value{{/if}});

{{/if}}

/**
 * @brief Set the DotDot {{label}} reported attribute, creates it if it does not exist
 *
 * @param unid UNID to set value on
 * @param endpoint endpoint to set value on
 * {{#if (isMonotonousArray label)}}@param new_{{asSnakeCaseLower label}}_count Number of elements in new_{{asSnakeCaseLower label}}{{/if}}
 * @param new_{{asSnakeCaseLower label}} new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t {{asAttributeSetFunction parent.label label}}(
  const aoa_id_t unid,
  const dotdot_endpoint_id_t endpoint,
  {{#if (isMonotonousArray label)}}size_t new_{{asSnakeCaseLower label}}_count,
  {{asUnderlyingType type}}* new_{{asSnakeCaseLower label}}
  {{else}}{{asUnderlyingType type}} new_{{asSnakeCaseLower label}}{{/if}});

{{/zcl_attributes}}
#ifdef __cplusplus
}
#endif // __cplusplus
#endif // !defined(ATTRIBUTE_TYPE_MAP) && !defined(ATTRIBUTE_VALUE_MAP)
{{/if}}
{{/zcl_clusters}}

#endif // AOXPC_ATTRIBUTE_STORE_DOTDOT_ATTRIBUTES_H
/** @} end aoxpc_attribute_store_dotdot_attributes */
