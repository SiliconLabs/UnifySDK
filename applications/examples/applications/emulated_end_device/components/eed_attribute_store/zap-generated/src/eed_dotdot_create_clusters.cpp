/******************************************************************************
 * # License
 * <b>Copyright 2024 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

#include "eed_dotdot_create_clusters.h"
#include "unify_dotdot_attribute_store_helpers.h"
#include "unify_dotdot_defined_attribute_types.h"
#include "eed_cluster_configuration.h"
#include "eed_attribute_store_helper.h"
#include "sl_log.h"

#include "attribute.hpp"
#include "dotdot_mqtt.h"

#include <string.h>

#define LOG_TAG "eed_dotdot_create_clusters"

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

extern "C" {
void dotdot_create_basic_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_basic_zcl_version(unid,endpoint_id);
    if (false == dotdot_basic_zcl_version_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_zcl_version(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_application_version(unid,endpoint_id);
    if (false == dotdot_basic_application_version_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_application_version(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_stack_version(unid,endpoint_id);
    if (false == dotdot_basic_stack_version_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_stack_version(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_hw_version(unid,endpoint_id);
    if (false == dotdot_basic_hw_version_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_hw_version(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_manufacturer_name(unid,endpoint_id);
    if (false == dotdot_basic_manufacturer_name_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_manufacturer_name(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_model_identifier(unid,endpoint_id);
    if (false == dotdot_basic_model_identifier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_model_identifier(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_date_code(unid,endpoint_id);
    if (false == dotdot_basic_date_code_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_date_code(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_power_source(unid,endpoint_id);
    if (false == dotdot_basic_power_source_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_power_source(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_generic_device_class(unid,endpoint_id);
    if (false == dotdot_basic_generic_device_class_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_generic_device_class(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_generic_device_type(unid,endpoint_id);
    if (false == dotdot_basic_generic_device_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_generic_device_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_product_code(unid,endpoint_id);
    if (false == dotdot_basic_product_code_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_product_code(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_producturl(unid,endpoint_id);
    if (false == dotdot_basic_producturl_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_producturl(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_manufacturer_version_details(unid,endpoint_id);
    if (false == dotdot_basic_manufacturer_version_details_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_manufacturer_version_details(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_serial_number(unid,endpoint_id);
    if (false == dotdot_basic_serial_number_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_serial_number(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_product_label(unid,endpoint_id);
    if (false == dotdot_basic_product_label_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_product_label(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_location_description(unid,endpoint_id);
    if (false == dotdot_basic_location_description_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_location_description(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_basic_physical_environment(unid,endpoint_id);
    if (false == dotdot_basic_physical_environment_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_physical_environment(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_device_enabled(unid,endpoint_id);
    if (false == dotdot_basic_device_enabled_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_device_enabled(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_alarm_mask(unid,endpoint_id);
    if (false == dotdot_basic_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_disable_local_config(unid,endpoint_id);
    if (false == dotdot_basic_disable_local_config_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_disable_local_config(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_basic_sw_buildid(unid,endpoint_id);
    if (false == dotdot_basic_sw_buildid_is_reported_defined(unid,endpoint_id)){
    dotdot_set_basic_sw_buildid(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

}

void dotdot_create_power_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_power_configuration_mains_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_mains_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_mains_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_mains_frequency(unid,endpoint_id);
    if (false == dotdot_power_configuration_mains_frequency_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_mains_frequency(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_mains_alarm_mask(unid,endpoint_id);
    if (false == dotdot_power_configuration_mains_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_mains_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_mains_voltage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_mains_voltage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_mains_voltage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_mains_voltage_max_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_mains_voltage_max_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_mains_voltage_max_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_mains_voltage_dwell_trip_point(unid,endpoint_id);
    if (false == dotdot_power_configuration_mains_voltage_dwell_trip_point_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_mains_voltage_dwell_trip_point(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_percentage_remaining(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_percentage_remaining_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_percentage_remaining(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_manufacturer(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_manufacturer_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_manufacturer(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_size(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_size_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_size(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<BatterySize>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_batterya_hr_rating(unid,endpoint_id);
    if (false == dotdot_power_configuration_batterya_hr_rating_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_batterya_hr_rating(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_quantity(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_quantity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_quantity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_rated_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_rated_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_rated_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_alarm_mask(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_voltage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_voltage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_voltage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_voltage_threshold1(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_voltage_threshold1_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_voltage_threshold1(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_voltage_threshold2(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_voltage_threshold2_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_voltage_threshold2(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_voltage_threshold3(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_voltage_threshold3_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_voltage_threshold3(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_percentage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_percentage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_percentage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_percentage_threshold1(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_percentage_threshold1_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_percentage_threshold1(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_percentage_threshold2(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_percentage_threshold2_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_percentage_threshold2(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_percentage_threshold3(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_percentage_threshold3_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_percentage_threshold3(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery_alarm_state(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery_alarm_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery_alarm_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_percentage_remaining(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_percentage_remaining_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_percentage_remaining(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_manufacturer(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_manufacturer_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_manufacturer(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_size(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_size_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_size(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<BatterySize>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2a_hr_rating(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2a_hr_rating_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2a_hr_rating(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_quantity(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_quantity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_quantity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_rated_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_rated_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_rated_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_alarm_mask(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_voltage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_voltage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_voltage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_voltage_threshold1(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_voltage_threshold1_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_voltage_threshold1(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_voltage_threshold2(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_voltage_threshold2_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_voltage_threshold2(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_voltage_threshold3(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_voltage_threshold3_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_voltage_threshold3(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_percentage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_percentage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_percentage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_percentage_threshold1(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_percentage_threshold1_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_percentage_threshold1(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_percentage_threshold2(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_percentage_threshold2_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_percentage_threshold2(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_percentage_threshold3(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_percentage_threshold3_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_percentage_threshold3(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery2_alarm_state(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery2_alarm_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery2_alarm_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_percentage_remaining(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_percentage_remaining_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_percentage_remaining(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_manufacturer(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_manufacturer_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_manufacturer(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_size(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_size_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_size(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<BatterySize>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3a_hr_rating(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3a_hr_rating_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3a_hr_rating(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_quantity(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_quantity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_quantity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_rated_voltage(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_rated_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_rated_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_alarm_mask(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_voltage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_voltage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_voltage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_voltage_threshold1(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_voltage_threshold1_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_voltage_threshold1(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_voltage_threshold2(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_voltage_threshold2_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_voltage_threshold2(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_voltage_threshold3(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_voltage_threshold3_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_voltage_threshold3(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_percentage_min_threshold(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_percentage_min_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_percentage_min_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_percentage_threshold1(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_percentage_threshold1_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_percentage_threshold1(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_percentage_threshold2(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_percentage_threshold2_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_percentage_threshold2(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_percentage_threshold3(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_percentage_threshold3_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_percentage_threshold3(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_power_configuration_battery3_alarm_state(unid,endpoint_id);
    if (false == dotdot_power_configuration_battery3_alarm_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_power_configuration_battery3_alarm_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

}

void dotdot_create_device_temperature_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_current_temperature(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_current_temperature_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_current_temperature(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_min_temp_experienced(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_min_temp_experienced_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_min_temp_experienced(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_max_temp_experienced(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_max_temp_experienced_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_max_temp_experienced(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_over_temp_total_dwell(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_over_temp_total_dwell_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_over_temp_total_dwell(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_device_temp_alarm_mask(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_device_temp_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_device_temp_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_low_temp_threshold(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_low_temp_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_low_temp_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_high_temp_threshold(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_high_temp_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_high_temp_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_low_temp_dwell_trip_point(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_low_temp_dwell_trip_point_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_low_temp_dwell_trip_point(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_device_temperature_configuration_high_temp_dwell_trip_point(unid,endpoint_id);
    if (false == dotdot_device_temperature_configuration_high_temp_dwell_trip_point_is_reported_defined(unid,endpoint_id)){
    dotdot_set_device_temperature_configuration_high_temp_dwell_trip_point(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

}

void dotdot_create_identify_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_identify_identify_time(unid,endpoint_id);
    if (false == dotdot_identify_identify_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_identify_identify_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_groups_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_groups_name_support(unid,endpoint_id);
    if (false == dotdot_groups_name_support_is_reported_defined(unid,endpoint_id)){
    dotdot_set_groups_name_support(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_scenes_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_scenes_scene_count(unid,endpoint_id);
    if (false == dotdot_scenes_scene_count_is_reported_defined(unid,endpoint_id)){
    dotdot_set_scenes_scene_count(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_scenes_current_scene(unid,endpoint_id);
    if (false == dotdot_scenes_current_scene_is_reported_defined(unid,endpoint_id)){
    dotdot_set_scenes_current_scene(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_scenes_current_group(unid,endpoint_id);
    if (false == dotdot_scenes_current_group_is_reported_defined(unid,endpoint_id)){
    dotdot_set_scenes_current_group(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_scenes_scene_valid(unid,endpoint_id);
    if (false == dotdot_scenes_scene_valid_is_reported_defined(unid,endpoint_id)){
    dotdot_set_scenes_scene_valid(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_scenes_name_support(unid,endpoint_id);
    if (false == dotdot_scenes_name_support_is_reported_defined(unid,endpoint_id)){
    dotdot_set_scenes_name_support(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_scenes_last_configured_by(unid,endpoint_id);
    if (false == dotdot_scenes_last_configured_by_is_reported_defined(unid,endpoint_id)){
    dotdot_set_scenes_last_configured_by(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_scenes_scene_table(unid,endpoint_id);
    if (false == dotdot_scenes_scene_table_is_reported_defined(unid,endpoint_id)){
    }

}

void dotdot_create_on_off_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_on_off_on_off(unid,endpoint_id);
    if (false == dotdot_on_off_on_off_is_reported_defined(unid,endpoint_id)){
    dotdot_set_on_off_on_off(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_on_off_global_scene_control(unid,endpoint_id);
    if (false == dotdot_on_off_global_scene_control_is_reported_defined(unid,endpoint_id)){
    dotdot_set_on_off_global_scene_control(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_on_off_on_time(unid,endpoint_id);
    if (false == dotdot_on_off_on_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_on_off_on_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_on_off_off_wait_time(unid,endpoint_id);
    if (false == dotdot_on_off_off_wait_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_on_off_off_wait_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_on_off_start_up_on_off(unid,endpoint_id);
    if (false == dotdot_on_off_start_up_on_off_is_reported_defined(unid,endpoint_id)){
    dotdot_set_on_off_start_up_on_off(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_level_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_level_current_level(unid,endpoint_id);
    if (false == dotdot_level_current_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_current_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_remaining_time(unid,endpoint_id);
    if (false == dotdot_level_remaining_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_remaining_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_min_level(unid,endpoint_id);
    if (false == dotdot_level_min_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_min_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_max_level(unid,endpoint_id);
    if (false == dotdot_level_max_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_max_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_current_frequency(unid,endpoint_id);
    if (false == dotdot_level_current_frequency_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_current_frequency(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_min_frequency(unid,endpoint_id);
    if (false == dotdot_level_min_frequency_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_min_frequency(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_max_frequency(unid,endpoint_id);
    if (false == dotdot_level_max_frequency_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_max_frequency(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_options(unid,endpoint_id);
    if (false == dotdot_level_options_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_options(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_on_off_transition_time(unid,endpoint_id);
    if (false == dotdot_level_on_off_transition_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_on_off_transition_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_on_level(unid,endpoint_id);
    if (false == dotdot_level_on_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_on_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_on_transition_time(unid,endpoint_id);
    if (false == dotdot_level_on_transition_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_on_transition_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_off_transition_time(unid,endpoint_id);
    if (false == dotdot_level_off_transition_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_off_transition_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_default_move_rate(unid,endpoint_id);
    if (false == dotdot_level_default_move_rate_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_default_move_rate(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_level_start_up_current_level(unid,endpoint_id);
    if (false == dotdot_level_start_up_current_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_level_start_up_current_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_alarms_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_alarms_alarm_count(unid,endpoint_id);
    if (false == dotdot_alarms_alarm_count_is_reported_defined(unid,endpoint_id)){
    dotdot_set_alarms_alarm_count(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_time_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_time_time(unid,endpoint_id);
    if (false == dotdot_time_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_time_status(unid,endpoint_id);
    if (false == dotdot_time_time_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_time_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_time_zone(unid,endpoint_id);
    if (false == dotdot_time_time_zone_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_time_zone(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_dst_start(unid,endpoint_id);
    if (false == dotdot_time_dst_start_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_dst_start(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_dst_end(unid,endpoint_id);
    if (false == dotdot_time_dst_end_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_dst_end(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_dst_shift(unid,endpoint_id);
    if (false == dotdot_time_dst_shift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_dst_shift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_standard_time(unid,endpoint_id);
    if (false == dotdot_time_standard_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_standard_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_local_time(unid,endpoint_id);
    if (false == dotdot_time_local_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_local_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_last_set_time(unid,endpoint_id);
    if (false == dotdot_time_last_set_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_last_set_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_time_valid_until_time(unid,endpoint_id);
    if (false == dotdot_time_valid_until_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_time_valid_until_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

}

void dotdot_create_poll_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_poll_control_check_in_interval(unid,endpoint_id);
    if (false == dotdot_poll_control_check_in_interval_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_check_in_interval(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_poll_control_long_poll_interval(unid,endpoint_id);
    if (false == dotdot_poll_control_long_poll_interval_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_long_poll_interval(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_poll_control_short_poll_interval(unid,endpoint_id);
    if (false == dotdot_poll_control_short_poll_interval_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_short_poll_interval(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_poll_control_fast_poll_timeout(unid,endpoint_id);
    if (false == dotdot_poll_control_fast_poll_timeout_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_fast_poll_timeout(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_poll_control_check_in_interval_min(unid,endpoint_id);
    if (false == dotdot_poll_control_check_in_interval_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_check_in_interval_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_poll_control_long_poll_interval_min(unid,endpoint_id);
    if (false == dotdot_poll_control_long_poll_interval_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_long_poll_interval_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_poll_control_fast_poll_timeout_max(unid,endpoint_id);
    if (false == dotdot_poll_control_fast_poll_timeout_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_poll_control_fast_poll_timeout_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_shade_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_shade_configuration_physical_closed_limit(unid,endpoint_id);
    if (false == dotdot_shade_configuration_physical_closed_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_shade_configuration_physical_closed_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_shade_configuration_motor_step_size(unid,endpoint_id);
    if (false == dotdot_shade_configuration_motor_step_size_is_reported_defined(unid,endpoint_id)){
    dotdot_set_shade_configuration_motor_step_size(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_shade_configuration_status(unid,endpoint_id);
    if (false == dotdot_shade_configuration_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_shade_configuration_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_shade_configuration_closed_limit(unid,endpoint_id);
    if (false == dotdot_shade_configuration_closed_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_shade_configuration_closed_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_shade_configuration_mode(unid,endpoint_id);
    if (false == dotdot_shade_configuration_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_shade_configuration_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_door_lock_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_door_lock_lock_state(unid,endpoint_id);
    if (false == dotdot_door_lock_lock_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_lock_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_lock_type(unid,endpoint_id);
    if (false == dotdot_door_lock_lock_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_lock_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_actuator_enabled(unid,endpoint_id);
    if (false == dotdot_door_lock_actuator_enabled_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_actuator_enabled(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_door_state(unid,endpoint_id);
    if (false == dotdot_door_lock_door_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_door_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_door_open_events(unid,endpoint_id);
    if (false == dotdot_door_lock_door_open_events_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_door_open_events(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_door_closed_events(unid,endpoint_id);
    if (false == dotdot_door_lock_door_closed_events_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_door_closed_events(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_open_period(unid,endpoint_id);
    if (false == dotdot_door_lock_open_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_open_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_log_records_supported(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_log_records_supported_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_log_records_supported(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_total_users_supported(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_total_users_supported_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_total_users_supported(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_pin_users_supported(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_pin_users_supported_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_pin_users_supported(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_rfid_users_supported(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_rfid_users_supported_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_rfid_users_supported(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_week_day_schedules_supported_per_user(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_week_day_schedules_supported_per_user_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_year_day_schedules_supported_per_user(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_year_day_schedules_supported_per_user_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_holiday_schedules_supported(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_holiday_schedules_supported_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_holiday_schedules_supported(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_max_pin_code_length(unid,endpoint_id);
    if (false == dotdot_door_lock_max_pin_code_length_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_max_pin_code_length(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_min_pin_code_length(unid,endpoint_id);
    if (false == dotdot_door_lock_min_pin_code_length_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_min_pin_code_length(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_max_rfid_code_length(unid,endpoint_id);
    if (false == dotdot_door_lock_max_rfid_code_length_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_max_rfid_code_length(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_min_rfid_code_length(unid,endpoint_id);
    if (false == dotdot_door_lock_min_rfid_code_length_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_min_rfid_code_length(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_credential_rules_support(unid,endpoint_id);
    if (false == dotdot_door_lock_credential_rules_support_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_credential_rules_support(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_number_of_credentials_supported_per_user(unid,endpoint_id);
    if (false == dotdot_door_lock_number_of_credentials_supported_per_user_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_number_of_credentials_supported_per_user(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_enable_logging(unid,endpoint_id);
    if (false == dotdot_door_lock_enable_logging_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_enable_logging(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_language(unid,endpoint_id);
    if (false == dotdot_door_lock_language_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_language(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_led_settings(unid,endpoint_id);
    if (false == dotdot_door_lock_led_settings_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_led_settings(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_auto_relock_time(unid,endpoint_id);
    if (false == dotdot_door_lock_auto_relock_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_auto_relock_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_sound_volume(unid,endpoint_id);
    if (false == dotdot_door_lock_sound_volume_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_sound_volume(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_operating_mode(unid,endpoint_id);
    if (false == dotdot_door_lock_operating_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_operating_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<DrlkOperMode>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_supported_operating_modes(unid,endpoint_id);
    if (false == dotdot_door_lock_supported_operating_modes_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_supported_operating_modes(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_default_configuration_register(unid,endpoint_id);
    if (false == dotdot_door_lock_default_configuration_register_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_default_configuration_register(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_enable_local_programming(unid,endpoint_id);
    if (false == dotdot_door_lock_enable_local_programming_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_enable_local_programming(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_enable_one_touch_locking(unid,endpoint_id);
    if (false == dotdot_door_lock_enable_one_touch_locking_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_enable_one_touch_locking(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_enable_inside_statusled(unid,endpoint_id);
    if (false == dotdot_door_lock_enable_inside_statusled_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_enable_inside_statusled(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_enable_privacy_mode_button(unid,endpoint_id);
    if (false == dotdot_door_lock_enable_privacy_mode_button_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_enable_privacy_mode_button(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_local_programming_features(unid,endpoint_id);
    if (false == dotdot_door_lock_local_programming_features_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_local_programming_features(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_wrong_code_entry_limit(unid,endpoint_id);
    if (false == dotdot_door_lock_wrong_code_entry_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_wrong_code_entry_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_user_code_temporary_disable_time(unid,endpoint_id);
    if (false == dotdot_door_lock_user_code_temporary_disable_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_user_code_temporary_disable_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_send_pin_over_the_air(unid,endpoint_id);
    if (false == dotdot_door_lock_send_pin_over_the_air_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_send_pin_over_the_air(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_require_pi_nfor_rf_operation(unid,endpoint_id);
    if (false == dotdot_door_lock_require_pi_nfor_rf_operation_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_require_pi_nfor_rf_operation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_security_level(unid,endpoint_id);
    if (false == dotdot_door_lock_security_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_security_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_expiring_user_timeout(unid,endpoint_id);
    if (false == dotdot_door_lock_expiring_user_timeout_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_expiring_user_timeout(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_alarm_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_keypad_operation_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_keypad_operation_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_keypad_operation_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_rf_operation_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_rf_operation_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_rf_operation_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_manual_operation_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_manual_operation_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_manual_operation_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_rfid_operation_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_rfid_operation_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_rfid_operation_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_keypad_programming_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_keypad_programming_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_keypad_programming_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_rf_programming_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_rf_programming_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_rf_programming_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_rfid_programming_event_mask(unid,endpoint_id);
    if (false == dotdot_door_lock_rfid_programming_event_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_rfid_programming_event_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_door_lock_feature_map(unid,endpoint_id);
    if (false == dotdot_door_lock_feature_map_is_reported_defined(unid,endpoint_id)){
    dotdot_set_door_lock_feature_map(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_window_covering_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_window_covering_window_covering_type(unid,endpoint_id);
    if (false == dotdot_window_covering_window_covering_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_window_covering_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_physical_closed_limit_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_physical_closed_limit_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_physical_closed_limit_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_physical_closed_limit_tilt(unid,endpoint_id);
    if (false == dotdot_window_covering_physical_closed_limit_tilt_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_physical_closed_limit_tilt(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_current_position_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_current_position_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_current_position_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_current_position_tilt(unid,endpoint_id);
    if (false == dotdot_window_covering_current_position_tilt_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_current_position_tilt(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_number_of_actuations_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_number_of_actuations_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_number_of_actuations_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_number_of_actuations_tilt(unid,endpoint_id);
    if (false == dotdot_window_covering_number_of_actuations_tilt_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_number_of_actuations_tilt(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_config_or_status(unid,endpoint_id);
    if (false == dotdot_window_covering_config_or_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_config_or_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_current_position_lift_percentage(unid,endpoint_id);
    if (false == dotdot_window_covering_current_position_lift_percentage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_current_position_lift_percentage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_current_position_tilt_percentage(unid,endpoint_id);
    if (false == dotdot_window_covering_current_position_tilt_percentage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_current_position_tilt_percentage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_installed_open_limit_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_installed_open_limit_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_installed_open_limit_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_installed_closed_limit_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_installed_closed_limit_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_installed_closed_limit_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_installed_open_limit_tilt(unid,endpoint_id);
    if (false == dotdot_window_covering_installed_open_limit_tilt_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_installed_open_limit_tilt(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_installed_closed_limit_tilt(unid,endpoint_id);
    if (false == dotdot_window_covering_installed_closed_limit_tilt_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_installed_closed_limit_tilt(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_velocity_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_velocity_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_velocity_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_acceleration_time_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_acceleration_time_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_acceleration_time_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_deceleration_time_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_deceleration_time_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_deceleration_time_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_mode(unid,endpoint_id);
    if (false == dotdot_window_covering_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_intermediate_setpoints_lift(unid,endpoint_id);
    if (false == dotdot_window_covering_intermediate_setpoints_lift_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_intermediate_setpoints_lift(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_window_covering_intermediate_setpoints_tilt(unid,endpoint_id);
    if (false == dotdot_window_covering_intermediate_setpoints_tilt_is_reported_defined(unid,endpoint_id)){
    dotdot_set_window_covering_intermediate_setpoints_tilt(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

}

void dotdot_create_barrier_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_barrier_control_moving_state(unid,endpoint_id);
    if (false == dotdot_barrier_control_moving_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_moving_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_safety_status(unid,endpoint_id);
    if (false == dotdot_barrier_control_safety_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_safety_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_capabilities(unid,endpoint_id);
    if (false == dotdot_barrier_control_capabilities_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_capabilities(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_open_events(unid,endpoint_id);
    if (false == dotdot_barrier_control_open_events_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_open_events(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_close_events(unid,endpoint_id);
    if (false == dotdot_barrier_control_close_events_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_close_events(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_command_open_events(unid,endpoint_id);
    if (false == dotdot_barrier_control_command_open_events_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_command_open_events(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_command_close_events(unid,endpoint_id);
    if (false == dotdot_barrier_control_command_close_events_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_command_close_events(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_open_period(unid,endpoint_id);
    if (false == dotdot_barrier_control_open_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_open_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_close_period(unid,endpoint_id);
    if (false == dotdot_barrier_control_close_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_close_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_barrier_control_barrier_position(unid,endpoint_id);
    if (false == dotdot_barrier_control_barrier_position_is_reported_defined(unid,endpoint_id)){
    dotdot_set_barrier_control_barrier_position(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_pump_configuration_and_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_pressure(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_pressure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_pressure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_speed(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_speed_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_speed(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_flow(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_flow_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_flow(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_min_const_pressure(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_min_const_pressure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_min_const_pressure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_const_pressure(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_const_pressure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_const_pressure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_min_comp_pressure(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_min_comp_pressure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_min_comp_pressure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_comp_pressure(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_comp_pressure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_comp_pressure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_min_const_speed(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_min_const_speed_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_min_const_speed(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_const_speed(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_const_speed_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_const_speed(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_min_const_flow(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_min_const_flow_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_min_const_flow(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_const_flow(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_const_flow_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_const_flow(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_min_const_temp(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_min_const_temp_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_min_const_temp(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_max_const_temp(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_max_const_temp_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_max_const_temp(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_pump_status(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_pump_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_pump_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_effective_operation_mode(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_effective_operation_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_effective_operation_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<PumpOperationMode>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_effective_control_mode(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_effective_control_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_effective_control_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<PumpControlMode>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_capacity(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_capacity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_capacity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_speed(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_speed_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_speed(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_lifetime_running_hours(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_lifetime_running_hours_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_lifetime_running_hours(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_power(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_lifetime_energy_consumed(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_lifetime_energy_consumed_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_operation_mode(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_operation_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_operation_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<PumpOperationMode>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_control_mode(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_control_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_control_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<PumpControlMode>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pump_configuration_and_control_alarm_mask(unid,endpoint_id);
    if (false == dotdot_pump_configuration_and_control_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pump_configuration_and_control_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_thermostat_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_thermostat_local_temperature(unid,endpoint_id);
    if (false == dotdot_thermostat_local_temperature_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_local_temperature(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_outdoor_temperature(unid,endpoint_id);
    if (false == dotdot_thermostat_outdoor_temperature_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_outdoor_temperature(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_occupancy(unid,endpoint_id);
    if (false == dotdot_thermostat_occupancy_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_occupancy(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_abs_min_heat_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_abs_min_heat_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_abs_min_heat_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_abs_max_heat_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_abs_max_heat_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_abs_max_heat_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_abs_min_cool_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_abs_min_cool_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_abs_min_cool_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_abs_max_cool_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_abs_max_cool_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_abs_max_cool_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_pi_cooling_demand(unid,endpoint_id);
    if (false == dotdot_thermostat_pi_cooling_demand_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_pi_cooling_demand(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_pi_heating_demand(unid,endpoint_id);
    if (false == dotdot_thermostat_pi_heating_demand_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_pi_heating_demand(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_hvac_system_type_configuration(unid,endpoint_id);
    if (false == dotdot_thermostat_hvac_system_type_configuration_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_hvac_system_type_configuration(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_local_temperature_calibration(unid,endpoint_id);
    if (false == dotdot_thermostat_local_temperature_calibration_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_local_temperature_calibration(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_occupied_cooling_setpoint(unid,endpoint_id);
    if (false == dotdot_thermostat_occupied_cooling_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_occupied_cooling_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_occupied_heating_setpoint(unid,endpoint_id);
    if (false == dotdot_thermostat_occupied_heating_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_occupied_heating_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_unoccupied_cooling_setpoint(unid,endpoint_id);
    if (false == dotdot_thermostat_unoccupied_cooling_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_unoccupied_cooling_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_unoccupied_heating_setpoint(unid,endpoint_id);
    if (false == dotdot_thermostat_unoccupied_heating_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_unoccupied_heating_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_min_heat_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_min_heat_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_min_heat_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_max_heat_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_max_heat_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_max_heat_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_min_cool_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_min_cool_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_min_cool_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_max_cool_setpoint_limit(unid,endpoint_id);
    if (false == dotdot_thermostat_max_cool_setpoint_limit_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_max_cool_setpoint_limit(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_min_setpoint_dead_band(unid,endpoint_id);
    if (false == dotdot_thermostat_min_setpoint_dead_band_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_min_setpoint_dead_band(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_remote_sensing(unid,endpoint_id);
    if (false == dotdot_thermostat_remote_sensing_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_remote_sensing(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_control_sequence_of_operation(unid,endpoint_id);
    if (false == dotdot_thermostat_control_sequence_of_operation_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_control_sequence_of_operation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_system_mode(unid,endpoint_id);
    if (false == dotdot_thermostat_system_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_system_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_alarm_mask(unid,endpoint_id);
    if (false == dotdot_thermostat_alarm_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_alarm_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_thermostat_running_mode(unid,endpoint_id);
    if (false == dotdot_thermostat_thermostat_running_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_thermostat_running_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_start_of_week(unid,endpoint_id);
    if (false == dotdot_thermostat_start_of_week_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_start_of_week(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_number_of_weekly_transitions(unid,endpoint_id);
    if (false == dotdot_thermostat_number_of_weekly_transitions_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_number_of_weekly_transitions(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_number_of_daily_transitions(unid,endpoint_id);
    if (false == dotdot_thermostat_number_of_daily_transitions_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_number_of_daily_transitions(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_temperature_setpoint_hold(unid,endpoint_id);
    if (false == dotdot_thermostat_temperature_setpoint_hold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_temperature_setpoint_hold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_temperature_setpoint_hold_duration(unid,endpoint_id);
    if (false == dotdot_thermostat_temperature_setpoint_hold_duration_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_temperature_setpoint_hold_duration(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_thermostat_programming_operation_mode(unid,endpoint_id);
    if (false == dotdot_thermostat_thermostat_programming_operation_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_thermostat_programming_operation_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_thermostat_running_state(unid,endpoint_id);
    if (false == dotdot_thermostat_thermostat_running_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_thermostat_running_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_setpoint_change_source(unid,endpoint_id);
    if (false == dotdot_thermostat_setpoint_change_source_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_setpoint_change_source(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_setpoint_change_amount(unid,endpoint_id);
    if (false == dotdot_thermostat_setpoint_change_amount_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_setpoint_change_amount(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_setpoint_change_source_timestamp(unid,endpoint_id);
    if (false == dotdot_thermostat_setpoint_change_source_timestamp_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_setpoint_change_source_timestamp(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_occupied_setback(unid,endpoint_id);
    if (false == dotdot_thermostat_occupied_setback_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_occupied_setback(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_occupied_setback_min(unid,endpoint_id);
    if (false == dotdot_thermostat_occupied_setback_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_occupied_setback_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_occupied_setback_max(unid,endpoint_id);
    if (false == dotdot_thermostat_occupied_setback_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_occupied_setback_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_unoccupied_setback(unid,endpoint_id);
    if (false == dotdot_thermostat_unoccupied_setback_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_unoccupied_setback(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_unoccupied_setback_min(unid,endpoint_id);
    if (false == dotdot_thermostat_unoccupied_setback_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_unoccupied_setback_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_unoccupied_setback_max(unid,endpoint_id);
    if (false == dotdot_thermostat_unoccupied_setback_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_unoccupied_setback_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_emergency_heat_delta(unid,endpoint_id);
    if (false == dotdot_thermostat_emergency_heat_delta_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_emergency_heat_delta(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_type(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_capacity(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_capacity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_capacity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_refrigerant_type(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_refrigerant_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_refrigerant_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_compressor_type(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_compressor_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_compressor_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_error_code(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_error_code_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_error_code(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_louver_position(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_louver_position_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_louver_position(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_coil_temperature(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_coil_temperature_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_coil_temperature(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_ac_capacity_format(unid,endpoint_id);
    if (false == dotdot_thermostat_ac_capacity_format_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_ac_capacity_format(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_fan_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_fan_control_fan_mode(unid,endpoint_id);
    if (false == dotdot_fan_control_fan_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_fan_control_fan_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_fan_control_fan_mode_sequence(unid,endpoint_id);
    if (false == dotdot_fan_control_fan_mode_sequence_is_reported_defined(unid,endpoint_id)){
    dotdot_set_fan_control_fan_mode_sequence(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_dehumidification_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_relative_humidity(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_relative_humidity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_relative_humidity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_dehumidification_cooling(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_dehumidification_cooling_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_dehumidification_cooling(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_rh_dehumidification_setpoint(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_rh_dehumidification_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_rh_dehumidification_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_relative_humidity_mode(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_relative_humidity_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_relative_humidity_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_dehumidification_lockout(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_dehumidification_lockout_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_dehumidification_lockout(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_dehumidification_hysteresis(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_dehumidification_hysteresis_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_dehumidification_hysteresis(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_dehumidification_max_cool(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_dehumidification_max_cool_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_dehumidification_max_cool(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_dehumidification_control_relative_humidity_display(unid,endpoint_id);
    if (false == dotdot_dehumidification_control_relative_humidity_display_is_reported_defined(unid,endpoint_id)){
    dotdot_set_dehumidification_control_relative_humidity_display(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_thermostat_user_interface_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_thermostat_user_interface_configuration_temperature_display_mode(unid,endpoint_id);
    if (false == dotdot_thermostat_user_interface_configuration_temperature_display_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_user_interface_configuration_temperature_display_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_user_interface_configuration_keypad_lockout(unid,endpoint_id);
    if (false == dotdot_thermostat_user_interface_configuration_keypad_lockout_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_user_interface_configuration_keypad_lockout(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_thermostat_user_interface_configuration_schedule_programming_visibility(unid,endpoint_id);
    if (false == dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_is_reported_defined(unid,endpoint_id)){
    dotdot_set_thermostat_user_interface_configuration_schedule_programming_visibility(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_color_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_color_control_current_hue(unid,endpoint_id);
    if (false == dotdot_color_control_current_hue_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_current_hue(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_current_saturation(unid,endpoint_id);
    if (false == dotdot_color_control_current_saturation_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_current_saturation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_remaining_time(unid,endpoint_id);
    if (false == dotdot_color_control_remaining_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_remaining_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_currentx(unid,endpoint_id);
    if (false == dotdot_color_control_currentx_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_currentx(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_currenty(unid,endpoint_id);
    if (false == dotdot_color_control_currenty_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_currenty(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_drift_compensation(unid,endpoint_id);
    if (false == dotdot_color_control_drift_compensation_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_drift_compensation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_compensation_text(unid,endpoint_id);
    if (false == dotdot_color_control_compensation_text_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_compensation_text(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_temperature_mireds(unid,endpoint_id);
    if (false == dotdot_color_control_color_temperature_mireds_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_temperature_mireds(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_mode(unid,endpoint_id);
    if (false == dotdot_color_control_color_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_options(unid,endpoint_id);
    if (false == dotdot_color_control_options_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_options(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_number_of_primaries(unid,endpoint_id);
    if (false == dotdot_color_control_number_of_primaries_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_number_of_primaries(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary1x(unid,endpoint_id);
    if (false == dotdot_color_control_primary1x_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary1x(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary1y(unid,endpoint_id);
    if (false == dotdot_color_control_primary1y_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary1y(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary1_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_primary1_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary1_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary2x(unid,endpoint_id);
    if (false == dotdot_color_control_primary2x_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary2x(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary2y(unid,endpoint_id);
    if (false == dotdot_color_control_primary2y_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary2y(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary2_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_primary2_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary2_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary3x(unid,endpoint_id);
    if (false == dotdot_color_control_primary3x_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary3x(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary3y(unid,endpoint_id);
    if (false == dotdot_color_control_primary3y_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary3y(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary3_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_primary3_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary3_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary4x(unid,endpoint_id);
    if (false == dotdot_color_control_primary4x_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary4x(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary4y(unid,endpoint_id);
    if (false == dotdot_color_control_primary4y_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary4y(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary4_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_primary4_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary4_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary5x(unid,endpoint_id);
    if (false == dotdot_color_control_primary5x_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary5x(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary5y(unid,endpoint_id);
    if (false == dotdot_color_control_primary5y_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary5y(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary5_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_primary5_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary5_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary6x(unid,endpoint_id);
    if (false == dotdot_color_control_primary6x_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary6x(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary6y(unid,endpoint_id);
    if (false == dotdot_color_control_primary6y_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary6y(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_primary6_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_primary6_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_primary6_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_white_pointx(unid,endpoint_id);
    if (false == dotdot_color_control_white_pointx_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_white_pointx(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_white_pointy(unid,endpoint_id);
    if (false == dotdot_color_control_white_pointy_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_white_pointy(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointrx(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointrx_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointrx(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointry(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointry_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointry(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointr_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointr_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointr_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointgx(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointgx_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointgx(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointgy(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointgy_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointgy(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointg_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointg_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointg_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointbx(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointbx_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointbx(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointby(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointby_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointby(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_pointb_intensity(unid,endpoint_id);
    if (false == dotdot_color_control_color_pointb_intensity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_pointb_intensity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_enhanced_current_hue(unid,endpoint_id);
    if (false == dotdot_color_control_enhanced_current_hue_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_enhanced_current_hue(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_enhanced_color_mode(unid,endpoint_id);
    if (false == dotdot_color_control_enhanced_color_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_enhanced_color_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_loop_active(unid,endpoint_id);
    if (false == dotdot_color_control_color_loop_active_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_loop_active(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_loop_direction(unid,endpoint_id);
    if (false == dotdot_color_control_color_loop_direction_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_loop_direction(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_loop_time(unid,endpoint_id);
    if (false == dotdot_color_control_color_loop_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_loop_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_loop_start_enhanced_hue(unid,endpoint_id);
    if (false == dotdot_color_control_color_loop_start_enhanced_hue_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_loop_start_enhanced_hue(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_loop_stored_enhanced_hue(unid,endpoint_id);
    if (false == dotdot_color_control_color_loop_stored_enhanced_hue_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_loop_stored_enhanced_hue(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_capabilities(unid,endpoint_id);
    if (false == dotdot_color_control_color_capabilities_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_capabilities(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_temp_physical_min_mireds(unid,endpoint_id);
    if (false == dotdot_color_control_color_temp_physical_min_mireds_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_temp_physical_min_mireds(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_color_temp_physical_max_mireds(unid,endpoint_id);
    if (false == dotdot_color_control_color_temp_physical_max_mireds_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_color_temp_physical_max_mireds(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_couple_color_temp_to_level_min_mireds(unid,endpoint_id);
    if (false == dotdot_color_control_couple_color_temp_to_level_min_mireds_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_couple_color_temp_to_level_min_mireds(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_color_control_start_up_color_temperature_mireds(unid,endpoint_id);
    if (false == dotdot_color_control_start_up_color_temperature_mireds_is_reported_defined(unid,endpoint_id)){
    dotdot_set_color_control_start_up_color_temperature_mireds(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_ballast_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_physical_min_level(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_physical_min_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_physical_min_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_physical_max_level(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_physical_max_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_physical_max_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_ballast_status(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_ballast_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_ballast_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_min_level(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_min_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_min_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_max_level(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_max_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_max_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_power_on_level(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_power_on_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_power_on_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_power_on_fade_time(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_power_on_fade_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_power_on_fade_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_intrinsic_ballast_factor(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_intrinsic_ballast_factor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_intrinsic_ballast_factor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_ballast_factor_adjustment(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_ballast_factor_adjustment_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_ballast_factor_adjustment(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_quantity(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_quantity_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_quantity(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_type(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_type(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_manufacturer(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_manufacturer_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_manufacturer(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_rated_hours(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_rated_hours_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_rated_hours(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_burn_hours(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_burn_hours_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_burn_hours(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_alarm_mode(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_alarm_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_alarm_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ballast_configuration_lamp_burn_hours_trip_point(unid,endpoint_id);
    if (false == dotdot_ballast_configuration_lamp_burn_hours_trip_point_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

}

void dotdot_create_illuminance_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_illuminance_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_illuminance_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_illuminance_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_illuminance_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_illuminance_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_illuminance_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_illuminance_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_illuminance_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_illuminance_measurement_light_sensor_type(unid,endpoint_id);
    if (false == dotdot_illuminance_measurement_light_sensor_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_measurement_light_sensor_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_illuminance_level_sensing_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_illuminance_level_sensing_level_status(unid,endpoint_id);
    if (false == dotdot_illuminance_level_sensing_level_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_level_sensing_level_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_illuminance_level_sensing_light_sensor_type(unid,endpoint_id);
    if (false == dotdot_illuminance_level_sensing_light_sensor_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_level_sensing_light_sensor_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_illuminance_level_sensing_illuminance_target_level(unid,endpoint_id);
    if (false == dotdot_illuminance_level_sensing_illuminance_target_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_illuminance_level_sensing_illuminance_target_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_temperature_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_temperature_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_temperature_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_temperature_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_temperature_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_temperature_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_temperature_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_temperature_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_temperature_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_temperature_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_temperature_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_temperature_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_temperature_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_pressure_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_scaled_value(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_scaled_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_scaled_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_min_scaled_value(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_min_scaled_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_min_scaled_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_max_scaled_value(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_max_scaled_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_max_scaled_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_scaled_tolerance(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_scaled_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_scaled_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pressure_measurement_scale(unid,endpoint_id);
    if (false == dotdot_pressure_measurement_scale_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pressure_measurement_scale(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

}

void dotdot_create_flow_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_flow_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_flow_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_flow_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_flow_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_flow_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_flow_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_flow_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_flow_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_flow_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_flow_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_flow_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_flow_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_relativity_humidity_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_relativity_humidity_measured_value(unid,endpoint_id);
    if (false == dotdot_relativity_humidity_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_relativity_humidity_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_relativity_humidity_min_measured_value(unid,endpoint_id);
    if (false == dotdot_relativity_humidity_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_relativity_humidity_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_relativity_humidity_max_measured_value(unid,endpoint_id);
    if (false == dotdot_relativity_humidity_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_relativity_humidity_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_relativity_humidity_tolerance(unid,endpoint_id);
    if (false == dotdot_relativity_humidity_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_relativity_humidity_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_occupancy_sensing_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_occupancy(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_occupancy_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_occupancy(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_occupancy_sensor_type(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_occupancy_sensor_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_occupancy_sensor_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_occupancy_sensor_type_bitmap(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_occupancy_sensor_type_bitmap(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_pir_occupied_to_unoccupied_delay(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_pir_unoccupied_to_occupied_delay(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_pir_unoccupied_to_occupied_threshold(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(unid,endpoint_id);
    if (false == dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_is_reported_defined(unid,endpoint_id)){
    dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_soil_moisture_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_soil_moisture_measured_value(unid,endpoint_id);
    if (false == dotdot_soil_moisture_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_soil_moisture_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_soil_moisture_min_measured_value(unid,endpoint_id);
    if (false == dotdot_soil_moisture_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_soil_moisture_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_soil_moisture_max_measured_value(unid,endpoint_id);
    if (false == dotdot_soil_moisture_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_soil_moisture_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_soil_moisture_tolerance(unid,endpoint_id);
    if (false == dotdot_soil_moisture_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_soil_moisture_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_ph_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_ph_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_ph_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ph_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ph_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_ph_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ph_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ph_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_ph_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ph_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ph_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_ph_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ph_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_electrical_conductivity_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_electrical_conductivity_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_electrical_conductivity_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_conductivity_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_conductivity_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_electrical_conductivity_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_conductivity_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_conductivity_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_electrical_conductivity_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_conductivity_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_conductivity_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_electrical_conductivity_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_conductivity_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_wind_speed_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_wind_speed_measurement_measured_value(unid,endpoint_id);
    if (false == dotdot_wind_speed_measurement_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_wind_speed_measurement_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_wind_speed_measurement_min_measured_value(unid,endpoint_id);
    if (false == dotdot_wind_speed_measurement_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_wind_speed_measurement_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_wind_speed_measurement_max_measured_value(unid,endpoint_id);
    if (false == dotdot_wind_speed_measurement_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_wind_speed_measurement_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_wind_speed_measurement_tolerance(unid,endpoint_id);
    if (false == dotdot_wind_speed_measurement_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_wind_speed_measurement_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_carbon_monoxide_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_carbon_monoxide_measured_value(unid,endpoint_id);
    if (false == dotdot_carbon_monoxide_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_monoxide_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_carbon_monoxide_min_measured_value(unid,endpoint_id);
    if (false == dotdot_carbon_monoxide_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_monoxide_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_carbon_monoxide_max_measured_value(unid,endpoint_id);
    if (false == dotdot_carbon_monoxide_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_monoxide_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_carbon_monoxide_tolerance(unid,endpoint_id);
    if (false == dotdot_carbon_monoxide_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_monoxide_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

}

void dotdot_create_carbon_dioxide_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_carbon_dioxide_measured_value(unid,endpoint_id);
    if (false == dotdot_carbon_dioxide_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_dioxide_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_carbon_dioxide_min_measured_value(unid,endpoint_id);
    if (false == dotdot_carbon_dioxide_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_dioxide_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_carbon_dioxide_max_measured_value(unid,endpoint_id);
    if (false == dotdot_carbon_dioxide_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_dioxide_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_carbon_dioxide_tolerance(unid,endpoint_id);
    if (false == dotdot_carbon_dioxide_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_carbon_dioxide_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

}

void dotdot_create_pm25_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_pm25_measured_value(unid,endpoint_id);
    if (false == dotdot_pm25_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pm25_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pm25_min_measured_value(unid,endpoint_id);
    if (false == dotdot_pm25_min_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pm25_min_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pm25_max_measured_value(unid,endpoint_id);
    if (false == dotdot_pm25_max_measured_value_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pm25_max_measured_value(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_pm25_tolerance(unid,endpoint_id);
    if (false == dotdot_pm25_tolerance_is_reported_defined(unid,endpoint_id)){
    dotdot_set_pm25_tolerance(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<float>(0));
        }

}

void dotdot_create_ias_zone_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_ias_zone_zone_state(unid,endpoint_id);
    if (false == dotdot_ias_zone_zone_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_zone_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ias_zone_zone_type(unid,endpoint_id);
    if (false == dotdot_ias_zone_zone_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_zone_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<IasZoneType>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ias_zone_zone_status(unid,endpoint_id);
    if (false == dotdot_ias_zone_zone_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_zone_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ias_zone_iascie_address(unid,endpoint_id);
    if (false == dotdot_ias_zone_iascie_address_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_iascie_address(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ias_zone_zoneid(unid,endpoint_id);
    if (false == dotdot_ias_zone_zoneid_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_zoneid(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ias_zone_number_of_zone_sensitivity_levels_supported(unid,endpoint_id);
    if (false == dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_ias_zone_current_zone_sensitivity_level(unid,endpoint_id);
    if (false == dotdot_ias_zone_current_zone_sensitivity_level_is_reported_defined(unid,endpoint_id)){
    dotdot_set_ias_zone_current_zone_sensitivity_level(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_iaswd_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_iaswd_max_duration(unid,endpoint_id);
    if (false == dotdot_iaswd_max_duration_is_reported_defined(unid,endpoint_id)){
    dotdot_set_iaswd_max_duration(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_metering_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_metering_current_summation_delivered(unid,endpoint_id);
    if (false == dotdot_metering_current_summation_delivered_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_summation_delivered(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_summation_received(unid,endpoint_id);
    if (false == dotdot_metering_current_summation_received_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_summation_received(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_max_demand_delivered(unid,endpoint_id);
    if (false == dotdot_metering_current_max_demand_delivered_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_max_demand_delivered(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_max_demand_received(unid,endpoint_id);
    if (false == dotdot_metering_current_max_demand_received_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_max_demand_received(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_power_factor(unid,endpoint_id);
    if (false == dotdot_metering_power_factor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_power_factor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_reading_snap_shot_time(unid,endpoint_id);
    if (false == dotdot_metering_reading_snap_shot_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_reading_snap_shot_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_max_demand_delivered_time(unid,endpoint_id);
    if (false == dotdot_metering_current_max_demand_delivered_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_max_demand_delivered_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_max_demand_received_time(unid,endpoint_id);
    if (false == dotdot_metering_current_max_demand_received_time_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_max_demand_received_time(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_default_update_period(unid,endpoint_id);
    if (false == dotdot_metering_default_update_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_default_update_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_supply_status(unid,endpoint_id);
    if (false == dotdot_metering_supply_status_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_supply_status(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_inlet_energy_carrier_summation(unid,endpoint_id);
    if (false == dotdot_metering_current_inlet_energy_carrier_summation_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_inlet_energy_carrier_summation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_current_outlet_energy_carrier_summation(unid,endpoint_id);
    if (false == dotdot_metering_current_outlet_energy_carrier_summation_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_current_outlet_energy_carrier_summation(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint64_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_inlet_temperature(unid,endpoint_id);
    if (false == dotdot_metering_inlet_temperature_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_inlet_temperature(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_outlet_temperature(unid,endpoint_id);
    if (false == dotdot_metering_outlet_temperature_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_outlet_temperature(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_unitof_measure(unid,endpoint_id);
    if (false == dotdot_metering_unitof_measure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_unitof_measure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_multiplier(unid,endpoint_id);
    if (false == dotdot_metering_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_divisor(unid,endpoint_id);
    if (false == dotdot_metering_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_summation_formatting(unid,endpoint_id);
    if (false == dotdot_metering_summation_formatting_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_summation_formatting(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_demand_formatting(unid,endpoint_id);
    if (false == dotdot_metering_demand_formatting_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_demand_formatting(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_historical_consumption_formatting(unid,endpoint_id);
    if (false == dotdot_metering_historical_consumption_formatting_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_historical_consumption_formatting(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_metering_device_type(unid,endpoint_id);
    if (false == dotdot_metering_metering_device_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_metering_device_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_energy_carrier_unit_of_measure(unid,endpoint_id);
    if (false == dotdot_metering_energy_carrier_unit_of_measure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_energy_carrier_unit_of_measure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_energy_carrier_summation_formatting(unid,endpoint_id);
    if (false == dotdot_metering_energy_carrier_summation_formatting_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_energy_carrier_summation_formatting(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_energy_carrier_demand_formatting(unid,endpoint_id);
    if (false == dotdot_metering_energy_carrier_demand_formatting_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_energy_carrier_demand_formatting(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_temperature_unit_of_measure(unid,endpoint_id);
    if (false == dotdot_metering_temperature_unit_of_measure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_temperature_unit_of_measure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_metering_temperature_formatting(unid,endpoint_id);
    if (false == dotdot_metering_temperature_formatting_is_reported_defined(unid,endpoint_id)){
    dotdot_set_metering_temperature_formatting(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_electrical_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measurement_type(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measurement_type_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measurement_type(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_voltage(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_voltage_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_voltage_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_voltage_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_voltage_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_voltage_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_voltage_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_current_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_current_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_current_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_current_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_current_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_current_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_power_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_power_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_power_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_power_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_power_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_power_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_voltage_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_voltage_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_voltage_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_voltage_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_voltage_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_voltage_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_current_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_current_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_current_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_current_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_current_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_current_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_power_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_power_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_power_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_power_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_power_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_power_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_frequency(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_frequency_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_frequency(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_frequency_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_frequency_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_frequency_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_frequency_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_frequency_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_frequency_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_neutral_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_neutral_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_neutral_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_total_active_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_total_active_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_total_active_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_total_reactive_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_total_reactive_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_total_reactive_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_total_apparent_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_total_apparent_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_total_apparent_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured1st_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured1st_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured1st_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured3rd_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured3rd_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured3rd_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured5th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured5th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured5th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured7th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured7th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured7th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured9th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured9th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured9th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured11th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured11th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured11th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured_phase1st_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured_phase1st_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured_phase1st_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured_phase3rd_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured_phase3rd_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured_phase3rd_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured_phase5th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured_phase5th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured_phase5th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured_phase7th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured_phase7th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured_phase7th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured_phase9th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured_phase9th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured_phase9th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_measured_phase11th_harmonic_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_measured_phase11th_harmonic_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_measured_phase11th_harmonic_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_frequency_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_frequency_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_frequency_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_frequency_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_frequency_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_frequency_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_power_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_power_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_power_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_power_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_power_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_power_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_harmonic_current_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_harmonic_current_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_harmonic_current_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_phase_harmonic_current_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_phase_harmonic_current_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_phase_harmonic_current_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_line_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_line_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_line_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_reactive_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_reactive_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_reactive_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_min(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_max(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_reactive_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_reactive_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_reactive_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_apparent_power(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_apparent_power_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_apparent_power(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_power_factor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_power_factor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_power_factor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_voltage_measurement_period(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_voltage_measurement_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_voltage_measurement_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_over_voltage_counter(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_over_voltage_counter_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_over_voltage_counter(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_under_voltage_counter(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_under_voltage_counter_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_under_voltage_counter(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_over_voltage_period(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_over_voltage_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_under_voltage_period(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_under_voltage_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_sag_period(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_sag_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_sag_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_swell_period(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_swell_period_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_swell_period(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_voltage_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_voltage_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_voltage_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_voltage_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_voltage_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_voltage_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_current_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_current_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_current_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_current_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_current_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_current_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_power_multiplier(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_power_multiplier_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_power_multiplier(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_power_divisor(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_power_divisor_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_power_divisor(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_overload_alarms_mask(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_overload_alarms_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_overload_alarms_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_voltage_overload(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_voltage_overload_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_voltage_overload(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_dc_current_overload(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_dc_current_overload_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_dc_current_overload(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_alarms_mask(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_alarms_mask_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_alarms_mask(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_voltage_overload(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_voltage_overload_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_voltage_overload(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_current_overload(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_current_overload_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_current_overload(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_active_power_overload(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_active_power_overload_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_active_power_overload(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_ac_reactive_power_overload(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_ac_reactive_power_overload_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_ac_reactive_power_overload(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_over_voltage(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_over_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_over_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_under_voltage(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_under_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_under_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_over_voltage(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_over_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_over_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_under_voltage(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_under_voltage_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_under_voltage(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_sag(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_sag_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_sag(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_swell(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_swell_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_swell(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_line_current_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_line_current_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_line_current_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_current_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_current_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_current_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_reactive_current_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_reactive_current_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_reactive_current_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_min_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_min_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_min_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_max_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_max_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_max_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_min_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_min_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_min_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_max_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_max_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_max_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_min_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_min_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_min_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_max_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_max_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_max_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_reactive_power_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_reactive_power_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_reactive_power_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_apparent_power_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_apparent_power_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_apparent_power_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_power_factor_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_power_factor_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_power_factor_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_voltage_measurement_period_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_voltage_measurement_period_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_over_voltage_counter_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_over_voltage_counter_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_under_voltage_counter_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_under_voltage_counter_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_over_voltage_period_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_under_voltage_period_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_sag_period_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_sag_period_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_swell_period_phb(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_swell_period_phb_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_line_current_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_line_current_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_line_current_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_current_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_current_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_current_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_reactive_current_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_reactive_current_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_reactive_current_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_min_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_min_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_min_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_max_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_max_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_max_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_min_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_min_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_min_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_current_max_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_current_max_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_current_max_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_min_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_min_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_min_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_active_power_max_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_active_power_max_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_active_power_max_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_reactive_power_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_reactive_power_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_reactive_power_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_apparent_power_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_apparent_power_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_apparent_power_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_power_factor_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_power_factor_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_power_factor_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_voltage_measurement_period_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_voltage_measurement_period_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_over_voltage_counter_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_over_voltage_counter_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_average_rms_under_voltage_counter_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_average_rms_under_voltage_counter_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_over_voltage_period_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_extreme_under_voltage_period_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_sag_period_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_sag_period_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_electrical_measurement_rms_voltage_swell_period_phc(unid,endpoint_id);
    if (false == dotdot_electrical_measurement_rms_voltage_swell_period_phc_is_reported_defined(unid,endpoint_id)){
    dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

}

void dotdot_create_diagnostics_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_diagnostics_number_of_resets(unid,endpoint_id);
    if (false == dotdot_diagnostics_number_of_resets_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_number_of_resets(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_persistent_memory_writes(unid,endpoint_id);
    if (false == dotdot_diagnostics_persistent_memory_writes_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_persistent_memory_writes(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_mac_rx_bcast(unid,endpoint_id);
    if (false == dotdot_diagnostics_mac_rx_bcast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_mac_rx_bcast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_mac_tx_bcast(unid,endpoint_id);
    if (false == dotdot_diagnostics_mac_tx_bcast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_mac_tx_bcast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_mac_rx_ucast(unid,endpoint_id);
    if (false == dotdot_diagnostics_mac_rx_ucast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_mac_rx_ucast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_mac_tx_ucast(unid,endpoint_id);
    if (false == dotdot_diagnostics_mac_tx_ucast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_mac_tx_ucast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_mac_tx_ucast_retry(unid,endpoint_id);
    if (false == dotdot_diagnostics_mac_tx_ucast_retry_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_mac_tx_ucast_retry(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_mac_tx_ucast_fail(unid,endpoint_id);
    if (false == dotdot_diagnostics_mac_tx_ucast_fail_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_mac_tx_ucast_fail(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_rx_bcast(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_rx_bcast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_rx_bcast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_tx_bcast(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_tx_bcast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_tx_bcast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_rx_ucast(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_rx_ucast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_rx_ucast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_tx_ucast_success(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_tx_ucast_success_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_tx_ucast_success(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_tx_ucast_retry(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_tx_ucast_retry_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_tx_ucast_retry(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_tx_ucast_fail(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_tx_ucast_fail_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_tx_ucast_fail(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_route_disc_initiated(unid,endpoint_id);
    if (false == dotdot_diagnostics_route_disc_initiated_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_route_disc_initiated(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_neighbor_added(unid,endpoint_id);
    if (false == dotdot_diagnostics_neighbor_added_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_neighbor_added(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_neighbor_removed(unid,endpoint_id);
    if (false == dotdot_diagnostics_neighbor_removed_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_neighbor_removed(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_neighbor_stale(unid,endpoint_id);
    if (false == dotdot_diagnostics_neighbor_stale_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_neighbor_stale(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_join_indication(unid,endpoint_id);
    if (false == dotdot_diagnostics_join_indication_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_join_indication(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_child_moved(unid,endpoint_id);
    if (false == dotdot_diagnostics_child_moved_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_child_moved(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_nwkfc_failure(unid,endpoint_id);
    if (false == dotdot_diagnostics_nwkfc_failure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_nwkfc_failure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_apsfc_failure(unid,endpoint_id);
    if (false == dotdot_diagnostics_apsfc_failure_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_apsfc_failure(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_unauthorized_key(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_unauthorized_key_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_unauthorized_key(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_nwk_decrypt_failures(unid,endpoint_id);
    if (false == dotdot_diagnostics_nwk_decrypt_failures_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_nwk_decrypt_failures(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_aps_decrypt_failures(unid,endpoint_id);
    if (false == dotdot_diagnostics_aps_decrypt_failures_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_aps_decrypt_failures(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_packet_buffer_allocate_failures(unid,endpoint_id);
    if (false == dotdot_diagnostics_packet_buffer_allocate_failures_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_packet_buffer_allocate_failures(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_relayed_ucast(unid,endpoint_id);
    if (false == dotdot_diagnostics_relayed_ucast_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_relayed_ucast(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_phy_to_mac_queue_limit_reached(unid,endpoint_id);
    if (false == dotdot_diagnostics_phy_to_mac_queue_limit_reached_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_phy_to_mac_queue_limit_reached(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_packet_validate_drop_count(unid,endpoint_id);
    if (false == dotdot_diagnostics_packet_validate_drop_count_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_packet_validate_drop_count(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_average_mac_retry_per_aps_message_sent(unid,endpoint_id);
    if (false == dotdot_diagnostics_average_mac_retry_per_aps_message_sent_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_average_mac_retry_per_aps_message_sent(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_last_messagelqi(unid,endpoint_id);
    if (false == dotdot_diagnostics_last_messagelqi_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_last_messagelqi(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_diagnostics_last_messagerssi(unid,endpoint_id);
    if (false == dotdot_diagnostics_last_messagerssi_is_reported_defined(unid,endpoint_id)){
    dotdot_set_diagnostics_last_messagerssi(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int8_t>(0));
        }

}

void dotdot_create_binding_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_binding_binding_table_full(unid,endpoint_id);
    if (false == dotdot_binding_binding_table_full_is_reported_defined(unid,endpoint_id)){
    dotdot_set_binding_binding_table_full(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<bool>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_binding_bindable_cluster_list(unid,endpoint_id);
    if (false == dotdot_binding_bindable_cluster_list_is_reported_defined(unid,endpoint_id)){
    }

    // Create and set a default value if undefined.
    dotdot_create_binding_binding_table(unid,endpoint_id);
    if (false == dotdot_binding_binding_table_is_reported_defined(unid,endpoint_id)){
    }

}

void dotdot_create_name_and_location_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_name_and_location_name(unid,endpoint_id);
    if (false == dotdot_name_and_location_name_is_reported_defined(unid,endpoint_id)){
    dotdot_set_name_and_location_name(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

    // Create and set a default value if undefined.
    dotdot_create_name_and_location_location(unid,endpoint_id);
    if (false == dotdot_name_and_location_location_is_reported_defined(unid,endpoint_id)){
    dotdot_set_name_and_location_location(unid,endpoint_id,REPORTED_ATTRIBUTE, "Dummy value");
    }

}

void dotdot_create_configuration_parameters_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_configuration_parameters_configuration_parameters(unid,endpoint_id);
    if (false == dotdot_configuration_parameters_configuration_parameters_is_reported_defined(unid,endpoint_id)){
    }

}

void dotdot_create_descriptor_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_descriptor_device_type_list(unid,endpoint_id);
    if (false == dotdot_descriptor_device_type_list_is_reported_defined(unid,endpoint_id)){
    }

}

void dotdot_create_unify_fan_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_unify_fan_control_z_wave_fan_mode(unid,endpoint_id);
    if (false == dotdot_unify_fan_control_z_wave_fan_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_fan_control_z_wave_fan_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<ZWaveFanModeEnum>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_fan_control_z_wave_supported_fan_mode(unid,endpoint_id);
    if (false == dotdot_unify_fan_control_z_wave_supported_fan_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_fan_control_z_wave_supported_fan_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_fan_control_z_wave_fan_state(unid,endpoint_id);
    if (false == dotdot_unify_fan_control_z_wave_fan_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_fan_control_z_wave_fan_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<ZWaveFanStateEnum>(0));
        }

}

void dotdot_create_unify_thermostat_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_unify_thermostat_thermostat_mode(unid,endpoint_id);
    if (false == dotdot_unify_thermostat_thermostat_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_thermostat_thermostat_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_thermostat_supported_thermostat_mode(unid,endpoint_id);
    if (false == dotdot_unify_thermostat_supported_thermostat_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_thermostat_supported_thermostat_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint16_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_thermostat_operating_state(unid,endpoint_id);
    if (false == dotdot_unify_thermostat_operating_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_thermostat_operating_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}

void dotdot_create_unify_humidity_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_reporting_mode(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_reporting_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_reporting_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<ModeType>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_supported_reporting_mode(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_supported_reporting_mode_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_supported_reporting_mode(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_current_state(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_current_state_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_current_state(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_supported_set_points(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_supported_set_points_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_supported_set_points(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_humidifier_setpoint_min(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_humidifier_setpoint_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_humidifier_setpoint_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_humidifier_setpoint_max(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_humidifier_setpoint_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_humidifier_setpoint_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_humidifier_setpoint(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_humidifier_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_humidifier_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_humidifier_setpoint_scale(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_humidifier_setpoint_scale_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_humidifier_setpoint_scale(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<ScaleType>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_humidifier_setpoint_precision(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_humidifier_setpoint_precision_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_humidifier_setpoint_precision(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_dehumidifier_setpoint_min(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_dehumidifier_setpoint_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_dehumidifier_setpoint_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_dehumidifier_setpoint_max(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_dehumidifier_setpoint_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_dehumidifier_setpoint_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_dehumidifier_setpoint(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_dehumidifier_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_dehumidifier_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_dehumidifier_setpoint_scale(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_dehumidifier_setpoint_scale_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_dehumidifier_setpoint_scale(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<ScaleType>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_dehumidifier_setpoint_precision(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_dehumidifier_setpoint_precision_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_dehumidifier_setpoint_precision(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_auto_setpoint_min(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_auto_setpoint_min_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_auto_setpoint_min(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_auto_setpoint_max(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_auto_setpoint_max_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_auto_setpoint_max(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_auto_setpoint(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_auto_setpoint_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_auto_setpoint(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<int32_t>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_auto_setpoint_scale(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_auto_setpoint_scale_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_auto_setpoint_scale(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<ScaleType>(0));
        }

    // Create and set a default value if undefined.
    dotdot_create_unify_humidity_control_auto_setpoint_precision(unid,endpoint_id);
    if (false == dotdot_unify_humidity_control_auto_setpoint_precision_is_reported_defined(unid,endpoint_id)){
    dotdot_set_unify_humidity_control_auto_setpoint_precision(unid,endpoint_id,REPORTED_ATTRIBUTE, static_cast<uint8_t>(0));
        }

}


void dotdot_unretain_basic_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_basic_zcl_version_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION).delete_node();

    uic_mqtt_dotdot_basic_application_version_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION).delete_node();

    uic_mqtt_dotdot_basic_stack_version_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION).delete_node();

    uic_mqtt_dotdot_basic_hw_version_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION).delete_node();

    uic_mqtt_dotdot_basic_manufacturer_name_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME).delete_node();

    uic_mqtt_dotdot_basic_model_identifier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER).delete_node();

    uic_mqtt_dotdot_basic_date_code_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE).delete_node();

    uic_mqtt_dotdot_basic_power_source_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE).delete_node();

    uic_mqtt_dotdot_basic_generic_device_class_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS).delete_node();

    uic_mqtt_dotdot_basic_generic_device_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE).delete_node();

    uic_mqtt_dotdot_basic_product_code_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE).delete_node();

    uic_mqtt_dotdot_basic_producturl_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL).delete_node();

    uic_mqtt_dotdot_basic_manufacturer_version_details_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS).delete_node();

    uic_mqtt_dotdot_basic_serial_number_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER).delete_node();

    uic_mqtt_dotdot_basic_product_label_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL).delete_node();

    uic_mqtt_dotdot_basic_location_description_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION).delete_node();

    uic_mqtt_dotdot_basic_physical_environment_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT).delete_node();

    uic_mqtt_dotdot_basic_device_enabled_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED).delete_node();

    uic_mqtt_dotdot_basic_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_basic_disable_local_config_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG).delete_node();

    uic_mqtt_dotdot_basic_sw_buildid_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID).delete_node();


    uic_mqtt_dotdot_basic_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_basic_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_power_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_power_configuration_mains_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_mains_frequency_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY).delete_node();

    uic_mqtt_dotdot_power_configuration_mains_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_manufacturer_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_size_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE).delete_node();

    uic_mqtt_dotdot_power_configuration_batterya_hr_rating_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_quantity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_rated_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3).delete_node();

    uic_mqtt_dotdot_power_configuration_battery_alarm_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_manufacturer_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_size_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_quantity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3).delete_node();

    uic_mqtt_dotdot_power_configuration_battery2_alarm_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_manufacturer_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_size_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_quantity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3).delete_node();

    uic_mqtt_dotdot_power_configuration_battery3_alarm_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE).delete_node();


    uic_mqtt_dotdot_power_configuration_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_power_configuration_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_device_temperature_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_device_temperature_configuration_current_temperature_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_min_temp_experienced_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_max_temp_experienced_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_device_temp_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_low_temp_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_high_temp_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT).delete_node();

    uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT).delete_node();


    uic_mqtt_dotdot_device_temperature_configuration_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_device_temperature_configuration_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_identify_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_identify_identify_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME).delete_node();


    uic_mqtt_dotdot_identify_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_identify_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_groups_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_groups_name_support_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT).delete_node();


    uic_mqtt_dotdot_groups_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_groups_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_scenes_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_scenes_scene_count_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT).delete_node();

    uic_mqtt_dotdot_scenes_current_scene_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE).delete_node();

    uic_mqtt_dotdot_scenes_current_group_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP).delete_node();

    uic_mqtt_dotdot_scenes_scene_valid_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID).delete_node();

    uic_mqtt_dotdot_scenes_name_support_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT).delete_node();

    uic_mqtt_dotdot_scenes_last_configured_by_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY).delete_node();

    uic_mqtt_dotdot_scenes_scene_table_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE).delete_node();


    uic_mqtt_dotdot_scenes_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_scenes_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_on_off_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_on_off_on_off_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF).delete_node();

    uic_mqtt_dotdot_on_off_global_scene_control_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL).delete_node();

    uic_mqtt_dotdot_on_off_on_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME).delete_node();

    uic_mqtt_dotdot_on_off_off_wait_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME).delete_node();

    uic_mqtt_dotdot_on_off_start_up_on_off_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF).delete_node();


    uic_mqtt_dotdot_on_off_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_on_off_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_level_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_level_current_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL).delete_node();

    uic_mqtt_dotdot_level_remaining_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME).delete_node();

    uic_mqtt_dotdot_level_min_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL).delete_node();

    uic_mqtt_dotdot_level_max_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL).delete_node();

    uic_mqtt_dotdot_level_current_frequency_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY).delete_node();

    uic_mqtt_dotdot_level_min_frequency_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY).delete_node();

    uic_mqtt_dotdot_level_max_frequency_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY).delete_node();

    uic_mqtt_dotdot_level_options_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS).delete_node();

    uic_mqtt_dotdot_level_on_off_transition_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME).delete_node();

    uic_mqtt_dotdot_level_on_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL).delete_node();

    uic_mqtt_dotdot_level_on_transition_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME).delete_node();

    uic_mqtt_dotdot_level_off_transition_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME).delete_node();

    uic_mqtt_dotdot_level_default_move_rate_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE).delete_node();

    uic_mqtt_dotdot_level_start_up_current_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL).delete_node();


    uic_mqtt_dotdot_level_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_level_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_alarms_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_alarms_alarm_count_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT).delete_node();


    uic_mqtt_dotdot_alarms_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_alarms_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_time_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_time_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_TIME).delete_node();

    uic_mqtt_dotdot_time_time_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS).delete_node();

    uic_mqtt_dotdot_time_time_zone_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE).delete_node();

    uic_mqtt_dotdot_time_dst_start_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_DST_START).delete_node();

    uic_mqtt_dotdot_time_dst_end_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_DST_END).delete_node();

    uic_mqtt_dotdot_time_dst_shift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT).delete_node();

    uic_mqtt_dotdot_time_standard_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME).delete_node();

    uic_mqtt_dotdot_time_local_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME).delete_node();

    uic_mqtt_dotdot_time_last_set_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME).delete_node();

    uic_mqtt_dotdot_time_valid_until_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME).delete_node();


    uic_mqtt_dotdot_time_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_time_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_poll_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_poll_control_check_in_interval_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL).delete_node();

    uic_mqtt_dotdot_poll_control_long_poll_interval_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL).delete_node();

    uic_mqtt_dotdot_poll_control_short_poll_interval_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL).delete_node();

    uic_mqtt_dotdot_poll_control_fast_poll_timeout_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT).delete_node();

    uic_mqtt_dotdot_poll_control_check_in_interval_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN).delete_node();

    uic_mqtt_dotdot_poll_control_long_poll_interval_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN).delete_node();

    uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX).delete_node();


    uic_mqtt_dotdot_poll_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_poll_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_shade_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_shade_configuration_physical_closed_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT).delete_node();

    uic_mqtt_dotdot_shade_configuration_motor_step_size_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE).delete_node();

    uic_mqtt_dotdot_shade_configuration_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS).delete_node();

    uic_mqtt_dotdot_shade_configuration_closed_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT).delete_node();

    uic_mqtt_dotdot_shade_configuration_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE).delete_node();


    uic_mqtt_dotdot_shade_configuration_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_shade_configuration_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_door_lock_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_door_lock_lock_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE).delete_node();

    uic_mqtt_dotdot_door_lock_lock_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE).delete_node();

    uic_mqtt_dotdot_door_lock_actuator_enabled_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED).delete_node();

    uic_mqtt_dotdot_door_lock_door_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE).delete_node();

    uic_mqtt_dotdot_door_lock_door_open_events_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS).delete_node();

    uic_mqtt_dotdot_door_lock_door_closed_events_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS).delete_node();

    uic_mqtt_dotdot_door_lock_open_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_log_records_supported_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_total_users_supported_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_pin_users_supported_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_rfid_users_supported_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED).delete_node();

    uic_mqtt_dotdot_door_lock_max_pin_code_length_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH).delete_node();

    uic_mqtt_dotdot_door_lock_min_pin_code_length_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH).delete_node();

    uic_mqtt_dotdot_door_lock_max_rfid_code_length_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH).delete_node();

    uic_mqtt_dotdot_door_lock_min_rfid_code_length_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH).delete_node();

    uic_mqtt_dotdot_door_lock_credential_rules_support_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT).delete_node();

    uic_mqtt_dotdot_door_lock_number_of_credentials_supported_per_user_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER).delete_node();

    uic_mqtt_dotdot_door_lock_enable_logging_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING).delete_node();

    uic_mqtt_dotdot_door_lock_language_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE).delete_node();

    uic_mqtt_dotdot_door_lock_led_settings_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS).delete_node();

    uic_mqtt_dotdot_door_lock_auto_relock_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME).delete_node();

    uic_mqtt_dotdot_door_lock_sound_volume_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME).delete_node();

    uic_mqtt_dotdot_door_lock_operating_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE).delete_node();

    uic_mqtt_dotdot_door_lock_supported_operating_modes_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES).delete_node();

    uic_mqtt_dotdot_door_lock_default_configuration_register_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER).delete_node();

    uic_mqtt_dotdot_door_lock_enable_local_programming_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING).delete_node();

    uic_mqtt_dotdot_door_lock_enable_one_touch_locking_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING).delete_node();

    uic_mqtt_dotdot_door_lock_enable_inside_statusled_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED).delete_node();

    uic_mqtt_dotdot_door_lock_enable_privacy_mode_button_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON).delete_node();

    uic_mqtt_dotdot_door_lock_local_programming_features_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES).delete_node();

    uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT).delete_node();

    uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME).delete_node();

    uic_mqtt_dotdot_door_lock_send_pin_over_the_air_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR).delete_node();

    uic_mqtt_dotdot_door_lock_require_pi_nfor_rf_operation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION).delete_node();

    uic_mqtt_dotdot_door_lock_security_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL).delete_node();

    uic_mqtt_dotdot_door_lock_expiring_user_timeout_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT).delete_node();

    uic_mqtt_dotdot_door_lock_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_keypad_operation_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_rf_operation_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_manual_operation_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_rfid_operation_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_keypad_programming_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_rf_programming_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_rfid_programming_event_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK).delete_node();

    uic_mqtt_dotdot_door_lock_feature_map_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP).delete_node();


    uic_mqtt_dotdot_door_lock_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_door_lock_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_window_covering_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_window_covering_window_covering_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE).delete_node();

    uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT).delete_node();

    uic_mqtt_dotdot_window_covering_current_position_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_current_position_tilt_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT).delete_node();

    uic_mqtt_dotdot_window_covering_number_of_actuations_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT).delete_node();

    uic_mqtt_dotdot_window_covering_config_or_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS).delete_node();

    uic_mqtt_dotdot_window_covering_current_position_lift_percentage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE).delete_node();

    uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE).delete_node();

    uic_mqtt_dotdot_window_covering_installed_open_limit_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT).delete_node();

    uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT).delete_node();

    uic_mqtt_dotdot_window_covering_velocity_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_acceleration_time_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_deceleration_time_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE).delete_node();

    uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT).delete_node();

    uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT).delete_node();


    uic_mqtt_dotdot_window_covering_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_window_covering_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_barrier_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_barrier_control_moving_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE).delete_node();

    uic_mqtt_dotdot_barrier_control_safety_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS).delete_node();

    uic_mqtt_dotdot_barrier_control_capabilities_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES).delete_node();

    uic_mqtt_dotdot_barrier_control_open_events_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS).delete_node();

    uic_mqtt_dotdot_barrier_control_close_events_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS).delete_node();

    uic_mqtt_dotdot_barrier_control_command_open_events_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS).delete_node();

    uic_mqtt_dotdot_barrier_control_command_close_events_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS).delete_node();

    uic_mqtt_dotdot_barrier_control_open_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD).delete_node();

    uic_mqtt_dotdot_barrier_control_close_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD).delete_node();

    uic_mqtt_dotdot_barrier_control_barrier_position_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION).delete_node();


    uic_mqtt_dotdot_barrier_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_barrier_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_pump_configuration_and_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_pump_configuration_and_control_max_pressure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_speed_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_flow_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_min_const_pressure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_const_pressure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_min_comp_pressure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_comp_pressure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_min_const_temp_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_max_const_temp_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_pump_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_effective_operation_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_effective_control_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_capacity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_speed_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_operation_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_control_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE).delete_node();

    uic_mqtt_dotdot_pump_configuration_and_control_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK).delete_node();


    uic_mqtt_dotdot_pump_configuration_and_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_pump_configuration_and_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_thermostat_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_thermostat_local_temperature_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE).delete_node();

    uic_mqtt_dotdot_thermostat_outdoor_temperature_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE).delete_node();

    uic_mqtt_dotdot_thermostat_occupancy_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY).delete_node();

    uic_mqtt_dotdot_thermostat_abs_min_heat_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_abs_max_heat_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_abs_min_cool_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_abs_max_cool_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_pi_cooling_demand_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND).delete_node();

    uic_mqtt_dotdot_thermostat_pi_heating_demand_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND).delete_node();

    uic_mqtt_dotdot_thermostat_hvac_system_type_configuration_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION).delete_node();

    uic_mqtt_dotdot_thermostat_local_temperature_calibration_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION).delete_node();

    uic_mqtt_dotdot_thermostat_occupied_cooling_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT).delete_node();

    uic_mqtt_dotdot_thermostat_occupied_heating_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT).delete_node();

    uic_mqtt_dotdot_thermostat_unoccupied_cooling_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT).delete_node();

    uic_mqtt_dotdot_thermostat_unoccupied_heating_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT).delete_node();

    uic_mqtt_dotdot_thermostat_min_heat_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_max_heat_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_min_cool_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_max_cool_setpoint_limit_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT).delete_node();

    uic_mqtt_dotdot_thermostat_min_setpoint_dead_band_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND).delete_node();

    uic_mqtt_dotdot_thermostat_remote_sensing_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING).delete_node();

    uic_mqtt_dotdot_thermostat_control_sequence_of_operation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION).delete_node();

    uic_mqtt_dotdot_thermostat_system_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE).delete_node();

    uic_mqtt_dotdot_thermostat_alarm_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK).delete_node();

    uic_mqtt_dotdot_thermostat_thermostat_running_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE).delete_node();

    uic_mqtt_dotdot_thermostat_start_of_week_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK).delete_node();

    uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS).delete_node();

    uic_mqtt_dotdot_thermostat_number_of_daily_transitions_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS).delete_node();

    uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD).delete_node();

    uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION).delete_node();

    uic_mqtt_dotdot_thermostat_thermostat_programming_operation_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE).delete_node();

    uic_mqtt_dotdot_thermostat_thermostat_running_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE).delete_node();

    uic_mqtt_dotdot_thermostat_setpoint_change_source_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE).delete_node();

    uic_mqtt_dotdot_thermostat_setpoint_change_amount_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT).delete_node();

    uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP).delete_node();

    uic_mqtt_dotdot_thermostat_occupied_setback_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK).delete_node();

    uic_mqtt_dotdot_thermostat_occupied_setback_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN).delete_node();

    uic_mqtt_dotdot_thermostat_occupied_setback_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX).delete_node();

    uic_mqtt_dotdot_thermostat_unoccupied_setback_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK).delete_node();

    uic_mqtt_dotdot_thermostat_unoccupied_setback_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN).delete_node();

    uic_mqtt_dotdot_thermostat_unoccupied_setback_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX).delete_node();

    uic_mqtt_dotdot_thermostat_emergency_heat_delta_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA).delete_node();

    uic_mqtt_dotdot_thermostat_ac_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE).delete_node();

    uic_mqtt_dotdot_thermostat_ac_capacity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY).delete_node();

    uic_mqtt_dotdot_thermostat_ac_refrigerant_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE).delete_node();

    uic_mqtt_dotdot_thermostat_ac_compressor_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE).delete_node();

    uic_mqtt_dotdot_thermostat_ac_error_code_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE).delete_node();

    uic_mqtt_dotdot_thermostat_ac_louver_position_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION).delete_node();

    uic_mqtt_dotdot_thermostat_ac_coil_temperature_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE).delete_node();

    uic_mqtt_dotdot_thermostat_ac_capacity_format_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT).delete_node();


    uic_mqtt_dotdot_thermostat_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_thermostat_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_fan_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_fan_control_fan_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE).delete_node();

    uic_mqtt_dotdot_fan_control_fan_mode_sequence_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE).delete_node();


    uic_mqtt_dotdot_fan_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_fan_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_dehumidification_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_dehumidification_control_relative_humidity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY).delete_node();

    uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING).delete_node();

    uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT).delete_node();

    uic_mqtt_dotdot_dehumidification_control_relative_humidity_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE).delete_node();

    uic_mqtt_dotdot_dehumidification_control_dehumidification_lockout_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT).delete_node();

    uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS).delete_node();

    uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL).delete_node();

    uic_mqtt_dotdot_dehumidification_control_relative_humidity_display_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY).delete_node();


    uic_mqtt_dotdot_dehumidification_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_dehumidification_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_thermostat_user_interface_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_thermostat_user_interface_configuration_temperature_display_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE).delete_node();

    uic_mqtt_dotdot_thermostat_user_interface_configuration_keypad_lockout_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT).delete_node();

    uic_mqtt_dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY).delete_node();


    uic_mqtt_dotdot_thermostat_user_interface_configuration_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_thermostat_user_interface_configuration_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_color_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_color_control_current_hue_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE).delete_node();

    uic_mqtt_dotdot_color_control_current_saturation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION).delete_node();

    uic_mqtt_dotdot_color_control_remaining_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME).delete_node();

    uic_mqtt_dotdot_color_control_currentx_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX).delete_node();

    uic_mqtt_dotdot_color_control_currenty_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY).delete_node();

    uic_mqtt_dotdot_color_control_drift_compensation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION).delete_node();

    uic_mqtt_dotdot_color_control_compensation_text_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT).delete_node();

    uic_mqtt_dotdot_color_control_color_temperature_mireds_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS).delete_node();

    uic_mqtt_dotdot_color_control_color_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE).delete_node();

    uic_mqtt_dotdot_color_control_options_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS).delete_node();

    uic_mqtt_dotdot_color_control_number_of_primaries_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES).delete_node();

    uic_mqtt_dotdot_color_control_primary1x_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X).delete_node();

    uic_mqtt_dotdot_color_control_primary1y_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y).delete_node();

    uic_mqtt_dotdot_color_control_primary1_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_primary2x_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X).delete_node();

    uic_mqtt_dotdot_color_control_primary2y_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y).delete_node();

    uic_mqtt_dotdot_color_control_primary2_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_primary3x_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X).delete_node();

    uic_mqtt_dotdot_color_control_primary3y_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y).delete_node();

    uic_mqtt_dotdot_color_control_primary3_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_primary4x_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X).delete_node();

    uic_mqtt_dotdot_color_control_primary4y_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y).delete_node();

    uic_mqtt_dotdot_color_control_primary4_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_primary5x_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X).delete_node();

    uic_mqtt_dotdot_color_control_primary5y_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y).delete_node();

    uic_mqtt_dotdot_color_control_primary5_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_primary6x_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X).delete_node();

    uic_mqtt_dotdot_color_control_primary6y_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y).delete_node();

    uic_mqtt_dotdot_color_control_primary6_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_white_pointx_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX).delete_node();

    uic_mqtt_dotdot_color_control_white_pointy_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY).delete_node();

    uic_mqtt_dotdot_color_control_color_pointrx_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX).delete_node();

    uic_mqtt_dotdot_color_control_color_pointry_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY).delete_node();

    uic_mqtt_dotdot_color_control_color_pointr_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_color_pointgx_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX).delete_node();

    uic_mqtt_dotdot_color_control_color_pointgy_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY).delete_node();

    uic_mqtt_dotdot_color_control_color_pointg_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_color_pointbx_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX).delete_node();

    uic_mqtt_dotdot_color_control_color_pointby_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY).delete_node();

    uic_mqtt_dotdot_color_control_color_pointb_intensity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY).delete_node();

    uic_mqtt_dotdot_color_control_enhanced_current_hue_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE).delete_node();

    uic_mqtt_dotdot_color_control_enhanced_color_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE).delete_node();

    uic_mqtt_dotdot_color_control_color_loop_active_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE).delete_node();

    uic_mqtt_dotdot_color_control_color_loop_direction_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION).delete_node();

    uic_mqtt_dotdot_color_control_color_loop_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME).delete_node();

    uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE).delete_node();

    uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE).delete_node();

    uic_mqtt_dotdot_color_control_color_capabilities_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES).delete_node();

    uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS).delete_node();

    uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS).delete_node();

    uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS).delete_node();

    uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS).delete_node();


    uic_mqtt_dotdot_color_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_color_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_ballast_configuration_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_ballast_configuration_physical_min_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL).delete_node();

    uic_mqtt_dotdot_ballast_configuration_physical_max_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL).delete_node();

    uic_mqtt_dotdot_ballast_configuration_ballast_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS).delete_node();

    uic_mqtt_dotdot_ballast_configuration_min_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL).delete_node();

    uic_mqtt_dotdot_ballast_configuration_max_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL).delete_node();

    uic_mqtt_dotdot_ballast_configuration_power_on_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL).delete_node();

    uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME).delete_node();

    uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR).delete_node();

    uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_quantity_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_manufacturer_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_alarm_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE).delete_node();

    uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT).delete_node();


    uic_mqtt_dotdot_ballast_configuration_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_ballast_configuration_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_illuminance_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_illuminance_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_illuminance_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_illuminance_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_illuminance_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE).delete_node();

    uic_mqtt_dotdot_illuminance_measurement_light_sensor_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE).delete_node();


    uic_mqtt_dotdot_illuminance_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_illuminance_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_illuminance_level_sensing_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_illuminance_level_sensing_level_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS).delete_node();

    uic_mqtt_dotdot_illuminance_level_sensing_light_sensor_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE).delete_node();

    uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL).delete_node();


    uic_mqtt_dotdot_illuminance_level_sensing_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_illuminance_level_sensing_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_temperature_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_temperature_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_temperature_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_temperature_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_temperature_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE).delete_node();


    uic_mqtt_dotdot_temperature_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_temperature_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_pressure_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_pressure_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_scaled_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_min_scaled_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_max_scaled_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE).delete_node();

    uic_mqtt_dotdot_pressure_measurement_scale_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE).delete_node();


    uic_mqtt_dotdot_pressure_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_pressure_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_flow_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_flow_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_flow_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_flow_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_flow_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE).delete_node();


    uic_mqtt_dotdot_flow_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_flow_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_relativity_humidity_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_relativity_humidity_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_relativity_humidity_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_relativity_humidity_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_relativity_humidity_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE).delete_node();


    uic_mqtt_dotdot_relativity_humidity_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_relativity_humidity_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_occupancy_sensing_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_occupancy_sensing_occupancy_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY).delete_node();

    uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD).delete_node();


    uic_mqtt_dotdot_occupancy_sensing_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_occupancy_sensing_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_soil_moisture_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_soil_moisture_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_soil_moisture_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_soil_moisture_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_soil_moisture_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE).delete_node();


    uic_mqtt_dotdot_soil_moisture_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_soil_moisture_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_ph_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_ph_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_ph_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_ph_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_ph_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE).delete_node();


    uic_mqtt_dotdot_ph_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_ph_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_electrical_conductivity_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE).delete_node();


    uic_mqtt_dotdot_electrical_conductivity_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_electrical_conductivity_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_wind_speed_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_wind_speed_measurement_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_wind_speed_measurement_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE).delete_node();


    uic_mqtt_dotdot_wind_speed_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_wind_speed_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_carbon_monoxide_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_carbon_monoxide_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_carbon_monoxide_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_carbon_monoxide_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_carbon_monoxide_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE).delete_node();


    uic_mqtt_dotdot_carbon_monoxide_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_carbon_monoxide_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_carbon_dioxide_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_carbon_dioxide_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_carbon_dioxide_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_carbon_dioxide_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_carbon_dioxide_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE).delete_node();


    uic_mqtt_dotdot_carbon_dioxide_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_carbon_dioxide_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_pm25_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_pm25_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_pm25_min_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_pm25_max_measured_value_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE).delete_node();

    uic_mqtt_dotdot_pm25_tolerance_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE).delete_node();


    uic_mqtt_dotdot_pm25_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_pm25_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_ias_zone_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_ias_zone_zone_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE).delete_node();

    uic_mqtt_dotdot_ias_zone_zone_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE).delete_node();

    uic_mqtt_dotdot_ias_zone_zone_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS).delete_node();

    uic_mqtt_dotdot_ias_zone_iascie_address_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS).delete_node();

    uic_mqtt_dotdot_ias_zone_zoneid_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID).delete_node();

    uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED).delete_node();

    uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL).delete_node();


    uic_mqtt_dotdot_ias_zone_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_ias_zone_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_iaswd_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_iaswd_max_duration_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION).delete_node();


    uic_mqtt_dotdot_iaswd_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_iaswd_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_metering_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_metering_current_summation_delivered_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED).delete_node();

    uic_mqtt_dotdot_metering_current_summation_received_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED).delete_node();

    uic_mqtt_dotdot_metering_current_max_demand_delivered_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED).delete_node();

    uic_mqtt_dotdot_metering_current_max_demand_received_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED).delete_node();

    uic_mqtt_dotdot_metering_power_factor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR).delete_node();

    uic_mqtt_dotdot_metering_reading_snap_shot_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME).delete_node();

    uic_mqtt_dotdot_metering_current_max_demand_delivered_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME).delete_node();

    uic_mqtt_dotdot_metering_current_max_demand_received_time_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME).delete_node();

    uic_mqtt_dotdot_metering_default_update_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD).delete_node();

    uic_mqtt_dotdot_metering_supply_status_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS).delete_node();

    uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION).delete_node();

    uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION).delete_node();

    uic_mqtt_dotdot_metering_inlet_temperature_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE).delete_node();

    uic_mqtt_dotdot_metering_outlet_temperature_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE).delete_node();

    uic_mqtt_dotdot_metering_unitof_measure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE).delete_node();

    uic_mqtt_dotdot_metering_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_metering_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR).delete_node();

    uic_mqtt_dotdot_metering_summation_formatting_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING).delete_node();

    uic_mqtt_dotdot_metering_demand_formatting_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING).delete_node();

    uic_mqtt_dotdot_metering_historical_consumption_formatting_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING).delete_node();

    uic_mqtt_dotdot_metering_metering_device_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE).delete_node();

    uic_mqtt_dotdot_metering_energy_carrier_unit_of_measure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE).delete_node();

    uic_mqtt_dotdot_metering_energy_carrier_summation_formatting_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING).delete_node();

    uic_mqtt_dotdot_metering_energy_carrier_demand_formatting_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING).delete_node();

    uic_mqtt_dotdot_metering_temperature_unit_of_measure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE).delete_node();

    uic_mqtt_dotdot_metering_temperature_formatting_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING).delete_node();


    uic_mqtt_dotdot_metering_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_metering_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_electrical_measurement_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_electrical_measurement_measurement_type_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_voltage_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_voltage_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_current_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_current_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_power_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_power_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_frequency_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_neutral_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_total_active_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_total_reactive_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_total_apparent_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured1st_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured3rd_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured5th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured7th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured9th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured11th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured_phase1st_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured_phase3rd_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured_phase5th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured_phase7th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured_phase9th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_measured_phase11th_harmonic_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_power_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_power_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_harmonic_current_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_phase_harmonic_current_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_line_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_reactive_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX).delete_node();

    uic_mqtt_dotdot_electrical_measurement_reactive_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_apparent_power_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_power_factor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_overload_alarms_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_voltage_overload_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_dc_current_overload_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_alarms_mask_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_voltage_overload_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_current_overload_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_active_power_overload_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_ac_reactive_power_overload_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL).delete_node();

    uic_mqtt_dotdot_electrical_measurement_line_current_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_current_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_reactive_current_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_min_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_max_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_reactive_power_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_power_factor_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB).delete_node();

    uic_mqtt_dotdot_electrical_measurement_line_current_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_current_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_reactive_current_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_min_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_active_power_max_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_reactive_power_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_power_factor_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC).delete_node();

    uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC).delete_node();


    uic_mqtt_dotdot_electrical_measurement_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_electrical_measurement_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_diagnostics_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_diagnostics_number_of_resets_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS).delete_node();

    uic_mqtt_dotdot_diagnostics_persistent_memory_writes_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES).delete_node();

    uic_mqtt_dotdot_diagnostics_mac_rx_bcast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_mac_tx_bcast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_mac_rx_ucast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_mac_tx_ucast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY).delete_node();

    uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_rx_bcast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_tx_bcast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_rx_ucast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL).delete_node();

    uic_mqtt_dotdot_diagnostics_route_disc_initiated_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED).delete_node();

    uic_mqtt_dotdot_diagnostics_neighbor_added_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED).delete_node();

    uic_mqtt_dotdot_diagnostics_neighbor_removed_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED).delete_node();

    uic_mqtt_dotdot_diagnostics_neighbor_stale_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE).delete_node();

    uic_mqtt_dotdot_diagnostics_join_indication_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION).delete_node();

    uic_mqtt_dotdot_diagnostics_child_moved_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED).delete_node();

    uic_mqtt_dotdot_diagnostics_nwkfc_failure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE).delete_node();

    uic_mqtt_dotdot_diagnostics_apsfc_failure_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY).delete_node();

    uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES).delete_node();

    uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES).delete_node();

    uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES).delete_node();

    uic_mqtt_dotdot_diagnostics_relayed_ucast_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST).delete_node();

    uic_mqtt_dotdot_diagnostics_phy_to_mac_queue_limit_reached_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED).delete_node();

    uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT).delete_node();

    uic_mqtt_dotdot_diagnostics_average_mac_retry_per_aps_message_sent_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT).delete_node();

    uic_mqtt_dotdot_diagnostics_last_messagelqi_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI).delete_node();

    uic_mqtt_dotdot_diagnostics_last_messagerssi_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI).delete_node();


    uic_mqtt_dotdot_diagnostics_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_diagnostics_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_binding_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_binding_binding_table_full_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL).delete_node();

    uic_mqtt_dotdot_binding_bindable_cluster_list_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST).delete_node();

    uic_mqtt_dotdot_binding_binding_table_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE).delete_node();


    uic_mqtt_dotdot_binding_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_binding_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_name_and_location_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_name_and_location_name_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME).delete_node();

    uic_mqtt_dotdot_name_and_location_location_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION).delete_node();


    uic_mqtt_dotdot_name_and_location_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_name_and_location_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_configuration_parameters_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_configuration_parameters_configuration_parameters_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS).delete_node();


    uic_mqtt_dotdot_configuration_parameters_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_configuration_parameters_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_descriptor_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_descriptor_device_type_list_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST).delete_node();


    uic_mqtt_dotdot_descriptor_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_descriptor_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_unify_fan_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_unify_fan_control_z_wave_fan_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE).delete_node();

    uic_mqtt_dotdot_unify_fan_control_z_wave_supported_fan_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE).delete_node();

    uic_mqtt_dotdot_unify_fan_control_z_wave_fan_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE).delete_node();


    uic_mqtt_dotdot_unify_fan_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_unify_fan_control_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_unify_thermostat_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_unify_thermostat_thermostat_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE).delete_node();

    uic_mqtt_dotdot_unify_thermostat_supported_thermostat_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE).delete_node();

    uic_mqtt_dotdot_unify_thermostat_operating_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE).delete_node();


    uic_mqtt_dotdot_unify_thermostat_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_unify_thermostat_publish_empty_supported_commands(unid, endpoint_id);
}

void dotdot_unretain_unify_humidity_control_wrapper(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id){
    char base_topic[256];
    snprintf(base_topic, sizeof(base_topic), "ucl/by-unid/%s/ep%d", unid, endpoint_id);
    attribute_store::attribute ep_node = eed_attribute_store_get_endpoint_node(unid, endpoint_id);

    uic_mqtt_dotdot_unify_humidity_control_reporting_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_supported_reporting_mode_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_current_state_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_supported_set_points_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_scale_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_humidifier_setpoint_precision_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_scale_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_dehumidifier_setpoint_precision_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_min_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_max_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_scale_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE).delete_node();

    uic_mqtt_dotdot_unify_humidity_control_auto_setpoint_precision_unretain(base_topic,UCL_MQTT_PUBLISH_TYPE_ALL);
    ep_node.child_by_type(DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION).delete_node();


    uic_mqtt_dotdot_unify_humidity_control_unretain_cluster_revision(base_topic);
    uic_mqtt_dotdot_unify_humidity_control_publish_empty_supported_commands(unid, endpoint_id);
}


    void eed_dotdot_create_clusters(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id) {
        for (auto& pair : CreateClusterMap) {
            eed_cluster_attribute_wrapper eed_dotdot_create_attribute_wrapper = pair.second;
            // Call the dotdot create wrapper function
            eed_dotdot_create_attribute_wrapper(unid, endpoint_id);
        }
    }

    void eed_dotdot_create_cluster_by_name(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id, const char* cluster_name) {
        auto it = CreateClusterMap.find(cluster_name);
        if (it != CreateClusterMap.end() && it->second != nullptr) {
            it->second(unid, endpoint_id);
        }else {
            sl_log_error(LOG_TAG, "Provided Cluster name is not valid :%s", cluster_name);
        }
    }

    void eed_dotdot_unretain_cluster_by_name(const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id, const char* cluster_name) {
        auto it = CreateUnretainMap.find(cluster_name);
        if (it != CreateUnretainMap.end() && it->second != nullptr) {
            it->second(unid, endpoint_id);
        }else {
            sl_log_error(LOG_TAG, "Provided Cluster name is not valid :%s", cluster_name);
        }
    }
}

// Map for ClusterIdWrapperPair instances
std::map<std::string, eed_cluster_attribute_wrapper> CreateClusterMap = {
{ "Basic", dotdot_create_basic_wrapper },
{ "PowerConfiguration", dotdot_create_power_configuration_wrapper },
{ "DeviceTemperatureConfiguration", dotdot_create_device_temperature_configuration_wrapper },
{ "Identify", dotdot_create_identify_wrapper },
{ "Groups", dotdot_create_groups_wrapper },
{ "Scenes", dotdot_create_scenes_wrapper },
{ "OnOff", dotdot_create_on_off_wrapper },
{ "Level", dotdot_create_level_wrapper },
{ "Alarms", dotdot_create_alarms_wrapper },
{ "Time", dotdot_create_time_wrapper },
{ "PollControl", dotdot_create_poll_control_wrapper },
{ "ShadeConfiguration", dotdot_create_shade_configuration_wrapper },
{ "DoorLock", dotdot_create_door_lock_wrapper },
{ "WindowCovering", dotdot_create_window_covering_wrapper },
{ "BarrierControl", dotdot_create_barrier_control_wrapper },
{ "PumpConfigurationAndControl", dotdot_create_pump_configuration_and_control_wrapper },
{ "Thermostat", dotdot_create_thermostat_wrapper },
{ "FanControl", dotdot_create_fan_control_wrapper },
{ "DehumidificationControl", dotdot_create_dehumidification_control_wrapper },
{ "ThermostatUserInterfaceConfiguration", dotdot_create_thermostat_user_interface_configuration_wrapper },
{ "ColorControl", dotdot_create_color_control_wrapper },
{ "BallastConfiguration", dotdot_create_ballast_configuration_wrapper },
{ "IlluminanceMeasurement", dotdot_create_illuminance_measurement_wrapper },
{ "IlluminanceLevelSensing", dotdot_create_illuminance_level_sensing_wrapper },
{ "TemperatureMeasurement", dotdot_create_temperature_measurement_wrapper },
{ "PressureMeasurement", dotdot_create_pressure_measurement_wrapper },
{ "FlowMeasurement", dotdot_create_flow_measurement_wrapper },
{ "RelativityHumidity", dotdot_create_relativity_humidity_wrapper },
{ "OccupancySensing", dotdot_create_occupancy_sensing_wrapper },
{ "SoilMoisture", dotdot_create_soil_moisture_wrapper },
{ "PhMeasurement", dotdot_create_ph_measurement_wrapper },
{ "ElectricalConductivityMeasurement", dotdot_create_electrical_conductivity_measurement_wrapper },
{ "WindSpeedMeasurement", dotdot_create_wind_speed_measurement_wrapper },
{ "CarbonMonoxide", dotdot_create_carbon_monoxide_wrapper },
{ "CarbonDioxide", dotdot_create_carbon_dioxide_wrapper },
{ "PM25", dotdot_create_pm25_wrapper },
{ "IASZone", dotdot_create_ias_zone_wrapper },
{ "IASWD", dotdot_create_iaswd_wrapper },
{ "Metering", dotdot_create_metering_wrapper },
{ "ElectricalMeasurement", dotdot_create_electrical_measurement_wrapper },
{ "Diagnostics", dotdot_create_diagnostics_wrapper },
{ "Binding", dotdot_create_binding_wrapper },
{ "NameAndLocation", dotdot_create_name_and_location_wrapper },
{ "ConfigurationParameters", dotdot_create_configuration_parameters_wrapper },
{ "Descriptor", dotdot_create_descriptor_wrapper },
{ "UnifyFanControl", dotdot_create_unify_fan_control_wrapper },
{ "UnifyThermostat", dotdot_create_unify_thermostat_wrapper },
{ "UnifyHumidityControl", dotdot_create_unify_humidity_control_wrapper },
};

std::map<std::string, eed_cluster_attribute_wrapper> CreateUnretainMap = {
{ "Basic", dotdot_unretain_basic_wrapper },
{ "PowerConfiguration", dotdot_unretain_power_configuration_wrapper },
{ "DeviceTemperatureConfiguration", dotdot_unretain_device_temperature_configuration_wrapper },
{ "Identify", dotdot_unretain_identify_wrapper },
{ "Groups", dotdot_unretain_groups_wrapper },
{ "Scenes", dotdot_unretain_scenes_wrapper },
{ "OnOff", dotdot_unretain_on_off_wrapper },
{ "Level", dotdot_unretain_level_wrapper },
{ "Alarms", dotdot_unretain_alarms_wrapper },
{ "Time", dotdot_unretain_time_wrapper },
{ "PollControl", dotdot_unretain_poll_control_wrapper },
{ "ShadeConfiguration", dotdot_unretain_shade_configuration_wrapper },
{ "DoorLock", dotdot_unretain_door_lock_wrapper },
{ "WindowCovering", dotdot_unretain_window_covering_wrapper },
{ "BarrierControl", dotdot_unretain_barrier_control_wrapper },
{ "PumpConfigurationAndControl", dotdot_unretain_pump_configuration_and_control_wrapper },
{ "Thermostat", dotdot_unretain_thermostat_wrapper },
{ "FanControl", dotdot_unretain_fan_control_wrapper },
{ "DehumidificationControl", dotdot_unretain_dehumidification_control_wrapper },
{ "ThermostatUserInterfaceConfiguration", dotdot_unretain_thermostat_user_interface_configuration_wrapper },
{ "ColorControl", dotdot_unretain_color_control_wrapper },
{ "BallastConfiguration", dotdot_unretain_ballast_configuration_wrapper },
{ "IlluminanceMeasurement", dotdot_unretain_illuminance_measurement_wrapper },
{ "IlluminanceLevelSensing", dotdot_unretain_illuminance_level_sensing_wrapper },
{ "TemperatureMeasurement", dotdot_unretain_temperature_measurement_wrapper },
{ "PressureMeasurement", dotdot_unretain_pressure_measurement_wrapper },
{ "FlowMeasurement", dotdot_unretain_flow_measurement_wrapper },
{ "RelativityHumidity", dotdot_unretain_relativity_humidity_wrapper },
{ "OccupancySensing", dotdot_unretain_occupancy_sensing_wrapper },
{ "SoilMoisture", dotdot_unretain_soil_moisture_wrapper },
{ "PhMeasurement", dotdot_unretain_ph_measurement_wrapper },
{ "ElectricalConductivityMeasurement", dotdot_unretain_electrical_conductivity_measurement_wrapper },
{ "WindSpeedMeasurement", dotdot_unretain_wind_speed_measurement_wrapper },
{ "CarbonMonoxide", dotdot_unretain_carbon_monoxide_wrapper },
{ "CarbonDioxide", dotdot_unretain_carbon_dioxide_wrapper },
{ "PM25", dotdot_unretain_pm25_wrapper },
{ "IASZone", dotdot_unretain_ias_zone_wrapper },
{ "IASWD", dotdot_unretain_iaswd_wrapper },
{ "Metering", dotdot_unretain_metering_wrapper },
{ "ElectricalMeasurement", dotdot_unretain_electrical_measurement_wrapper },
{ "Diagnostics", dotdot_unretain_diagnostics_wrapper },
{ "Binding", dotdot_unretain_binding_wrapper },
{ "NameAndLocation", dotdot_unretain_name_and_location_wrapper },
{ "ConfigurationParameters", dotdot_unretain_configuration_parameters_wrapper },
{ "Descriptor", dotdot_unretain_descriptor_wrapper },
{ "UnifyFanControl", dotdot_unretain_unify_fan_control_wrapper },
{ "UnifyThermostat", dotdot_unretain_unify_thermostat_wrapper },
{ "UnifyHumidityControl", dotdot_unretain_unify_humidity_control_wrapper },
};