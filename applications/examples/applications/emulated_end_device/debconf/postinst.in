#!/bin/sh -e
# postinst script for Unify
#
# see: dh_installdeb(1)

. /usr/share/debconf/confmodule

UIC_VAR_DIR="${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic"

UIC_CONFDIR=${CPACK_PACKAGING_INSTALL_PREFIX}/etc/uic
UIC_CONFFILE=$UIC_CONFDIR/uic.cfg

setup_uic_user() {
        if ! getent group uic >/dev/null; then
                addgroup --quiet --system uic
        fi

        if ! getent group leds >/dev/null; then
                addgroup --quiet --system leds
        fi

        if ! getent passwd uic >/dev/null; then
                adduser --quiet --system --no-create-home --ingroup uic --home "$UIC_VAR_DIR" --shell /usr/sbin/nologin uic
                usermod -a -G dialout uic
        fi

        # We need to do this separately in case the user was created by one of the other
        # Unify packages.
        if ! getent group leds | grep uic > /dev/null; then
                usermod -a -G leds uic
        fi
}

fix_permissions() {
        mkdir -p $UIC_VAR_DIR
        chown uic $UIC_VAR_DIR
}

handle_conf() {
    if ! grep -q "eed:" $UIC_CONFFILE
    then
      mkdir -p $UIC_CONFDIR
      echo "eed:" >>  $UIC_CONFFILE
      echo "  datastore_file: ${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic/eed.db" >> $UIC_CONFFILE
      echo "  device_type: " >> $UIC_CONFFILE
    fi

    db_get uic-eed/device_type
    TYPE="$RET"

    db_get uic-eed/datastore_file
    DSTORE="$RET"
    if [ "$RET" = "" ]; then
    	DSTORE="${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic/eed.db"
    fi
    # On reconfiguration, old database data is become stale so delete it
    if [ -e $DSTORE ]; then
      echo "Purging old EED database "
      rm -f $DSTORE
    fi

    # Update configuration file with outcome of configuration
    # This is a small state machine that can update the Unify config file, which is written in YAML
    state=""

    while IFS= read line #Read IFS https://en.wikipedia.org/wiki/Input_Field_Separators
    do
      # Set the state depending on the line read from the config file
      case "$line" in
        "eed:" )   # State: eed
          state="eed"
          ;;
        " "* | "-"* )   # Lines starting with '-' or ' ' don't trigger state change.
          # Do nothing.
          ;;
        *) state="" ;;    # Set state to empty, Any unknown text, that doesn't begin with '-' or ' '
      esac
      leftside=$(echo "$line" | cut -f1 -d":")
      # STM to update entries under 'eed:'
      case $state in
        "eed" )
          case "$line" in
          "eed:" )
            echo "$line" ;;                   # eed should not be indented
          *"device_type:"*)
            echo "$leftside: $TYPE" ;;
          *"datastore_file:"*)
            echo "$leftside: $DSTORE" ;;
          *)
            echo "$line" ;;                 # Anything inside eed we indent
          esac ;;
        *)
          echo "$line" ;;                     # Anything else we just echo the line
                          # Without IFS= , echo here would remove the leading spaces and ruin the yaml formatting
      esac
    done < "$UIC_CONFFILE" > "$UIC_CONFFILE.tmp"
    mv "$UIC_CONFFILE.tmp" "$UIC_CONFFILE"

    echo "==="
    echo "$UIC_CONFFILE new contents:"
    echo "==="
    cat "$UIC_CONFFILE"
    echo "==="

}

case "$1" in
        configure)
                handle_conf
                setup_uic_user
                fix_permissions
        ;;

        abort-upgrade|abort-remove|abort-deconfigure)
        ;;

        *)
                echo "postinst called with unknown argument \`$1'" >&2
                exit 1
        ;;
esac

# Reload AppArmor profile
APP_PROFILE="/etc/apparmor.d/usr.sbin.uic"
if [ -f "$APP_PROFILE" ] && aa-status --enabled 2>/dev/null; then
       apparmor_parser -r "$APP_PROFILE" || true
fi

#DEBHELPER#

exit 0
