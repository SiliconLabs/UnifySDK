/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

#include <string>

// Unify shared components
#include "sl_log.h"
#include "dotdot_mqtt.h"
#include "dotdot_mqtt_generated_commands.h"

// ZigPC components
#include "zigpc_common_zigbee.h"
#include "zigpc_ucl.hpp"
#include "zcl_command_parser.h"

// Component includes
#include "zigpc_command_mapper_int.h"

static constexpr char LOG_TAG[] = "zigpc_cmdmapper";

static void zigpc_command_mapper_publish_identify_identify_query_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_identify_command_identify_query_response_fields_t fields = {
    (uint16_t) data->identify_identify_query_response.timeout
  };

  uic_mqtt_dotdot_identify_publish_generated_identify_query_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_groups_add_group_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_groups_command_add_group_response_fields_t fields = {
    (uint8_t) data->groups_add_group_response.status,
    (uint16_t) data->groups_add_group_response.group_id
  };

  uic_mqtt_dotdot_groups_publish_generated_add_group_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_groups_view_group_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_groups_command_view_group_response_fields_t fields = {
    (uint8_t) data->groups_view_group_response.status,
    (uint16_t) data->groups_view_group_response.group_id,
    (const char*) data->groups_view_group_response.group_name
  };

  uic_mqtt_dotdot_groups_publish_generated_view_group_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_groups_get_group_membership_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_groups_command_get_group_membership_response_fields_t fields = {
    (uint8_t) data->groups_get_group_membership_response.capacity,
    (uint8_t) data->groups_get_group_membership_response.group_list_count,
    (uint16_t *) data->groups_get_group_membership_response.group_list
  };

  uic_mqtt_dotdot_groups_publish_generated_get_group_membership_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_groups_remove_group_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_groups_command_remove_group_response_fields_t fields = {
    (uint8_t) data->groups_remove_group_response.status,
    (uint16_t) data->groups_remove_group_response.group_id
  };

  uic_mqtt_dotdot_groups_publish_generated_remove_group_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_poll_control_check_in_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_poll_control_command_check_in_response_fields_t fields = {
    (bool) data->poll_control_check_in_response.start_fast_polling,
    (uint16_t) data->poll_control_check_in_response.fast_poll_timeout
  };

  uic_mqtt_dotdot_poll_control_publish_generated_check_in_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_poll_control_fast_poll_stop(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));


  uic_mqtt_dotdot_poll_control_publish_generated_fast_poll_stop_command(
    unid.c_str(),
    endpoint_id
  );
}

static void zigpc_command_mapper_publish_poll_control_set_long_poll_interval(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_poll_control_command_set_long_poll_interval_fields_t fields = {
    (uint32_t) data->poll_control_set_long_poll_interval.new_long_poll_interval
  };

  uic_mqtt_dotdot_poll_control_publish_generated_set_long_poll_interval_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_poll_control_set_short_poll_interval(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_poll_control_command_set_short_poll_interval_fields_t fields = {
    (uint16_t) data->poll_control_set_short_poll_interval.new_short_poll_interval
  };

  uic_mqtt_dotdot_poll_control_publish_generated_set_short_poll_interval_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_lock_door_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_lock_door_response_fields_t fields = {
    (zclStatus) data->door_lock_lock_door_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_lock_door_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_unlock_door_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_unlock_door_response_fields_t fields = {
    (zclStatus) data->door_lock_unlock_door_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_unlock_door_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_toggle_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_toggle_response_fields_t fields = {
    (zclStatus) data->door_lock_toggle_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_toggle_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_unlock_with_timeout_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_response_fields_t fields = {
    (zclStatus) data->door_lock_unlock_with_timeout_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_unlock_with_timeout_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_get_log_record_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_log_record_response_fields_t fields = {
    (uint16_t) data->door_lock_get_log_record_response.log_entryid,
    (uint32_t) data->door_lock_get_log_record_response.timestamp,
    (GetLogRecordResponseEventType) data->door_lock_get_log_record_response.event_type,
    (DrlkOperEventSource) data->door_lock_get_log_record_response.source_operation_event,
    (uint8_t) data->door_lock_get_log_record_response.eventid_or_alarm_code,
    (uint16_t) data->door_lock_get_log_record_response.userid,
    (const char*) data->door_lock_get_log_record_response.pin
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_log_record_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_setpin_code_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_setpin_code_response_fields_t fields = {
    (DrlkSetCodeStatus) data->door_lock_setpin_code_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_setpin_code_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_getpin_code_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_pin_code_response_fields_t fields = {
    (uint16_t) data->door_lock_getpin_code_response.userid,
    (DrlkUserStatus) data->door_lock_getpin_code_response.user_status,
    (DrlkUserType) data->door_lock_getpin_code_response.user_type,
    (const char*) data->door_lock_getpin_code_response.code
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_pin_code_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clearpin_code_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clearpin_code_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clearpin_code_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clearpin_code_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clear_allpin_codes_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clear_allpin_codes_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clear_allpin_codes_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clear_allpin_codes_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_set_user_status_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_set_user_status_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_set_user_status_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_set_user_status_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_get_user_status_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_user_status_response_fields_t fields = {
    (uint16_t) data->door_lock_get_user_status_response.userid,
    (DrlkUserStatus) data->door_lock_get_user_status_response.user_status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_user_status_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_set_weekday_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_set_weekday_schedule_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_set_weekday_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_get_weekday_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_response_fields_t fields = {
    (uint8_t) data->door_lock_get_weekday_schedule_response.scheduleid,
    (uint16_t) data->door_lock_get_weekday_schedule_response.userid,
    (zclStatus) data->door_lock_get_weekday_schedule_response.status,
    (uint8_t) data->door_lock_get_weekday_schedule_response.days_mask,
    (uint8_t) data->door_lock_get_weekday_schedule_response.start_hour,
    (uint8_t) data->door_lock_get_weekday_schedule_response.start_minute,
    (uint8_t) data->door_lock_get_weekday_schedule_response.end_hour,
    (uint8_t) data->door_lock_get_weekday_schedule_response.end_minute
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_weekday_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clear_weekday_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clear_weekday_schedule_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clear_weekday_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_set_year_day_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_set_year_day_schedule_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_set_year_day_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_get_year_day_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_response_fields_t fields = {
    (uint8_t) data->door_lock_get_year_day_schedule_response.scheduleid,
    (uint16_t) data->door_lock_get_year_day_schedule_response.userid,
    (zclStatus) data->door_lock_get_year_day_schedule_response.status,
    (uint32_t) data->door_lock_get_year_day_schedule_response.local_start_time,
    (uint32_t) data->door_lock_get_year_day_schedule_response.local_end_time
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_year_day_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clear_year_day_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clear_year_day_schedule_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clear_year_day_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_set_holiday_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_set_holiday_schedule_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_set_holiday_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_get_holiday_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_response_fields_t fields = {
    (uint8_t) data->door_lock_get_holiday_schedule_response.holiday_scheduleid,
    (zclStatus) data->door_lock_get_holiday_schedule_response.status,
    (uint32_t) data->door_lock_get_holiday_schedule_response.local_start_time,
    (uint32_t) data->door_lock_get_holiday_schedule_response.local_end_time,
    (DrlkOperMode) data->door_lock_get_holiday_schedule_response.operating_mode_during_holiday
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_holiday_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clear_holiday_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clear_holiday_schedule_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clear_holiday_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_set_user_type_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_set_user_type_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_set_user_type_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_set_user_type_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_get_user_type_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_get_user_type_response_fields_t fields = {
    (uint16_t) data->door_lock_get_user_type_response.userid,
    (DrlkUserType) data->door_lock_get_user_type_response.user_type
  };

  uic_mqtt_dotdot_door_lock_publish_generated_get_user_type_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_setrfid_code_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_setrfid_code_response_fields_t fields = {
    (DrlkSetCodeStatus) data->door_lock_setrfid_code_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_setrfid_code_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_getrfid_code_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_getrfid_code_response_fields_t fields = {
    (uint16_t) data->door_lock_getrfid_code_response.userid,
    (DrlkUserStatus) data->door_lock_getrfid_code_response.user_status,
    (DrlkUserType) data->door_lock_getrfid_code_response.user_type,
    (const char*) data->door_lock_getrfid_code_response.rfid_code
  };

  uic_mqtt_dotdot_door_lock_publish_generated_getrfid_code_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clearrfid_code_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clearrfid_code_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clearrfid_code_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clearrfid_code_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_clear_allrfid_codes_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_clear_allrfid_codes_response_fields_t fields = {
    (DrlkPassFailStatus) data->door_lock_clear_allrfid_codes_response.status
  };

  uic_mqtt_dotdot_door_lock_publish_generated_clear_allrfid_codes_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_operating_event_notification(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_operating_event_notification_fields_t fields = {
    (DrlkOperEventSource) data->door_lock_operating_event_notification.operation_event_source,
    (OperatingEventNotificationOperationEventCode) data->door_lock_operating_event_notification.operation_event_code,
    (uint16_t) data->door_lock_operating_event_notification.userid,
    (const char*) data->door_lock_operating_event_notification.pin,
    (uint32_t) data->door_lock_operating_event_notification.local_time,
    (const char*) data->door_lock_operating_event_notification.data
  };

  uic_mqtt_dotdot_door_lock_publish_generated_operating_event_notification_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_door_lock_programming_event_notification(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_door_lock_command_programming_event_notification_fields_t fields = {
    (ProgrammingEventNotificationProgramEventSource) data->door_lock_programming_event_notification.program_event_source,
    (ProgrammingEventNotificationProgramEventCode) data->door_lock_programming_event_notification.program_event_code,
    (uint16_t) data->door_lock_programming_event_notification.userid,
    (const char*) data->door_lock_programming_event_notification.pin,
    (DrlkUserType) data->door_lock_programming_event_notification.user_type,
    (DrlkUserStatus) data->door_lock_programming_event_notification.user_status,
    (uint32_t) data->door_lock_programming_event_notification.local_time,
    (const char*) data->door_lock_programming_event_notification.data
  };

  uic_mqtt_dotdot_door_lock_publish_generated_programming_event_notification_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_thermostat_get_weekly_schedule_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_response_fields_t fields = {
    (uint8_t) data->thermostat_get_weekly_schedule_response.number_of_transitions,
    (uint8_t) data->thermostat_get_weekly_schedule_response.day_of_week,
    (uint8_t) data->thermostat_get_weekly_schedule_response.mode,
    (uint8_t) data->thermostat_get_weekly_schedule_response.transitions_count,
    (TransitionType *) data->thermostat_get_weekly_schedule_response.transitions
  };

  uic_mqtt_dotdot_thermostat_publish_generated_get_weekly_schedule_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_thermostat_get_relay_status_log_response(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_thermostat_command_get_relay_status_log_response_fields_t fields = {
    (uint16_t) data->thermostat_get_relay_status_log_response.time_of_day,
    (uint8_t) data->thermostat_get_relay_status_log_response.relay_status,
    (int16_t) data->thermostat_get_relay_status_log_response.local_temperature,
    (uint8_t) data->thermostat_get_relay_status_log_response.humidity_percentage,
    (int16_t) data->thermostat_get_relay_status_log_response.set_point,
    (uint16_t) data->thermostat_get_relay_status_log_response.unread_entries
  };

  uic_mqtt_dotdot_thermostat_publish_generated_get_relay_status_log_response_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_ias_zone_zone_status_change_notification(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_ias_zone_command_zone_status_change_notification_fields_t fields = {
    (uint16_t) data->ias_zone_zone_status_change_notification.zone_status,
    (uint8_t) data->ias_zone_zone_status_change_notification.extended_status,
    (uint8_t) data->ias_zone_zone_status_change_notification.zoneid,
    (uint16_t) data->ias_zone_zone_status_change_notification.delay
  };

  uic_mqtt_dotdot_ias_zone_publish_generated_zone_status_change_notification_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}

static void zigpc_command_mapper_publish_ias_zone_zone_enroll_request(
  const zigbee_eui64_t eui64,
  const zigbee_endpoint_id_t endpoint_id,
  const zigpc_zclcmdparse_callback_data_t *data
) {
  std::string unid(zigpc_ucl::mqtt::build_unid(zigbee_eui64_to_uint(eui64)));

  uic_mqtt_dotdot_ias_zone_command_zone_enroll_request_fields_t fields = {
    (IasZoneType) data->ias_zone_zone_enroll_request.zone_type,
    (uint16_t) data->ias_zone_zone_enroll_request.manufacturer_code
  };

  uic_mqtt_dotdot_ias_zone_publish_generated_zone_enroll_request_command(
    unid.c_str(),
    endpoint_id,
    &fields
  );
}


static constexpr char CMDPARSE_REGISTER_ERR_FMT_STR[] = "Failed to listen to %s/%s cmd parsing: 0x%X";

sl_status_t zigpc_command_mapper_setup_gen_cmd_publish_listeners(void) {
    sl_status_t status = SL_STATUS_OK;

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_IDENTIFY,
    ZIGPC_ZCL_CLUSTER_IDENTIFY_COMMAND_IDENTIFY_QUERY_RESPONSE,
    zigpc_command_mapper_publish_identify_identify_query_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Identify","IdentifyQueryResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_ADD_GROUP_RESPONSE,
    zigpc_command_mapper_publish_groups_add_group_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Groups","AddGroupResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_VIEW_GROUP_RESPONSE,
    zigpc_command_mapper_publish_groups_view_group_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Groups","ViewGroupResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_GET_GROUP_MEMBERSHIP_RESPONSE,
    zigpc_command_mapper_publish_groups_get_group_membership_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Groups","GetGroupMembershipResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_REMOVE_GROUP_RESPONSE,
    zigpc_command_mapper_publish_groups_remove_group_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Groups","RemoveGroupResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_CHECK_IN_RESPONSE,
    zigpc_command_mapper_publish_poll_control_check_in_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"PollControl","CheckInResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_FAST_POLL_STOP,
    zigpc_command_mapper_publish_poll_control_fast_poll_stop
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"PollControl","FastPollStop", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_SET_LONG_POLL_INTERVAL,
    zigpc_command_mapper_publish_poll_control_set_long_poll_interval
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"PollControl","SetLongPollInterval", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_SET_SHORT_POLL_INTERVAL,
    zigpc_command_mapper_publish_poll_control_set_short_poll_interval
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"PollControl","SetShortPollInterval", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_LOCK_DOOR_RESPONSE,
    zigpc_command_mapper_publish_door_lock_lock_door_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","LockDoorResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_DOOR_RESPONSE,
    zigpc_command_mapper_publish_door_lock_unlock_door_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","UnlockDoorResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_TOGGLE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_toggle_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ToggleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_WITH_TIMEOUT_RESPONSE,
    zigpc_command_mapper_publish_door_lock_unlock_with_timeout_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","UnlockWithTimeoutResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_LOG_RECORD_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_log_record_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetLogRecordResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SETPIN_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_setpin_code_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetPINCodeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GETPIN_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_getpin_code_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetPINCodeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEARPIN_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clearpin_code_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearPINCodeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALLPIN_CODES_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_allpin_codes_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearAllPINCodesResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_STATUS_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_user_status_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetUserStatusResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_STATUS_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_user_status_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetUserStatusResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_WEEKDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_weekday_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetWeekdayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_WEEKDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_weekday_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetWeekdayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_WEEKDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_weekday_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearWeekdayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_YEAR_DAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_year_day_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetYearDayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_YEAR_DAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_year_day_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetYearDayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_YEAR_DAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_year_day_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearYearDayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_HOLIDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_holiday_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetHolidayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_HOLIDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_holiday_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetHolidayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_HOLIDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_holiday_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearHolidayScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_TYPE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_user_type_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetUserTypeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_TYPE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_user_type_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetUserTypeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SETRFID_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_setrfid_code_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","SetRFIDCodeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GETRFID_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_getrfid_code_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","GetRFIDCodeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEARRFID_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clearrfid_code_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearRFIDCodeResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALLRFID_CODES_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_allrfid_codes_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ClearAllRFIDCodesResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_OPERATING_EVENT_NOTIFICATION,
    zigpc_command_mapper_publish_door_lock_operating_event_notification
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","OperatingEventNotification", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_PROGRAMMING_EVENT_NOTIFICATION,
    zigpc_command_mapper_publish_door_lock_programming_event_notification
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"DoorLock","ProgrammingEventNotification", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_THERMOSTAT,
    ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_WEEKLY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_thermostat_get_weekly_schedule_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Thermostat","GetWeeklyScheduleResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_THERMOSTAT,
    ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_RELAY_STATUS_LOG_RESPONSE,
    zigpc_command_mapper_publish_thermostat_get_relay_status_log_response
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"Thermostat","GetRelayStatusLogResponse", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_IAS_ZONE,
    ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_STATUS_CHANGE_NOTIFICATION,
    zigpc_command_mapper_publish_ias_zone_zone_status_change_notification
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"IASZone","ZoneStatusChangeNotification", status);
    return status;
  }

  status = zigpc_zclcmdparse_register_callback(
    ZIGPC_ZCL_CLUSTER_IAS_ZONE,
    ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_ENROLL_REQUEST,
    zigpc_command_mapper_publish_ias_zone_zone_enroll_request
  );
  if (status != SL_STATUS_OK) {
    sl_log_error(LOG_TAG, CMDPARSE_REGISTER_ERR_FMT_STR,"IASZone","ZoneEnrollRequest", status);
    return status;
  }

  return status;
}


void zigpc_command_mapper_cleanup_gen_cmd_publish_listeners(void) {

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_IDENTIFY,
    ZIGPC_ZCL_CLUSTER_IDENTIFY_COMMAND_IDENTIFY_QUERY_RESPONSE,
    zigpc_command_mapper_publish_identify_identify_query_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_ADD_GROUP_RESPONSE,
    zigpc_command_mapper_publish_groups_add_group_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_VIEW_GROUP_RESPONSE,
    zigpc_command_mapper_publish_groups_view_group_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_GET_GROUP_MEMBERSHIP_RESPONSE,
    zigpc_command_mapper_publish_groups_get_group_membership_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_GROUPS,
    ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_REMOVE_GROUP_RESPONSE,
    zigpc_command_mapper_publish_groups_remove_group_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_CHECK_IN_RESPONSE,
    zigpc_command_mapper_publish_poll_control_check_in_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_FAST_POLL_STOP,
    zigpc_command_mapper_publish_poll_control_fast_poll_stop
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_SET_LONG_POLL_INTERVAL,
    zigpc_command_mapper_publish_poll_control_set_long_poll_interval
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL,
    ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_SET_SHORT_POLL_INTERVAL,
    zigpc_command_mapper_publish_poll_control_set_short_poll_interval
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_LOCK_DOOR_RESPONSE,
    zigpc_command_mapper_publish_door_lock_lock_door_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_DOOR_RESPONSE,
    zigpc_command_mapper_publish_door_lock_unlock_door_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_TOGGLE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_toggle_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_WITH_TIMEOUT_RESPONSE,
    zigpc_command_mapper_publish_door_lock_unlock_with_timeout_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_LOG_RECORD_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_log_record_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SETPIN_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_setpin_code_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GETPIN_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_getpin_code_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEARPIN_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clearpin_code_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALLPIN_CODES_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_allpin_codes_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_STATUS_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_user_status_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_STATUS_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_user_status_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_WEEKDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_weekday_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_WEEKDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_weekday_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_WEEKDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_weekday_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_YEAR_DAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_year_day_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_YEAR_DAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_year_day_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_YEAR_DAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_year_day_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_HOLIDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_holiday_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_HOLIDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_holiday_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_HOLIDAY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_holiday_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_TYPE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_set_user_type_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_TYPE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_get_user_type_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SETRFID_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_setrfid_code_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GETRFID_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_getrfid_code_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEARRFID_CODE_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clearrfid_code_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALLRFID_CODES_RESPONSE,
    zigpc_command_mapper_publish_door_lock_clear_allrfid_codes_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_OPERATING_EVENT_NOTIFICATION,
    zigpc_command_mapper_publish_door_lock_operating_event_notification
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK,
    ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_PROGRAMMING_EVENT_NOTIFICATION,
    zigpc_command_mapper_publish_door_lock_programming_event_notification
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_THERMOSTAT,
    ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_WEEKLY_SCHEDULE_RESPONSE,
    zigpc_command_mapper_publish_thermostat_get_weekly_schedule_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_THERMOSTAT,
    ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_RELAY_STATUS_LOG_RESPONSE,
    zigpc_command_mapper_publish_thermostat_get_relay_status_log_response
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_IAS_ZONE,
    ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_STATUS_CHANGE_NOTIFICATION,
    zigpc_command_mapper_publish_ias_zone_zone_status_change_notification
  );

  zigpc_zclcmdparse_remove_callback(
    ZIGPC_ZCL_CLUSTER_IAS_ZONE,
    ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_ENROLL_REQUEST,
    zigpc_command_mapper_publish_ias_zone_zone_enroll_request
  );
}

