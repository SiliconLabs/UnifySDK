/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.




/**
 * @defgroup zigpc_zclcmdparse ZigPC ZCL Command Parser
 * @ingroup zigpc_components
 * @brief Listen to ZCL command messages received by Protocol Controller from
 * its PAN nodes.
 *
 * This component allows other components to listen to ZCL cluster command
 * specific messages sent by PAN nodes to the Protocol Controller. This is
 * done by using ZAP to generate the supported cluster and command handlers.
 * If a callback is registered to a particular cluster/command combination
 * the registered callback will be called with the associated command data.
 *
 * @startuml
   hide footbox
   participant "Listener Component" as LC
   participant "ZigPC ZCL Command Parser" as CP
   participant "ZigPC Gateway" as GT

   === Initialization ==
   CP -> GT : Setup notifications for incoming Commands from PAN nodes
   ...
   LC -> CP: Register to receive Groups/AddGroupResponse command events
   ... Time goes by ...

   === ZCL Groups/AddGroupResponse Command Received from PAN node ==
   GT -> CP : Send Command data
   CP -> CP : Check cluster support
   alt Groups cluster not supported
   	 CP -> GT: Send back ZCL_CLUSTER_NOT_SUPPORTED status
   else Groups cluster parsing supported by component
   	 CP -> CP : Check Groups/AddGroupResponse support
     alt Groups/AddGroupResponse not supported
       CP -> GT: Send back ZCL_CLUSTER_COMMAND_NOT_SUPPORTED status
     else Groups/AddGroupResponse parsing supported by component
     	 CP -> CP: Parse payload for Groups/AddGroupResponse
     	 CP -> CP: Find registered callbacks for Groups/AddGroupResponse
         loop Groups/AddGroupResponse registered callbacks
           CP -> LC: Invoke callback with Groups/AddGroupResponse data
         end loop
      	 CP -> GT: Send back ZCL_STATUS_SUCCESS status
     end alt
   end alt
   @enduml
 *
 * @{
 */

#ifndef ZIGPC_ZCLCMDPARSE_H
#define ZIGPC_ZCLCMDPARSE_H

// Unify shared components
#include "sl_status.h"

#include "zigpc_common_zigbee.h"
#include "zcl_definitions.h"

#ifdef __cplusplus
extern "C" {
#endif


/**
 * @brief Data for Identify/IdentifyQueryResponse command.
 *
 */
typedef struct {
  uint16_t timeout; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_identify_identify_query_response_t;

/**
 * @brief Data for Groups/AddGroupResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type enum8 */
  uint16_t group_id; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_groups_add_group_response_t;

/**
 * @brief Data for Groups/ViewGroupResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type enum8 */
  uint16_t group_id; /**< Command argument of type uint16 */
  uint8_t group_name_length; /**< String length for GroupName */
  const char* group_name; /**< Command argument of type string */
} zigpc_zclcmdparse_groups_view_group_response_t;

/**
 * @brief Data for Groups/GetGroupMembershipResponse command.
 *
 */
typedef struct {
  uint8_t capacity; /**< Command argument of type uint8 */
  uint8_t group_list_count; /**< Count of elements for list of uint16 */
  uint16_t *group_list; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_groups_get_group_membership_response_t;

/**
 * @brief Data for Groups/RemoveGroupResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type enum8 */
  uint16_t group_id; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_groups_remove_group_response_t;

/**
 * @brief Data for PollControl/CheckInResponse command.
 *
 */
typedef struct {
  bool start_fast_polling; /**< Command argument of type bool */
  uint16_t fast_poll_timeout; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_poll_control_check_in_response_t;

/**
 * @brief Data for PollControl/FastPollStop command.
 *
 */
typedef struct {
} zigpc_zclcmdparse_poll_control_fast_poll_stop_t;

/**
 * @brief Data for PollControl/SetLongPollInterval command.
 *
 */
typedef struct {
  uint32_t new_long_poll_interval; /**< Command argument of type uint32 */
} zigpc_zclcmdparse_poll_control_set_long_poll_interval_t;

/**
 * @brief Data for PollControl/SetShortPollInterval command.
 *
 */
typedef struct {
  uint16_t new_short_poll_interval; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_poll_control_set_short_poll_interval_t;

/**
 * @brief Data for DoorLock/LockDoorResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type zclStatus */
} zigpc_zclcmdparse_door_lock_lock_door_response_t;

/**
 * @brief Data for DoorLock/UnlockDoorResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type zclStatus */
} zigpc_zclcmdparse_door_lock_unlock_door_response_t;

/**
 * @brief Data for DoorLock/ToggleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type zclStatus */
} zigpc_zclcmdparse_door_lock_toggle_response_t;

/**
 * @brief Data for DoorLock/UnlockWithTimeoutResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type zclStatus */
} zigpc_zclcmdparse_door_lock_unlock_with_timeout_response_t;

/**
 * @brief Data for DoorLock/GetLogRecordResponse command.
 *
 */
typedef struct {
  uint16_t log_entryid; /**< Command argument of type uint16 */
  uint32_t timestamp; /**< Command argument of type uint32 */
  uint8_t event_type; /**< Command argument of type GetLogRecordResponseEventType */
  uint8_t source_operation_event; /**< Command argument of type DrlkOperEventSource */
  uint8_t eventid_or_alarm_code; /**< Command argument of type uint8 */
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t pin_length; /**< String length for PIN */
  const char* pin; /**< Command argument of type octstr */
} zigpc_zclcmdparse_door_lock_get_log_record_response_t;

/**
 * @brief Data for DoorLock/SetPINCodeResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkSetCodeStatus */
} zigpc_zclcmdparse_door_lock_setpin_code_response_t;

/**
 * @brief Data for DoorLock/GetPINCodeResponse command.
 *
 */
typedef struct {
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t user_status; /**< Command argument of type DrlkUserStatus */
  uint8_t user_type; /**< Command argument of type DrlkUserType */
  uint8_t code_length; /**< String length for Code */
  const char* code; /**< Command argument of type octstr */
} zigpc_zclcmdparse_door_lock_getpin_code_response_t;

/**
 * @brief Data for DoorLock/ClearPINCodeResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clearpin_code_response_t;

/**
 * @brief Data for DoorLock/ClearAllPINCodesResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clear_allpin_codes_response_t;

/**
 * @brief Data for DoorLock/SetUserStatusResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_set_user_status_response_t;

/**
 * @brief Data for DoorLock/GetUserStatusResponse command.
 *
 */
typedef struct {
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t user_status; /**< Command argument of type DrlkUserStatus */
} zigpc_zclcmdparse_door_lock_get_user_status_response_t;

/**
 * @brief Data for DoorLock/SetWeekdayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_set_weekday_schedule_response_t;

/**
 * @brief Data for DoorLock/GetWeekdayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t scheduleid; /**< Command argument of type uint8 */
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t status; /**< Command argument of type zclStatus */
  uint8_t days_mask; /**< Command argument of type DrlkDaysMask */
  uint8_t start_hour; /**< Command argument of type uint8 */
  uint8_t start_minute; /**< Command argument of type uint8 */
  uint8_t end_hour; /**< Command argument of type uint8 */
  uint8_t end_minute; /**< Command argument of type uint8 */
} zigpc_zclcmdparse_door_lock_get_weekday_schedule_response_t;

/**
 * @brief Data for DoorLock/ClearWeekdayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clear_weekday_schedule_response_t;

/**
 * @brief Data for DoorLock/SetYearDayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_set_year_day_schedule_response_t;

/**
 * @brief Data for DoorLock/GetYearDayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t scheduleid; /**< Command argument of type uint8 */
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t status; /**< Command argument of type zclStatus */
  uint32_t local_start_time; /**< Command argument of type uint32 */
  uint32_t local_end_time; /**< Command argument of type uint32 */
} zigpc_zclcmdparse_door_lock_get_year_day_schedule_response_t;

/**
 * @brief Data for DoorLock/ClearYearDayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clear_year_day_schedule_response_t;

/**
 * @brief Data for DoorLock/SetHolidayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_set_holiday_schedule_response_t;

/**
 * @brief Data for DoorLock/GetHolidayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t holiday_scheduleid; /**< Command argument of type uint8 */
  uint8_t status; /**< Command argument of type zclStatus */
  uint32_t local_start_time; /**< Command argument of type uint32 */
  uint32_t local_end_time; /**< Command argument of type uint32 */
  uint8_t operating_mode_during_holiday; /**< Command argument of type DrlkOperMode */
} zigpc_zclcmdparse_door_lock_get_holiday_schedule_response_t;

/**
 * @brief Data for DoorLock/ClearHolidayScheduleResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clear_holiday_schedule_response_t;

/**
 * @brief Data for DoorLock/SetUserTypeResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_set_user_type_response_t;

/**
 * @brief Data for DoorLock/GetUserTypeResponse command.
 *
 */
typedef struct {
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t user_type; /**< Command argument of type DrlkUserType */
} zigpc_zclcmdparse_door_lock_get_user_type_response_t;

/**
 * @brief Data for DoorLock/SetRFIDCodeResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkSetCodeStatus */
} zigpc_zclcmdparse_door_lock_setrfid_code_response_t;

/**
 * @brief Data for DoorLock/GetRFIDCodeResponse command.
 *
 */
typedef struct {
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t user_status; /**< Command argument of type DrlkUserStatus */
  uint8_t user_type; /**< Command argument of type DrlkUserType */
  uint8_t rfid_code_length; /**< String length for RFIDCode */
  const char* rfid_code; /**< Command argument of type octstr */
} zigpc_zclcmdparse_door_lock_getrfid_code_response_t;

/**
 * @brief Data for DoorLock/ClearRFIDCodeResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clearrfid_code_response_t;

/**
 * @brief Data for DoorLock/ClearAllRFIDCodesResponse command.
 *
 */
typedef struct {
  uint8_t status; /**< Command argument of type DrlkPassFailStatus */
} zigpc_zclcmdparse_door_lock_clear_allrfid_codes_response_t;

/**
 * @brief Data for DoorLock/OperatingEventNotification command.
 *
 */
typedef struct {
  uint8_t operation_event_source; /**< Command argument of type DrlkOperEventSource */
  uint8_t operation_event_code; /**< Command argument of type OperatingEventNotificationOperationEventCode */
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t pin_length; /**< String length for PIN */
  const char* pin; /**< Command argument of type octstr */
  uint32_t local_time; /**< Command argument of type uint32 */
  uint8_t data_length; /**< String length for Data */
  const char* data; /**< Command argument of type string */
} zigpc_zclcmdparse_door_lock_operating_event_notification_t;

/**
 * @brief Data for DoorLock/ProgrammingEventNotification command.
 *
 */
typedef struct {
  uint8_t program_event_source; /**< Command argument of type ProgrammingEventNotificationProgramEventSource */
  uint8_t program_event_code; /**< Command argument of type ProgrammingEventNotificationProgramEventCode */
  uint16_t userid; /**< Command argument of type uint16 */
  uint8_t pin_length; /**< String length for PIN */
  const char* pin; /**< Command argument of type octstr */
  uint8_t user_type; /**< Command argument of type DrlkUserType */
  uint8_t user_status; /**< Command argument of type DrlkUserStatus */
  uint32_t local_time; /**< Command argument of type uint32 */
  uint8_t data_length; /**< String length for Data */
  const char* data; /**< Command argument of type string */
} zigpc_zclcmdparse_door_lock_programming_event_notification_t;

/**
 * @brief Data for Thermostat/GetWeeklyScheduleResponse command.
 *
 */
typedef struct {
  uint8_t number_of_transitions; /**< Command argument of type enum8 */
  uint8_t day_of_week; /**< Command argument of type TstatScheduleDOW */
  uint8_t mode; /**< Command argument of type TstatScheduleMode */
  uint8_t transitions_count; /**< Count of elements for list of TransitionType */
  zigpc_zcl_transition_type_t *transitions; /**< Command argument of type TransitionType */
} zigpc_zclcmdparse_thermostat_get_weekly_schedule_response_t;

/**
 * @brief Data for Thermostat/GetRelayStatusLogResponse command.
 *
 */
typedef struct {
  uint16_t time_of_day; /**< Command argument of type uint16 */
  uint8_t relay_status; /**< Command argument of type map8 */
  int16_t local_temperature; /**< Command argument of type int16 */
  uint8_t humidity_percentage; /**< Command argument of type uint8 */
  int16_t set_point; /**< Command argument of type int16 */
  uint16_t unread_entries; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_thermostat_get_relay_status_log_response_t;

/**
 * @brief Data for IASZone/ZoneStatusChangeNotification command.
 *
 */
typedef struct {
  uint16_t zone_status; /**< Command argument of type IasZoneStatus */
  uint8_t extended_status; /**< Command argument of type map8 */
  uint8_t zoneid; /**< Command argument of type uint8 */
  uint16_t delay; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_ias_zone_zone_status_change_notification_t;

/**
 * @brief Data for IASZone/ZoneEnrollRequest command.
 *
 */
typedef struct {
  uint16_t zone_type; /**< Command argument of type IasZoneType */
  uint16_t manufacturer_code; /**< Command argument of type uint16 */
} zigpc_zclcmdparse_ias_zone_zone_enroll_request_t;

/**
 * @brief Container for the different types of command data that can be
 * received.
 */
typedef union {
  zigpc_zclcmdparse_identify_identify_query_response_t identify_identify_query_response;
  zigpc_zclcmdparse_groups_add_group_response_t groups_add_group_response;
  zigpc_zclcmdparse_groups_view_group_response_t groups_view_group_response;
  zigpc_zclcmdparse_groups_get_group_membership_response_t groups_get_group_membership_response;
  zigpc_zclcmdparse_groups_remove_group_response_t groups_remove_group_response;
  zigpc_zclcmdparse_poll_control_check_in_response_t poll_control_check_in_response;
  zigpc_zclcmdparse_poll_control_fast_poll_stop_t poll_control_fast_poll_stop;
  zigpc_zclcmdparse_poll_control_set_long_poll_interval_t poll_control_set_long_poll_interval;
  zigpc_zclcmdparse_poll_control_set_short_poll_interval_t poll_control_set_short_poll_interval;
  zigpc_zclcmdparse_door_lock_lock_door_response_t door_lock_lock_door_response;
  zigpc_zclcmdparse_door_lock_unlock_door_response_t door_lock_unlock_door_response;
  zigpc_zclcmdparse_door_lock_toggle_response_t door_lock_toggle_response;
  zigpc_zclcmdparse_door_lock_unlock_with_timeout_response_t door_lock_unlock_with_timeout_response;
  zigpc_zclcmdparse_door_lock_get_log_record_response_t door_lock_get_log_record_response;
  zigpc_zclcmdparse_door_lock_setpin_code_response_t door_lock_setpin_code_response;
  zigpc_zclcmdparse_door_lock_getpin_code_response_t door_lock_getpin_code_response;
  zigpc_zclcmdparse_door_lock_clearpin_code_response_t door_lock_clearpin_code_response;
  zigpc_zclcmdparse_door_lock_clear_allpin_codes_response_t door_lock_clear_allpin_codes_response;
  zigpc_zclcmdparse_door_lock_set_user_status_response_t door_lock_set_user_status_response;
  zigpc_zclcmdparse_door_lock_get_user_status_response_t door_lock_get_user_status_response;
  zigpc_zclcmdparse_door_lock_set_weekday_schedule_response_t door_lock_set_weekday_schedule_response;
  zigpc_zclcmdparse_door_lock_get_weekday_schedule_response_t door_lock_get_weekday_schedule_response;
  zigpc_zclcmdparse_door_lock_clear_weekday_schedule_response_t door_lock_clear_weekday_schedule_response;
  zigpc_zclcmdparse_door_lock_set_year_day_schedule_response_t door_lock_set_year_day_schedule_response;
  zigpc_zclcmdparse_door_lock_get_year_day_schedule_response_t door_lock_get_year_day_schedule_response;
  zigpc_zclcmdparse_door_lock_clear_year_day_schedule_response_t door_lock_clear_year_day_schedule_response;
  zigpc_zclcmdparse_door_lock_set_holiday_schedule_response_t door_lock_set_holiday_schedule_response;
  zigpc_zclcmdparse_door_lock_get_holiday_schedule_response_t door_lock_get_holiday_schedule_response;
  zigpc_zclcmdparse_door_lock_clear_holiday_schedule_response_t door_lock_clear_holiday_schedule_response;
  zigpc_zclcmdparse_door_lock_set_user_type_response_t door_lock_set_user_type_response;
  zigpc_zclcmdparse_door_lock_get_user_type_response_t door_lock_get_user_type_response;
  zigpc_zclcmdparse_door_lock_setrfid_code_response_t door_lock_setrfid_code_response;
  zigpc_zclcmdparse_door_lock_getrfid_code_response_t door_lock_getrfid_code_response;
  zigpc_zclcmdparse_door_lock_clearrfid_code_response_t door_lock_clearrfid_code_response;
  zigpc_zclcmdparse_door_lock_clear_allrfid_codes_response_t door_lock_clear_allrfid_codes_response;
  zigpc_zclcmdparse_door_lock_operating_event_notification_t door_lock_operating_event_notification;
  zigpc_zclcmdparse_door_lock_programming_event_notification_t door_lock_programming_event_notification;
  zigpc_zclcmdparse_thermostat_get_weekly_schedule_response_t thermostat_get_weekly_schedule_response;
  zigpc_zclcmdparse_thermostat_get_relay_status_log_response_t thermostat_get_relay_status_log_response;
  zigpc_zclcmdparse_ias_zone_zone_status_change_notification_t ias_zone_zone_status_change_notification;
  zigpc_zclcmdparse_ias_zone_zone_enroll_request_t ias_zone_zone_enroll_request;
} zigpc_zclcmdparse_callback_data_t;

typedef void (*zigpc_zclcmdparse_callback_t)(
  const zigbee_eui64_t eui64, /**< Device identifier */
  const zigbee_endpoint_id_t endpoint, /**< Device endpoint identifier */
  const zigpc_zclcmdparse_callback_data_t *data  /**< Command data */
);

/**
 *
 * @brief Initialize the command parser component. This function should Listen
 * to gateway cluster commands received and initialize logic to parse the
 * incoming messages.
 *
 * @return sl_status_t  SL_STATUS_OK if initialization is successful. Error if
 * not.
 */
sl_status_t zigpc_zclcmdparse_setup(void);

/**
 *
 * @brief Register a callback when a particular command is parsed based on the
 * ZCL Cluster ID + ZCL Command ID values passed in.
 *
 * @param cluster_id  ZCL cluster ID value.
 * @param cluster_id  ZCL command ID value.
 * @param callback    Pointer to function that receives this type of callback.
 * @return sl_status_t  SL_STATUS_OK if registration is successful. Error if
 * not.
 */
sl_status_t zigpc_zclcmdparse_register_callback(zcl_cluster_id_t cluster_id,
                                                             zcl_command_id_t command_id,
                                                             zigpc_zclcmdparse_callback_t callback);

/**
 *
 * @brief Remove a registered callback when a particular command is parsed
 * based on the ZCL Cluster ID + ZCL Command ID values passed in.
 *
 * @param cluster_id  ZCL cluster ID value.
 * @param cluster_id  ZCL command ID value.
 * @param callback  Pointer to function that receives this type of callback.
 * @return sl_status_t  SL_STATUS_OK if registration is successful. Error if
 * not.
 */
sl_status_t zigpc_zclcmdparse_remove_callback(zcl_cluster_id_t cluster_id,
                                                           zcl_command_id_t command_id,
                                                           zigpc_zclcmdparse_callback_t callback);

#ifdef __cplusplus
}
#endif

#endif /* ZIGPC_ZCLCMDPARSE_H */

/** @} end zigpc_zclcmdparse */
