/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @file zcl_definitions.h
 * @defgroup zigpc_zcl_definitions ZigPC ZCL Definitions
 * @ingroup zigpc_zcl_util
 * @brief Contains definitions used by ZigPC in order to intrepret ZCL
 * information.
 *
 * @{
 */

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

#ifndef ZIGPC_ZCL_DEFINITIONS_H
#define ZIGPC_ZCL_DEFINITIONS_H

#include "zigpc_common_zigbee.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef uint32_t UTC;

/**
 * @brief ZCL data types.
 */
typedef enum {
  ZIGPC_ZCL_DATA_TYPE_NODATA = 0x00,
  ZIGPC_ZCL_DATA_TYPE_DATA8 = 0x08,
  ZIGPC_ZCL_DATA_TYPE_DATA16 = 0x09,
  ZIGPC_ZCL_DATA_TYPE_DATA24 = 0x0A,
  ZIGPC_ZCL_DATA_TYPE_DATA32 = 0x0B,
  ZIGPC_ZCL_DATA_TYPE_DATA40 = 0x0C,
  ZIGPC_ZCL_DATA_TYPE_DATA48 = 0x0D,
  ZIGPC_ZCL_DATA_TYPE_DATA56 = 0x0E,
  ZIGPC_ZCL_DATA_TYPE_DATA64 = 0x0F,
  ZIGPC_ZCL_DATA_TYPE_BOOL = 0x10,
  ZIGPC_ZCL_DATA_TYPE_MAP8 = 0x18,
  ZIGPC_ZCL_DATA_TYPE_MAP16 = 0x19,
  ZIGPC_ZCL_DATA_TYPE_MAP24 = 0x1A,
  ZIGPC_ZCL_DATA_TYPE_MAP32 = 0x1B,
  ZIGPC_ZCL_DATA_TYPE_MAP40 = 0x1C,
  ZIGPC_ZCL_DATA_TYPE_MAP48 = 0x1D,
  ZIGPC_ZCL_DATA_TYPE_MAP56 = 0x1E,
  ZIGPC_ZCL_DATA_TYPE_MAP64 = 0x1F,
  ZIGPC_ZCL_DATA_TYPE_UINT8 = 0x20,
  ZIGPC_ZCL_DATA_TYPE_UINT16 = 0x21,
  ZIGPC_ZCL_DATA_TYPE_UINT24 = 0x22,
  ZIGPC_ZCL_DATA_TYPE_UINT32 = 0x23,
  ZIGPC_ZCL_DATA_TYPE_UINT40 = 0x24,
  ZIGPC_ZCL_DATA_TYPE_UINT48 = 0x25,
  ZIGPC_ZCL_DATA_TYPE_UINT56 = 0x26,
  ZIGPC_ZCL_DATA_TYPE_UINT64 = 0x27,
  ZIGPC_ZCL_DATA_TYPE_INT8 = 0x28,
  ZIGPC_ZCL_DATA_TYPE_INT16 = 0x29,
  ZIGPC_ZCL_DATA_TYPE_INT24 = 0x2A,
  ZIGPC_ZCL_DATA_TYPE_INT32 = 0x2B,
  ZIGPC_ZCL_DATA_TYPE_INT40 = 0x2C,
  ZIGPC_ZCL_DATA_TYPE_INT48 = 0x2D,
  ZIGPC_ZCL_DATA_TYPE_INT56 = 0x2E,
  ZIGPC_ZCL_DATA_TYPE_INT64 = 0x2F,
  ZIGPC_ZCL_DATA_TYPE_ENUM8 = 0x30,
  ZIGPC_ZCL_DATA_TYPE_ENUM16 = 0x31,
  ZIGPC_ZCL_DATA_TYPE_SEMI = 0x38,
  ZIGPC_ZCL_DATA_TYPE_SINGLE = 0x39,
  ZIGPC_ZCL_DATA_TYPE_DOUBLE = 0x3A,
  ZIGPC_ZCL_DATA_TYPE_OCTSTR = 0x41,
  ZIGPC_ZCL_DATA_TYPE_STRING = 0x42,
  ZIGPC_ZCL_DATA_TYPE_OCTSTR16 = 0x43,
  ZIGPC_ZCL_DATA_TYPE_STRING16 = 0x44,
  ZIGPC_ZCL_DATA_TYPE_ARRAY = 0x48,
  ZIGPC_ZCL_DATA_TYPE_STRUCT = 0x49,
  ZIGPC_ZCL_DATA_TYPE_SET = 0x50,
  ZIGPC_ZCL_DATA_TYPE_BAG = 0x51,
  ZIGPC_ZCL_DATA_TYPE_TOD = 0xE0,
  ZIGPC_ZCL_DATA_TYPE_DATE = 0xE1,
  ZIGPC_ZCL_DATA_TYPE_UTC = 0xE2,
  ZIGPC_ZCL_DATA_TYPE_CLUSTER_ID = 0xE8,
  ZIGPC_ZCL_DATA_TYPE_ATTRIB_ID = 0xE9,
  ZIGPC_ZCL_DATA_TYPE_BACOID = 0xEA,
  ZIGPC_ZCL_DATA_TYPE_EUI64 = 0xF0,
  ZIGPC_ZCL_DATA_TYPE_KEY128 = 0xF1,
  ZIGPC_ZCL_DATA_TYPE_UNK = 0xFF,
  // Custom data type for structs
  ZIGPC_ZCL_DATA_TYPE_STRUCT_TRANSITION_TYPE,
  ZIGPC_ZCL_DATA_TYPE_CREDENTIAL_STRUCT_TYPE
} zigpc_zcl_data_type_t;

/**
 * @brief ZCL status types.
 */
typedef enum {
  ZIGPC_CREDENTIAL_TYPE_ENUM_PROGRAMMING_PIN = 0x00,
  ZIGPC_CREDENTIAL_TYPE_ENUM_PIN = 0x01,
  ZIGPC_CREDENTIAL_TYPE_ENUM_RFID = 0x02,
  ZIGPC_CREDENTIAL_TYPE_ENUM_FINGERPRINT = 0x03,
  ZIGPC_CREDENTIAL_TYPE_ENUM_FINGER_VEIN = 0x04,
  ZIGPC_CREDENTIAL_TYPE_ENUM_FACE = 0x05,
} zigpc_credential_type_enum_t;
/**
 * @brief ZCL status types.
 */
typedef enum {
  ZIGPC_ZCL_STATUS_SUCCESS = 0x00,
  ZIGPC_ZCL_STATUS_FAILURE = 0x01,
  ZIGPC_ZCL_STATUS_NOT_AUTHORIZED = 0x7E,
  ZIGPC_ZCL_STATUS_MALFORMED_COMMAND = 0x80,
  ZIGPC_ZCL_STATUS_UNSUP_CLUSTER_COMMAND = 0x81,
  ZIGPC_ZCL_STATUS_UNSUP_GENERAL_COMMAND = 0x82,
  ZIGPC_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND = 0x83,
  ZIGPC_ZCL_STATUS_UNSUP_MANUF_GENERAL_COMMAND = 0x84,
  ZIGPC_ZCL_STATUS_INVALID_FIELD = 0x85,
  ZIGPC_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE = 0x86,
  ZIGPC_ZCL_STATUS_INVALID_VALUE = 0x87,
  ZIGPC_ZCL_STATUS_READ_ONLY = 0x88,
  ZIGPC_ZCL_STATUS_INSUFFICIENT_SPACE = 0x89,
  ZIGPC_ZCL_STATUS_DUPLICATE_EXISTS = 0x8A,
  ZIGPC_ZCL_STATUS_NOT_FOUND = 0x8B,
  ZIGPC_ZCL_STATUS_UNREPORTABLE_ATTRIBUTE = 0x8C,
  ZIGPC_ZCL_STATUS_INVALID_DATA_TYPE = 0x8D,
  ZIGPC_ZCL_STATUS_INVALID_SELECTOR = 0x8E,
  ZIGPC_ZCL_STATUS_WRITE_ONLY = 0x8F,
  ZIGPC_ZCL_STATUS_INCONSISTENT_STARTUP_STATE = 0x90,
  ZIGPC_ZCL_STATUS_DEFINED_OUT_OF_BAND = 0x91,
  ZIGPC_ZCL_STATUS_INCONSISTENT = 0x92,
  ZIGPC_ZCL_STATUS_ACTION_DENIED = 0x93,
  ZIGPC_ZCL_STATUS_TIMEOUT = 0x94,
  ZIGPC_ZCL_STATUS_ABORT = 0x95,
  ZIGPC_ZCL_STATUS_INVALID_IMAGE = 0x96,
  ZIGPC_ZCL_STATUS_WAIT_FOR_DATA = 0x97,
  ZIGPC_ZCL_STATUS_NO_IMAGE_AVAILABLE = 0x98,
  ZIGPC_ZCL_STATUS_REQUIRE_MORE_IMAGE = 0x99,
  ZIGPC_ZCL_STATUS_NOTIFICATION_PENDING = 0x9A,
  ZIGPC_ZCL_STATUS_HARDWARE_FAILURE = 0xC0,
  ZIGPC_ZCL_STATUS_SOFTWARE_FAILURE = 0xC1,
  ZIGPC_ZCL_STATUS_CALIBRATION_ERROR = 0xC2,
  ZIGPC_ZCL_STATUS_UNSUPPORTED_CLUSTER = 0xC3,
  ZIGPC_ZCL_STATUS_LIMIT_REACHED = 0xC4,
} zigpc_zcl_status_t;

/**
 * @brief ZCL Global command types.
 */
typedef enum {
  ZIGPC_ZCL_GLOBAL_COMMAND_READ_ATTRIBUTES = 0x00,
  ZIGPC_ZCL_GLOBAL_COMMAND_WRITE_ATTRIBUTES = 0x02,
} zigpc_zcl_global_command_type_t;

/**
 * @brief ZCL Global command types.
 */
typedef enum {
  ZIGPC_ZCL_GLOBAL_ATTR_CLUSTER_REVISION = 0xFFFD,
} zigpc_zcl_global_attr_type_t;

/**
 * @brief ZCL Global Reporting Role Direction.
 */
typedef enum {
  ZIGPC_ZCL_GLOBAL_REPORTING_ROLE_GENERATOR = 0x00,
  ZIGPC_ZCL_GLOBAL_REPORTING_ROLE_RECIPIENT = 0x01,
} zigpc_zcl_global_reporting_role_type_t;

/**
 * @brief ZCL cluster types
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_BASIC = 0x0000,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION = 0x0001,
  ZIGPC_ZCL_CLUSTER_IDENTIFY = 0x0003,
  ZIGPC_ZCL_CLUSTER_GROUPS = 0x0004,
  ZIGPC_ZCL_CLUSTER_ON_OFF = 0x0006,
  ZIGPC_ZCL_CLUSTER_LEVEL = 0x0008,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL = 0x0020,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK = 0x0101,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING = 0x0102,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT = 0x0201,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL = 0x0300,
  ZIGPC_ZCL_CLUSTER_TEMPERATURE_MEASUREMENT = 0x0402,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING = 0x0406,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE = 0x0500,
  ZIGPC_ZCL_CLUSTER_IASWD = 0x0502,
  ZIGPC_ZCL_CLUSTER_METERING = 0x0702,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT = 0x0B04,
  ZIGPC_ZCL_CLUSTER_OTA_UPGRADE = 0x0019
} zigpc_zcl_cluster_type_t;

/*****************************************************************
 *
 * ZCL attributes for Basic cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for Basic cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_ZCL_VERSION = 0x00,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_APPLICATION_VERSION = 0x01,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_STACK_VERSION = 0x02,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_HW_VERSION = 0x03,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_MANUFACTURER_NAME = 0x04,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_MODEL_IDENTIFIER = 0x05,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_DATE_CODE = 0x06,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_POWER_SOURCE = 0x07,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_GENERIC_DEVICE_CLASS = 0x08,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_GENERIC_DEVICE_TYPE = 0x09,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_PRODUCT_CODE = 0x0A,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_PRODUCTURL = 0x0B,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_MANUFACTURER_VERSION_DETAILS = 0x0C,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_SERIAL_NUMBER = 0x0D,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_PRODUCT_LABEL = 0x0E,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_LOCATION_DESCRIPTION = 0x10,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_PHYSICAL_ENVIRONMENT = 0x11,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_DEVICE_ENABLED = 0x12,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_ALARM_MASK = 0x13,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_DISABLE_LOCAL_CONFIG = 0x14,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_SW_BUILDID = 0x4000,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_Z_WAVE_GENERIC_DEVICE_CLASS = 0xFF01,
  ZIGPC_ZCL_CLUSTER_BASIC_ATTR_Z_WAVE_SPECIFIC_DEVICE_CLASS = 0xFF02,
} zigpc_zcl_basic_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for Basic cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for Basic cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_BASIC_COMMAND_RESET_TO_FACTORY_DEFAULTS = 0x00,
} zigpc_zcl_basic_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for PowerConfiguration cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for PowerConfiguration cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_MAINS_VOLTAGE = 0x00,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_MAINS_FREQUENCY = 0x01,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_MAINS_ALARM_MASK = 0x10,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_MAINS_VOLTAGE_MIN_THRESHOLD = 0x11,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_MAINS_VOLTAGE_MAX_THRESHOLD = 0x12,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_MAINS_VOLTAGE_DWELL_TRIP_POINT = 0x13,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_VOLTAGE = 0x20,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_PERCENTAGE_REMAINING = 0x21,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_MANUFACTURER = 0x30,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_SIZE = 0x31,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERYA_HR_RATING = 0x32,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_QUANTITY = 0x33,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_RATED_VOLTAGE = 0x34,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_ALARM_MASK = 0x35,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD = 0x36,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_VOLTAGE_THRESHOLD1 = 0x37,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_VOLTAGE_THRESHOLD2 = 0x38,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_VOLTAGE_THRESHOLD3 = 0x39,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_PERCENTAGE_MIN_THRESHOLD = 0x3A,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_PERCENTAGE_THRESHOLD1 = 0x3B,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_PERCENTAGE_THRESHOLD2 = 0x3C,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_PERCENTAGE_THRESHOLD3 = 0x3D,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY_ALARM_STATE = 0x3E,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_VOLTAGE = 0x40,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_PERCENTAGE_REMAINING = 0x41,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_MANUFACTURER = 0x50,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_SIZE = 0x51,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2A_HR_RATING = 0x52,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_QUANTITY = 0x53,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_RATED_VOLTAGE = 0x54,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_ALARM_MASK = 0x55,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_VOLTAGE_MIN_THRESHOLD = 0x56,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_VOLTAGE_THRESHOLD1 = 0x57,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_VOLTAGE_THRESHOLD2 = 0x58,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_VOLTAGE_THRESHOLD3 = 0x59,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_PERCENTAGE_MIN_THRESHOLD = 0x5A,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_PERCENTAGE_THRESHOLD1 = 0x5B,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_PERCENTAGE_THRESHOLD2 = 0x5C,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_PERCENTAGE_THRESHOLD3 = 0x5D,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY2_ALARM_STATE = 0x5E,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_VOLTAGE = 0x60,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_PERCENTAGE_REMAINING = 0x61,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_MANUFACTURER = 0x70,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_SIZE = 0x71,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3A_HR_RATING = 0x72,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_QUANTITY = 0x73,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_RATED_VOLTAGE = 0x74,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_ALARM_MASK = 0x75,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_VOLTAGE_MIN_THRESHOLD = 0x76,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_VOLTAGE_THRESHOLD1 = 0x77,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_VOLTAGE_THRESHOLD2 = 0x78,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_VOLTAGE_THRESHOLD3 = 0x79,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_PERCENTAGE_MIN_THRESHOLD = 0x7A,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_PERCENTAGE_THRESHOLD1 = 0x7B,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_PERCENTAGE_THRESHOLD2 = 0x7C,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_PERCENTAGE_THRESHOLD3 = 0x7D,
  ZIGPC_ZCL_CLUSTER_POWER_CONFIGURATION_ATTR_BATTERY3_ALARM_STATE = 0x7E,
} zigpc_zcl_power_configuration_attr_type_t;

/*****************************************************************
 *
 * ZCL attributes for Identify cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for Identify cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_IDENTIFY_ATTR_IDENTIFY_TIME = 0x00,
} zigpc_zcl_identify_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for Identify cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for Identify cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_IDENTIFY_COMMAND_IDENTIFY = 0x00,
  ZIGPC_ZCL_CLUSTER_IDENTIFY_COMMAND_IDENTIFY_QUERY_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_IDENTIFY_COMMAND_IDENTIFY_QUERY = 0x01,
  ZIGPC_ZCL_CLUSTER_IDENTIFY_COMMAND_TRIGGER_EFFECT = 0x40,
} zigpc_zcl_identify_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for Groups cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for Groups cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_GROUPS_ATTR_NAME_SUPPORT = 0x00,
} zigpc_zcl_groups_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for Groups cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for Groups cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_ADD_GROUP = 0x00,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_ADD_GROUP_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_VIEW_GROUP = 0x01,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_VIEW_GROUP_RESPONSE = 0x01,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_GET_GROUP_MEMBERSHIP = 0x02,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_GET_GROUP_MEMBERSHIP_RESPONSE = 0x02,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_REMOVE_GROUP = 0x03,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_REMOVE_GROUP_RESPONSE = 0x03,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_REMOVE_ALL_GROUPS = 0x04,
  ZIGPC_ZCL_CLUSTER_GROUPS_COMMAND_ADD_GROUP_IF_IDENTIFYING = 0x05,
} zigpc_zcl_groups_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for OnOff cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for OnOff cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_ON_OFF_ATTR_ON_OFF = 0x00,
  ZIGPC_ZCL_CLUSTER_ON_OFF_ATTR_GLOBAL_SCENE_CONTROL = 0x4000,
  ZIGPC_ZCL_CLUSTER_ON_OFF_ATTR_ON_TIME = 0x4001,
  ZIGPC_ZCL_CLUSTER_ON_OFF_ATTR_OFF_WAIT_TIME = 0x4002,
  ZIGPC_ZCL_CLUSTER_ON_OFF_ATTR_START_UP_ON_OFF = 0x4003,
} zigpc_zcl_on_off_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for OnOff cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for OnOff cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_ON_OFF_COMMAND_OFF = 0x00,
  ZIGPC_ZCL_CLUSTER_ON_OFF_COMMAND_ON = 0x01,
  ZIGPC_ZCL_CLUSTER_ON_OFF_COMMAND_TOGGLE = 0x02,
  ZIGPC_ZCL_CLUSTER_ON_OFF_COMMAND_OFF_WITH_EFFECT = 0x40,
  ZIGPC_ZCL_CLUSTER_ON_OFF_COMMAND_ON_WITH_RECALL_GLOBAL_SCENE = 0x41,
  ZIGPC_ZCL_CLUSTER_ON_OFF_COMMAND_ON_WITH_TIMED_OFF = 0x42,
} zigpc_zcl_on_off_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for Level cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for Level cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_CURRENT_LEVEL = 0x00,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_REMAINING_TIME = 0x01,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_MIN_LEVEL = 0x02,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_MAX_LEVEL = 0x03,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_CURRENT_FREQUENCY = 0x04,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_MIN_FREQUENCY = 0x05,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_MAX_FREQUENCY = 0x06,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_OPTIONS = 0x0F,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_ON_OFF_TRANSITION_TIME = 0x10,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_ON_LEVEL = 0x11,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_ON_TRANSITION_TIME = 0x12,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_OFF_TRANSITION_TIME = 0x13,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_DEFAULT_MOVE_RATE = 0x14,
  ZIGPC_ZCL_CLUSTER_LEVEL_ATTR_START_UP_CURRENT_LEVEL = 0x4000,
} zigpc_zcl_level_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for Level cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for Level cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_MOVE_TO_LEVEL = 0x00,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_MOVE = 0x01,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_STEP = 0x02,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_STOP = 0x03,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_MOVE_TO_LEVEL_WITH_ON_OFF = 0x04,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_MOVE_WITH_ON_OFF = 0x05,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_STEP_WITH_ON_OFF = 0x06,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_STOP_WITH_ON_OFF = 0x07,
  ZIGPC_ZCL_CLUSTER_LEVEL_COMMAND_MOVE_TO_CLOSEST_FREQUENCY = 0x08,
} zigpc_zcl_level_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for PollControl cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for PollControl cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_CHECK_IN_INTERVAL = 0x00,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_LONG_POLL_INTERVAL = 0x01,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_SHORT_POLL_INTERVAL = 0x02,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_FAST_POLL_TIMEOUT = 0x03,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_CHECK_IN_INTERVAL_MIN = 0x04,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_LONG_POLL_INTERVAL_MIN = 0x05,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_ATTR_FAST_POLL_TIMEOUT_MAX = 0x06,
} zigpc_zcl_poll_control_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for PollControl cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for PollControl cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_CHECK_IN = 0x00,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_CHECK_IN_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_FAST_POLL_STOP = 0x01,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_SET_LONG_POLL_INTERVAL = 0x02,
  ZIGPC_ZCL_CLUSTER_POLL_CONTROL_COMMAND_SET_SHORT_POLL_INTERVAL = 0x03,
} zigpc_zcl_poll_control_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for DoorLock cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for DoorLock cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_LOCK_STATE = 0x00,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_LOCK_TYPE = 0x01,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ACTUATOR_ENABLED = 0x02,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_DOOR_STATE = 0x03,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_DOOR_OPEN_EVENTS = 0x04,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_DOOR_CLOSED_EVENTS = 0x05,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_OPEN_PERIOD = 0x06,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_LOG_RECORDS_SUPPORTED = 0x10,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_TOTAL_USERS_SUPPORTED = 0x11,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_PIN_USERS_SUPPORTED = 0x12,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_RFID_USERS_SUPPORTED = 0x13,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER = 0x14,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER = 0x15,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED = 0x16,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_MAX_PIN_CODE_LENGTH = 0x17,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_MIN_PIN_CODE_LENGTH = 0x18,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_MAX_RFID_CODE_LENGTH = 0x19,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_MIN_RFID_CODE_LENGTH = 0x1A,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_CREDENTIAL_RULES_SUPPORT = 0x1B,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER = 0x1C,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ENABLE_LOGGING = 0x20,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_LANGUAGE = 0x21,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_LED_SETTINGS = 0x22,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_AUTO_RELOCK_TIME = 0x23,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_SOUND_VOLUME = 0x24,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_OPERATING_MODE = 0x25,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_SUPPORTED_OPERATING_MODES = 0x26,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_DEFAULT_CONFIGURATION_REGISTER = 0x27,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ENABLE_LOCAL_PROGRAMMING = 0x28,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ENABLE_ONE_TOUCH_LOCKING = 0x29,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ENABLE_INSIDE_STATUSLED = 0x2A,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ENABLE_PRIVACY_MODE_BUTTON = 0x2B,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_LOCAL_PROGRAMMING_FEATURES = 0x2C,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_WRONG_CODE_ENTRY_LIMIT = 0x30,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_USER_CODE_TEMPORARY_DISABLE_TIME = 0x31,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_SEND_PIN_OVER_THE_AIR = 0x32,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_REQUIRE_PI_NFOR_RF_OPERATION = 0x33,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_SECURITY_LEVEL = 0x34,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_EXPIRING_USER_TIMEOUT = 0x35,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_ALARM_MASK = 0x40,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_KEYPAD_OPERATION_EVENT_MASK = 0x41,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_RF_OPERATION_EVENT_MASK = 0x42,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_MANUAL_OPERATION_EVENT_MASK = 0x43,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_RFID_OPERATION_EVENT_MASK = 0x44,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_KEYPAD_PROGRAMMING_EVENT_MASK = 0x45,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_RF_PROGRAMMING_EVENT_MASK = 0x46,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_RFID_PROGRAMMING_EVENT_MASK = 0x47,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_ATTR_FEATURE_MAP = 0xFFFC,
} zigpc_zcl_door_lock_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for DoorLock cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for DoorLock cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_LOCK_DOOR = 0x00,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_LOCK_DOOR_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_DOOR = 0x01,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_DOOR_RESPONSE = 0x01,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_TOGGLE = 0x02,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_TOGGLE_RESPONSE = 0x02,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_WITH_TIMEOUT = 0x03,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNLOCK_WITH_TIMEOUT_RESPONSE = 0x03,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_LOG_RECORD = 0x04,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_LOG_RECORD_RESPONSE = 0x04,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_PIN_CODE = 0x05,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_PIN_CODE_RESPONSE = 0x05,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_PIN_CODE = 0x06,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_PIN_CODE_RESPONSE = 0x06,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_PIN_CODE = 0x07,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_PIN_CODE_RESPONSE = 0x07,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALL_PIN_CODES = 0x08,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALL_PIN_CODES_RESPONSE = 0x08,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_STATUS = 0x09,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_STATUS_RESPONSE = 0x09,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_STATUS = 0x0A,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_STATUS_RESPONSE = 0x0A,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_WEEKDAY_SCHEDULE = 0x0B,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_WEEKDAY_SCHEDULE_RESPONSE = 0x0B,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_WEEKDAY_SCHEDULE = 0x0C,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_WEEKDAY_SCHEDULE_RESPONSE = 0x0C,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_WEEKDAY_SCHEDULE = 0x0D,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_WEEKDAY_SCHEDULE_RESPONSE = 0x0D,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_YEAR_DAY_SCHEDULE = 0x0E,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_YEAR_DAY_SCHEDULE_RESPONSE = 0x0E,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_YEAR_DAY_SCHEDULE = 0x0F,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_YEAR_DAY_SCHEDULE_RESPONSE = 0x0F,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_YEAR_DAY_SCHEDULE = 0x10,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_YEAR_DAY_SCHEDULE_RESPONSE = 0x10,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_HOLIDAY_SCHEDULE = 0x11,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_HOLIDAY_SCHEDULE_RESPONSE = 0x11,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_HOLIDAY_SCHEDULE = 0x12,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_HOLIDAY_SCHEDULE_RESPONSE = 0x12,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_HOLIDAY_SCHEDULE = 0x13,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_HOLIDAY_SCHEDULE_RESPONSE = 0x13,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_TYPE = 0x14,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER_TYPE_RESPONSE = 0x14,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_TYPE = 0x15,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_TYPE_RESPONSE = 0x15,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_RFID_CODE = 0x16,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_RFID_CODE_RESPONSE = 0x16,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_RFID_CODE = 0x17,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_RFID_CODE_RESPONSE = 0x17,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_RFID_CODE = 0x18,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_RFID_CODE_RESPONSE = 0x18,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALL_RFID_CODES = 0x19,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_ALL_RFID_CODES_RESPONSE = 0x19,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_USER = 0x1A,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER = 0x1B,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_USER_RESPONSE = 0x1C,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_USER = 0x1D,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_OPERATING_EVENT_NOTIFICATION = 0x20,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_PROGRAMMING_EVENT_NOTIFICATION = 0x21,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_CREDENTIAL = 0x22,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_SET_CREDENTIAL_RESPONSE = 0x23,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_CREDENTIAL_STATUS = 0x24,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_GET_CREDENTIAL_STATUS_RESPONSE = 0x25,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_CLEAR_CREDENTIAL = 0x26,
  ZIGPC_ZCL_CLUSTER_DOOR_LOCK_COMMAND_UNBOLT_DOOR = 0x27,
} zigpc_zcl_door_lock_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for WindowCovering cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for WindowCovering cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_WINDOW_COVERING_TYPE = 0x00,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_PHYSICAL_CLOSED_LIMIT_LIFT = 0x01,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_PHYSICAL_CLOSED_LIMIT_TILT = 0x02,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_CURRENT_POSITION_LIFT = 0x03,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_CURRENT_POSITION_TILT = 0x04,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_NUMBER_OF_ACTUATIONS_LIFT = 0x05,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_NUMBER_OF_ACTUATIONS_TILT = 0x06,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_CONFIG_OR_STATUS = 0x07,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_CURRENT_POSITION_LIFT_PERCENTAGE = 0x08,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_CURRENT_POSITION_TILT_PERCENTAGE = 0x09,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_INSTALLED_OPEN_LIMIT_LIFT = 0x100,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_INSTALLED_CLOSED_LIMIT_LIFT = 0x101,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_INSTALLED_OPEN_LIMIT_TILT = 0x102,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_INSTALLED_CLOSED_LIMIT_TILT = 0x103,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_VELOCITY_LIFT = 0x104,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_ACCELERATION_TIME_LIFT = 0x105,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_DECELERATION_TIME_LIFT = 0x106,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_MODE = 0x107,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_INTERMEDIATE_SETPOINTS_LIFT = 0x108,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_ATTR_INTERMEDIATE_SETPOINTS_TILT = 0x109,
} zigpc_zcl_window_covering_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for WindowCovering cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for WindowCovering cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_UP_OR_OPEN = 0x00,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_DOWN_OR_CLOSE = 0x01,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_STOP = 0x02,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_GO_TO_LIFT_VALUE = 0x04,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_GO_TO_LIFT_PERCENTAGE = 0x05,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_GO_TO_TILT_VALUE = 0x07,
  ZIGPC_ZCL_CLUSTER_WINDOW_COVERING_COMMAND_GO_TO_TILT_PERCENTAGE = 0x08,
} zigpc_zcl_window_covering_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for Thermostat cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for Thermostat cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_LOCAL_TEMPERATURE = 0x00,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OUTDOOR_TEMPERATURE = 0x01,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OCCUPANCY = 0x02,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_ABS_MIN_HEAT_SETPOINT_LIMIT = 0x03,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_ABS_MAX_HEAT_SETPOINT_LIMIT = 0x04,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_ABS_MIN_COOL_SETPOINT_LIMIT = 0x05,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_ABS_MAX_COOL_SETPOINT_LIMIT = 0x06,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_PI_COOLING_DEMAND = 0x07,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_PI_HEATING_DEMAND = 0x08,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_HVAC_SYSTEM_TYPE_CONFIGURATION = 0x09,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_LOCAL_TEMPERATURE_CALIBRATION = 0x10,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OCCUPIED_COOLING_SETPOINT = 0x11,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OCCUPIED_HEATING_SETPOINT = 0x12,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_UNOCCUPIED_COOLING_SETPOINT = 0x13,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_UNOCCUPIED_HEATING_SETPOINT = 0x14,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_MIN_HEAT_SETPOINT_LIMIT = 0x15,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_MAX_HEAT_SETPOINT_LIMIT = 0x16,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_MIN_COOL_SETPOINT_LIMIT = 0x17,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_MAX_COOL_SETPOINT_LIMIT = 0x18,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_MIN_SETPOINT_DEAD_BAND = 0x19,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_REMOTE_SENSING = 0x1A,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_CONTROL_SEQUENCE_OF_OPERATION = 0x1B,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_SYSTEM_MODE = 0x1C,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_ALARM_MASK = 0x1D,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_THERMOSTAT_RUNNING_MODE = 0x1E,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_START_OF_WEEK = 0x20,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_NUMBER_OF_WEEKLY_TRANSITIONS = 0x21,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_NUMBER_OF_DAILY_TRANSITIONS = 0x22,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_TEMPERATURE_SETPOINT_HOLD = 0x23,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_TEMPERATURE_SETPOINT_HOLD_DURATION = 0x24,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_THERMOSTAT_PROGRAMMING_OPERATION_MODE = 0x25,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_THERMOSTAT_RUNNING_STATE = 0x29,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_SETPOINT_CHANGE_SOURCE = 0x30,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_SETPOINT_CHANGE_AMOUNT = 0x31,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_SETPOINT_CHANGE_SOURCE_TIMESTAMP = 0x32,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OCCUPIED_SETBACK = 0x34,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OCCUPIED_SETBACK_MIN = 0x35,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_OCCUPIED_SETBACK_MAX = 0x36,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_UNOCCUPIED_SETBACK = 0x37,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_UNOCCUPIED_SETBACK_MIN = 0x38,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_UNOCCUPIED_SETBACK_MAX = 0x39,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_EMERGENCY_HEAT_DELTA = 0x3A,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_TYPE = 0x40,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_CAPACITY = 0x41,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_REFRIGERANT_TYPE = 0x42,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_COMPRESSOR_TYPE = 0x43,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_ERROR_CODE = 0x44,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_LOUVER_POSITION = 0x45,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_COIL_TEMPERATURE = 0x46,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_ATTR_AC_CAPACITY_FORMAT = 0x47,
} zigpc_zcl_thermostat_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for Thermostat cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for Thermostat cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_SETPOINT_RAISE_OR_LOWER = 0x00,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_WEEKLY_SCHEDULE_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_SET_WEEKLY_SCHEDULE = 0x01,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_RELAY_STATUS_LOG_RESPONSE = 0x01,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_WEEKLY_SCHEDULE = 0x02,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_CLEAR_WEEKLY_SCHEDULE = 0x03,
  ZIGPC_ZCL_CLUSTER_THERMOSTAT_COMMAND_GET_RELAY_STATUS_LOG = 0x04,
} zigpc_zcl_thermostat_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for ColorControl cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for ColorControl cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_CURRENT_HUE = 0x00,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_CURRENT_SATURATION = 0x01,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_REMAINING_TIME = 0x02,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_CURRENTX = 0x03,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_CURRENTY = 0x04,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_DRIFT_COMPENSATION = 0x05,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COMPENSATION_TEXT = 0x06,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_TEMPERATURE_MIREDS = 0x07,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_MODE = 0x08,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_OPTIONS = 0x0F,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_NUMBER_OF_PRIMARIES = 0x10,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY1X = 0x11,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY1Y = 0x12,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY1_INTENSITY = 0x13,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY2X = 0x15,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY2Y = 0x16,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY2_INTENSITY = 0x17,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY3X = 0x19,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY3Y = 0x1A,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY3_INTENSITY = 0x1B,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY4X = 0x20,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY4Y = 0x21,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY4_INTENSITY = 0x22,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY5X = 0x24,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY5Y = 0x25,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY5_INTENSITY = 0x26,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY6X = 0x28,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY6Y = 0x29,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_PRIMARY6_INTENSITY = 0x2A,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_WHITE_POINTX = 0x30,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_WHITE_POINTY = 0x31,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTRX = 0x32,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTRY = 0x33,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTR_INTENSITY = 0x34,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTGX = 0x36,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTGY = 0x37,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTG_INTENSITY = 0x38,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTBX = 0x3A,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTBY = 0x3B,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_POINTB_INTENSITY = 0x3C,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_ENHANCED_CURRENT_HUE = 0x4000,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_ENHANCED_COLOR_MODE = 0x4001,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_LOOP_ACTIVE = 0x4002,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_LOOP_DIRECTION = 0x4003,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_LOOP_TIME = 0x4004,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_LOOP_START_ENHANCED_HUE = 0x4005,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_LOOP_STORED_ENHANCED_HUE = 0x4006,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_CAPABILITIES = 0x400A,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_TEMP_PHYSICAL_MIN_MIREDS = 0x400B,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COLOR_TEMP_PHYSICAL_MAX_MIREDS = 0x400C,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS = 0x400D,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_ATTR_START_UP_COLOR_TEMPERATURE_MIREDS = 0x4010,
} zigpc_zcl_color_control_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for ColorControl cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for ColorControl cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_TO_HUE = 0x00,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_HUE = 0x01,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_STEP_HUE = 0x02,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_TO_SATURATION = 0x03,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_SATURATION = 0x04,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_STEP_SATURATION = 0x05,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_TO_HUE_AND_SATURATION = 0x06,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_TO_COLOR = 0x07,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_COLOR = 0x08,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_STEP_COLOR = 0x09,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_TO_COLOR_TEMPERATURE = 0x0A,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_ENHANCED_MOVE_TO_HUE = 0x40,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_ENHANCED_MOVE_HUE = 0x41,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_ENHANCED_STEP_HUE = 0x42,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_ENHANCED_MOVE_TO_HUE_AND_SATURATION = 0x43,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_COLOR_LOOP_SET = 0x44,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_STOP_MOVE_STEP = 0x47,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_MOVE_COLOR_TEMPERATURE = 0x4B,
  ZIGPC_ZCL_CLUSTER_COLOR_CONTROL_COMMAND_STEP_COLOR_TEMPERATURE = 0x4C,
} zigpc_zcl_color_control_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for TemperatureMeasurement cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for TemperatureMeasurement cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_TEMPERATURE_MEASUREMENT_ATTR_MEASURED_VALUE = 0x00,
  ZIGPC_ZCL_CLUSTER_TEMPERATURE_MEASUREMENT_ATTR_MIN_MEASURED_VALUE = 0x01,
  ZIGPC_ZCL_CLUSTER_TEMPERATURE_MEASUREMENT_ATTR_MAX_MEASURED_VALUE = 0x02,
  ZIGPC_ZCL_CLUSTER_TEMPERATURE_MEASUREMENT_ATTR_TOLERANCE = 0x03,
} zigpc_zcl_temperature_measurement_attr_type_t;

/*****************************************************************
 *
 * ZCL attributes for OccupancySensing cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for OccupancySensing cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_OCCUPANCY = 0x00,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_OCCUPANCY_SENSOR_TYPE = 0x01,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_OCCUPANCY_SENSOR_TYPE_BITMAP = 0x02,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY = 0x10,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY = 0x11,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD = 0x12,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY = 0x20,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY = 0x21,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD = 0x22,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY = 0x30,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY = 0x31,
  ZIGPC_ZCL_CLUSTER_OCCUPANCY_SENSING_ATTR_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD = 0x32,
} zigpc_zcl_occupancy_sensing_attr_type_t;

/*****************************************************************
 *
 * ZCL attributes for IASZone cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for IASZone cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_ZONE_STATE = 0x00,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_ZONE_TYPE = 0x01,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_ZONE_STATUS = 0x02,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_IASCIE_ADDRESS = 0x10,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_ZONEID = 0x11,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED = 0x12,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_ATTR_CURRENT_ZONE_SENSITIVITY_LEVEL = 0x13,
} zigpc_zcl_ias_zone_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for IASZone cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for IASZone cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_ENROLL_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_STATUS_CHANGE_NOTIFICATION = 0x00,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_INITIATE_NORMAL_OPERATION_MODE = 0x01,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_ZONE_ENROLL_REQUEST = 0x01,
  ZIGPC_ZCL_CLUSTER_IAS_ZONE_COMMAND_INITIATE_TEST_MODE = 0x02,
} zigpc_zcl_ias_zone_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for IASWD cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for IASWD cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_IASWD_ATTR_MAX_DURATION = 0x00,
} zigpc_zcl_iaswd_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for IASWD cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for IASWD cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_IASWD_COMMAND_START_WARNING = 0x00,
  ZIGPC_ZCL_CLUSTER_IASWD_COMMAND_SQUAWK = 0x01,
} zigpc_zcl_iaswd_command_type_t;

/*****************************************************************
 *
 * ZCL attributes for Metering cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for Metering cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_SUMMATION_DELIVERED = 0x00,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_SUMMATION_RECEIVED = 0x01,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_MAX_DEMAND_DELIVERED = 0x02,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_MAX_DEMAND_RECEIVED = 0x03,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_POWER_FACTOR = 0x06,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_READING_SNAP_SHOT_TIME = 0x07,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_MAX_DEMAND_DELIVERED_TIME = 0x08,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_MAX_DEMAND_RECEIVED_TIME = 0x09,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_DEFAULT_UPDATE_PERIOD = 0x0A,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_SUPPLY_STATUS = 0x14,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_INLET_ENERGY_CARRIER_SUMMATION = 0x15,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION = 0x16,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_INLET_TEMPERATURE = 0x17,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_OUTLET_TEMPERATURE = 0x18,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_UNITOF_MEASURE = 0x300,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_MULTIPLIER = 0x301,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_DIVISOR = 0x302,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_SUMMATION_FORMATTING = 0x303,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_DEMAND_FORMATTING = 0x304,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_HISTORICAL_CONSUMPTION_FORMATTING = 0x305,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_METERING_DEVICE_TYPE = 0x306,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_ENERGY_CARRIER_UNIT_OF_MEASURE = 0x309,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_ENERGY_CARRIER_SUMMATION_FORMATTING = 0x30A,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_ENERGY_CARRIER_DEMAND_FORMATTING = 0x30B,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_TEMPERATURE_UNIT_OF_MEASURE = 0x30C,
  ZIGPC_ZCL_CLUSTER_METERING_ATTR_TEMPERATURE_FORMATTING = 0x30D,
} zigpc_zcl_metering_attr_type_t;

/*****************************************************************
 *
 * ZCL attributes for ElectricalMeasurement cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for ElectricalMeasurement cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASUREMENT_TYPE = 0x00,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_VOLTAGE = 0x100,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_VOLTAGE_MIN = 0x101,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_VOLTAGE_MAX = 0x102,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_CURRENT = 0x103,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_CURRENT_MIN = 0x104,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_CURRENT_MAX = 0x105,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_POWER = 0x106,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_POWER_MIN = 0x107,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_POWER_MAX = 0x108,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_VOLTAGE_MULTIPLIER = 0x200,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_VOLTAGE_DIVISOR = 0x201,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_CURRENT_MULTIPLIER = 0x202,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_CURRENT_DIVISOR = 0x203,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_POWER_MULTIPLIER = 0x204,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_POWER_DIVISOR = 0x205,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_FREQUENCY = 0x300,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_FREQUENCY_MIN = 0x301,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_FREQUENCY_MAX = 0x302,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_NEUTRAL_CURRENT = 0x303,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_TOTAL_ACTIVE_POWER = 0x304,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_TOTAL_REACTIVE_POWER = 0x305,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_TOTAL_APPARENT_POWER = 0x306,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED1ST_HARMONIC_CURRENT = 0x307,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED3RD_HARMONIC_CURRENT = 0x308,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED5TH_HARMONIC_CURRENT = 0x309,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED7TH_HARMONIC_CURRENT = 0x30A,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED9TH_HARMONIC_CURRENT = 0x30B,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED11TH_HARMONIC_CURRENT = 0x30C,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED_PHASE1ST_HARMONIC_CURRENT = 0x30D,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED_PHASE3RD_HARMONIC_CURRENT = 0x30E,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED_PHASE5TH_HARMONIC_CURRENT = 0x30F,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED_PHASE7TH_HARMONIC_CURRENT = 0x310,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED_PHASE9TH_HARMONIC_CURRENT = 0x311,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_MEASURED_PHASE11TH_HARMONIC_CURRENT = 0x312,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_FREQUENCY_MULTIPLIER = 0x400,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_FREQUENCY_DIVISOR = 0x401,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_POWER_MULTIPLIER = 0x402,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_POWER_DIVISOR = 0x403,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_HARMONIC_CURRENT_MULTIPLIER = 0x404,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_PHASE_HARMONIC_CURRENT_MULTIPLIER = 0x405,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_LINE_CURRENT = 0x501,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_CURRENT = 0x502,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_REACTIVE_CURRENT = 0x503,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE = 0x505,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_MIN = 0x506,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_MAX = 0x507,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT = 0x508,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_MIN = 0x509,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_MAX = 0x50A,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER = 0x50B,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_MIN = 0x50C,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_MAX = 0x50D,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_REACTIVE_POWER = 0x50E,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_APPARENT_POWER = 0x50F,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_POWER_FACTOR = 0x510,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD = 0x511,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_OVER_VOLTAGE_COUNTER = 0x512,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER = 0x513,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_OVER_VOLTAGE_PERIOD = 0x514,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_UNDER_VOLTAGE_PERIOD = 0x515,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SAG_PERIOD = 0x516,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SWELL_PERIOD = 0x517,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_VOLTAGE_MULTIPLIER = 0x600,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_VOLTAGE_DIVISOR = 0x601,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_CURRENT_MULTIPLIER = 0x602,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_CURRENT_DIVISOR = 0x603,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_POWER_MULTIPLIER = 0x604,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_POWER_DIVISOR = 0x605,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_OVERLOAD_ALARMS_MASK = 0x700,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_VOLTAGE_OVERLOAD = 0x701,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_DC_CURRENT_OVERLOAD = 0x702,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_ALARMS_MASK = 0x800,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_VOLTAGE_OVERLOAD = 0x801,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_CURRENT_OVERLOAD = 0x802,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_ACTIVE_POWER_OVERLOAD = 0x803,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AC_REACTIVE_POWER_OVERLOAD = 0x804,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_OVER_VOLTAGE = 0x805,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_UNDER_VOLTAGE = 0x806,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_OVER_VOLTAGE = 0x807,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_UNDER_VOLTAGE = 0x808,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SAG = 0x809,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SWELL = 0x80A,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_LINE_CURRENT_PHB = 0x901,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_CURRENT_PHB = 0x902,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_REACTIVE_CURRENT_PHB = 0x903,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_PHB = 0x905,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_MIN_PHB = 0x906,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_MAX_PHB = 0x907,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_PHB = 0x908,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_MIN_PHB = 0x909,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_MAX_PHB = 0x90A,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_PHB = 0x90B,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_MIN_PHB = 0x90C,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_MAX_PHB = 0x90D,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_REACTIVE_POWER_PHB = 0x90E,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_APPARENT_POWER_PHB = 0x90F,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_POWER_FACTOR_PHB = 0x910,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB = 0x911,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB = 0x912,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB = 0x913,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB = 0x914,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB = 0x915,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SAG_PERIOD_PHB = 0x916,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SWELL_PERIOD_PHB = 0x917,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_LINE_CURRENT_PHC = 0xA01,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_CURRENT_PHC = 0xA02,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_REACTIVE_CURRENT_PHC = 0xA03,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_PHC = 0xA05,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_MIN_PHC = 0xA06,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_MAX_PHC = 0xA07,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_PHC = 0xA08,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_MIN_PHC = 0xA09,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_CURRENT_MAX_PHC = 0xA0A,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_PHC = 0xA0B,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_MIN_PHC = 0xA0C,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_ACTIVE_POWER_MAX_PHC = 0xA0D,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_REACTIVE_POWER_PHC = 0xA0E,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_APPARENT_POWER_PHC = 0xA0F,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_POWER_FACTOR_PHC = 0xA10,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC = 0xA11,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC = 0xA12,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC = 0xA13,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC = 0xA14,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC = 0xA15,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SAG_PERIOD_PHC = 0xA16,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_ATTR_RMS_VOLTAGE_SWELL_PERIOD_PHC = 0xA17,
} zigpc_zcl_electrical_measurement_attr_type_t;

/*****************************************************************
 *
 * ZCL Command support for ElectricalMeasurement cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for ElectricalMeasurement cluster
 */
typedef enum {
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_COMMAND_GET_PROFILE_INFO_RESPONSE = 0x00,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_COMMAND_GET_PROFILE_INFO = 0x00,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_COMMAND_GET_MEASUREMENT_PROFILE_RESPONSE = 0x01,
  ZIGPC_ZCL_CLUSTER_ELECTRICAL_MEASUREMENT_COMMAND_GET_MEASUREMENT_PROFILE = 0x01,
} zigpc_zcl_electrical_measurement_command_type_t;


/**
 * @brief Struct for CredentialStruct
 */
typedef struct {
  zigpc_credential_type_enum_t credential_type;
  uint16_t credential_index;
} __attribute__((__packed__)) zigpc_zcl_credential_struct_t;
/**
 * @brief Struct for TransitionType
 */
typedef struct {
  uint16_t transition_time;
  int16_t heat_set_point;
  int16_t cool_set_point;
} __attribute__((__packed__)) zigpc_zcl_transition_type_t;

/**
 * @brief Struct for ConfigureReportingRecord
 *
 */
typedef struct {
  uint8_t direction;
  uint16_t attribute_identifier;
  uint8_t attribute_type;
  uint16_t minimum_reporting_interval;
  uint16_t maximum_reporting_interval;
  uint32_t reportable_change;
  uint16_t  timeout_period;
} __attribute__((__packed__)) zigpc_zcl_configure_reporting_record_t;

#ifdef __cplusplus
}
#endif

#endif /* ZIGPC_ZCL_DEFINITIONS_H */

/** @} end zigpc_zcl_definitions */
