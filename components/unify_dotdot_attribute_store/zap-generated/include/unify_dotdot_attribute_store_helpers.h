/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @defgroup unify_dotdot_attribute_store_helpers DotDot Attributes Helper functions
 * @ingroup unify_dotdot_attribute_store
 * @brief Set of helper functions to manipulate DotDot attributes under a node/endpoint.
 *
 * @{
 */
// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
#ifndef UNIFY_DOTDOT_ATTRIBUTE_STORE_HELPERS_H
#define UNIFY_DOTDOT_ATTRIBUTE_STORE_HELPERS_H

#include <stdint.h>
#include <stdbool.h>

#include "sl_status.h"
#include "zap-types.h"
#include "uic_typedefs.h"
#include "attribute_store.h"
#include "attribute_store_helper.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Basic
////////////////////////////////////////////////////////////////////////////////
// Basic ZCLVersion
/**
 * @brief Verifies if the DotDot Basic - ZCLVersion is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ZCLVersion is supported
 * @returns false if ZCLVersion is not supported
 */
bool dotdot_is_supported_basic_zcl_version (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ZCLVersion attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ZCLVersion attribute
 */
uint8_t dotdot_get_basic_zcl_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ZCLVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_zcl_version new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_zcl_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zcl_version
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ZCLVersion
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_zcl_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ZCLVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_zcl_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ZCLVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_zcl_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ZCLVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_zcl_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ZCLVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_zcl_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ApplicationVersion
/**
 * @brief Verifies if the DotDot Basic - ApplicationVersion is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationVersion is supported
 * @returns false if ApplicationVersion is not supported
 */
bool dotdot_is_supported_basic_application_version (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ApplicationVersion attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationVersion attribute
 */
uint8_t dotdot_get_basic_application_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ApplicationVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_version new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_application_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_application_version
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ApplicationVersion
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_application_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ApplicationVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_application_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ApplicationVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_application_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ApplicationVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_application_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ApplicationVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_application_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic StackVersion
/**
 * @brief Verifies if the DotDot Basic - StackVersion is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if StackVersion is supported
 * @returns false if StackVersion is not supported
 */
bool dotdot_is_supported_basic_stack_version (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - StackVersion attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns StackVersion attribute
 */
uint8_t dotdot_get_basic_stack_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - StackVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_stack_version new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_stack_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_stack_version
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - StackVersion
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_stack_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - StackVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_stack_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - StackVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_stack_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - StackVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_stack_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - StackVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_stack_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic HWVersion
/**
 * @brief Verifies if the DotDot Basic - HWVersion is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if HWVersion is supported
 * @returns false if HWVersion is not supported
 */
bool dotdot_is_supported_basic_hw_version (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - HWVersion attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns HWVersion attribute
 */
uint8_t dotdot_get_basic_hw_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - HWVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_hw_version new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_hw_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_hw_version
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - HWVersion
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_hw_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - HWVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_hw_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - HWVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_hw_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - HWVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_hw_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - HWVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_hw_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ManufacturerName
/**
 * @brief Verifies if the DotDot Basic - ManufacturerName is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ManufacturerName is supported
 * @returns false if ManufacturerName is not supported
 */
bool dotdot_is_supported_basic_manufacturer_name (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ManufacturerName attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ManufacturerName attribute
 */
const char* dotdot_get_basic_manufacturer_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ManufacturerName attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_manufacturer_name new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_manufacturer_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_manufacturer_name
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ManufacturerName
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_manufacturer_name_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ManufacturerName attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_manufacturer_name_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ManufacturerName attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_manufacturer_name_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ManufacturerName attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_manufacturer_name_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ManufacturerName attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_manufacturer_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ModelIdentifier
/**
 * @brief Verifies if the DotDot Basic - ModelIdentifier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ModelIdentifier is supported
 * @returns false if ModelIdentifier is not supported
 */
bool dotdot_is_supported_basic_model_identifier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ModelIdentifier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ModelIdentifier attribute
 */
const char* dotdot_get_basic_model_identifier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ModelIdentifier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_model_identifier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_model_identifier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_model_identifier
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ModelIdentifier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_model_identifier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ModelIdentifier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_model_identifier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ModelIdentifier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_model_identifier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ModelIdentifier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_model_identifier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ModelIdentifier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_model_identifier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic DateCode
/**
 * @brief Verifies if the DotDot Basic - DateCode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DateCode is supported
 * @returns false if DateCode is not supported
 */
bool dotdot_is_supported_basic_date_code (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - DateCode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns DateCode attribute
 */
const char* dotdot_get_basic_date_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - DateCode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_date_code new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_date_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_date_code
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - DateCode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_date_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - DateCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_date_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - DateCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_date_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - DateCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_date_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - DateCode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_date_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic PowerSource
/**
 * @brief Verifies if the DotDot Basic - PowerSource is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerSource is supported
 * @returns false if PowerSource is not supported
 */
bool dotdot_is_supported_basic_power_source (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - PowerSource attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerSource attribute
 */
uint8_t dotdot_get_basic_power_source(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - PowerSource attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_source new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_power_source(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_power_source
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - PowerSource
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_power_source_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - PowerSource attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_power_source_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - PowerSource attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_power_source_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - PowerSource attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_power_source_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - PowerSource attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_power_source(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic GenericDevice-Class
/**
 * @brief Verifies if the DotDot Basic - GenericDevice-Class is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if GenericDevice-Class is supported
 * @returns false if GenericDevice-Class is not supported
 */
bool dotdot_is_supported_basic_generic_device_class (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - GenericDevice-Class attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns GenericDevice-Class attribute
 */
uint8_t dotdot_get_basic_generic_device_class(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - GenericDevice-Class attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_generic_device_class new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_generic_device_class(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_generic_device_class
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - GenericDevice-Class
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_generic_device_class_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - GenericDevice-Class attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_generic_device_class_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - GenericDevice-Class attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_generic_device_class_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - GenericDevice-Class attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_generic_device_class_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - GenericDevice-Class attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_generic_device_class(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic GenericDevice-Type
/**
 * @brief Verifies if the DotDot Basic - GenericDevice-Type is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if GenericDevice-Type is supported
 * @returns false if GenericDevice-Type is not supported
 */
bool dotdot_is_supported_basic_generic_device_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - GenericDevice-Type attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns GenericDevice-Type attribute
 */
uint8_t dotdot_get_basic_generic_device_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - GenericDevice-Type attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_generic_device_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_generic_device_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_generic_device_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - GenericDevice-Type
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_generic_device_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - GenericDevice-Type attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_generic_device_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - GenericDevice-Type attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_generic_device_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - GenericDevice-Type attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_generic_device_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - GenericDevice-Type attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_generic_device_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ProductCode
/**
 * @brief Verifies if the DotDot Basic - ProductCode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ProductCode is supported
 * @returns false if ProductCode is not supported
 */
bool dotdot_is_supported_basic_product_code (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ProductCode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ProductCode attribute
 */
const char* dotdot_get_basic_product_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ProductCode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_product_code new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_product_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_product_code
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ProductCode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_product_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ProductCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_product_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ProductCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_product_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ProductCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_product_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ProductCode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_product_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ProductURL
/**
 * @brief Verifies if the DotDot Basic - ProductURL is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ProductURL is supported
 * @returns false if ProductURL is not supported
 */
bool dotdot_is_supported_basic_producturl (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ProductURL attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ProductURL attribute
 */
const char* dotdot_get_basic_producturl(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ProductURL attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_producturl new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_producturl(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_producturl
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ProductURL
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_producturl_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ProductURL attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_producturl_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ProductURL attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_producturl_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ProductURL attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_producturl_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ProductURL attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_producturl(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ManufacturerVersionDetails
/**
 * @brief Verifies if the DotDot Basic - ManufacturerVersionDetails is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ManufacturerVersionDetails is supported
 * @returns false if ManufacturerVersionDetails is not supported
 */
bool dotdot_is_supported_basic_manufacturer_version_details (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ManufacturerVersionDetails attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ManufacturerVersionDetails attribute
 */
const char* dotdot_get_basic_manufacturer_version_details(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ManufacturerVersionDetails attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_manufacturer_version_details new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_manufacturer_version_details(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_manufacturer_version_details
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ManufacturerVersionDetails
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_manufacturer_version_details_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ManufacturerVersionDetails attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_manufacturer_version_details_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ManufacturerVersionDetails attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_manufacturer_version_details_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ManufacturerVersionDetails attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_manufacturer_version_details_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ManufacturerVersionDetails attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_manufacturer_version_details(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic SerialNumber
/**
 * @brief Verifies if the DotDot Basic - SerialNumber is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SerialNumber is supported
 * @returns false if SerialNumber is not supported
 */
bool dotdot_is_supported_basic_serial_number (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - SerialNumber attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns SerialNumber attribute
 */
const char* dotdot_get_basic_serial_number(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - SerialNumber attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_serial_number new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_serial_number(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_serial_number
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - SerialNumber
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_serial_number_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - SerialNumber attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_serial_number_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - SerialNumber attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_serial_number_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - SerialNumber attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_serial_number_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - SerialNumber attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_serial_number(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic ProductLabel
/**
 * @brief Verifies if the DotDot Basic - ProductLabel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ProductLabel is supported
 * @returns false if ProductLabel is not supported
 */
bool dotdot_is_supported_basic_product_label (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - ProductLabel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ProductLabel attribute
 */
const char* dotdot_get_basic_product_label(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - ProductLabel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_product_label new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_product_label(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_product_label
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - ProductLabel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_product_label_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - ProductLabel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_product_label_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - ProductLabel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_product_label_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - ProductLabel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_product_label_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - ProductLabel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_product_label(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic LocationDescription
/**
 * @brief Verifies if the DotDot Basic - LocationDescription is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LocationDescription is supported
 * @returns false if LocationDescription is not supported
 */
bool dotdot_is_supported_basic_location_description (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - LocationDescription attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns LocationDescription attribute
 */
const char* dotdot_get_basic_location_description(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - LocationDescription attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_location_description new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_location_description(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_location_description
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - LocationDescription
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_location_description_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - LocationDescription attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_location_description_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - LocationDescription attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_location_description_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - LocationDescription attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_location_description_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - LocationDescription attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_location_description(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic PhysicalEnvironment
/**
 * @brief Verifies if the DotDot Basic - PhysicalEnvironment is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalEnvironment is supported
 * @returns false if PhysicalEnvironment is not supported
 */
bool dotdot_is_supported_basic_physical_environment (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - PhysicalEnvironment attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalEnvironment attribute
 */
uint8_t dotdot_get_basic_physical_environment(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - PhysicalEnvironment attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_environment new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_physical_environment(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_environment
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - PhysicalEnvironment
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_physical_environment_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - PhysicalEnvironment attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_physical_environment_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - PhysicalEnvironment attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_physical_environment_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - PhysicalEnvironment attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_physical_environment_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - PhysicalEnvironment attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_physical_environment(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic DeviceEnabled
/**
 * @brief Verifies if the DotDot Basic - DeviceEnabled is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DeviceEnabled is supported
 * @returns false if DeviceEnabled is not supported
 */
bool dotdot_is_supported_basic_device_enabled (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - DeviceEnabled attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DeviceEnabled attribute
 */
bool dotdot_get_basic_device_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - DeviceEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_device_enabled new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_device_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_device_enabled
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - DeviceEnabled
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_device_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - DeviceEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_device_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - DeviceEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_device_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - DeviceEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_device_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - DeviceEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_device_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic AlarmMask
/**
 * @brief Verifies if the DotDot Basic - AlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AlarmMask is supported
 * @returns false if AlarmMask is not supported
 */
bool dotdot_is_supported_basic_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - AlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AlarmMask attribute
 */
uint8_t dotdot_get_basic_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - AlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic DisableLocalConfig
/**
 * @brief Verifies if the DotDot Basic - DisableLocalConfig is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DisableLocalConfig is supported
 * @returns false if DisableLocalConfig is not supported
 */
bool dotdot_is_supported_basic_disable_local_config (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - DisableLocalConfig attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DisableLocalConfig attribute
 */
uint8_t dotdot_get_basic_disable_local_config(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - DisableLocalConfig attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_disable_local_config new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_disable_local_config(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_disable_local_config
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - DisableLocalConfig
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_disable_local_config_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - DisableLocalConfig attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_disable_local_config_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - DisableLocalConfig attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_disable_local_config_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - DisableLocalConfig attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_disable_local_config_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - DisableLocalConfig attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_disable_local_config(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Basic SWBuildID
/**
 * @brief Verifies if the DotDot Basic - SWBuildID is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SWBuildID is supported
 * @returns false if SWBuildID is not supported
 */
bool dotdot_is_supported_basic_sw_buildid (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Basic - SWBuildID attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns SWBuildID attribute
 */
const char* dotdot_get_basic_sw_buildid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Basic - SWBuildID attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_sw_buildid new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_basic_sw_buildid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_sw_buildid
  );

/**
 * @brief Undefines the Reported value of the the DotDot Basic - SWBuildID
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_sw_buildid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Basic - SWBuildID attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_basic_sw_buildid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Basic - SWBuildID attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_sw_buildid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Basic - SWBuildID attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_basic_sw_buildid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Basic - SWBuildID attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_basic_sw_buildid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Basic
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_basic_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Basic Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_basic_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PowerConfiguration
////////////////////////////////////////////////////////////////////////////////
// PowerConfiguration MainsVoltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - MainsVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MainsVoltage is supported
 * @returns false if MainsVoltage is not supported
 */
bool dotdot_is_supported_power_configuration_mains_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - MainsVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MainsVoltage attribute
 */
uint16_t dotdot_get_power_configuration_mains_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - MainsVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mains_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_mains_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - MainsVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - MainsVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - MainsVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - MainsVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - MainsVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_mains_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration MainsFrequency
/**
 * @brief Verifies if the DotDot PowerConfiguration - MainsFrequency is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MainsFrequency is supported
 * @returns false if MainsFrequency is not supported
 */
bool dotdot_is_supported_power_configuration_mains_frequency (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - MainsFrequency attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MainsFrequency attribute
 */
uint8_t dotdot_get_power_configuration_mains_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - MainsFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mains_frequency new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_mains_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mains_frequency
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - MainsFrequency
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - MainsFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - MainsFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - MainsFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - MainsFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_mains_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration MainsAlarmMask
/**
 * @brief Verifies if the DotDot PowerConfiguration - MainsAlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MainsAlarmMask is supported
 * @returns false if MainsAlarmMask is not supported
 */
bool dotdot_is_supported_power_configuration_mains_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - MainsAlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MainsAlarmMask attribute
 */
uint8_t dotdot_get_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - MainsAlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mains_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mains_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - MainsAlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - MainsAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - MainsAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - MainsAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - MainsAlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration MainsVoltageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - MainsVoltageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MainsVoltageMinThreshold is supported
 * @returns false if MainsVoltageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_mains_voltage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - MainsVoltageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MainsVoltageMinThreshold attribute
 */
uint16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - MainsVoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mains_voltage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - MainsVoltageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - MainsVoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - MainsVoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - MainsVoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - MainsVoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration MainsVoltageMaxThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - MainsVoltageMaxThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MainsVoltageMaxThreshold is supported
 * @returns false if MainsVoltageMaxThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_mains_voltage_max_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - MainsVoltageMaxThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MainsVoltageMaxThreshold attribute
 */
uint16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - MainsVoltageMaxThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mains_voltage_max_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_max_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - MainsVoltageMaxThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_max_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - MainsVoltageMaxThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_max_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - MainsVoltageMaxThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_max_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - MainsVoltageMaxThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_max_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - MainsVoltageMaxThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration MainsVoltageDwellTripPoint
/**
 * @brief Verifies if the DotDot PowerConfiguration - MainsVoltageDwellTripPoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MainsVoltageDwellTripPoint is supported
 * @returns false if MainsVoltageDwellTripPoint is not supported
 */
bool dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - MainsVoltageDwellTripPoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MainsVoltageDwellTripPoint attribute
 */
uint16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - MainsVoltageDwellTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mains_voltage_dwell_trip_point new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_dwell_trip_point
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - MainsVoltageDwellTripPoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_dwell_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - MainsVoltageDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_mains_voltage_dwell_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - MainsVoltageDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_dwell_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - MainsVoltageDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_mains_voltage_dwell_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - MainsVoltageDwellTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryVoltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryVoltage is supported
 * @returns false if BatteryVoltage is not supported
 */
bool dotdot_is_supported_power_configuration_battery_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryVoltage attribute
 */
uint8_t dotdot_get_power_configuration_battery_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryPercentageRemaining
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryPercentageRemaining is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryPercentageRemaining is supported
 * @returns false if BatteryPercentageRemaining is not supported
 */
bool dotdot_is_supported_power_configuration_battery_percentage_remaining (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryPercentageRemaining attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryPercentageRemaining attribute
 */
uint8_t dotdot_get_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryPercentageRemaining attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_percentage_remaining new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_remaining
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryPercentageRemaining
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_remaining_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryPercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_remaining_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_remaining_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_remaining_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryPercentageRemaining attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryManufacturer
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryManufacturer is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryManufacturer is supported
 * @returns false if BatteryManufacturer is not supported
 */
bool dotdot_is_supported_power_configuration_battery_manufacturer (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryManufacturer attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns BatteryManufacturer attribute
 */
const char* dotdot_get_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryManufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_manufacturer new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_battery_manufacturer
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryManufacturer
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryManufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryManufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryManufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryManufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatterySize
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatterySize is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatterySize is supported
 * @returns false if BatterySize is not supported
 */
bool dotdot_is_supported_power_configuration_battery_size (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatterySize attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatterySize attribute
 */
BatterySize dotdot_get_power_configuration_battery_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatterySize attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_size new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery_size
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatterySize
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatterySize attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatterySize attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatterySize attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatterySize attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryAHrRating
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryAHrRating is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryAHrRating is supported
 * @returns false if BatteryAHrRating is not supported
 */
bool dotdot_is_supported_power_configuration_batterya_hr_rating (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryAHrRating attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryAHrRating attribute
 */
uint16_t dotdot_get_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryAHrRating attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_batterya_hr_rating new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_batterya_hr_rating
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryAHrRating
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_batterya_hr_rating_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryAHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_batterya_hr_rating_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryAHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_batterya_hr_rating_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryAHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_batterya_hr_rating_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryAHrRating attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryQuantity
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryQuantity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryQuantity is supported
 * @returns false if BatteryQuantity is not supported
 */
bool dotdot_is_supported_power_configuration_battery_quantity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryQuantity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryQuantity attribute
 */
uint8_t dotdot_get_power_configuration_battery_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryQuantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_quantity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_quantity
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryQuantity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryQuantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryQuantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryQuantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryQuantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryRatedVoltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryRatedVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryRatedVoltage is supported
 * @returns false if BatteryRatedVoltage is not supported
 */
bool dotdot_is_supported_power_configuration_battery_rated_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryRatedVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryRatedVoltage attribute
 */
uint8_t dotdot_get_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryRatedVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_rated_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_rated_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryRatedVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_rated_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryRatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_rated_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryRatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_rated_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryRatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_rated_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryRatedVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryAlarmMask
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryAlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryAlarmMask is supported
 * @returns false if BatteryAlarmMask is not supported
 */
bool dotdot_is_supported_power_configuration_battery_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryAlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryAlarmMask attribute
 */
uint8_t dotdot_get_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryAlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryAlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryAlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryVoltageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryVoltageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryVoltageMinThreshold is supported
 * @returns false if BatteryVoltageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_battery_voltage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryVoltageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryVoltageMinThreshold attribute
 */
uint8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryVoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_voltage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryVoltageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryVoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryVoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryVoltageThreshold1
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryVoltageThreshold1 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryVoltageThreshold1 is supported
 * @returns false if BatteryVoltageThreshold1 is not supported
 */
bool dotdot_is_supported_power_configuration_battery_voltage_threshold1 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryVoltageThreshold1 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryVoltageThreshold1 attribute
 */
uint8_t dotdot_get_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryVoltageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_voltage_threshold1 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold1
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryVoltageThreshold1
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryVoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryVoltageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryVoltageThreshold2
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryVoltageThreshold2 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryVoltageThreshold2 is supported
 * @returns false if BatteryVoltageThreshold2 is not supported
 */
bool dotdot_is_supported_power_configuration_battery_voltage_threshold2 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryVoltageThreshold2 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryVoltageThreshold2 attribute
 */
uint8_t dotdot_get_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryVoltageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_voltage_threshold2 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold2
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryVoltageThreshold2
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryVoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryVoltageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryVoltageThreshold3
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryVoltageThreshold3 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryVoltageThreshold3 is supported
 * @returns false if BatteryVoltageThreshold3 is not supported
 */
bool dotdot_is_supported_power_configuration_battery_voltage_threshold3 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryVoltageThreshold3 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryVoltageThreshold3 attribute
 */
uint8_t dotdot_get_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryVoltageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_voltage_threshold3 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold3
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryVoltageThreshold3
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryVoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_voltage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryVoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_voltage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryVoltageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryPercentageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryPercentageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryPercentageMinThreshold is supported
 * @returns false if BatteryPercentageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_battery_percentage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryPercentageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryPercentageMinThreshold attribute
 */
uint8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryPercentageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_percentage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryPercentageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryPercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryPercentageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryPercentageThreshold1
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryPercentageThreshold1 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryPercentageThreshold1 is supported
 * @returns false if BatteryPercentageThreshold1 is not supported
 */
bool dotdot_is_supported_power_configuration_battery_percentage_threshold1 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryPercentageThreshold1 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryPercentageThreshold1 attribute
 */
uint8_t dotdot_get_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryPercentageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_percentage_threshold1 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold1
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryPercentageThreshold1
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryPercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryPercentageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryPercentageThreshold2
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryPercentageThreshold2 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryPercentageThreshold2 is supported
 * @returns false if BatteryPercentageThreshold2 is not supported
 */
bool dotdot_is_supported_power_configuration_battery_percentage_threshold2 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryPercentageThreshold2 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryPercentageThreshold2 attribute
 */
uint8_t dotdot_get_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryPercentageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_percentage_threshold2 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold2
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryPercentageThreshold2
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryPercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryPercentageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryPercentageThreshold3
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryPercentageThreshold3 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryPercentageThreshold3 is supported
 * @returns false if BatteryPercentageThreshold3 is not supported
 */
bool dotdot_is_supported_power_configuration_battery_percentage_threshold3 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryPercentageThreshold3 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryPercentageThreshold3 attribute
 */
uint8_t dotdot_get_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryPercentageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_percentage_threshold3 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold3
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryPercentageThreshold3
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryPercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_percentage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryPercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_percentage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryPercentageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration BatteryAlarmState
/**
 * @brief Verifies if the DotDot PowerConfiguration - BatteryAlarmState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryAlarmState is supported
 * @returns false if BatteryAlarmState is not supported
 */
bool dotdot_is_supported_power_configuration_battery_alarm_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - BatteryAlarmState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryAlarmState attribute
 */
uint32_t dotdot_get_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - BatteryAlarmState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_alarm_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery_alarm_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - BatteryAlarmState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_alarm_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - BatteryAlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery_alarm_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - BatteryAlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_alarm_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - BatteryAlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery_alarm_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - BatteryAlarmState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2Voltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2Voltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2Voltage is supported
 * @returns false if Battery2Voltage is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2Voltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2Voltage attribute
 */
uint8_t dotdot_get_power_configuration_battery2_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2Voltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2Voltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2Voltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2Voltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2Voltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2Voltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2PercentageRemaining
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2PercentageRemaining is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2PercentageRemaining is supported
 * @returns false if Battery2PercentageRemaining is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_percentage_remaining (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2PercentageRemaining attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2PercentageRemaining attribute
 */
uint8_t dotdot_get_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2PercentageRemaining attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_percentage_remaining new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_remaining
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2PercentageRemaining
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_remaining_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2PercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_remaining_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_remaining_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_remaining_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2PercentageRemaining attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2Manufacturer
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2Manufacturer is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2Manufacturer is supported
 * @returns false if Battery2Manufacturer is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_manufacturer (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2Manufacturer attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Battery2Manufacturer attribute
 */
const char* dotdot_get_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2Manufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_manufacturer new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_battery2_manufacturer
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2Manufacturer
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2Manufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2Manufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2Manufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2Manufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2Size
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2Size is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2Size is supported
 * @returns false if Battery2Size is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_size (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2Size attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2Size attribute
 */
BatterySize dotdot_get_power_configuration_battery2_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2Size attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_size new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery2_size
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2Size
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2Size attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2Size attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2Size attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2Size attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2AHrRating
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2AHrRating is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2AHrRating is supported
 * @returns false if Battery2AHrRating is not supported
 */
bool dotdot_is_supported_power_configuration_battery2a_hr_rating (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2AHrRating attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2AHrRating attribute
 */
uint16_t dotdot_get_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2AHrRating attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2a_hr_rating new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_battery2a_hr_rating
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2AHrRating
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2a_hr_rating_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2AHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2a_hr_rating_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2AHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2a_hr_rating_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2AHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2a_hr_rating_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2AHrRating attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2Quantity
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2Quantity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2Quantity is supported
 * @returns false if Battery2Quantity is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_quantity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2Quantity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2Quantity attribute
 */
uint8_t dotdot_get_power_configuration_battery2_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2Quantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_quantity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_quantity
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2Quantity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2Quantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2Quantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2Quantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2Quantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2RatedVoltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2RatedVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2RatedVoltage is supported
 * @returns false if Battery2RatedVoltage is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_rated_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2RatedVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2RatedVoltage attribute
 */
uint8_t dotdot_get_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2RatedVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_rated_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_rated_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2RatedVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_rated_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2RatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_rated_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2RatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_rated_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2RatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_rated_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2RatedVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2AlarmMask
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2AlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2AlarmMask is supported
 * @returns false if Battery2AlarmMask is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2AlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2AlarmMask attribute
 */
uint8_t dotdot_get_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2AlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2VoltageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2VoltageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2VoltageMinThreshold is supported
 * @returns false if Battery2VoltageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_voltage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2VoltageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2VoltageMinThreshold attribute
 */
uint8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2VoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_voltage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2VoltageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2VoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2VoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2VoltageThreshold1
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2VoltageThreshold1 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2VoltageThreshold1 is supported
 * @returns false if Battery2VoltageThreshold1 is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_voltage_threshold1 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2VoltageThreshold1 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2VoltageThreshold1 attribute
 */
uint8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2VoltageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_voltage_threshold1 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold1
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2VoltageThreshold1
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2VoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2VoltageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2VoltageThreshold2
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2VoltageThreshold2 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2VoltageThreshold2 is supported
 * @returns false if Battery2VoltageThreshold2 is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_voltage_threshold2 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2VoltageThreshold2 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2VoltageThreshold2 attribute
 */
uint8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2VoltageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_voltage_threshold2 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold2
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2VoltageThreshold2
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2VoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2VoltageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2VoltageThreshold3
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2VoltageThreshold3 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2VoltageThreshold3 is supported
 * @returns false if Battery2VoltageThreshold3 is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_voltage_threshold3 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2VoltageThreshold3 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2VoltageThreshold3 attribute
 */
uint8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2VoltageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_voltage_threshold3 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold3
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2VoltageThreshold3
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2VoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_voltage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2VoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_voltage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2VoltageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2PercentageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2PercentageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2PercentageMinThreshold is supported
 * @returns false if Battery2PercentageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_percentage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2PercentageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2PercentageMinThreshold attribute
 */
uint8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2PercentageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_percentage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2PercentageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2PercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2PercentageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2PercentageThreshold1
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2PercentageThreshold1 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2PercentageThreshold1 is supported
 * @returns false if Battery2PercentageThreshold1 is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_percentage_threshold1 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2PercentageThreshold1 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2PercentageThreshold1 attribute
 */
uint8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2PercentageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_percentage_threshold1 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold1
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2PercentageThreshold1
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2PercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2PercentageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2PercentageThreshold2
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2PercentageThreshold2 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2PercentageThreshold2 is supported
 * @returns false if Battery2PercentageThreshold2 is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_percentage_threshold2 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2PercentageThreshold2 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2PercentageThreshold2 attribute
 */
uint8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2PercentageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_percentage_threshold2 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold2
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2PercentageThreshold2
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2PercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2PercentageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2PercentageThreshold3
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2PercentageThreshold3 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2PercentageThreshold3 is supported
 * @returns false if Battery2PercentageThreshold3 is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_percentage_threshold3 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2PercentageThreshold3 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2PercentageThreshold3 attribute
 */
uint8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2PercentageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_percentage_threshold3 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold3
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2PercentageThreshold3
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2PercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_percentage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2PercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_percentage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2PercentageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery2AlarmState
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery2AlarmState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery2AlarmState is supported
 * @returns false if Battery2AlarmState is not supported
 */
bool dotdot_is_supported_power_configuration_battery2_alarm_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery2AlarmState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery2AlarmState attribute
 */
uint32_t dotdot_get_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery2AlarmState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery2_alarm_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery2_alarm_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery2AlarmState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_alarm_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery2AlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery2_alarm_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery2AlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_alarm_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery2AlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery2_alarm_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery2AlarmState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3Voltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3Voltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3Voltage is supported
 * @returns false if Battery3Voltage is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3Voltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3Voltage attribute
 */
uint8_t dotdot_get_power_configuration_battery3_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3Voltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3Voltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3Voltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3Voltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3Voltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3Voltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3PercentageRemaining
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3PercentageRemaining is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3PercentageRemaining is supported
 * @returns false if Battery3PercentageRemaining is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_percentage_remaining (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3PercentageRemaining attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3PercentageRemaining attribute
 */
uint8_t dotdot_get_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3PercentageRemaining attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_percentage_remaining new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_remaining
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3PercentageRemaining
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_remaining_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3PercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_remaining_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_remaining_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageRemaining attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_remaining_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3PercentageRemaining attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3Manufacturer
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3Manufacturer is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3Manufacturer is supported
 * @returns false if Battery3Manufacturer is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_manufacturer (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3Manufacturer attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Battery3Manufacturer attribute
 */
const char* dotdot_get_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3Manufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_manufacturer new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_battery3_manufacturer
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3Manufacturer
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3Manufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3Manufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3Manufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3Manufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3Size
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3Size is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3Size is supported
 * @returns false if Battery3Size is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_size (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3Size attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3Size attribute
 */
BatterySize dotdot_get_power_configuration_battery3_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3Size attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_size new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery3_size
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3Size
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3Size attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3Size attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3Size attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3Size attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3AHrRating
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3AHrRating is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3AHrRating is supported
 * @returns false if Battery3AHrRating is not supported
 */
bool dotdot_is_supported_power_configuration_battery3a_hr_rating (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3AHrRating attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3AHrRating attribute
 */
uint16_t dotdot_get_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3AHrRating attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3a_hr_rating new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_battery3a_hr_rating
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3AHrRating
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3a_hr_rating_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3AHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3a_hr_rating_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3AHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3a_hr_rating_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3AHrRating attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3a_hr_rating_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3AHrRating attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3Quantity
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3Quantity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3Quantity is supported
 * @returns false if Battery3Quantity is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_quantity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3Quantity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3Quantity attribute
 */
uint8_t dotdot_get_power_configuration_battery3_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3Quantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_quantity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_quantity
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3Quantity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3Quantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3Quantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3Quantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3Quantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3RatedVoltage
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3RatedVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3RatedVoltage is supported
 * @returns false if Battery3RatedVoltage is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_rated_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3RatedVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3RatedVoltage attribute
 */
uint8_t dotdot_get_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3RatedVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_rated_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_rated_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3RatedVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_rated_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3RatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_rated_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3RatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_rated_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3RatedVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_rated_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3RatedVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3AlarmMask
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3AlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3AlarmMask is supported
 * @returns false if Battery3AlarmMask is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3AlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3AlarmMask attribute
 */
uint8_t dotdot_get_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3AlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3VoltageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3VoltageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3VoltageMinThreshold is supported
 * @returns false if Battery3VoltageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_voltage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3VoltageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3VoltageMinThreshold attribute
 */
uint8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3VoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_voltage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3VoltageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3VoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3VoltageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3VoltageThreshold1
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3VoltageThreshold1 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3VoltageThreshold1 is supported
 * @returns false if Battery3VoltageThreshold1 is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_voltage_threshold1 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3VoltageThreshold1 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3VoltageThreshold1 attribute
 */
uint8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3VoltageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_voltage_threshold1 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold1
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3VoltageThreshold1
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3VoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3VoltageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3VoltageThreshold2
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3VoltageThreshold2 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3VoltageThreshold2 is supported
 * @returns false if Battery3VoltageThreshold2 is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_voltage_threshold2 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3VoltageThreshold2 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3VoltageThreshold2 attribute
 */
uint8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3VoltageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_voltage_threshold2 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold2
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3VoltageThreshold2
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3VoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3VoltageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3VoltageThreshold3
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3VoltageThreshold3 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3VoltageThreshold3 is supported
 * @returns false if Battery3VoltageThreshold3 is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_voltage_threshold3 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3VoltageThreshold3 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3VoltageThreshold3 attribute
 */
uint8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3VoltageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_voltage_threshold3 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold3
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3VoltageThreshold3
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3VoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_voltage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3VoltageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_voltage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3VoltageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3PercentageMinThreshold
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3PercentageMinThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3PercentageMinThreshold is supported
 * @returns false if Battery3PercentageMinThreshold is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_percentage_min_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3PercentageMinThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3PercentageMinThreshold attribute
 */
uint8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3PercentageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_percentage_min_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_min_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3PercentageMinThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3PercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageMinThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3PercentageMinThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3PercentageThreshold1
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3PercentageThreshold1 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3PercentageThreshold1 is supported
 * @returns false if Battery3PercentageThreshold1 is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_percentage_threshold1 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3PercentageThreshold1 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3PercentageThreshold1 attribute
 */
uint8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3PercentageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_percentage_threshold1 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold1
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3PercentageThreshold1
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3PercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageThreshold1 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3PercentageThreshold1 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3PercentageThreshold2
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3PercentageThreshold2 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3PercentageThreshold2 is supported
 * @returns false if Battery3PercentageThreshold2 is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_percentage_threshold2 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3PercentageThreshold2 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3PercentageThreshold2 attribute
 */
uint8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3PercentageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_percentage_threshold2 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold2
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3PercentageThreshold2
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3PercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageThreshold2 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3PercentageThreshold2 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3PercentageThreshold3
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3PercentageThreshold3 is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3PercentageThreshold3 is supported
 * @returns false if Battery3PercentageThreshold3 is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_percentage_threshold3 (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3PercentageThreshold3 attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3PercentageThreshold3 attribute
 */
uint8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3PercentageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_percentage_threshold3 new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold3
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3PercentageThreshold3
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3PercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_percentage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3PercentageThreshold3 attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_percentage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3PercentageThreshold3 attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PowerConfiguration Battery3AlarmState
/**
 * @brief Verifies if the DotDot PowerConfiguration - Battery3AlarmState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Battery3AlarmState is supported
 * @returns false if Battery3AlarmState is not supported
 */
bool dotdot_is_supported_power_configuration_battery3_alarm_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PowerConfiguration - Battery3AlarmState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Battery3AlarmState attribute
 */
uint32_t dotdot_get_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PowerConfiguration - Battery3AlarmState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery3_alarm_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery3_alarm_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot PowerConfiguration - Battery3AlarmState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_alarm_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PowerConfiguration - Battery3AlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_power_configuration_battery3_alarm_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PowerConfiguration - Battery3AlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_alarm_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PowerConfiguration - Battery3AlarmState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_power_configuration_battery3_alarm_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PowerConfiguration - Battery3AlarmState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the PowerConfiguration
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_power_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * PowerConfiguration Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_power_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster DeviceTemperatureConfiguration
////////////////////////////////////////////////////////////////////////////////
// DeviceTemperatureConfiguration CurrentTemperature
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - CurrentTemperature is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentTemperature is supported
 * @returns false if CurrentTemperature is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_current_temperature (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - CurrentTemperature attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentTemperature attribute
 */
int16_t dotdot_get_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - CurrentTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_temperature new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_current_temperature
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - CurrentTemperature
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_current_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - CurrentTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_current_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - CurrentTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_current_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - CurrentTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_current_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - CurrentTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration MinTempExperienced
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - MinTempExperienced is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinTempExperienced is supported
 * @returns false if MinTempExperienced is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_min_temp_experienced (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - MinTempExperienced attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinTempExperienced attribute
 */
int16_t dotdot_get_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - MinTempExperienced attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_temp_experienced new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_temp_experienced
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - MinTempExperienced
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_min_temp_experienced_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - MinTempExperienced attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_min_temp_experienced_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - MinTempExperienced attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_min_temp_experienced_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - MinTempExperienced attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_min_temp_experienced_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - MinTempExperienced attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration MaxTempExperienced
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - MaxTempExperienced is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxTempExperienced is supported
 * @returns false if MaxTempExperienced is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_max_temp_experienced (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - MaxTempExperienced attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxTempExperienced attribute
 */
int16_t dotdot_get_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - MaxTempExperienced attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_temp_experienced new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_temp_experienced
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - MaxTempExperienced
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_max_temp_experienced_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - MaxTempExperienced attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_max_temp_experienced_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - MaxTempExperienced attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_max_temp_experienced_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - MaxTempExperienced attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_max_temp_experienced_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - MaxTempExperienced attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration OverTempTotalDwell
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - OverTempTotalDwell is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OverTempTotalDwell is supported
 * @returns false if OverTempTotalDwell is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_over_temp_total_dwell (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - OverTempTotalDwell attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OverTempTotalDwell attribute
 */
uint16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - OverTempTotalDwell attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_over_temp_total_dwell new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_over_temp_total_dwell
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - OverTempTotalDwell
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_over_temp_total_dwell_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - OverTempTotalDwell attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_over_temp_total_dwell_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - OverTempTotalDwell attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_over_temp_total_dwell_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - OverTempTotalDwell attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_over_temp_total_dwell_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - OverTempTotalDwell attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration DeviceTempAlarmMask
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - DeviceTempAlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DeviceTempAlarmMask is supported
 * @returns false if DeviceTempAlarmMask is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_device_temp_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - DeviceTempAlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DeviceTempAlarmMask attribute
 */
uint8_t dotdot_get_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - DeviceTempAlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_device_temp_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_device_temp_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - DeviceTempAlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_device_temp_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - DeviceTempAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_device_temp_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - DeviceTempAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_device_temp_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - DeviceTempAlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_device_temp_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - DeviceTempAlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration LowTempThreshold
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - LowTempThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LowTempThreshold is supported
 * @returns false if LowTempThreshold is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_low_temp_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - LowTempThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LowTempThreshold attribute
 */
int16_t dotdot_get_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - LowTempThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_low_temp_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_low_temp_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - LowTempThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_low_temp_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - LowTempThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_low_temp_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - LowTempThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_low_temp_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - LowTempThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_low_temp_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - LowTempThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration HighTempThreshold
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - HighTempThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if HighTempThreshold is supported
 * @returns false if HighTempThreshold is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_high_temp_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - HighTempThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns HighTempThreshold attribute
 */
int16_t dotdot_get_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - HighTempThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_high_temp_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_high_temp_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - HighTempThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_high_temp_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - HighTempThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_high_temp_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - HighTempThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_high_temp_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - HighTempThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_high_temp_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - HighTempThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration LowTempDwellTripPoint
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - LowTempDwellTripPoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LowTempDwellTripPoint is supported
 * @returns false if LowTempDwellTripPoint is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_point (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - LowTempDwellTripPoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LowTempDwellTripPoint attribute
 */
uint32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - LowTempDwellTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_low_temp_dwell_trip_point new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_low_temp_dwell_trip_point
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - LowTempDwellTripPoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_low_temp_dwell_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - LowTempDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_low_temp_dwell_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - LowTempDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_low_temp_dwell_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - LowTempDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_low_temp_dwell_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - LowTempDwellTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DeviceTemperatureConfiguration HighTempDwellTripPoint
/**
 * @brief Verifies if the DotDot DeviceTemperatureConfiguration - HighTempDwellTripPoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if HighTempDwellTripPoint is supported
 * @returns false if HighTempDwellTripPoint is not supported
 */
bool dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_point (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DeviceTemperatureConfiguration - HighTempDwellTripPoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns HighTempDwellTripPoint attribute
 */
uint32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DeviceTemperatureConfiguration - HighTempDwellTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_high_temp_dwell_trip_point new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_high_temp_dwell_trip_point
  );

/**
 * @brief Undefines the Reported value of the the DotDot DeviceTemperatureConfiguration - HighTempDwellTripPoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_high_temp_dwell_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DeviceTemperatureConfiguration - HighTempDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_device_temperature_configuration_high_temp_dwell_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DeviceTemperatureConfiguration - HighTempDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_high_temp_dwell_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DeviceTemperatureConfiguration - HighTempDwellTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_device_temperature_configuration_high_temp_dwell_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DeviceTemperatureConfiguration - HighTempDwellTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the DeviceTemperatureConfiguration
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_device_temperature_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * DeviceTemperatureConfiguration Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_device_temperature_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Identify
////////////////////////////////////////////////////////////////////////////////
// Identify IdentifyTime
/**
 * @brief Verifies if the DotDot Identify - IdentifyTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if IdentifyTime is supported
 * @returns false if IdentifyTime is not supported
 */
bool dotdot_is_supported_identify_identify_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Identify - IdentifyTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns IdentifyTime attribute
 */
uint16_t dotdot_get_identify_identify_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Identify - IdentifyTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_identify_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_identify_identify_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_identify_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Identify - IdentifyTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_identify_identify_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Identify - IdentifyTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_identify_identify_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Identify - IdentifyTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_identify_identify_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Identify - IdentifyTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_identify_identify_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Identify - IdentifyTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_identify_identify_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Identify
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_identify_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Identify Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_identify_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Groups
////////////////////////////////////////////////////////////////////////////////
// Groups NameSupport
/**
 * @brief Verifies if the DotDot Groups - NameSupport is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NameSupport is supported
 * @returns false if NameSupport is not supported
 */
bool dotdot_is_supported_groups_name_support (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Groups - NameSupport attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NameSupport attribute
 */
uint8_t dotdot_get_groups_name_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Groups - NameSupport attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_name_support new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_groups_name_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_name_support
  );

/**
 * @brief Undefines the Reported value of the the DotDot Groups - NameSupport
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_groups_name_support_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Groups - NameSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_groups_name_support_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Groups - NameSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_groups_name_support_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Groups - NameSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_groups_name_support_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Groups - NameSupport attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_groups_name_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Groups
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_groups_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Groups Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_groups_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Scenes
////////////////////////////////////////////////////////////////////////////////
// Scenes SceneCount
/**
 * @brief Verifies if the DotDot Scenes - SceneCount is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SceneCount is supported
 * @returns false if SceneCount is not supported
 */
bool dotdot_is_supported_scenes_scene_count (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - SceneCount attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SceneCount attribute
 */
uint8_t dotdot_get_scenes_scene_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - SceneCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_scene_count new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_scene_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_scene_count
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - SceneCount
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_scene_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - SceneCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_scene_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - SceneCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_scene_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - SceneCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_scene_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - SceneCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_scene_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Scenes CurrentScene
/**
 * @brief Verifies if the DotDot Scenes - CurrentScene is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentScene is supported
 * @returns false if CurrentScene is not supported
 */
bool dotdot_is_supported_scenes_current_scene (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - CurrentScene attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentScene attribute
 */
uint8_t dotdot_get_scenes_current_scene(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - CurrentScene attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_scene new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_current_scene(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_scene
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - CurrentScene
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_current_scene_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - CurrentScene attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_current_scene_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - CurrentScene attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_current_scene_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - CurrentScene attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_current_scene_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - CurrentScene attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_current_scene(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Scenes CurrentGroup
/**
 * @brief Verifies if the DotDot Scenes - CurrentGroup is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentGroup is supported
 * @returns false if CurrentGroup is not supported
 */
bool dotdot_is_supported_scenes_current_group (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - CurrentGroup attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentGroup attribute
 */
SGroupId dotdot_get_scenes_current_group(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - CurrentGroup attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_group new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_current_group(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  SGroupId new_current_group
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - CurrentGroup
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_current_group_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - CurrentGroup attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_current_group_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - CurrentGroup attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_current_group_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - CurrentGroup attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_current_group_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - CurrentGroup attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_current_group(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Scenes SceneValid
/**
 * @brief Verifies if the DotDot Scenes - SceneValid is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SceneValid is supported
 * @returns false if SceneValid is not supported
 */
bool dotdot_is_supported_scenes_scene_valid (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - SceneValid attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SceneValid attribute
 */
bool dotdot_get_scenes_scene_valid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - SceneValid attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_scene_valid new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_scene_valid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_scene_valid
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - SceneValid
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_scene_valid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - SceneValid attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_scene_valid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - SceneValid attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_scene_valid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - SceneValid attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_scene_valid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - SceneValid attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_scene_valid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Scenes NameSupport
/**
 * @brief Verifies if the DotDot Scenes - NameSupport is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NameSupport is supported
 * @returns false if NameSupport is not supported
 */
bool dotdot_is_supported_scenes_name_support (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - NameSupport attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NameSupport attribute
 */
uint8_t dotdot_get_scenes_name_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - NameSupport attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_name_support new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_name_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_name_support
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - NameSupport
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_name_support_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - NameSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_name_support_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - NameSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_name_support_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - NameSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_name_support_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - NameSupport attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_name_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Scenes LastConfiguredBy
/**
 * @brief Verifies if the DotDot Scenes - LastConfiguredBy is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LastConfiguredBy is supported
 * @returns false if LastConfiguredBy is not supported
 */
bool dotdot_is_supported_scenes_last_configured_by (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - LastConfiguredBy attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LastConfiguredBy attribute
 */
EUI64 dotdot_get_scenes_last_configured_by(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - LastConfiguredBy attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_last_configured_by new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_last_configured_by(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  EUI64 new_last_configured_by
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - LastConfiguredBy
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_last_configured_by_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - LastConfiguredBy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_last_configured_by_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - LastConfiguredBy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_last_configured_by_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - LastConfiguredBy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_last_configured_by_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - LastConfiguredBy attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_last_configured_by(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Scenes SceneTable
/**
 * @brief Verifies if the DotDot Scenes - SceneTable is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SceneTable is supported
 * @returns false if SceneTable is not supported
 */
bool dotdot_is_supported_scenes_scene_table (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Scenes - SceneTable attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SceneTable attribute
 */
SSceneTable dotdot_get_scenes_scene_table(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Scenes - SceneTable attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_scene_table_count Number of elements in the array
 * 
 * @param new_scene_table new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_scenes_scene_table(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_scene_table_count,
  const SSceneTable* new_scene_table
  );

/**
 * @brief Undefines the Reported value of the the DotDot Scenes - SceneTable
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_scene_table_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Scenes - SceneTable attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_scenes_scene_table_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Scenes - SceneTable attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_scene_table_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Scenes - SceneTable attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_scenes_scene_table_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Scenes - SceneTable attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_scenes_scene_table(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Scenes
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_scenes_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Scenes Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_scenes_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster OnOff
////////////////////////////////////////////////////////////////////////////////
// OnOff OnOff
/**
 * @brief Verifies if the DotDot OnOff - OnOff is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OnOff is supported
 * @returns false if OnOff is not supported
 */
bool dotdot_is_supported_on_off_on_off (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OnOff - OnOff attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OnOff attribute
 */
bool dotdot_get_on_off_on_off(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OnOff - OnOff attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_on_off new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_on_off_on_off(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_on_off
  );

/**
 * @brief Undefines the Reported value of the the DotDot OnOff - OnOff
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_on_off_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OnOff - OnOff attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_on_off_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OnOff - OnOff attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_on_off_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OnOff - OnOff attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_on_off_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OnOff - OnOff attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_on_off_on_off(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OnOff GlobalSceneControl
/**
 * @brief Verifies if the DotDot OnOff - GlobalSceneControl is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if GlobalSceneControl is supported
 * @returns false if GlobalSceneControl is not supported
 */
bool dotdot_is_supported_on_off_global_scene_control (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OnOff - GlobalSceneControl attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns GlobalSceneControl attribute
 */
bool dotdot_get_on_off_global_scene_control(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OnOff - GlobalSceneControl attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_global_scene_control new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_on_off_global_scene_control(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_global_scene_control
  );

/**
 * @brief Undefines the Reported value of the the DotDot OnOff - GlobalSceneControl
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_global_scene_control_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OnOff - GlobalSceneControl attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_global_scene_control_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OnOff - GlobalSceneControl attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_global_scene_control_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OnOff - GlobalSceneControl attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_global_scene_control_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OnOff - GlobalSceneControl attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_on_off_global_scene_control(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OnOff OnTime
/**
 * @brief Verifies if the DotDot OnOff - OnTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OnTime is supported
 * @returns false if OnTime is not supported
 */
bool dotdot_is_supported_on_off_on_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OnOff - OnTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OnTime attribute
 */
uint16_t dotdot_get_on_off_on_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OnOff - OnTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_on_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_on_off_on_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot OnOff - OnTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_on_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OnOff - OnTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_on_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OnOff - OnTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_on_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OnOff - OnTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_on_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OnOff - OnTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_on_off_on_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OnOff OffWaitTime
/**
 * @brief Verifies if the DotDot OnOff - OffWaitTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OffWaitTime is supported
 * @returns false if OffWaitTime is not supported
 */
bool dotdot_is_supported_on_off_off_wait_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OnOff - OffWaitTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OffWaitTime attribute
 */
uint16_t dotdot_get_on_off_off_wait_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OnOff - OffWaitTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_off_wait_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_on_off_off_wait_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_off_wait_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot OnOff - OffWaitTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_off_wait_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OnOff - OffWaitTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_off_wait_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OnOff - OffWaitTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_off_wait_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OnOff - OffWaitTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_off_wait_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OnOff - OffWaitTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_on_off_off_wait_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OnOff StartUpOnOff
/**
 * @brief Verifies if the DotDot OnOff - StartUpOnOff is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if StartUpOnOff is supported
 * @returns false if StartUpOnOff is not supported
 */
bool dotdot_is_supported_on_off_start_up_on_off (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OnOff - StartUpOnOff attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns StartUpOnOff attribute
 */
uint8_t dotdot_get_on_off_start_up_on_off(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OnOff - StartUpOnOff attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_start_up_on_off new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_on_off_start_up_on_off(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_up_on_off
  );

/**
 * @brief Undefines the Reported value of the the DotDot OnOff - StartUpOnOff
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_start_up_on_off_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OnOff - StartUpOnOff attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_on_off_start_up_on_off_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OnOff - StartUpOnOff attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_start_up_on_off_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OnOff - StartUpOnOff attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_on_off_start_up_on_off_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OnOff - StartUpOnOff attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_on_off_start_up_on_off(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the OnOff
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_on_off_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * OnOff Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_on_off_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Level
////////////////////////////////////////////////////////////////////////////////
// Level CurrentLevel
/**
 * @brief Verifies if the DotDot Level - CurrentLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentLevel is supported
 * @returns false if CurrentLevel is not supported
 */
bool dotdot_is_supported_level_current_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - CurrentLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentLevel attribute
 */
uint8_t dotdot_get_level_current_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - CurrentLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_current_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - CurrentLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_current_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - CurrentLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_current_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - CurrentLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_current_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - CurrentLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_current_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - CurrentLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_current_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level RemainingTime
/**
 * @brief Verifies if the DotDot Level - RemainingTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RemainingTime is supported
 * @returns false if RemainingTime is not supported
 */
bool dotdot_is_supported_level_remaining_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - RemainingTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RemainingTime attribute
 */
uint16_t dotdot_get_level_remaining_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - RemainingTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_remaining_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_remaining_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_remaining_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - RemainingTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_remaining_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - RemainingTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_remaining_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - RemainingTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_remaining_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - RemainingTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_remaining_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - RemainingTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_remaining_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level MinLevel
/**
 * @brief Verifies if the DotDot Level - MinLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinLevel is supported
 * @returns false if MinLevel is not supported
 */
bool dotdot_is_supported_level_min_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - MinLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinLevel attribute
 */
uint8_t dotdot_get_level_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - MinLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - MinLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_min_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - MinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_min_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - MinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_min_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - MinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_min_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - MinLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level MaxLevel
/**
 * @brief Verifies if the DotDot Level - MaxLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxLevel is supported
 * @returns false if MaxLevel is not supported
 */
bool dotdot_is_supported_level_max_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - MaxLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxLevel attribute
 */
uint8_t dotdot_get_level_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - MaxLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - MaxLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_max_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - MaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_max_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - MaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_max_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - MaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_max_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - MaxLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level CurrentFrequency
/**
 * @brief Verifies if the DotDot Level - CurrentFrequency is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentFrequency is supported
 * @returns false if CurrentFrequency is not supported
 */
bool dotdot_is_supported_level_current_frequency (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - CurrentFrequency attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentFrequency attribute
 */
uint16_t dotdot_get_level_current_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - CurrentFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_frequency new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_current_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_frequency
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - CurrentFrequency
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_current_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - CurrentFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_current_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - CurrentFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_current_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - CurrentFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_current_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - CurrentFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_current_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level MinFrequency
/**
 * @brief Verifies if the DotDot Level - MinFrequency is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinFrequency is supported
 * @returns false if MinFrequency is not supported
 */
bool dotdot_is_supported_level_min_frequency (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - MinFrequency attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinFrequency attribute
 */
uint16_t dotdot_get_level_min_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - MinFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_frequency new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_min_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_frequency
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - MinFrequency
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_min_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - MinFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_min_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - MinFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_min_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - MinFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_min_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - MinFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_min_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level MaxFrequency
/**
 * @brief Verifies if the DotDot Level - MaxFrequency is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxFrequency is supported
 * @returns false if MaxFrequency is not supported
 */
bool dotdot_is_supported_level_max_frequency (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - MaxFrequency attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxFrequency attribute
 */
uint16_t dotdot_get_level_max_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - MaxFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_frequency new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_max_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_frequency
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - MaxFrequency
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_max_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - MaxFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_max_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - MaxFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_max_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - MaxFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_max_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - MaxFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_max_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level Options
/**
 * @brief Verifies if the DotDot Level - Options is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Options is supported
 * @returns false if Options is not supported
 */
bool dotdot_is_supported_level_options (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - Options attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Options attribute
 */
uint8_t dotdot_get_level_options(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - Options attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_options new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_options(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_options
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - Options
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_options_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - Options attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_options_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - Options attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_options_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - Options attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_options_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - Options attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_options(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level OnOffTransitionTime
/**
 * @brief Verifies if the DotDot Level - OnOffTransitionTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OnOffTransitionTime is supported
 * @returns false if OnOffTransitionTime is not supported
 */
bool dotdot_is_supported_level_on_off_transition_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - OnOffTransitionTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OnOffTransitionTime attribute
 */
uint16_t dotdot_get_level_on_off_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - OnOffTransitionTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_on_off_transition_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_on_off_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_off_transition_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - OnOffTransitionTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_on_off_transition_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - OnOffTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_on_off_transition_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - OnOffTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_on_off_transition_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - OnOffTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_on_off_transition_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - OnOffTransitionTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_on_off_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level OnLevel
/**
 * @brief Verifies if the DotDot Level - OnLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OnLevel is supported
 * @returns false if OnLevel is not supported
 */
bool dotdot_is_supported_level_on_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - OnLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OnLevel attribute
 */
uint8_t dotdot_get_level_on_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - OnLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_on_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_on_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_on_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - OnLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_on_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - OnLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_on_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - OnLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_on_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - OnLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_on_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - OnLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_on_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level OnTransitionTime
/**
 * @brief Verifies if the DotDot Level - OnTransitionTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OnTransitionTime is supported
 * @returns false if OnTransitionTime is not supported
 */
bool dotdot_is_supported_level_on_transition_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - OnTransitionTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OnTransitionTime attribute
 */
uint16_t dotdot_get_level_on_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - OnTransitionTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_on_transition_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_on_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_transition_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - OnTransitionTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_on_transition_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - OnTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_on_transition_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - OnTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_on_transition_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - OnTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_on_transition_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - OnTransitionTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_on_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level OffTransitionTime
/**
 * @brief Verifies if the DotDot Level - OffTransitionTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OffTransitionTime is supported
 * @returns false if OffTransitionTime is not supported
 */
bool dotdot_is_supported_level_off_transition_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - OffTransitionTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OffTransitionTime attribute
 */
uint16_t dotdot_get_level_off_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - OffTransitionTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_off_transition_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_off_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_off_transition_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - OffTransitionTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_off_transition_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - OffTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_off_transition_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - OffTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_off_transition_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - OffTransitionTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_off_transition_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - OffTransitionTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_off_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level DefaultMoveRate
/**
 * @brief Verifies if the DotDot Level - DefaultMoveRate is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DefaultMoveRate is supported
 * @returns false if DefaultMoveRate is not supported
 */
bool dotdot_is_supported_level_default_move_rate (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - DefaultMoveRate attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DefaultMoveRate attribute
 */
uint16_t dotdot_get_level_default_move_rate(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - DefaultMoveRate attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_default_move_rate new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_default_move_rate(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_default_move_rate
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - DefaultMoveRate
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_default_move_rate_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - DefaultMoveRate attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_default_move_rate_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - DefaultMoveRate attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_default_move_rate_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - DefaultMoveRate attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_default_move_rate_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - DefaultMoveRate attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_default_move_rate(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Level StartUpCurrentLevel
/**
 * @brief Verifies if the DotDot Level - StartUpCurrentLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if StartUpCurrentLevel is supported
 * @returns false if StartUpCurrentLevel is not supported
 */
bool dotdot_is_supported_level_start_up_current_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Level - StartUpCurrentLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns StartUpCurrentLevel attribute
 */
uint8_t dotdot_get_level_start_up_current_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Level - StartUpCurrentLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_start_up_current_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_level_start_up_current_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_up_current_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot Level - StartUpCurrentLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_start_up_current_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Level - StartUpCurrentLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_level_start_up_current_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Level - StartUpCurrentLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_start_up_current_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Level - StartUpCurrentLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_level_start_up_current_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Level - StartUpCurrentLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_level_start_up_current_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Level
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_level_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Level Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_level_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Alarms
////////////////////////////////////////////////////////////////////////////////
// Alarms AlarmCount
/**
 * @brief Verifies if the DotDot Alarms - AlarmCount is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AlarmCount is supported
 * @returns false if AlarmCount is not supported
 */
bool dotdot_is_supported_alarms_alarm_count (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Alarms - AlarmCount attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AlarmCount attribute
 */
uint16_t dotdot_get_alarms_alarm_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Alarms - AlarmCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_alarm_count new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_alarms_alarm_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_count
  );

/**
 * @brief Undefines the Reported value of the the DotDot Alarms - AlarmCount
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_alarms_alarm_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Alarms - AlarmCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_alarms_alarm_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Alarms - AlarmCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_alarms_alarm_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Alarms - AlarmCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_alarms_alarm_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Alarms - AlarmCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_alarms_alarm_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Alarms
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_alarms_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Alarms Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_alarms_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Time
////////////////////////////////////////////////////////////////////////////////
// Time Time
/**
 * @brief Verifies if the DotDot Time - Time is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Time is supported
 * @returns false if Time is not supported
 */
bool dotdot_is_supported_time_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - Time attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Time attribute
 */
UTC dotdot_get_time_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - Time attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - Time
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - Time attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - Time attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - Time attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - Time attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time TimeStatus
/**
 * @brief Verifies if the DotDot Time - TimeStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TimeStatus is supported
 * @returns false if TimeStatus is not supported
 */
bool dotdot_is_supported_time_time_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - TimeStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TimeStatus attribute
 */
uint8_t dotdot_get_time_time_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - TimeStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_time_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_time_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_time_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - TimeStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_time_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - TimeStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_time_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - TimeStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_time_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - TimeStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_time_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - TimeStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_time_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time TimeZone
/**
 * @brief Verifies if the DotDot Time - TimeZone is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TimeZone is supported
 * @returns false if TimeZone is not supported
 */
bool dotdot_is_supported_time_time_zone (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - TimeZone attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TimeZone attribute
 */
int32_t dotdot_get_time_time_zone(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - TimeZone attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_time_zone new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_time_zone(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_time_zone
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - TimeZone
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_time_zone_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - TimeZone attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_time_zone_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - TimeZone attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_time_zone_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - TimeZone attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_time_zone_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - TimeZone attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_time_zone(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time DstStart
/**
 * @brief Verifies if the DotDot Time - DstStart is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DstStart is supported
 * @returns false if DstStart is not supported
 */
bool dotdot_is_supported_time_dst_start (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - DstStart attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DstStart attribute
 */
uint32_t dotdot_get_time_dst_start(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - DstStart attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dst_start new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_dst_start(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_dst_start
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - DstStart
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_dst_start_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - DstStart attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_dst_start_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - DstStart attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_dst_start_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - DstStart attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_dst_start_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - DstStart attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_dst_start(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time DstEnd
/**
 * @brief Verifies if the DotDot Time - DstEnd is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DstEnd is supported
 * @returns false if DstEnd is not supported
 */
bool dotdot_is_supported_time_dst_end (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - DstEnd attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DstEnd attribute
 */
uint32_t dotdot_get_time_dst_end(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - DstEnd attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dst_end new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_dst_end(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_dst_end
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - DstEnd
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_dst_end_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - DstEnd attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_dst_end_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - DstEnd attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_dst_end_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - DstEnd attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_dst_end_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - DstEnd attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_dst_end(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time DstShift
/**
 * @brief Verifies if the DotDot Time - DstShift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DstShift is supported
 * @returns false if DstShift is not supported
 */
bool dotdot_is_supported_time_dst_shift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - DstShift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DstShift attribute
 */
int32_t dotdot_get_time_dst_shift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - DstShift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dst_shift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_dst_shift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_dst_shift
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - DstShift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_dst_shift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - DstShift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_dst_shift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - DstShift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_dst_shift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - DstShift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_dst_shift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - DstShift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_dst_shift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time StandardTime
/**
 * @brief Verifies if the DotDot Time - StandardTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if StandardTime is supported
 * @returns false if StandardTime is not supported
 */
bool dotdot_is_supported_time_standard_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - StandardTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns StandardTime attribute
 */
uint32_t dotdot_get_time_standard_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - StandardTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_standard_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_standard_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_standard_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - StandardTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_standard_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - StandardTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_standard_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - StandardTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_standard_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - StandardTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_standard_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - StandardTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_standard_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time LocalTime
/**
 * @brief Verifies if the DotDot Time - LocalTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LocalTime is supported
 * @returns false if LocalTime is not supported
 */
bool dotdot_is_supported_time_local_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - LocalTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LocalTime attribute
 */
uint32_t dotdot_get_time_local_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - LocalTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_local_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_local_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_local_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - LocalTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_local_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - LocalTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_local_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - LocalTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_local_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - LocalTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_local_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - LocalTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_local_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time LastSetTime
/**
 * @brief Verifies if the DotDot Time - LastSetTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LastSetTime is supported
 * @returns false if LastSetTime is not supported
 */
bool dotdot_is_supported_time_last_set_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - LastSetTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LastSetTime attribute
 */
UTC dotdot_get_time_last_set_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - LastSetTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_last_set_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_last_set_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_last_set_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - LastSetTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_last_set_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - LastSetTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_last_set_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - LastSetTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_last_set_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - LastSetTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_last_set_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - LastSetTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_last_set_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Time ValidUntilTime
/**
 * @brief Verifies if the DotDot Time - ValidUntilTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ValidUntilTime is supported
 * @returns false if ValidUntilTime is not supported
 */
bool dotdot_is_supported_time_valid_until_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Time - ValidUntilTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ValidUntilTime attribute
 */
UTC dotdot_get_time_valid_until_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Time - ValidUntilTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_valid_until_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_time_valid_until_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_valid_until_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Time - ValidUntilTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_valid_until_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Time - ValidUntilTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_time_valid_until_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Time - ValidUntilTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_valid_until_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Time - ValidUntilTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_time_valid_until_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Time - ValidUntilTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_time_valid_until_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Time
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_time_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Time Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_time_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PollControl
////////////////////////////////////////////////////////////////////////////////
// PollControl CheckInInterval
/**
 * @brief Verifies if the DotDot PollControl - CheckInInterval is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CheckInInterval is supported
 * @returns false if CheckInInterval is not supported
 */
bool dotdot_is_supported_poll_control_check_in_interval (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - CheckInInterval attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CheckInInterval attribute
 */
uint32_t dotdot_get_poll_control_check_in_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - CheckInInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_check_in_interval new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_check_in_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_check_in_interval
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - CheckInInterval
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_check_in_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - CheckInInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_check_in_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - CheckInInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_check_in_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - CheckInInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_check_in_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - CheckInInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_check_in_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PollControl LongPollInterval
/**
 * @brief Verifies if the DotDot PollControl - LongPollInterval is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LongPollInterval is supported
 * @returns false if LongPollInterval is not supported
 */
bool dotdot_is_supported_poll_control_long_poll_interval (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - LongPollInterval attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LongPollInterval attribute
 */
uint32_t dotdot_get_poll_control_long_poll_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - LongPollInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_long_poll_interval new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_long_poll_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_long_poll_interval
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - LongPollInterval
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_long_poll_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - LongPollInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_long_poll_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - LongPollInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_long_poll_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - LongPollInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_long_poll_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - LongPollInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_long_poll_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PollControl ShortPollInterval
/**
 * @brief Verifies if the DotDot PollControl - ShortPollInterval is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ShortPollInterval is supported
 * @returns false if ShortPollInterval is not supported
 */
bool dotdot_is_supported_poll_control_short_poll_interval (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - ShortPollInterval attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ShortPollInterval attribute
 */
uint16_t dotdot_get_poll_control_short_poll_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - ShortPollInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_short_poll_interval new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_short_poll_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_short_poll_interval
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - ShortPollInterval
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_short_poll_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - ShortPollInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_short_poll_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - ShortPollInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_short_poll_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - ShortPollInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_short_poll_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - ShortPollInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_short_poll_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PollControl FastPollTimeout
/**
 * @brief Verifies if the DotDot PollControl - FastPollTimeout is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FastPollTimeout is supported
 * @returns false if FastPollTimeout is not supported
 */
bool dotdot_is_supported_poll_control_fast_poll_timeout (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - FastPollTimeout attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns FastPollTimeout attribute
 */
uint16_t dotdot_get_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - FastPollTimeout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_fast_poll_timeout new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_fast_poll_timeout
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - FastPollTimeout
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_fast_poll_timeout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - FastPollTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_fast_poll_timeout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - FastPollTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_fast_poll_timeout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - FastPollTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_fast_poll_timeout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - FastPollTimeout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PollControl CheckInIntervalMin
/**
 * @brief Verifies if the DotDot PollControl - CheckInIntervalMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CheckInIntervalMin is supported
 * @returns false if CheckInIntervalMin is not supported
 */
bool dotdot_is_supported_poll_control_check_in_interval_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - CheckInIntervalMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CheckInIntervalMin attribute
 */
uint32_t dotdot_get_poll_control_check_in_interval_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - CheckInIntervalMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_check_in_interval_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_check_in_interval_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_check_in_interval_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - CheckInIntervalMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_check_in_interval_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - CheckInIntervalMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_check_in_interval_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - CheckInIntervalMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_check_in_interval_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - CheckInIntervalMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_check_in_interval_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - CheckInIntervalMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_check_in_interval_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PollControl LongPollIntervalMin
/**
 * @brief Verifies if the DotDot PollControl - LongPollIntervalMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LongPollIntervalMin is supported
 * @returns false if LongPollIntervalMin is not supported
 */
bool dotdot_is_supported_poll_control_long_poll_interval_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - LongPollIntervalMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LongPollIntervalMin attribute
 */
uint32_t dotdot_get_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - LongPollIntervalMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_long_poll_interval_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_long_poll_interval_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - LongPollIntervalMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_long_poll_interval_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - LongPollIntervalMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_long_poll_interval_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - LongPollIntervalMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_long_poll_interval_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - LongPollIntervalMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_long_poll_interval_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - LongPollIntervalMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PollControl FastPollTimeoutMax
/**
 * @brief Verifies if the DotDot PollControl - FastPollTimeoutMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FastPollTimeoutMax is supported
 * @returns false if FastPollTimeoutMax is not supported
 */
bool dotdot_is_supported_poll_control_fast_poll_timeout_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PollControl - FastPollTimeoutMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns FastPollTimeoutMax attribute
 */
uint16_t dotdot_get_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PollControl - FastPollTimeoutMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_fast_poll_timeout_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_fast_poll_timeout_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot PollControl - FastPollTimeoutMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_fast_poll_timeout_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PollControl - FastPollTimeoutMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_poll_control_fast_poll_timeout_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PollControl - FastPollTimeoutMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_fast_poll_timeout_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PollControl - FastPollTimeoutMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_poll_control_fast_poll_timeout_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PollControl - FastPollTimeoutMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the PollControl
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_poll_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * PollControl Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_poll_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ShadeConfiguration
////////////////////////////////////////////////////////////////////////////////
// ShadeConfiguration PhysicalClosedLimit
/**
 * @brief Verifies if the DotDot ShadeConfiguration - PhysicalClosedLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalClosedLimit is supported
 * @returns false if PhysicalClosedLimit is not supported
 */
bool dotdot_is_supported_shade_configuration_physical_closed_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ShadeConfiguration - PhysicalClosedLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalClosedLimit attribute
 */
uint16_t dotdot_get_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ShadeConfiguration - PhysicalClosedLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_closed_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot ShadeConfiguration - PhysicalClosedLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_physical_closed_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ShadeConfiguration - PhysicalClosedLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_physical_closed_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ShadeConfiguration - PhysicalClosedLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_physical_closed_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ShadeConfiguration - PhysicalClosedLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_physical_closed_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ShadeConfiguration - PhysicalClosedLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ShadeConfiguration MotorStepSize
/**
 * @brief Verifies if the DotDot ShadeConfiguration - MotorStepSize is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MotorStepSize is supported
 * @returns false if MotorStepSize is not supported
 */
bool dotdot_is_supported_shade_configuration_motor_step_size (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ShadeConfiguration - MotorStepSize attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MotorStepSize attribute
 */
uint8_t dotdot_get_shade_configuration_motor_step_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ShadeConfiguration - MotorStepSize attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_motor_step_size new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_shade_configuration_motor_step_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_motor_step_size
  );

/**
 * @brief Undefines the Reported value of the the DotDot ShadeConfiguration - MotorStepSize
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_motor_step_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ShadeConfiguration - MotorStepSize attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_motor_step_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ShadeConfiguration - MotorStepSize attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_motor_step_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ShadeConfiguration - MotorStepSize attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_motor_step_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ShadeConfiguration - MotorStepSize attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_shade_configuration_motor_step_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ShadeConfiguration Status
/**
 * @brief Verifies if the DotDot ShadeConfiguration - Status is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Status is supported
 * @returns false if Status is not supported
 */
bool dotdot_is_supported_shade_configuration_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ShadeConfiguration - Status attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Status attribute
 */
uint8_t dotdot_get_shade_configuration_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ShadeConfiguration - Status attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_shade_configuration_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot ShadeConfiguration - Status
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ShadeConfiguration - Status attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ShadeConfiguration - Status attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ShadeConfiguration - Status attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ShadeConfiguration - Status attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_shade_configuration_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ShadeConfiguration ClosedLimit
/**
 * @brief Verifies if the DotDot ShadeConfiguration - ClosedLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ClosedLimit is supported
 * @returns false if ClosedLimit is not supported
 */
bool dotdot_is_supported_shade_configuration_closed_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ShadeConfiguration - ClosedLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ClosedLimit attribute
 */
uint16_t dotdot_get_shade_configuration_closed_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ShadeConfiguration - ClosedLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_closed_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_shade_configuration_closed_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_closed_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot ShadeConfiguration - ClosedLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_closed_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ShadeConfiguration - ClosedLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_closed_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ShadeConfiguration - ClosedLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_closed_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ShadeConfiguration - ClosedLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_closed_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ShadeConfiguration - ClosedLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_shade_configuration_closed_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ShadeConfiguration Mode
/**
 * @brief Verifies if the DotDot ShadeConfiguration - Mode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Mode is supported
 * @returns false if Mode is not supported
 */
bool dotdot_is_supported_shade_configuration_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ShadeConfiguration - Mode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Mode attribute
 */
uint8_t dotdot_get_shade_configuration_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ShadeConfiguration - Mode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_shade_configuration_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot ShadeConfiguration - Mode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ShadeConfiguration - Mode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_shade_configuration_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ShadeConfiguration - Mode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ShadeConfiguration - Mode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_shade_configuration_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ShadeConfiguration - Mode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_shade_configuration_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ShadeConfiguration
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_shade_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ShadeConfiguration Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_shade_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster DoorLock
////////////////////////////////////////////////////////////////////////////////
// DoorLock LockState
/**
 * @brief Verifies if the DotDot DoorLock - LockState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LockState is supported
 * @returns false if LockState is not supported
 */
bool dotdot_is_supported_door_lock_lock_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - LockState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LockState attribute
 */
uint8_t dotdot_get_door_lock_lock_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - LockState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lock_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_lock_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lock_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - LockState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_lock_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - LockState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_lock_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - LockState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_lock_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - LockState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_lock_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - LockState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_lock_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock LockType
/**
 * @brief Verifies if the DotDot DoorLock - LockType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LockType is supported
 * @returns false if LockType is not supported
 */
bool dotdot_is_supported_door_lock_lock_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - LockType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LockType attribute
 */
uint8_t dotdot_get_door_lock_lock_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - LockType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lock_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_lock_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lock_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - LockType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_lock_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - LockType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_lock_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - LockType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_lock_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - LockType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_lock_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - LockType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_lock_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock ActuatorEnabled
/**
 * @brief Verifies if the DotDot DoorLock - ActuatorEnabled is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActuatorEnabled is supported
 * @returns false if ActuatorEnabled is not supported
 */
bool dotdot_is_supported_door_lock_actuator_enabled (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - ActuatorEnabled attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActuatorEnabled attribute
 */
bool dotdot_get_door_lock_actuator_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - ActuatorEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_actuator_enabled new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_actuator_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_actuator_enabled
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - ActuatorEnabled
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_actuator_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - ActuatorEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_actuator_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - ActuatorEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_actuator_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - ActuatorEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_actuator_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - ActuatorEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_actuator_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock DoorState
/**
 * @brief Verifies if the DotDot DoorLock - DoorState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DoorState is supported
 * @returns false if DoorState is not supported
 */
bool dotdot_is_supported_door_lock_door_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - DoorState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DoorState attribute
 */
uint8_t dotdot_get_door_lock_door_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - DoorState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_door_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_door_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_door_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - DoorState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_door_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - DoorState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_door_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - DoorState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_door_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - DoorState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_door_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - DoorState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_door_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock DoorOpenEvents
/**
 * @brief Verifies if the DotDot DoorLock - DoorOpenEvents is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DoorOpenEvents is supported
 * @returns false if DoorOpenEvents is not supported
 */
bool dotdot_is_supported_door_lock_door_open_events (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - DoorOpenEvents attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DoorOpenEvents attribute
 */
uint32_t dotdot_get_door_lock_door_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - DoorOpenEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_door_open_events new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_door_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_door_open_events
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - DoorOpenEvents
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_door_open_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - DoorOpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_door_open_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - DoorOpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_door_open_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - DoorOpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_door_open_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - DoorOpenEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_door_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock DoorClosedEvents
/**
 * @brief Verifies if the DotDot DoorLock - DoorClosedEvents is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DoorClosedEvents is supported
 * @returns false if DoorClosedEvents is not supported
 */
bool dotdot_is_supported_door_lock_door_closed_events (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - DoorClosedEvents attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DoorClosedEvents attribute
 */
uint32_t dotdot_get_door_lock_door_closed_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - DoorClosedEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_door_closed_events new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_door_closed_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_door_closed_events
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - DoorClosedEvents
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_door_closed_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - DoorClosedEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_door_closed_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - DoorClosedEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_door_closed_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - DoorClosedEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_door_closed_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - DoorClosedEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_door_closed_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock OpenPeriod
/**
 * @brief Verifies if the DotDot DoorLock - OpenPeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OpenPeriod is supported
 * @returns false if OpenPeriod is not supported
 */
bool dotdot_is_supported_door_lock_open_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - OpenPeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OpenPeriod attribute
 */
uint16_t dotdot_get_door_lock_open_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - OpenPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_open_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_open_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - OpenPeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_open_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - OpenPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_open_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - OpenPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_open_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - OpenPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_open_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - OpenPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_open_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfLogRecordsSupported
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfLogRecordsSupported is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfLogRecordsSupported is supported
 * @returns false if NumberOfLogRecordsSupported is not supported
 */
bool dotdot_is_supported_door_lock_number_of_log_records_supported (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfLogRecordsSupported attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfLogRecordsSupported attribute
 */
uint16_t dotdot_get_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfLogRecordsSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_log_records_supported new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_log_records_supported
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfLogRecordsSupported
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_log_records_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfLogRecordsSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_log_records_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfLogRecordsSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_log_records_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfLogRecordsSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_log_records_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfLogRecordsSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfTotalUsersSupported
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfTotalUsersSupported is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfTotalUsersSupported is supported
 * @returns false if NumberOfTotalUsersSupported is not supported
 */
bool dotdot_is_supported_door_lock_number_of_total_users_supported (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfTotalUsersSupported attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfTotalUsersSupported attribute
 */
uint16_t dotdot_get_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfTotalUsersSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_total_users_supported new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_total_users_supported
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfTotalUsersSupported
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_total_users_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfTotalUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_total_users_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfTotalUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_total_users_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfTotalUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_total_users_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfTotalUsersSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfPINUsersSupported
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfPINUsersSupported is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfPINUsersSupported is supported
 * @returns false if NumberOfPINUsersSupported is not supported
 */
bool dotdot_is_supported_door_lock_number_of_pin_users_supported (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfPINUsersSupported attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfPINUsersSupported attribute
 */
uint16_t dotdot_get_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfPINUsersSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_pin_users_supported new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_pin_users_supported
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfPINUsersSupported
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_pin_users_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfPINUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_pin_users_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfPINUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_pin_users_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfPINUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_pin_users_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfPINUsersSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfRFIDUsersSupported
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfRFIDUsersSupported is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfRFIDUsersSupported is supported
 * @returns false if NumberOfRFIDUsersSupported is not supported
 */
bool dotdot_is_supported_door_lock_number_of_rfid_users_supported (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfRFIDUsersSupported attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfRFIDUsersSupported attribute
 */
uint16_t dotdot_get_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfRFIDUsersSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_rfid_users_supported new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_rfid_users_supported
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfRFIDUsersSupported
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_rfid_users_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfRFIDUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_rfid_users_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfRFIDUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_rfid_users_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfRFIDUsersSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_rfid_users_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfRFIDUsersSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfWeekDaySchedulesSupportedPerUser
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfWeekDaySchedulesSupportedPerUser is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfWeekDaySchedulesSupportedPerUser is supported
 * @returns false if NumberOfWeekDaySchedulesSupportedPerUser is not supported
 */
bool dotdot_is_supported_door_lock_number_of_week_day_schedules_supported_per_user (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfWeekDaySchedulesSupportedPerUser attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfWeekDaySchedulesSupportedPerUser attribute
 */
uint8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfWeekDaySchedulesSupportedPerUser attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_week_day_schedules_supported_per_user new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_week_day_schedules_supported_per_user
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfWeekDaySchedulesSupportedPerUser
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_week_day_schedules_supported_per_user_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfWeekDaySchedulesSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_week_day_schedules_supported_per_user_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfWeekDaySchedulesSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_week_day_schedules_supported_per_user_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfWeekDaySchedulesSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_week_day_schedules_supported_per_user_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfWeekDaySchedulesSupportedPerUser attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfYearDaySchedulesSupportedPerUser
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfYearDaySchedulesSupportedPerUser is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfYearDaySchedulesSupportedPerUser is supported
 * @returns false if NumberOfYearDaySchedulesSupportedPerUser is not supported
 */
bool dotdot_is_supported_door_lock_number_of_year_day_schedules_supported_per_user (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfYearDaySchedulesSupportedPerUser attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfYearDaySchedulesSupportedPerUser attribute
 */
uint8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfYearDaySchedulesSupportedPerUser attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_year_day_schedules_supported_per_user new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_year_day_schedules_supported_per_user
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfYearDaySchedulesSupportedPerUser
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_year_day_schedules_supported_per_user_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfYearDaySchedulesSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_year_day_schedules_supported_per_user_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfYearDaySchedulesSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_year_day_schedules_supported_per_user_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfYearDaySchedulesSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_year_day_schedules_supported_per_user_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfYearDaySchedulesSupportedPerUser attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfHolidaySchedulesSupported
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfHolidaySchedulesSupported is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfHolidaySchedulesSupported is supported
 * @returns false if NumberOfHolidaySchedulesSupported is not supported
 */
bool dotdot_is_supported_door_lock_number_of_holiday_schedules_supported (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfHolidaySchedulesSupported attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfHolidaySchedulesSupported attribute
 */
uint8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfHolidaySchedulesSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_holiday_schedules_supported new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_holiday_schedules_supported
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfHolidaySchedulesSupported
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_holiday_schedules_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfHolidaySchedulesSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_holiday_schedules_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfHolidaySchedulesSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_holiday_schedules_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfHolidaySchedulesSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_holiday_schedules_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfHolidaySchedulesSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock MaxPINCodeLength
/**
 * @brief Verifies if the DotDot DoorLock - MaxPINCodeLength is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxPINCodeLength is supported
 * @returns false if MaxPINCodeLength is not supported
 */
bool dotdot_is_supported_door_lock_max_pin_code_length (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - MaxPINCodeLength attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxPINCodeLength attribute
 */
uint8_t dotdot_get_door_lock_max_pin_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - MaxPINCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_pin_code_length new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_max_pin_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_pin_code_length
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - MaxPINCodeLength
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_max_pin_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - MaxPINCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_max_pin_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - MaxPINCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_max_pin_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - MaxPINCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_max_pin_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - MaxPINCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_max_pin_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock MinPINCodeLength
/**
 * @brief Verifies if the DotDot DoorLock - MinPINCodeLength is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinPINCodeLength is supported
 * @returns false if MinPINCodeLength is not supported
 */
bool dotdot_is_supported_door_lock_min_pin_code_length (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - MinPINCodeLength attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinPINCodeLength attribute
 */
uint8_t dotdot_get_door_lock_min_pin_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - MinPINCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_pin_code_length new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_min_pin_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_pin_code_length
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - MinPINCodeLength
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_min_pin_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - MinPINCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_min_pin_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - MinPINCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_min_pin_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - MinPINCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_min_pin_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - MinPINCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_min_pin_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock MaxRFIDCodeLength
/**
 * @brief Verifies if the DotDot DoorLock - MaxRFIDCodeLength is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxRFIDCodeLength is supported
 * @returns false if MaxRFIDCodeLength is not supported
 */
bool dotdot_is_supported_door_lock_max_rfid_code_length (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - MaxRFIDCodeLength attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxRFIDCodeLength attribute
 */
uint8_t dotdot_get_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - MaxRFIDCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_rfid_code_length new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_rfid_code_length
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - MaxRFIDCodeLength
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_max_rfid_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - MaxRFIDCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_max_rfid_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - MaxRFIDCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_max_rfid_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - MaxRFIDCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_max_rfid_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - MaxRFIDCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock MinRFIDCodeLength
/**
 * @brief Verifies if the DotDot DoorLock - MinRFIDCodeLength is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinRFIDCodeLength is supported
 * @returns false if MinRFIDCodeLength is not supported
 */
bool dotdot_is_supported_door_lock_min_rfid_code_length (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - MinRFIDCodeLength attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinRFIDCodeLength attribute
 */
uint8_t dotdot_get_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - MinRFIDCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_rfid_code_length new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_rfid_code_length
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - MinRFIDCodeLength
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_min_rfid_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - MinRFIDCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_min_rfid_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - MinRFIDCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_min_rfid_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - MinRFIDCodeLength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_min_rfid_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - MinRFIDCodeLength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock CredentialRulesSupport
/**
 * @brief Verifies if the DotDot DoorLock - CredentialRulesSupport is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CredentialRulesSupport is supported
 * @returns false if CredentialRulesSupport is not supported
 */
bool dotdot_is_supported_door_lock_credential_rules_support (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - CredentialRulesSupport attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CredentialRulesSupport attribute
 */
uint8_t dotdot_get_door_lock_credential_rules_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - CredentialRulesSupport attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_credential_rules_support new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_credential_rules_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_credential_rules_support
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - CredentialRulesSupport
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_credential_rules_support_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - CredentialRulesSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_credential_rules_support_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - CredentialRulesSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_credential_rules_support_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - CredentialRulesSupport attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_credential_rules_support_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - CredentialRulesSupport attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_credential_rules_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock NumberOfCredentialsSupportedPerUser
/**
 * @brief Verifies if the DotDot DoorLock - NumberOfCredentialsSupportedPerUser is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfCredentialsSupportedPerUser is supported
 * @returns false if NumberOfCredentialsSupportedPerUser is not supported
 */
bool dotdot_is_supported_door_lock_number_of_credentials_supported_per_user (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - NumberOfCredentialsSupportedPerUser attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfCredentialsSupportedPerUser attribute
 */
uint8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - NumberOfCredentialsSupportedPerUser attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_credentials_supported_per_user new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_credentials_supported_per_user
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - NumberOfCredentialsSupportedPerUser
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_credentials_supported_per_user_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - NumberOfCredentialsSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_number_of_credentials_supported_per_user_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - NumberOfCredentialsSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_credentials_supported_per_user_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - NumberOfCredentialsSupportedPerUser attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_number_of_credentials_supported_per_user_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - NumberOfCredentialsSupportedPerUser attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock EnableLogging
/**
 * @brief Verifies if the DotDot DoorLock - EnableLogging is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnableLogging is supported
 * @returns false if EnableLogging is not supported
 */
bool dotdot_is_supported_door_lock_enable_logging (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - EnableLogging attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnableLogging attribute
 */
bool dotdot_get_door_lock_enable_logging(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - EnableLogging attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enable_logging new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_enable_logging(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_logging
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - EnableLogging
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_logging_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - EnableLogging attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_logging_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - EnableLogging attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_logging_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - EnableLogging attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_logging_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - EnableLogging attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_enable_logging(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock Language
/**
 * @brief Verifies if the DotDot DoorLock - Language is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Language is supported
 * @returns false if Language is not supported
 */
bool dotdot_is_supported_door_lock_language (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - Language attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Language attribute
 */
const char* dotdot_get_door_lock_language(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - Language attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_language new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_language(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_language
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - Language
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_language_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - Language attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_language_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - Language attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_language_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - Language attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_language_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - Language attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_language(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock LEDSettings
/**
 * @brief Verifies if the DotDot DoorLock - LEDSettings is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LEDSettings is supported
 * @returns false if LEDSettings is not supported
 */
bool dotdot_is_supported_door_lock_led_settings (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - LEDSettings attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LEDSettings attribute
 */
uint8_t dotdot_get_door_lock_led_settings(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - LEDSettings attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_led_settings new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_led_settings(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_led_settings
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - LEDSettings
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_led_settings_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - LEDSettings attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_led_settings_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - LEDSettings attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_led_settings_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - LEDSettings attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_led_settings_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - LEDSettings attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_led_settings(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock AutoRelockTime
/**
 * @brief Verifies if the DotDot DoorLock - AutoRelockTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AutoRelockTime is supported
 * @returns false if AutoRelockTime is not supported
 */
bool dotdot_is_supported_door_lock_auto_relock_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - AutoRelockTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AutoRelockTime attribute
 */
uint32_t dotdot_get_door_lock_auto_relock_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - AutoRelockTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_auto_relock_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_auto_relock_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_auto_relock_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - AutoRelockTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_auto_relock_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - AutoRelockTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_auto_relock_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - AutoRelockTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_auto_relock_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - AutoRelockTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_auto_relock_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - AutoRelockTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_auto_relock_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock SoundVolume
/**
 * @brief Verifies if the DotDot DoorLock - SoundVolume is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SoundVolume is supported
 * @returns false if SoundVolume is not supported
 */
bool dotdot_is_supported_door_lock_sound_volume (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - SoundVolume attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SoundVolume attribute
 */
uint8_t dotdot_get_door_lock_sound_volume(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - SoundVolume attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_sound_volume new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_sound_volume(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_sound_volume
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - SoundVolume
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_sound_volume_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - SoundVolume attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_sound_volume_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - SoundVolume attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_sound_volume_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - SoundVolume attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_sound_volume_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - SoundVolume attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_sound_volume(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock OperatingMode
/**
 * @brief Verifies if the DotDot DoorLock - OperatingMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OperatingMode is supported
 * @returns false if OperatingMode is not supported
 */
bool dotdot_is_supported_door_lock_operating_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - OperatingMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OperatingMode attribute
 */
DrlkOperMode dotdot_get_door_lock_operating_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - OperatingMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_operating_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_operating_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  DrlkOperMode new_operating_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - OperatingMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_operating_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - OperatingMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_operating_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - OperatingMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_operating_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - OperatingMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_operating_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - OperatingMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_operating_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock SupportedOperatingModes
/**
 * @brief Verifies if the DotDot DoorLock - SupportedOperatingModes is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SupportedOperatingModes is supported
 * @returns false if SupportedOperatingModes is not supported
 */
bool dotdot_is_supported_door_lock_supported_operating_modes (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - SupportedOperatingModes attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SupportedOperatingModes attribute
 */
uint16_t dotdot_get_door_lock_supported_operating_modes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - SupportedOperatingModes attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_supported_operating_modes new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_supported_operating_modes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_operating_modes
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - SupportedOperatingModes
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_supported_operating_modes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - SupportedOperatingModes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_supported_operating_modes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - SupportedOperatingModes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_supported_operating_modes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - SupportedOperatingModes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_supported_operating_modes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - SupportedOperatingModes attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_supported_operating_modes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock DefaultConfigurationRegister
/**
 * @brief Verifies if the DotDot DoorLock - DefaultConfigurationRegister is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DefaultConfigurationRegister is supported
 * @returns false if DefaultConfigurationRegister is not supported
 */
bool dotdot_is_supported_door_lock_default_configuration_register (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - DefaultConfigurationRegister attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DefaultConfigurationRegister attribute
 */
uint16_t dotdot_get_door_lock_default_configuration_register(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - DefaultConfigurationRegister attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_default_configuration_register new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_default_configuration_register(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_default_configuration_register
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - DefaultConfigurationRegister
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_default_configuration_register_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - DefaultConfigurationRegister attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_default_configuration_register_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - DefaultConfigurationRegister attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_default_configuration_register_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - DefaultConfigurationRegister attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_default_configuration_register_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - DefaultConfigurationRegister attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_default_configuration_register(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock EnableLocalProgramming
/**
 * @brief Verifies if the DotDot DoorLock - EnableLocalProgramming is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnableLocalProgramming is supported
 * @returns false if EnableLocalProgramming is not supported
 */
bool dotdot_is_supported_door_lock_enable_local_programming (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - EnableLocalProgramming attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnableLocalProgramming attribute
 */
bool dotdot_get_door_lock_enable_local_programming(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - EnableLocalProgramming attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enable_local_programming new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_enable_local_programming(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_local_programming
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - EnableLocalProgramming
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_local_programming_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - EnableLocalProgramming attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_local_programming_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - EnableLocalProgramming attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_local_programming_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - EnableLocalProgramming attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_local_programming_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - EnableLocalProgramming attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_enable_local_programming(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock EnableOneTouchLocking
/**
 * @brief Verifies if the DotDot DoorLock - EnableOneTouchLocking is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnableOneTouchLocking is supported
 * @returns false if EnableOneTouchLocking is not supported
 */
bool dotdot_is_supported_door_lock_enable_one_touch_locking (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - EnableOneTouchLocking attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnableOneTouchLocking attribute
 */
bool dotdot_get_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - EnableOneTouchLocking attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enable_one_touch_locking new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_one_touch_locking
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - EnableOneTouchLocking
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_one_touch_locking_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - EnableOneTouchLocking attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_one_touch_locking_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - EnableOneTouchLocking attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_one_touch_locking_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - EnableOneTouchLocking attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_one_touch_locking_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - EnableOneTouchLocking attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock EnableInsideStatusLED
/**
 * @brief Verifies if the DotDot DoorLock - EnableInsideStatusLED is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnableInsideStatusLED is supported
 * @returns false if EnableInsideStatusLED is not supported
 */
bool dotdot_is_supported_door_lock_enable_inside_statusled (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - EnableInsideStatusLED attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnableInsideStatusLED attribute
 */
bool dotdot_get_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - EnableInsideStatusLED attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enable_inside_statusled new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_inside_statusled
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - EnableInsideStatusLED
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_inside_statusled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - EnableInsideStatusLED attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_inside_statusled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - EnableInsideStatusLED attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_inside_statusled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - EnableInsideStatusLED attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_inside_statusled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - EnableInsideStatusLED attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock EnablePrivacyModeButton
/**
 * @brief Verifies if the DotDot DoorLock - EnablePrivacyModeButton is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnablePrivacyModeButton is supported
 * @returns false if EnablePrivacyModeButton is not supported
 */
bool dotdot_is_supported_door_lock_enable_privacy_mode_button (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - EnablePrivacyModeButton attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnablePrivacyModeButton attribute
 */
bool dotdot_get_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - EnablePrivacyModeButton attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enable_privacy_mode_button new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_privacy_mode_button
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - EnablePrivacyModeButton
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_privacy_mode_button_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - EnablePrivacyModeButton attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_enable_privacy_mode_button_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - EnablePrivacyModeButton attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_privacy_mode_button_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - EnablePrivacyModeButton attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_enable_privacy_mode_button_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - EnablePrivacyModeButton attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock LocalProgrammingFeatures
/**
 * @brief Verifies if the DotDot DoorLock - LocalProgrammingFeatures is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LocalProgrammingFeatures is supported
 * @returns false if LocalProgrammingFeatures is not supported
 */
bool dotdot_is_supported_door_lock_local_programming_features (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - LocalProgrammingFeatures attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LocalProgrammingFeatures attribute
 */
uint8_t dotdot_get_door_lock_local_programming_features(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - LocalProgrammingFeatures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_local_programming_features new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_local_programming_features(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_local_programming_features
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - LocalProgrammingFeatures
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_local_programming_features_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - LocalProgrammingFeatures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_local_programming_features_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - LocalProgrammingFeatures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_local_programming_features_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - LocalProgrammingFeatures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_local_programming_features_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - LocalProgrammingFeatures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_local_programming_features(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock WrongCodeEntryLimit
/**
 * @brief Verifies if the DotDot DoorLock - WrongCodeEntryLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if WrongCodeEntryLimit is supported
 * @returns false if WrongCodeEntryLimit is not supported
 */
bool dotdot_is_supported_door_lock_wrong_code_entry_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - WrongCodeEntryLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns WrongCodeEntryLimit attribute
 */
uint8_t dotdot_get_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - WrongCodeEntryLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_wrong_code_entry_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_wrong_code_entry_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - WrongCodeEntryLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_wrong_code_entry_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - WrongCodeEntryLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_wrong_code_entry_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - WrongCodeEntryLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_wrong_code_entry_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - WrongCodeEntryLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_wrong_code_entry_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - WrongCodeEntryLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock UserCodeTemporaryDisableTime
/**
 * @brief Verifies if the DotDot DoorLock - UserCodeTemporaryDisableTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UserCodeTemporaryDisableTime is supported
 * @returns false if UserCodeTemporaryDisableTime is not supported
 */
bool dotdot_is_supported_door_lock_user_code_temporary_disable_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - UserCodeTemporaryDisableTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UserCodeTemporaryDisableTime attribute
 */
uint8_t dotdot_get_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - UserCodeTemporaryDisableTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_user_code_temporary_disable_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_user_code_temporary_disable_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - UserCodeTemporaryDisableTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_user_code_temporary_disable_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - UserCodeTemporaryDisableTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_user_code_temporary_disable_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - UserCodeTemporaryDisableTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_user_code_temporary_disable_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - UserCodeTemporaryDisableTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_user_code_temporary_disable_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - UserCodeTemporaryDisableTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock SendPINOverTheAir
/**
 * @brief Verifies if the DotDot DoorLock - SendPINOverTheAir is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SendPINOverTheAir is supported
 * @returns false if SendPINOverTheAir is not supported
 */
bool dotdot_is_supported_door_lock_send_pin_over_the_air (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - SendPINOverTheAir attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SendPINOverTheAir attribute
 */
bool dotdot_get_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - SendPINOverTheAir attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_send_pin_over_the_air new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_send_pin_over_the_air
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - SendPINOverTheAir
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_send_pin_over_the_air_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - SendPINOverTheAir attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_send_pin_over_the_air_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - SendPINOverTheAir attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_send_pin_over_the_air_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - SendPINOverTheAir attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_send_pin_over_the_air_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - SendPINOverTheAir attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock RequirePINforRFOperation
/**
 * @brief Verifies if the DotDot DoorLock - RequirePINforRFOperation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RequirePINforRFOperation is supported
 * @returns false if RequirePINforRFOperation is not supported
 */
bool dotdot_is_supported_door_lock_require_pi_nfor_rf_operation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - RequirePINforRFOperation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RequirePINforRFOperation attribute
 */
bool dotdot_get_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - RequirePINforRFOperation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_require_pi_nfor_rf_operation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_require_pi_nfor_rf_operation
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - RequirePINforRFOperation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_require_pi_nfor_rf_operation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - RequirePINforRFOperation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_require_pi_nfor_rf_operation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - RequirePINforRFOperation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_require_pi_nfor_rf_operation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - RequirePINforRFOperation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_require_pi_nfor_rf_operation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - RequirePINforRFOperation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock SecurityLevel
/**
 * @brief Verifies if the DotDot DoorLock - SecurityLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SecurityLevel is supported
 * @returns false if SecurityLevel is not supported
 */
bool dotdot_is_supported_door_lock_security_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - SecurityLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SecurityLevel attribute
 */
uint8_t dotdot_get_door_lock_security_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - SecurityLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_security_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_security_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_security_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - SecurityLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_security_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - SecurityLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_security_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - SecurityLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_security_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - SecurityLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_security_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - SecurityLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_security_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock ExpiringUserTimeout
/**
 * @brief Verifies if the DotDot DoorLock - ExpiringUserTimeout is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ExpiringUserTimeout is supported
 * @returns false if ExpiringUserTimeout is not supported
 */
bool dotdot_is_supported_door_lock_expiring_user_timeout (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - ExpiringUserTimeout attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ExpiringUserTimeout attribute
 */
uint16_t dotdot_get_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - ExpiringUserTimeout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_expiring_user_timeout new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_expiring_user_timeout
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - ExpiringUserTimeout
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_expiring_user_timeout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - ExpiringUserTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_expiring_user_timeout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - ExpiringUserTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_expiring_user_timeout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - ExpiringUserTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_expiring_user_timeout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - ExpiringUserTimeout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock AlarmMask
/**
 * @brief Verifies if the DotDot DoorLock - AlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AlarmMask is supported
 * @returns false if AlarmMask is not supported
 */
bool dotdot_is_supported_door_lock_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - AlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AlarmMask attribute
 */
uint16_t dotdot_get_door_lock_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - AlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock KeypadOperationEventMask
/**
 * @brief Verifies if the DotDot DoorLock - KeypadOperationEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if KeypadOperationEventMask is supported
 * @returns false if KeypadOperationEventMask is not supported
 */
bool dotdot_is_supported_door_lock_keypad_operation_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - KeypadOperationEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns KeypadOperationEventMask attribute
 */
uint16_t dotdot_get_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - KeypadOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_keypad_operation_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_keypad_operation_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - KeypadOperationEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_keypad_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - KeypadOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_keypad_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - KeypadOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_keypad_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - KeypadOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_keypad_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - KeypadOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock RFOperationEventMask
/**
 * @brief Verifies if the DotDot DoorLock - RFOperationEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RFOperationEventMask is supported
 * @returns false if RFOperationEventMask is not supported
 */
bool dotdot_is_supported_door_lock_rf_operation_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - RFOperationEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RFOperationEventMask attribute
 */
uint16_t dotdot_get_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - RFOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rf_operation_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rf_operation_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - RFOperationEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rf_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - RFOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rf_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - RFOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rf_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - RFOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rf_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - RFOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock ManualOperationEventMask
/**
 * @brief Verifies if the DotDot DoorLock - ManualOperationEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ManualOperationEventMask is supported
 * @returns false if ManualOperationEventMask is not supported
 */
bool dotdot_is_supported_door_lock_manual_operation_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - ManualOperationEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ManualOperationEventMask attribute
 */
uint16_t dotdot_get_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - ManualOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_manual_operation_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_manual_operation_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - ManualOperationEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_manual_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - ManualOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_manual_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - ManualOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_manual_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - ManualOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_manual_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - ManualOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock RFIDOperationEventMask
/**
 * @brief Verifies if the DotDot DoorLock - RFIDOperationEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RFIDOperationEventMask is supported
 * @returns false if RFIDOperationEventMask is not supported
 */
bool dotdot_is_supported_door_lock_rfid_operation_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - RFIDOperationEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RFIDOperationEventMask attribute
 */
uint16_t dotdot_get_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - RFIDOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rfid_operation_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rfid_operation_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - RFIDOperationEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rfid_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - RFIDOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rfid_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - RFIDOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rfid_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - RFIDOperationEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rfid_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - RFIDOperationEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock KeypadProgrammingEventMask
/**
 * @brief Verifies if the DotDot DoorLock - KeypadProgrammingEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if KeypadProgrammingEventMask is supported
 * @returns false if KeypadProgrammingEventMask is not supported
 */
bool dotdot_is_supported_door_lock_keypad_programming_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - KeypadProgrammingEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns KeypadProgrammingEventMask attribute
 */
uint16_t dotdot_get_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - KeypadProgrammingEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_keypad_programming_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_keypad_programming_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - KeypadProgrammingEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_keypad_programming_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - KeypadProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_keypad_programming_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - KeypadProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_keypad_programming_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - KeypadProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_keypad_programming_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - KeypadProgrammingEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock RFProgrammingEventMask
/**
 * @brief Verifies if the DotDot DoorLock - RFProgrammingEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RFProgrammingEventMask is supported
 * @returns false if RFProgrammingEventMask is not supported
 */
bool dotdot_is_supported_door_lock_rf_programming_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - RFProgrammingEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RFProgrammingEventMask attribute
 */
uint16_t dotdot_get_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - RFProgrammingEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rf_programming_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rf_programming_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - RFProgrammingEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rf_programming_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - RFProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rf_programming_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - RFProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rf_programming_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - RFProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rf_programming_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - RFProgrammingEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock RFIDProgrammingEventMask
/**
 * @brief Verifies if the DotDot DoorLock - RFIDProgrammingEventMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RFIDProgrammingEventMask is supported
 * @returns false if RFIDProgrammingEventMask is not supported
 */
bool dotdot_is_supported_door_lock_rfid_programming_event_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - RFIDProgrammingEventMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RFIDProgrammingEventMask attribute
 */
uint16_t dotdot_get_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - RFIDProgrammingEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rfid_programming_event_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rfid_programming_event_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - RFIDProgrammingEventMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rfid_programming_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - RFIDProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_rfid_programming_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - RFIDProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rfid_programming_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - RFIDProgrammingEventMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_rfid_programming_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - RFIDProgrammingEventMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DoorLock FeatureMap
/**
 * @brief Verifies if the DotDot DoorLock - FeatureMap is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FeatureMap is supported
 * @returns false if FeatureMap is not supported
 */
bool dotdot_is_supported_door_lock_feature_map (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DoorLock - FeatureMap attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns FeatureMap attribute
 */
uint16_t dotdot_get_door_lock_feature_map(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DoorLock - FeatureMap attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_feature_map new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_door_lock_feature_map(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_feature_map
  );

/**
 * @brief Undefines the Reported value of the the DotDot DoorLock - FeatureMap
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_feature_map_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DoorLock - FeatureMap attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_door_lock_feature_map_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DoorLock - FeatureMap attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_feature_map_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DoorLock - FeatureMap attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_door_lock_feature_map_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DoorLock - FeatureMap attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_door_lock_feature_map(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the DoorLock
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_door_lock_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * DoorLock Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_door_lock_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster WindowCovering
////////////////////////////////////////////////////////////////////////////////
// WindowCovering WindowCoveringType
/**
 * @brief Verifies if the DotDot WindowCovering - WindowCoveringType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if WindowCoveringType is supported
 * @returns false if WindowCoveringType is not supported
 */
bool dotdot_is_supported_window_covering_window_covering_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - WindowCoveringType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns WindowCoveringType attribute
 */
uint8_t dotdot_get_window_covering_window_covering_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - WindowCoveringType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_window_covering_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_window_covering_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_window_covering_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - WindowCoveringType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_window_covering_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - WindowCoveringType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_window_covering_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - WindowCoveringType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_window_covering_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - WindowCoveringType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_window_covering_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - WindowCoveringType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_window_covering_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering PhysicalClosedLimitLift
/**
 * @brief Verifies if the DotDot WindowCovering - PhysicalClosedLimitLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalClosedLimitLift is supported
 * @returns false if PhysicalClosedLimitLift is not supported
 */
bool dotdot_is_supported_window_covering_physical_closed_limit_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - PhysicalClosedLimitLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalClosedLimitLift attribute
 */
uint16_t dotdot_get_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - PhysicalClosedLimitLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_closed_limit_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - PhysicalClosedLimitLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_physical_closed_limit_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - PhysicalClosedLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_physical_closed_limit_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - PhysicalClosedLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_physical_closed_limit_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - PhysicalClosedLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_physical_closed_limit_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - PhysicalClosedLimitLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering PhysicalClosedLimitTilt
/**
 * @brief Verifies if the DotDot WindowCovering - PhysicalClosedLimitTilt is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalClosedLimitTilt is supported
 * @returns false if PhysicalClosedLimitTilt is not supported
 */
bool dotdot_is_supported_window_covering_physical_closed_limit_tilt (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - PhysicalClosedLimitTilt attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalClosedLimitTilt attribute
 */
uint16_t dotdot_get_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - PhysicalClosedLimitTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_closed_limit_tilt new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit_tilt
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - PhysicalClosedLimitTilt
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_physical_closed_limit_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - PhysicalClosedLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_physical_closed_limit_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - PhysicalClosedLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_physical_closed_limit_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - PhysicalClosedLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_physical_closed_limit_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - PhysicalClosedLimitTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering CurrentPositionLift
/**
 * @brief Verifies if the DotDot WindowCovering - CurrentPositionLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentPositionLift is supported
 * @returns false if CurrentPositionLift is not supported
 */
bool dotdot_is_supported_window_covering_current_position_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - CurrentPositionLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentPositionLift attribute
 */
uint16_t dotdot_get_window_covering_current_position_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - CurrentPositionLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_position_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_current_position_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_position_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - CurrentPositionLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - CurrentPositionLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - CurrentPositionLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - CurrentPositionLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - CurrentPositionLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_current_position_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering CurrentPositionTilt
/**
 * @brief Verifies if the DotDot WindowCovering - CurrentPositionTilt is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentPositionTilt is supported
 * @returns false if CurrentPositionTilt is not supported
 */
bool dotdot_is_supported_window_covering_current_position_tilt (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - CurrentPositionTilt attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentPositionTilt attribute
 */
uint16_t dotdot_get_window_covering_current_position_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - CurrentPositionTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_position_tilt new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_current_position_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_position_tilt
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - CurrentPositionTilt
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - CurrentPositionTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - CurrentPositionTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - CurrentPositionTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - CurrentPositionTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_current_position_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering NumberOfActuationsLift
/**
 * @brief Verifies if the DotDot WindowCovering - NumberOfActuationsLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfActuationsLift is supported
 * @returns false if NumberOfActuationsLift is not supported
 */
bool dotdot_is_supported_window_covering_number_of_actuations_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - NumberOfActuationsLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfActuationsLift attribute
 */
uint16_t dotdot_get_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - NumberOfActuationsLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_actuations_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_actuations_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - NumberOfActuationsLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_number_of_actuations_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - NumberOfActuationsLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_number_of_actuations_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - NumberOfActuationsLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_number_of_actuations_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - NumberOfActuationsLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_number_of_actuations_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - NumberOfActuationsLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering NumberOfActuationsTilt
/**
 * @brief Verifies if the DotDot WindowCovering - NumberOfActuationsTilt is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfActuationsTilt is supported
 * @returns false if NumberOfActuationsTilt is not supported
 */
bool dotdot_is_supported_window_covering_number_of_actuations_tilt (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - NumberOfActuationsTilt attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfActuationsTilt attribute
 */
uint16_t dotdot_get_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - NumberOfActuationsTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_actuations_tilt new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_actuations_tilt
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - NumberOfActuationsTilt
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_number_of_actuations_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - NumberOfActuationsTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_number_of_actuations_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - NumberOfActuationsTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_number_of_actuations_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - NumberOfActuationsTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_number_of_actuations_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - NumberOfActuationsTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering ConfigOrStatus
/**
 * @brief Verifies if the DotDot WindowCovering - ConfigOrStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ConfigOrStatus is supported
 * @returns false if ConfigOrStatus is not supported
 */
bool dotdot_is_supported_window_covering_config_or_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - ConfigOrStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ConfigOrStatus attribute
 */
uint8_t dotdot_get_window_covering_config_or_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - ConfigOrStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_config_or_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_config_or_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_config_or_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - ConfigOrStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_config_or_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - ConfigOrStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_config_or_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - ConfigOrStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_config_or_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - ConfigOrStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_config_or_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - ConfigOrStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_config_or_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering CurrentPositionLiftPercentage
/**
 * @brief Verifies if the DotDot WindowCovering - CurrentPositionLiftPercentage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentPositionLiftPercentage is supported
 * @returns false if CurrentPositionLiftPercentage is not supported
 */
bool dotdot_is_supported_window_covering_current_position_lift_percentage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - CurrentPositionLiftPercentage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentPositionLiftPercentage attribute
 */
uint8_t dotdot_get_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - CurrentPositionLiftPercentage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_position_lift_percentage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_position_lift_percentage
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - CurrentPositionLiftPercentage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_lift_percentage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - CurrentPositionLiftPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_lift_percentage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - CurrentPositionLiftPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_lift_percentage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - CurrentPositionLiftPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_lift_percentage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - CurrentPositionLiftPercentage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering CurrentPositionTiltPercentage
/**
 * @brief Verifies if the DotDot WindowCovering - CurrentPositionTiltPercentage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentPositionTiltPercentage is supported
 * @returns false if CurrentPositionTiltPercentage is not supported
 */
bool dotdot_is_supported_window_covering_current_position_tilt_percentage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - CurrentPositionTiltPercentage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentPositionTiltPercentage attribute
 */
uint8_t dotdot_get_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - CurrentPositionTiltPercentage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_position_tilt_percentage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_position_tilt_percentage
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - CurrentPositionTiltPercentage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_tilt_percentage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - CurrentPositionTiltPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_current_position_tilt_percentage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - CurrentPositionTiltPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_tilt_percentage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - CurrentPositionTiltPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_current_position_tilt_percentage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - CurrentPositionTiltPercentage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering InstalledOpenLimitLift
/**
 * @brief Verifies if the DotDot WindowCovering - InstalledOpenLimitLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if InstalledOpenLimitLift is supported
 * @returns false if InstalledOpenLimitLift is not supported
 */
bool dotdot_is_supported_window_covering_installed_open_limit_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - InstalledOpenLimitLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns InstalledOpenLimitLift attribute
 */
uint16_t dotdot_get_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - InstalledOpenLimitLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_installed_open_limit_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_open_limit_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - InstalledOpenLimitLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_open_limit_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - InstalledOpenLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_open_limit_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - InstalledOpenLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_open_limit_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - InstalledOpenLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_open_limit_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - InstalledOpenLimitLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering InstalledClosedLimitLift
/**
 * @brief Verifies if the DotDot WindowCovering - InstalledClosedLimitLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if InstalledClosedLimitLift is supported
 * @returns false if InstalledClosedLimitLift is not supported
 */
bool dotdot_is_supported_window_covering_installed_closed_limit_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - InstalledClosedLimitLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns InstalledClosedLimitLift attribute
 */
uint16_t dotdot_get_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - InstalledClosedLimitLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_installed_closed_limit_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_closed_limit_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - InstalledClosedLimitLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_closed_limit_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - InstalledClosedLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_closed_limit_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - InstalledClosedLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_closed_limit_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - InstalledClosedLimitLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_closed_limit_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - InstalledClosedLimitLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering InstalledOpenLimitTilt
/**
 * @brief Verifies if the DotDot WindowCovering - InstalledOpenLimitTilt is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if InstalledOpenLimitTilt is supported
 * @returns false if InstalledOpenLimitTilt is not supported
 */
bool dotdot_is_supported_window_covering_installed_open_limit_tilt (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - InstalledOpenLimitTilt attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns InstalledOpenLimitTilt attribute
 */
uint16_t dotdot_get_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - InstalledOpenLimitTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_installed_open_limit_tilt new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_open_limit_tilt
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - InstalledOpenLimitTilt
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_open_limit_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - InstalledOpenLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_open_limit_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - InstalledOpenLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_open_limit_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - InstalledOpenLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_open_limit_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - InstalledOpenLimitTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering InstalledClosedLimitTilt
/**
 * @brief Verifies if the DotDot WindowCovering - InstalledClosedLimitTilt is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if InstalledClosedLimitTilt is supported
 * @returns false if InstalledClosedLimitTilt is not supported
 */
bool dotdot_is_supported_window_covering_installed_closed_limit_tilt (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - InstalledClosedLimitTilt attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns InstalledClosedLimitTilt attribute
 */
uint16_t dotdot_get_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - InstalledClosedLimitTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_installed_closed_limit_tilt new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_closed_limit_tilt
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - InstalledClosedLimitTilt
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_closed_limit_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - InstalledClosedLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_installed_closed_limit_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - InstalledClosedLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_closed_limit_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - InstalledClosedLimitTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_installed_closed_limit_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - InstalledClosedLimitTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering VelocityLift
/**
 * @brief Verifies if the DotDot WindowCovering - VelocityLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if VelocityLift is supported
 * @returns false if VelocityLift is not supported
 */
bool dotdot_is_supported_window_covering_velocity_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - VelocityLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns VelocityLift attribute
 */
uint16_t dotdot_get_window_covering_velocity_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - VelocityLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_velocity_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_velocity_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_velocity_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - VelocityLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_velocity_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - VelocityLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_velocity_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - VelocityLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_velocity_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - VelocityLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_velocity_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - VelocityLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_velocity_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering AccelerationTimeLift
/**
 * @brief Verifies if the DotDot WindowCovering - AccelerationTimeLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AccelerationTimeLift is supported
 * @returns false if AccelerationTimeLift is not supported
 */
bool dotdot_is_supported_window_covering_acceleration_time_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - AccelerationTimeLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AccelerationTimeLift attribute
 */
uint16_t dotdot_get_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - AccelerationTimeLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_acceleration_time_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_acceleration_time_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - AccelerationTimeLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_acceleration_time_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - AccelerationTimeLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_acceleration_time_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - AccelerationTimeLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_acceleration_time_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - AccelerationTimeLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_acceleration_time_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - AccelerationTimeLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering DecelerationTimeLift
/**
 * @brief Verifies if the DotDot WindowCovering - DecelerationTimeLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DecelerationTimeLift is supported
 * @returns false if DecelerationTimeLift is not supported
 */
bool dotdot_is_supported_window_covering_deceleration_time_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - DecelerationTimeLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DecelerationTimeLift attribute
 */
uint16_t dotdot_get_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - DecelerationTimeLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_deceleration_time_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_deceleration_time_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - DecelerationTimeLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_deceleration_time_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - DecelerationTimeLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_deceleration_time_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - DecelerationTimeLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_deceleration_time_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - DecelerationTimeLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_deceleration_time_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - DecelerationTimeLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering Mode
/**
 * @brief Verifies if the DotDot WindowCovering - Mode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Mode is supported
 * @returns false if Mode is not supported
 */
bool dotdot_is_supported_window_covering_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - Mode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Mode attribute
 */
uint8_t dotdot_get_window_covering_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - Mode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - Mode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - Mode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - Mode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - Mode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - Mode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering IntermediateSetpointsLift
/**
 * @brief Verifies if the DotDot WindowCovering - IntermediateSetpointsLift is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if IntermediateSetpointsLift is supported
 * @returns false if IntermediateSetpointsLift is not supported
 */
bool dotdot_is_supported_window_covering_intermediate_setpoints_lift (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - IntermediateSetpointsLift attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns IntermediateSetpointsLift attribute
 */
const char* dotdot_get_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - IntermediateSetpointsLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_intermediate_setpoints_lift new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_intermediate_setpoints_lift
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - IntermediateSetpointsLift
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_intermediate_setpoints_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - IntermediateSetpointsLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_intermediate_setpoints_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - IntermediateSetpointsLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_intermediate_setpoints_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - IntermediateSetpointsLift attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_intermediate_setpoints_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - IntermediateSetpointsLift attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindowCovering IntermediateSetpointsTilt
/**
 * @brief Verifies if the DotDot WindowCovering - IntermediateSetpointsTilt is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if IntermediateSetpointsTilt is supported
 * @returns false if IntermediateSetpointsTilt is not supported
 */
bool dotdot_is_supported_window_covering_intermediate_setpoints_tilt (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindowCovering - IntermediateSetpointsTilt attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns IntermediateSetpointsTilt attribute
 */
const char* dotdot_get_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindowCovering - IntermediateSetpointsTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_intermediate_setpoints_tilt new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_intermediate_setpoints_tilt
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindowCovering - IntermediateSetpointsTilt
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_intermediate_setpoints_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindowCovering - IntermediateSetpointsTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_window_covering_intermediate_setpoints_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindowCovering - IntermediateSetpointsTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_intermediate_setpoints_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindowCovering - IntermediateSetpointsTilt attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_window_covering_intermediate_setpoints_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindowCovering - IntermediateSetpointsTilt attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the WindowCovering
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_window_covering_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * WindowCovering Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_window_covering_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster BarrierControl
////////////////////////////////////////////////////////////////////////////////
// BarrierControl MovingState
/**
 * @brief Verifies if the DotDot BarrierControl - MovingState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MovingState is supported
 * @returns false if MovingState is not supported
 */
bool dotdot_is_supported_barrier_control_moving_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - MovingState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MovingState attribute
 */
uint8_t dotdot_get_barrier_control_moving_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - MovingState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_moving_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_moving_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_moving_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - MovingState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_moving_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - MovingState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_moving_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - MovingState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_moving_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - MovingState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_moving_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - MovingState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_moving_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl SafetyStatus
/**
 * @brief Verifies if the DotDot BarrierControl - SafetyStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SafetyStatus is supported
 * @returns false if SafetyStatus is not supported
 */
bool dotdot_is_supported_barrier_control_safety_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - SafetyStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SafetyStatus attribute
 */
uint16_t dotdot_get_barrier_control_safety_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - SafetyStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_safety_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_safety_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_safety_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - SafetyStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_safety_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - SafetyStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_safety_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - SafetyStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_safety_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - SafetyStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_safety_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - SafetyStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_safety_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl Capabilities
/**
 * @brief Verifies if the DotDot BarrierControl - Capabilities is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Capabilities is supported
 * @returns false if Capabilities is not supported
 */
bool dotdot_is_supported_barrier_control_capabilities (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - Capabilities attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Capabilities attribute
 */
uint8_t dotdot_get_barrier_control_capabilities(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - Capabilities attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_capabilities new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_capabilities(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_capabilities
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - Capabilities
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_capabilities_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - Capabilities attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_capabilities_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - Capabilities attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_capabilities_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - Capabilities attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_capabilities_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - Capabilities attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_capabilities(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl OpenEvents
/**
 * @brief Verifies if the DotDot BarrierControl - OpenEvents is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OpenEvents is supported
 * @returns false if OpenEvents is not supported
 */
bool dotdot_is_supported_barrier_control_open_events (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - OpenEvents attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OpenEvents attribute
 */
uint16_t dotdot_get_barrier_control_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - OpenEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_open_events new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_events
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - OpenEvents
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_open_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - OpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_open_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - OpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_open_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - OpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_open_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - OpenEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl CloseEvents
/**
 * @brief Verifies if the DotDot BarrierControl - CloseEvents is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CloseEvents is supported
 * @returns false if CloseEvents is not supported
 */
bool dotdot_is_supported_barrier_control_close_events (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - CloseEvents attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CloseEvents attribute
 */
uint16_t dotdot_get_barrier_control_close_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - CloseEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_close_events new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_close_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_close_events
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - CloseEvents
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_close_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - CloseEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_close_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - CloseEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_close_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - CloseEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_close_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - CloseEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_close_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl CommandOpenEvents
/**
 * @brief Verifies if the DotDot BarrierControl - CommandOpenEvents is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CommandOpenEvents is supported
 * @returns false if CommandOpenEvents is not supported
 */
bool dotdot_is_supported_barrier_control_command_open_events (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - CommandOpenEvents attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CommandOpenEvents attribute
 */
uint16_t dotdot_get_barrier_control_command_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - CommandOpenEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_command_open_events new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_command_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_command_open_events
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - CommandOpenEvents
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_command_open_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - CommandOpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_command_open_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - CommandOpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_command_open_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - CommandOpenEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_command_open_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - CommandOpenEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_command_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl CommandCloseEvents
/**
 * @brief Verifies if the DotDot BarrierControl - CommandCloseEvents is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CommandCloseEvents is supported
 * @returns false if CommandCloseEvents is not supported
 */
bool dotdot_is_supported_barrier_control_command_close_events (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - CommandCloseEvents attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CommandCloseEvents attribute
 */
uint16_t dotdot_get_barrier_control_command_close_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - CommandCloseEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_command_close_events new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_command_close_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_command_close_events
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - CommandCloseEvents
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_command_close_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - CommandCloseEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_command_close_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - CommandCloseEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_command_close_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - CommandCloseEvents attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_command_close_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - CommandCloseEvents attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_command_close_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl OpenPeriod
/**
 * @brief Verifies if the DotDot BarrierControl - OpenPeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OpenPeriod is supported
 * @returns false if OpenPeriod is not supported
 */
bool dotdot_is_supported_barrier_control_open_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - OpenPeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OpenPeriod attribute
 */
uint16_t dotdot_get_barrier_control_open_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - OpenPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_open_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_open_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - OpenPeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_open_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - OpenPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_open_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - OpenPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_open_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - OpenPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_open_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - OpenPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_open_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl ClosePeriod
/**
 * @brief Verifies if the DotDot BarrierControl - ClosePeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ClosePeriod is supported
 * @returns false if ClosePeriod is not supported
 */
bool dotdot_is_supported_barrier_control_close_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - ClosePeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ClosePeriod attribute
 */
uint16_t dotdot_get_barrier_control_close_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - ClosePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_close_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_close_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_close_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - ClosePeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_close_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - ClosePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_close_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - ClosePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_close_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - ClosePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_close_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - ClosePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_close_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BarrierControl BarrierPosition
/**
 * @brief Verifies if the DotDot BarrierControl - BarrierPosition is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BarrierPosition is supported
 * @returns false if BarrierPosition is not supported
 */
bool dotdot_is_supported_barrier_control_barrier_position (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BarrierControl - BarrierPosition attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BarrierPosition attribute
 */
uint8_t dotdot_get_barrier_control_barrier_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BarrierControl - BarrierPosition attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_barrier_position new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_barrier_control_barrier_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_barrier_position
  );

/**
 * @brief Undefines the Reported value of the the DotDot BarrierControl - BarrierPosition
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_barrier_position_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BarrierControl - BarrierPosition attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_barrier_control_barrier_position_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BarrierControl - BarrierPosition attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_barrier_position_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BarrierControl - BarrierPosition attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_barrier_control_barrier_position_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BarrierControl - BarrierPosition attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_barrier_control_barrier_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the BarrierControl
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_barrier_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * BarrierControl Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_barrier_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PumpConfigurationAndControl
////////////////////////////////////////////////////////////////////////////////
// PumpConfigurationAndControl MaxPressure
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxPressure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxPressure is supported
 * @returns false if MaxPressure is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_pressure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxPressure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxPressure attribute
 */
int16_t dotdot_get_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_pressure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_pressure
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxPressure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxSpeed
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxSpeed is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxSpeed is supported
 * @returns false if MaxSpeed is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_speed (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxSpeed attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxSpeed attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxSpeed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_speed new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_speed
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxSpeed
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxSpeed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxFlow
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxFlow is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxFlow is supported
 * @returns false if MaxFlow is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_flow (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxFlow attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxFlow attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxFlow attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_flow new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_flow
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxFlow
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_flow_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_flow_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_flow_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_flow_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxFlow attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MinConstPressure
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MinConstPressure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinConstPressure is supported
 * @returns false if MinConstPressure is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_min_const_pressure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MinConstPressure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinConstPressure attribute
 */
int16_t dotdot_get_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MinConstPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_const_pressure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_const_pressure
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MinConstPressure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MinConstPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MinConstPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxConstPressure
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxConstPressure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxConstPressure is supported
 * @returns false if MaxConstPressure is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_const_pressure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxConstPressure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxConstPressure attribute
 */
int16_t dotdot_get_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxConstPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_const_pressure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_const_pressure
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxConstPressure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxConstPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxConstPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MinCompPressure
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MinCompPressure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinCompPressure is supported
 * @returns false if MinCompPressure is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_min_comp_pressure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MinCompPressure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinCompPressure attribute
 */
int16_t dotdot_get_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MinCompPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_comp_pressure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_comp_pressure
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MinCompPressure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_comp_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MinCompPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_comp_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MinCompPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_comp_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MinCompPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_comp_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MinCompPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxCompPressure
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxCompPressure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxCompPressure is supported
 * @returns false if MaxCompPressure is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_comp_pressure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxCompPressure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxCompPressure attribute
 */
int16_t dotdot_get_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxCompPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_comp_pressure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_comp_pressure
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxCompPressure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_comp_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxCompPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_comp_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxCompPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_comp_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxCompPressure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_comp_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxCompPressure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MinConstSpeed
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MinConstSpeed is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinConstSpeed is supported
 * @returns false if MinConstSpeed is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_min_const_speed (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MinConstSpeed attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinConstSpeed attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MinConstSpeed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_const_speed new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_const_speed
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MinConstSpeed
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MinConstSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MinConstSpeed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxConstSpeed
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxConstSpeed is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxConstSpeed is supported
 * @returns false if MaxConstSpeed is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_const_speed (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxConstSpeed attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxConstSpeed attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxConstSpeed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_const_speed new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_const_speed
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxConstSpeed
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxConstSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstSpeed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxConstSpeed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MinConstFlow
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MinConstFlow is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinConstFlow is supported
 * @returns false if MinConstFlow is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_min_const_flow (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MinConstFlow attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinConstFlow attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MinConstFlow attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_const_flow new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_const_flow
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MinConstFlow
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_flow_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MinConstFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_flow_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_flow_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_flow_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MinConstFlow attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxConstFlow
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxConstFlow is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxConstFlow is supported
 * @returns false if MaxConstFlow is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_const_flow (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxConstFlow attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxConstFlow attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxConstFlow attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_const_flow new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_const_flow
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxConstFlow
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_flow_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxConstFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_flow_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_flow_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstFlow attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_flow_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxConstFlow attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MinConstTemp
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MinConstTemp is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinConstTemp is supported
 * @returns false if MinConstTemp is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_min_const_temp (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MinConstTemp attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinConstTemp attribute
 */
int16_t dotdot_get_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MinConstTemp attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_const_temp new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_const_temp
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MinConstTemp
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_temp_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MinConstTemp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_min_const_temp_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstTemp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_temp_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MinConstTemp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_min_const_temp_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MinConstTemp attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl MaxConstTemp
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - MaxConstTemp is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxConstTemp is supported
 * @returns false if MaxConstTemp is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_max_const_temp (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - MaxConstTemp attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxConstTemp attribute
 */
int16_t dotdot_get_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - MaxConstTemp attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_const_temp new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_const_temp
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - MaxConstTemp
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_temp_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - MaxConstTemp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_max_const_temp_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstTemp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_temp_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - MaxConstTemp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_max_const_temp_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - MaxConstTemp attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl PumpStatus
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - PumpStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PumpStatus is supported
 * @returns false if PumpStatus is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_pump_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - PumpStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PumpStatus attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - PumpStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pump_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pump_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - PumpStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_pump_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - PumpStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_pump_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - PumpStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_pump_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - PumpStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_pump_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - PumpStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl EffectiveOperationMode
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - EffectiveOperationMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EffectiveOperationMode is supported
 * @returns false if EffectiveOperationMode is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_effective_operation_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - EffectiveOperationMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EffectiveOperationMode attribute
 */
PumpOperationMode dotdot_get_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - EffectiveOperationMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_effective_operation_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpOperationMode new_effective_operation_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - EffectiveOperationMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_effective_operation_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - EffectiveOperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_effective_operation_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - EffectiveOperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_effective_operation_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - EffectiveOperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_effective_operation_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - EffectiveOperationMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl EffectiveControlMode
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - EffectiveControlMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EffectiveControlMode is supported
 * @returns false if EffectiveControlMode is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_effective_control_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - EffectiveControlMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EffectiveControlMode attribute
 */
PumpControlMode dotdot_get_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - EffectiveControlMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_effective_control_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpControlMode new_effective_control_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - EffectiveControlMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_effective_control_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - EffectiveControlMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_effective_control_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - EffectiveControlMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_effective_control_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - EffectiveControlMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_effective_control_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - EffectiveControlMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl Capacity
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - Capacity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Capacity is supported
 * @returns false if Capacity is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_capacity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - Capacity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Capacity attribute
 */
int16_t dotdot_get_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - Capacity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_capacity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_capacity
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - Capacity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_capacity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - Capacity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_capacity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - Capacity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_capacity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - Capacity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_capacity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - Capacity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl Speed
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - Speed is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Speed is supported
 * @returns false if Speed is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_speed (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - Speed attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Speed attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - Speed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_speed new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_speed
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - Speed
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - Speed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - Speed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - Speed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - Speed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl LifetimeRunningHours
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - LifetimeRunningHours is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LifetimeRunningHours is supported
 * @returns false if LifetimeRunningHours is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - LifetimeRunningHours attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LifetimeRunningHours attribute
 */
uint32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - LifetimeRunningHours attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lifetime_running_hours new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lifetime_running_hours
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - LifetimeRunningHours
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_lifetime_running_hours_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - LifetimeRunningHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_lifetime_running_hours_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - LifetimeRunningHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_lifetime_running_hours_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - LifetimeRunningHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_lifetime_running_hours_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - LifetimeRunningHours attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl Power
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - Power is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Power is supported
 * @returns false if Power is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - Power attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Power attribute
 */
uint32_t dotdot_get_pump_configuration_and_control_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - Power attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - Power
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - Power attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - Power attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - Power attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - Power attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl LifetimeEnergyConsumed
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - LifetimeEnergyConsumed is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LifetimeEnergyConsumed is supported
 * @returns false if LifetimeEnergyConsumed is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_lifetime_energy_consumed (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - LifetimeEnergyConsumed attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LifetimeEnergyConsumed attribute
 */
uint32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - LifetimeEnergyConsumed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lifetime_energy_consumed new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lifetime_energy_consumed
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - LifetimeEnergyConsumed
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_lifetime_energy_consumed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - LifetimeEnergyConsumed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_lifetime_energy_consumed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - LifetimeEnergyConsumed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_lifetime_energy_consumed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - LifetimeEnergyConsumed attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_lifetime_energy_consumed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - LifetimeEnergyConsumed attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl OperationMode
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - OperationMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OperationMode is supported
 * @returns false if OperationMode is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_operation_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - OperationMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OperationMode attribute
 */
PumpOperationMode dotdot_get_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - OperationMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_operation_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpOperationMode new_operation_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - OperationMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_operation_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - OperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_operation_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - OperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_operation_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - OperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_operation_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - OperationMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl ControlMode
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - ControlMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ControlMode is supported
 * @returns false if ControlMode is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_control_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - ControlMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ControlMode attribute
 */
PumpControlMode dotdot_get_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - ControlMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_control_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpControlMode new_control_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - ControlMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_control_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - ControlMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_control_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - ControlMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_control_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - ControlMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_control_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - ControlMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PumpConfigurationAndControl AlarmMask
/**
 * @brief Verifies if the DotDot PumpConfigurationAndControl - AlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AlarmMask is supported
 * @returns false if AlarmMask is not supported
 */
bool dotdot_is_supported_pump_configuration_and_control_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PumpConfigurationAndControl - AlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AlarmMask attribute
 */
uint16_t dotdot_get_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PumpConfigurationAndControl - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot PumpConfigurationAndControl - AlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PumpConfigurationAndControl - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pump_configuration_and_control_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PumpConfigurationAndControl - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PumpConfigurationAndControl - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pump_configuration_and_control_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PumpConfigurationAndControl - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the PumpConfigurationAndControl
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_pump_configuration_and_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * PumpConfigurationAndControl Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_pump_configuration_and_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Thermostat
////////////////////////////////////////////////////////////////////////////////
// Thermostat LocalTemperature
/**
 * @brief Verifies if the DotDot Thermostat - LocalTemperature is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LocalTemperature is supported
 * @returns false if LocalTemperature is not supported
 */
bool dotdot_is_supported_thermostat_local_temperature (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - LocalTemperature attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LocalTemperature attribute
 */
int16_t dotdot_get_thermostat_local_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - LocalTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_local_temperature new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_local_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_local_temperature
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - LocalTemperature
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_local_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - LocalTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_local_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - LocalTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_local_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - LocalTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_local_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - LocalTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_local_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat OutdoorTemperature
/**
 * @brief Verifies if the DotDot Thermostat - OutdoorTemperature is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OutdoorTemperature is supported
 * @returns false if OutdoorTemperature is not supported
 */
bool dotdot_is_supported_thermostat_outdoor_temperature (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - OutdoorTemperature attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OutdoorTemperature attribute
 */
int16_t dotdot_get_thermostat_outdoor_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - OutdoorTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_outdoor_temperature new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_outdoor_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_outdoor_temperature
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - OutdoorTemperature
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_outdoor_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - OutdoorTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_outdoor_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - OutdoorTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_outdoor_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - OutdoorTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_outdoor_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - OutdoorTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_outdoor_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat Occupancy
/**
 * @brief Verifies if the DotDot Thermostat - Occupancy is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Occupancy is supported
 * @returns false if Occupancy is not supported
 */
bool dotdot_is_supported_thermostat_occupancy (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - Occupancy attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Occupancy attribute
 */
uint8_t dotdot_get_thermostat_occupancy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - Occupancy attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupancy new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_occupancy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - Occupancy
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupancy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - Occupancy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupancy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - Occupancy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupancy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - Occupancy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupancy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - Occupancy attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_occupancy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat AbsMinHeatSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - AbsMinHeatSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AbsMinHeatSetpointLimit is supported
 * @returns false if AbsMinHeatSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_abs_min_heat_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - AbsMinHeatSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AbsMinHeatSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - AbsMinHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_abs_min_heat_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_min_heat_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - AbsMinHeatSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_min_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - AbsMinHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_min_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - AbsMinHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_min_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - AbsMinHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_min_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - AbsMinHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat AbsMaxHeatSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - AbsMaxHeatSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AbsMaxHeatSetpointLimit is supported
 * @returns false if AbsMaxHeatSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_abs_max_heat_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - AbsMaxHeatSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AbsMaxHeatSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - AbsMaxHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_abs_max_heat_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_max_heat_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - AbsMaxHeatSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_max_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - AbsMaxHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_max_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - AbsMaxHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_max_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - AbsMaxHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_max_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - AbsMaxHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat AbsMinCoolSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - AbsMinCoolSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AbsMinCoolSetpointLimit is supported
 * @returns false if AbsMinCoolSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_abs_min_cool_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - AbsMinCoolSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AbsMinCoolSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - AbsMinCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_abs_min_cool_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_min_cool_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - AbsMinCoolSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_min_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - AbsMinCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_min_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - AbsMinCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_min_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - AbsMinCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_min_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - AbsMinCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat AbsMaxCoolSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - AbsMaxCoolSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AbsMaxCoolSetpointLimit is supported
 * @returns false if AbsMaxCoolSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_abs_max_cool_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - AbsMaxCoolSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AbsMaxCoolSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - AbsMaxCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_abs_max_cool_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_max_cool_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - AbsMaxCoolSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_max_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - AbsMaxCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_abs_max_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - AbsMaxCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_max_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - AbsMaxCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_abs_max_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - AbsMaxCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat PICoolingDemand
/**
 * @brief Verifies if the DotDot Thermostat - PICoolingDemand is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PICoolingDemand is supported
 * @returns false if PICoolingDemand is not supported
 */
bool dotdot_is_supported_thermostat_pi_cooling_demand (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - PICoolingDemand attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PICoolingDemand attribute
 */
uint8_t dotdot_get_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - PICoolingDemand attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pi_cooling_demand new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pi_cooling_demand
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - PICoolingDemand
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_pi_cooling_demand_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - PICoolingDemand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_pi_cooling_demand_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - PICoolingDemand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_pi_cooling_demand_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - PICoolingDemand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_pi_cooling_demand_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - PICoolingDemand attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat PIHeatingDemand
/**
 * @brief Verifies if the DotDot Thermostat - PIHeatingDemand is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PIHeatingDemand is supported
 * @returns false if PIHeatingDemand is not supported
 */
bool dotdot_is_supported_thermostat_pi_heating_demand (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - PIHeatingDemand attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PIHeatingDemand attribute
 */
uint8_t dotdot_get_thermostat_pi_heating_demand(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - PIHeatingDemand attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pi_heating_demand new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_pi_heating_demand(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pi_heating_demand
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - PIHeatingDemand
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_pi_heating_demand_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - PIHeatingDemand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_pi_heating_demand_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - PIHeatingDemand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_pi_heating_demand_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - PIHeatingDemand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_pi_heating_demand_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - PIHeatingDemand attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_pi_heating_demand(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat HVACSystemTypeConfiguration
/**
 * @brief Verifies if the DotDot Thermostat - HVACSystemTypeConfiguration is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if HVACSystemTypeConfiguration is supported
 * @returns false if HVACSystemTypeConfiguration is not supported
 */
bool dotdot_is_supported_thermostat_hvac_system_type_configuration (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - HVACSystemTypeConfiguration attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns HVACSystemTypeConfiguration attribute
 */
uint8_t dotdot_get_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - HVACSystemTypeConfiguration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_hvac_system_type_configuration new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_hvac_system_type_configuration
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - HVACSystemTypeConfiguration
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_hvac_system_type_configuration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - HVACSystemTypeConfiguration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_hvac_system_type_configuration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - HVACSystemTypeConfiguration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_hvac_system_type_configuration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - HVACSystemTypeConfiguration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_hvac_system_type_configuration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - HVACSystemTypeConfiguration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat LocalTemperatureCalibration
/**
 * @brief Verifies if the DotDot Thermostat - LocalTemperatureCalibration is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LocalTemperatureCalibration is supported
 * @returns false if LocalTemperatureCalibration is not supported
 */
bool dotdot_is_supported_thermostat_local_temperature_calibration (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - LocalTemperatureCalibration attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LocalTemperatureCalibration attribute
 */
int8_t dotdot_get_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - LocalTemperatureCalibration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_local_temperature_calibration new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_local_temperature_calibration
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - LocalTemperatureCalibration
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_local_temperature_calibration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - LocalTemperatureCalibration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_local_temperature_calibration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - LocalTemperatureCalibration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_local_temperature_calibration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - LocalTemperatureCalibration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_local_temperature_calibration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - LocalTemperatureCalibration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat OccupiedCoolingSetpoint
/**
 * @brief Verifies if the DotDot Thermostat - OccupiedCoolingSetpoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupiedCoolingSetpoint is supported
 * @returns false if OccupiedCoolingSetpoint is not supported
 */
bool dotdot_is_supported_thermostat_occupied_cooling_setpoint (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - OccupiedCoolingSetpoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupiedCoolingSetpoint attribute
 */
int16_t dotdot_get_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - OccupiedCoolingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupied_cooling_setpoint new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_occupied_cooling_setpoint
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - OccupiedCoolingSetpoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_cooling_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - OccupiedCoolingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_cooling_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - OccupiedCoolingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_cooling_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - OccupiedCoolingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_cooling_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - OccupiedCoolingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat OccupiedHeatingSetpoint
/**
 * @brief Verifies if the DotDot Thermostat - OccupiedHeatingSetpoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupiedHeatingSetpoint is supported
 * @returns false if OccupiedHeatingSetpoint is not supported
 */
bool dotdot_is_supported_thermostat_occupied_heating_setpoint (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - OccupiedHeatingSetpoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupiedHeatingSetpoint attribute
 */
int16_t dotdot_get_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - OccupiedHeatingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupied_heating_setpoint new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_occupied_heating_setpoint
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - OccupiedHeatingSetpoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_heating_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - OccupiedHeatingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_heating_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - OccupiedHeatingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_heating_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - OccupiedHeatingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_heating_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - OccupiedHeatingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat UnoccupiedCoolingSetpoint
/**
 * @brief Verifies if the DotDot Thermostat - UnoccupiedCoolingSetpoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UnoccupiedCoolingSetpoint is supported
 * @returns false if UnoccupiedCoolingSetpoint is not supported
 */
bool dotdot_is_supported_thermostat_unoccupied_cooling_setpoint (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - UnoccupiedCoolingSetpoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UnoccupiedCoolingSetpoint attribute
 */
int16_t dotdot_get_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - UnoccupiedCoolingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_unoccupied_cooling_setpoint new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_unoccupied_cooling_setpoint
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - UnoccupiedCoolingSetpoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_cooling_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - UnoccupiedCoolingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_cooling_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - UnoccupiedCoolingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_cooling_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - UnoccupiedCoolingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_cooling_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - UnoccupiedCoolingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat UnoccupiedHeatingSetpoint
/**
 * @brief Verifies if the DotDot Thermostat - UnoccupiedHeatingSetpoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UnoccupiedHeatingSetpoint is supported
 * @returns false if UnoccupiedHeatingSetpoint is not supported
 */
bool dotdot_is_supported_thermostat_unoccupied_heating_setpoint (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - UnoccupiedHeatingSetpoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UnoccupiedHeatingSetpoint attribute
 */
int16_t dotdot_get_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - UnoccupiedHeatingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_unoccupied_heating_setpoint new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_unoccupied_heating_setpoint
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - UnoccupiedHeatingSetpoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_heating_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - UnoccupiedHeatingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_heating_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - UnoccupiedHeatingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_heating_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - UnoccupiedHeatingSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_heating_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - UnoccupiedHeatingSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat MinHeatSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - MinHeatSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinHeatSetpointLimit is supported
 * @returns false if MinHeatSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_min_heat_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - MinHeatSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinHeatSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - MinHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_heat_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_heat_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - MinHeatSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_min_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - MinHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_min_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - MinHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_min_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - MinHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_min_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - MinHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat MaxHeatSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - MaxHeatSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxHeatSetpointLimit is supported
 * @returns false if MaxHeatSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_max_heat_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - MaxHeatSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxHeatSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - MaxHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_heat_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_heat_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - MaxHeatSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_max_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - MaxHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_max_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - MaxHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_max_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - MaxHeatSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_max_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - MaxHeatSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat MinCoolSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - MinCoolSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinCoolSetpointLimit is supported
 * @returns false if MinCoolSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_min_cool_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - MinCoolSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinCoolSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - MinCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_cool_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_cool_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - MinCoolSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_min_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - MinCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_min_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - MinCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_min_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - MinCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_min_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - MinCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat MaxCoolSetpointLimit
/**
 * @brief Verifies if the DotDot Thermostat - MaxCoolSetpointLimit is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxCoolSetpointLimit is supported
 * @returns false if MaxCoolSetpointLimit is not supported
 */
bool dotdot_is_supported_thermostat_max_cool_setpoint_limit (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - MaxCoolSetpointLimit attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxCoolSetpointLimit attribute
 */
int16_t dotdot_get_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - MaxCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_cool_setpoint_limit new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_cool_setpoint_limit
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - MaxCoolSetpointLimit
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_max_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - MaxCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_max_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - MaxCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_max_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - MaxCoolSetpointLimit attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_max_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - MaxCoolSetpointLimit attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat MinSetpointDeadBand
/**
 * @brief Verifies if the DotDot Thermostat - MinSetpointDeadBand is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinSetpointDeadBand is supported
 * @returns false if MinSetpointDeadBand is not supported
 */
bool dotdot_is_supported_thermostat_min_setpoint_dead_band (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - MinSetpointDeadBand attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinSetpointDeadBand attribute
 */
int8_t dotdot_get_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - MinSetpointDeadBand attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_setpoint_dead_band new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_min_setpoint_dead_band
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - MinSetpointDeadBand
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_min_setpoint_dead_band_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - MinSetpointDeadBand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_min_setpoint_dead_band_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - MinSetpointDeadBand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_min_setpoint_dead_band_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - MinSetpointDeadBand attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_min_setpoint_dead_band_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - MinSetpointDeadBand attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat RemoteSensing
/**
 * @brief Verifies if the DotDot Thermostat - RemoteSensing is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RemoteSensing is supported
 * @returns false if RemoteSensing is not supported
 */
bool dotdot_is_supported_thermostat_remote_sensing (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - RemoteSensing attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RemoteSensing attribute
 */
uint8_t dotdot_get_thermostat_remote_sensing(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - RemoteSensing attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_remote_sensing new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_remote_sensing(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_remote_sensing
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - RemoteSensing
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_remote_sensing_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - RemoteSensing attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_remote_sensing_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - RemoteSensing attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_remote_sensing_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - RemoteSensing attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_remote_sensing_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - RemoteSensing attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_remote_sensing(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ControlSequenceOfOperation
/**
 * @brief Verifies if the DotDot Thermostat - ControlSequenceOfOperation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ControlSequenceOfOperation is supported
 * @returns false if ControlSequenceOfOperation is not supported
 */
bool dotdot_is_supported_thermostat_control_sequence_of_operation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ControlSequenceOfOperation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ControlSequenceOfOperation attribute
 */
uint8_t dotdot_get_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ControlSequenceOfOperation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_control_sequence_of_operation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_control_sequence_of_operation
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ControlSequenceOfOperation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_control_sequence_of_operation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ControlSequenceOfOperation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_control_sequence_of_operation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ControlSequenceOfOperation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_control_sequence_of_operation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ControlSequenceOfOperation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_control_sequence_of_operation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ControlSequenceOfOperation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat SystemMode
/**
 * @brief Verifies if the DotDot Thermostat - SystemMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SystemMode is supported
 * @returns false if SystemMode is not supported
 */
bool dotdot_is_supported_thermostat_system_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - SystemMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SystemMode attribute
 */
uint8_t dotdot_get_thermostat_system_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - SystemMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_system_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_system_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_system_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - SystemMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_system_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - SystemMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_system_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - SystemMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_system_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - SystemMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_system_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - SystemMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_system_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat AlarmMask
/**
 * @brief Verifies if the DotDot Thermostat - AlarmMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AlarmMask is supported
 * @returns false if AlarmMask is not supported
 */
bool dotdot_is_supported_thermostat_alarm_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - AlarmMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AlarmMask attribute
 */
uint8_t dotdot_get_thermostat_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_alarm_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_alarm_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - AlarmMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - AlarmMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - AlarmMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ThermostatRunningMode
/**
 * @brief Verifies if the DotDot Thermostat - ThermostatRunningMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ThermostatRunningMode is supported
 * @returns false if ThermostatRunningMode is not supported
 */
bool dotdot_is_supported_thermostat_thermostat_running_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ThermostatRunningMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ThermostatRunningMode attribute
 */
uint8_t dotdot_get_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ThermostatRunningMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_thermostat_running_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_running_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ThermostatRunningMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_thermostat_running_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ThermostatRunningMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_thermostat_running_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ThermostatRunningMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_thermostat_running_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ThermostatRunningMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_thermostat_running_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ThermostatRunningMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat StartOfWeek
/**
 * @brief Verifies if the DotDot Thermostat - StartOfWeek is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if StartOfWeek is supported
 * @returns false if StartOfWeek is not supported
 */
bool dotdot_is_supported_thermostat_start_of_week (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - StartOfWeek attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns StartOfWeek attribute
 */
uint8_t dotdot_get_thermostat_start_of_week(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - StartOfWeek attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_start_of_week new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_start_of_week(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_of_week
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - StartOfWeek
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_start_of_week_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - StartOfWeek attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_start_of_week_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - StartOfWeek attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_start_of_week_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - StartOfWeek attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_start_of_week_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - StartOfWeek attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_start_of_week(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat NumberOfWeeklyTransitions
/**
 * @brief Verifies if the DotDot Thermostat - NumberOfWeeklyTransitions is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfWeeklyTransitions is supported
 * @returns false if NumberOfWeeklyTransitions is not supported
 */
bool dotdot_is_supported_thermostat_number_of_weekly_transitions (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - NumberOfWeeklyTransitions attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfWeeklyTransitions attribute
 */
uint8_t dotdot_get_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - NumberOfWeeklyTransitions attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_weekly_transitions new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_weekly_transitions
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - NumberOfWeeklyTransitions
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_number_of_weekly_transitions_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - NumberOfWeeklyTransitions attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_number_of_weekly_transitions_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - NumberOfWeeklyTransitions attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_number_of_weekly_transitions_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - NumberOfWeeklyTransitions attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_number_of_weekly_transitions_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - NumberOfWeeklyTransitions attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat NumberOfDailyTransitions
/**
 * @brief Verifies if the DotDot Thermostat - NumberOfDailyTransitions is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfDailyTransitions is supported
 * @returns false if NumberOfDailyTransitions is not supported
 */
bool dotdot_is_supported_thermostat_number_of_daily_transitions (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - NumberOfDailyTransitions attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfDailyTransitions attribute
 */
uint8_t dotdot_get_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - NumberOfDailyTransitions attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_daily_transitions new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_daily_transitions
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - NumberOfDailyTransitions
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_number_of_daily_transitions_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - NumberOfDailyTransitions attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_number_of_daily_transitions_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - NumberOfDailyTransitions attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_number_of_daily_transitions_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - NumberOfDailyTransitions attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_number_of_daily_transitions_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - NumberOfDailyTransitions attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat TemperatureSetpointHold
/**
 * @brief Verifies if the DotDot Thermostat - TemperatureSetpointHold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TemperatureSetpointHold is supported
 * @returns false if TemperatureSetpointHold is not supported
 */
bool dotdot_is_supported_thermostat_temperature_setpoint_hold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - TemperatureSetpointHold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TemperatureSetpointHold attribute
 */
uint8_t dotdot_get_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - TemperatureSetpointHold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_temperature_setpoint_hold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_setpoint_hold
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - TemperatureSetpointHold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_temperature_setpoint_hold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - TemperatureSetpointHold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_temperature_setpoint_hold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - TemperatureSetpointHold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_temperature_setpoint_hold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - TemperatureSetpointHold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_temperature_setpoint_hold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - TemperatureSetpointHold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat TemperatureSetpointHoldDuration
/**
 * @brief Verifies if the DotDot Thermostat - TemperatureSetpointHoldDuration is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TemperatureSetpointHoldDuration is supported
 * @returns false if TemperatureSetpointHoldDuration is not supported
 */
bool dotdot_is_supported_thermostat_temperature_setpoint_hold_duration (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - TemperatureSetpointHoldDuration attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TemperatureSetpointHoldDuration attribute
 */
uint16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - TemperatureSetpointHoldDuration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_temperature_setpoint_hold_duration new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_temperature_setpoint_hold_duration
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - TemperatureSetpointHoldDuration
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_temperature_setpoint_hold_duration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - TemperatureSetpointHoldDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_temperature_setpoint_hold_duration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - TemperatureSetpointHoldDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_temperature_setpoint_hold_duration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - TemperatureSetpointHoldDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_temperature_setpoint_hold_duration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - TemperatureSetpointHoldDuration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ThermostatProgrammingOperationMode
/**
 * @brief Verifies if the DotDot Thermostat - ThermostatProgrammingOperationMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ThermostatProgrammingOperationMode is supported
 * @returns false if ThermostatProgrammingOperationMode is not supported
 */
bool dotdot_is_supported_thermostat_thermostat_programming_operation_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ThermostatProgrammingOperationMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ThermostatProgrammingOperationMode attribute
 */
uint8_t dotdot_get_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ThermostatProgrammingOperationMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_thermostat_programming_operation_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_programming_operation_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ThermostatProgrammingOperationMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_thermostat_programming_operation_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ThermostatProgrammingOperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_thermostat_programming_operation_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ThermostatProgrammingOperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_thermostat_programming_operation_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ThermostatProgrammingOperationMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_thermostat_programming_operation_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ThermostatProgrammingOperationMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ThermostatRunningState
/**
 * @brief Verifies if the DotDot Thermostat - ThermostatRunningState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ThermostatRunningState is supported
 * @returns false if ThermostatRunningState is not supported
 */
bool dotdot_is_supported_thermostat_thermostat_running_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ThermostatRunningState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ThermostatRunningState attribute
 */
uint16_t dotdot_get_thermostat_thermostat_running_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ThermostatRunningState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_thermostat_running_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_thermostat_running_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_thermostat_running_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ThermostatRunningState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_thermostat_running_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ThermostatRunningState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_thermostat_running_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ThermostatRunningState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_thermostat_running_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ThermostatRunningState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_thermostat_running_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ThermostatRunningState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_thermostat_running_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat SetpointChangeSource
/**
 * @brief Verifies if the DotDot Thermostat - SetpointChangeSource is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SetpointChangeSource is supported
 * @returns false if SetpointChangeSource is not supported
 */
bool dotdot_is_supported_thermostat_setpoint_change_source (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - SetpointChangeSource attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SetpointChangeSource attribute
 */
uint8_t dotdot_get_thermostat_setpoint_change_source(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - SetpointChangeSource attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_setpoint_change_source new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_setpoint_change_source(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_setpoint_change_source
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - SetpointChangeSource
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_setpoint_change_source_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - SetpointChangeSource attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_setpoint_change_source_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - SetpointChangeSource attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_setpoint_change_source_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - SetpointChangeSource attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_setpoint_change_source_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - SetpointChangeSource attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_setpoint_change_source(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat SetpointChangeAmount
/**
 * @brief Verifies if the DotDot Thermostat - SetpointChangeAmount is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SetpointChangeAmount is supported
 * @returns false if SetpointChangeAmount is not supported
 */
bool dotdot_is_supported_thermostat_setpoint_change_amount (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - SetpointChangeAmount attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SetpointChangeAmount attribute
 */
int16_t dotdot_get_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - SetpointChangeAmount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_setpoint_change_amount new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_setpoint_change_amount
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - SetpointChangeAmount
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_setpoint_change_amount_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - SetpointChangeAmount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_setpoint_change_amount_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - SetpointChangeAmount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_setpoint_change_amount_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - SetpointChangeAmount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_setpoint_change_amount_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - SetpointChangeAmount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat SetpointChangeSourceTimestamp
/**
 * @brief Verifies if the DotDot Thermostat - SetpointChangeSourceTimestamp is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SetpointChangeSourceTimestamp is supported
 * @returns false if SetpointChangeSourceTimestamp is not supported
 */
bool dotdot_is_supported_thermostat_setpoint_change_source_timestamp (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - SetpointChangeSourceTimestamp attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SetpointChangeSourceTimestamp attribute
 */
UTC dotdot_get_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - SetpointChangeSourceTimestamp attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_setpoint_change_source_timestamp new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_setpoint_change_source_timestamp
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - SetpointChangeSourceTimestamp
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_setpoint_change_source_timestamp_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - SetpointChangeSourceTimestamp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_setpoint_change_source_timestamp_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - SetpointChangeSourceTimestamp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_setpoint_change_source_timestamp_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - SetpointChangeSourceTimestamp attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_setpoint_change_source_timestamp_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - SetpointChangeSourceTimestamp attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat OccupiedSetback
/**
 * @brief Verifies if the DotDot Thermostat - OccupiedSetback is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupiedSetback is supported
 * @returns false if OccupiedSetback is not supported
 */
bool dotdot_is_supported_thermostat_occupied_setback (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - OccupiedSetback attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupiedSetback attribute
 */
uint8_t dotdot_get_thermostat_occupied_setback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - OccupiedSetback attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupied_setback new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_occupied_setback(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - OccupiedSetback
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_setback_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - OccupiedSetback attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_setback_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - OccupiedSetback attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_setback_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - OccupiedSetback attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_setback_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - OccupiedSetback attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_occupied_setback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat OccupiedSetbackMin
/**
 * @brief Verifies if the DotDot Thermostat - OccupiedSetbackMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupiedSetbackMin is supported
 * @returns false if OccupiedSetbackMin is not supported
 */
bool dotdot_is_supported_thermostat_occupied_setback_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - OccupiedSetbackMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupiedSetbackMin attribute
 */
uint8_t dotdot_get_thermostat_occupied_setback_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - OccupiedSetbackMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupied_setback_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_occupied_setback_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - OccupiedSetbackMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_setback_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - OccupiedSetbackMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_setback_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - OccupiedSetbackMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_setback_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - OccupiedSetbackMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_setback_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - OccupiedSetbackMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_occupied_setback_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat OccupiedSetbackMax
/**
 * @brief Verifies if the DotDot Thermostat - OccupiedSetbackMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupiedSetbackMax is supported
 * @returns false if OccupiedSetbackMax is not supported
 */
bool dotdot_is_supported_thermostat_occupied_setback_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - OccupiedSetbackMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupiedSetbackMax attribute
 */
uint8_t dotdot_get_thermostat_occupied_setback_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - OccupiedSetbackMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupied_setback_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_occupied_setback_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - OccupiedSetbackMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_setback_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - OccupiedSetbackMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_occupied_setback_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - OccupiedSetbackMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_setback_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - OccupiedSetbackMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_occupied_setback_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - OccupiedSetbackMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_occupied_setback_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat UnoccupiedSetback
/**
 * @brief Verifies if the DotDot Thermostat - UnoccupiedSetback is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UnoccupiedSetback is supported
 * @returns false if UnoccupiedSetback is not supported
 */
bool dotdot_is_supported_thermostat_unoccupied_setback (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - UnoccupiedSetback attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UnoccupiedSetback attribute
 */
uint8_t dotdot_get_thermostat_unoccupied_setback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - UnoccupiedSetback attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_unoccupied_setback new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_unoccupied_setback(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - UnoccupiedSetback
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_setback_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - UnoccupiedSetback attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_setback_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - UnoccupiedSetback attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_setback_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - UnoccupiedSetback attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_setback_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - UnoccupiedSetback attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_unoccupied_setback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat UnoccupiedSetbackMin
/**
 * @brief Verifies if the DotDot Thermostat - UnoccupiedSetbackMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UnoccupiedSetbackMin is supported
 * @returns false if UnoccupiedSetbackMin is not supported
 */
bool dotdot_is_supported_thermostat_unoccupied_setback_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - UnoccupiedSetbackMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UnoccupiedSetbackMin attribute
 */
uint8_t dotdot_get_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - UnoccupiedSetbackMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_unoccupied_setback_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - UnoccupiedSetbackMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_setback_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - UnoccupiedSetbackMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_setback_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - UnoccupiedSetbackMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_setback_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - UnoccupiedSetbackMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_setback_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - UnoccupiedSetbackMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat UnoccupiedSetbackMax
/**
 * @brief Verifies if the DotDot Thermostat - UnoccupiedSetbackMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UnoccupiedSetbackMax is supported
 * @returns false if UnoccupiedSetbackMax is not supported
 */
bool dotdot_is_supported_thermostat_unoccupied_setback_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - UnoccupiedSetbackMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UnoccupiedSetbackMax attribute
 */
uint8_t dotdot_get_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - UnoccupiedSetbackMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_unoccupied_setback_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - UnoccupiedSetbackMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_setback_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - UnoccupiedSetbackMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_unoccupied_setback_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - UnoccupiedSetbackMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_setback_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - UnoccupiedSetbackMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_unoccupied_setback_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - UnoccupiedSetbackMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat EmergencyHeatDelta
/**
 * @brief Verifies if the DotDot Thermostat - EmergencyHeatDelta is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EmergencyHeatDelta is supported
 * @returns false if EmergencyHeatDelta is not supported
 */
bool dotdot_is_supported_thermostat_emergency_heat_delta (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - EmergencyHeatDelta attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EmergencyHeatDelta attribute
 */
uint8_t dotdot_get_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - EmergencyHeatDelta attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_emergency_heat_delta new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_emergency_heat_delta
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - EmergencyHeatDelta
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_emergency_heat_delta_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - EmergencyHeatDelta attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_emergency_heat_delta_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - EmergencyHeatDelta attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_emergency_heat_delta_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - EmergencyHeatDelta attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_emergency_heat_delta_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - EmergencyHeatDelta attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACType
/**
 * @brief Verifies if the DotDot Thermostat - ACType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACType is supported
 * @returns false if ACType is not supported
 */
bool dotdot_is_supported_thermostat_ac_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACType attribute
 */
uint8_t dotdot_get_thermostat_ac_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACCapacity
/**
 * @brief Verifies if the DotDot Thermostat - ACCapacity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCapacity is supported
 * @returns false if ACCapacity is not supported
 */
bool dotdot_is_supported_thermostat_ac_capacity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACCapacity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCapacity attribute
 */
uint16_t dotdot_get_thermostat_ac_capacity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACCapacity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_capacity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_capacity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_capacity
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACCapacity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_capacity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACCapacity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_capacity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACCapacity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_capacity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACCapacity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_capacity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACCapacity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_capacity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACRefrigerantType
/**
 * @brief Verifies if the DotDot Thermostat - ACRefrigerantType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACRefrigerantType is supported
 * @returns false if ACRefrigerantType is not supported
 */
bool dotdot_is_supported_thermostat_ac_refrigerant_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACRefrigerantType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACRefrigerantType attribute
 */
uint8_t dotdot_get_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACRefrigerantType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_refrigerant_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_refrigerant_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACRefrigerantType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_refrigerant_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACRefrigerantType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_refrigerant_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACRefrigerantType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_refrigerant_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACRefrigerantType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_refrigerant_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACRefrigerantType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACCompressorType
/**
 * @brief Verifies if the DotDot Thermostat - ACCompressorType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCompressorType is supported
 * @returns false if ACCompressorType is not supported
 */
bool dotdot_is_supported_thermostat_ac_compressor_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACCompressorType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCompressorType attribute
 */
uint8_t dotdot_get_thermostat_ac_compressor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACCompressorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_compressor_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_compressor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_compressor_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACCompressorType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_compressor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACCompressorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_compressor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACCompressorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_compressor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACCompressorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_compressor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACCompressorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_compressor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACErrorCode
/**
 * @brief Verifies if the DotDot Thermostat - ACErrorCode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACErrorCode is supported
 * @returns false if ACErrorCode is not supported
 */
bool dotdot_is_supported_thermostat_ac_error_code (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACErrorCode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACErrorCode attribute
 */
uint32_t dotdot_get_thermostat_ac_error_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACErrorCode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_error_code new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_error_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_ac_error_code
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACErrorCode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_error_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACErrorCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_error_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACErrorCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_error_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACErrorCode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_error_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACErrorCode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_error_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACLouverPosition
/**
 * @brief Verifies if the DotDot Thermostat - ACLouverPosition is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACLouverPosition is supported
 * @returns false if ACLouverPosition is not supported
 */
bool dotdot_is_supported_thermostat_ac_louver_position (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACLouverPosition attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACLouverPosition attribute
 */
uint8_t dotdot_get_thermostat_ac_louver_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACLouverPosition attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_louver_position new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_louver_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_louver_position
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACLouverPosition
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_louver_position_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACLouverPosition attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_louver_position_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACLouverPosition attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_louver_position_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACLouverPosition attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_louver_position_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACLouverPosition attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_louver_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACCoilTemperature
/**
 * @brief Verifies if the DotDot Thermostat - ACCoilTemperature is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCoilTemperature is supported
 * @returns false if ACCoilTemperature is not supported
 */
bool dotdot_is_supported_thermostat_ac_coil_temperature (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACCoilTemperature attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCoilTemperature attribute
 */
int16_t dotdot_get_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACCoilTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_coil_temperature new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_coil_temperature
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACCoilTemperature
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_coil_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACCoilTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_coil_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACCoilTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_coil_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACCoilTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_coil_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACCoilTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Thermostat ACCapacityFormat
/**
 * @brief Verifies if the DotDot Thermostat - ACCapacityFormat is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCapacityFormat is supported
 * @returns false if ACCapacityFormat is not supported
 */
bool dotdot_is_supported_thermostat_ac_capacity_format (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Thermostat - ACCapacityFormat attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCapacityFormat attribute
 */
uint8_t dotdot_get_thermostat_ac_capacity_format(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Thermostat - ACCapacityFormat attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_capacity_format new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_ac_capacity_format(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_capacity_format
  );

/**
 * @brief Undefines the Reported value of the the DotDot Thermostat - ACCapacityFormat
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_capacity_format_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Thermostat - ACCapacityFormat attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_ac_capacity_format_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Thermostat - ACCapacityFormat attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_capacity_format_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Thermostat - ACCapacityFormat attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_ac_capacity_format_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Thermostat - ACCapacityFormat attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_ac_capacity_format(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Thermostat
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_thermostat_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Thermostat Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_thermostat_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster FanControl
////////////////////////////////////////////////////////////////////////////////
// FanControl FanMode
/**
 * @brief Verifies if the DotDot FanControl - FanMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FanMode is supported
 * @returns false if FanMode is not supported
 */
bool dotdot_is_supported_fan_control_fan_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot FanControl - FanMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns FanMode attribute
 */
uint8_t dotdot_get_fan_control_fan_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot FanControl - FanMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_fan_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_fan_control_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_fan_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot FanControl - FanMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_fan_control_fan_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * FanControl - FanMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_fan_control_fan_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * FanControl - FanMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_fan_control_fan_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * FanControl - FanMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_fan_control_fan_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot FanControl - FanMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_fan_control_fan_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// FanControl FanModeSequence
/**
 * @brief Verifies if the DotDot FanControl - FanModeSequence is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FanModeSequence is supported
 * @returns false if FanModeSequence is not supported
 */
bool dotdot_is_supported_fan_control_fan_mode_sequence (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot FanControl - FanModeSequence attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns FanModeSequence attribute
 */
uint8_t dotdot_get_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot FanControl - FanModeSequence attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_fan_mode_sequence new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_fan_mode_sequence
  );

/**
 * @brief Undefines the Reported value of the the DotDot FanControl - FanModeSequence
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_fan_control_fan_mode_sequence_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * FanControl - FanModeSequence attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_fan_control_fan_mode_sequence_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * FanControl - FanModeSequence attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_fan_control_fan_mode_sequence_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * FanControl - FanModeSequence attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_fan_control_fan_mode_sequence_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot FanControl - FanModeSequence attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the FanControl
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_fan_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * FanControl Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_fan_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster DehumidificationControl
////////////////////////////////////////////////////////////////////////////////
// DehumidificationControl RelativeHumidity
/**
 * @brief Verifies if the DotDot DehumidificationControl - RelativeHumidity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RelativeHumidity is supported
 * @returns false if RelativeHumidity is not supported
 */
bool dotdot_is_supported_dehumidification_control_relative_humidity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - RelativeHumidity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RelativeHumidity attribute
 */
uint8_t dotdot_get_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - RelativeHumidity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_relative_humidity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - RelativeHumidity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_relative_humidity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - RelativeHumidity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_relative_humidity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - RelativeHumidity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_relative_humidity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - RelativeHumidity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_relative_humidity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - RelativeHumidity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl DehumidificationCooling
/**
 * @brief Verifies if the DotDot DehumidificationControl - DehumidificationCooling is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DehumidificationCooling is supported
 * @returns false if DehumidificationCooling is not supported
 */
bool dotdot_is_supported_dehumidification_control_dehumidification_cooling (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - DehumidificationCooling attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DehumidificationCooling attribute
 */
uint8_t dotdot_get_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - DehumidificationCooling attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dehumidification_cooling new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_cooling
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - DehumidificationCooling
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_cooling_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - DehumidificationCooling attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_cooling_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - DehumidificationCooling attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_cooling_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - DehumidificationCooling attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_cooling_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - DehumidificationCooling attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl RHDehumidificationSetpoint
/**
 * @brief Verifies if the DotDot DehumidificationControl - RHDehumidificationSetpoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RHDehumidificationSetpoint is supported
 * @returns false if RHDehumidificationSetpoint is not supported
 */
bool dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - RHDehumidificationSetpoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RHDehumidificationSetpoint attribute
 */
uint8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - RHDehumidificationSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rh_dehumidification_setpoint new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_rh_dehumidification_setpoint
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - RHDehumidificationSetpoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_rh_dehumidification_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - RHDehumidificationSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_rh_dehumidification_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - RHDehumidificationSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_rh_dehumidification_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - RHDehumidificationSetpoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_rh_dehumidification_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - RHDehumidificationSetpoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl RelativeHumidityMode
/**
 * @brief Verifies if the DotDot DehumidificationControl - RelativeHumidityMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RelativeHumidityMode is supported
 * @returns false if RelativeHumidityMode is not supported
 */
bool dotdot_is_supported_dehumidification_control_relative_humidity_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - RelativeHumidityMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RelativeHumidityMode attribute
 */
uint8_t dotdot_get_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - RelativeHumidityMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_relative_humidity_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - RelativeHumidityMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_relative_humidity_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - RelativeHumidityMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_relative_humidity_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - RelativeHumidityMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_relative_humidity_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - RelativeHumidityMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_relative_humidity_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - RelativeHumidityMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl DehumidificationLockout
/**
 * @brief Verifies if the DotDot DehumidificationControl - DehumidificationLockout is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DehumidificationLockout is supported
 * @returns false if DehumidificationLockout is not supported
 */
bool dotdot_is_supported_dehumidification_control_dehumidification_lockout (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - DehumidificationLockout attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DehumidificationLockout attribute
 */
uint8_t dotdot_get_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - DehumidificationLockout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dehumidification_lockout new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_lockout
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - DehumidificationLockout
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_lockout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - DehumidificationLockout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_lockout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - DehumidificationLockout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_lockout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - DehumidificationLockout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_lockout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - DehumidificationLockout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl DehumidificationHysteresis
/**
 * @brief Verifies if the DotDot DehumidificationControl - DehumidificationHysteresis is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DehumidificationHysteresis is supported
 * @returns false if DehumidificationHysteresis is not supported
 */
bool dotdot_is_supported_dehumidification_control_dehumidification_hysteresis (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - DehumidificationHysteresis attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DehumidificationHysteresis attribute
 */
uint8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - DehumidificationHysteresis attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dehumidification_hysteresis new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_hysteresis
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - DehumidificationHysteresis
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_hysteresis_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - DehumidificationHysteresis attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_hysteresis_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - DehumidificationHysteresis attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_hysteresis_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - DehumidificationHysteresis attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_hysteresis_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - DehumidificationHysteresis attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl DehumidificationMaxCool
/**
 * @brief Verifies if the DotDot DehumidificationControl - DehumidificationMaxCool is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DehumidificationMaxCool is supported
 * @returns false if DehumidificationMaxCool is not supported
 */
bool dotdot_is_supported_dehumidification_control_dehumidification_max_cool (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - DehumidificationMaxCool attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DehumidificationMaxCool attribute
 */
uint8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - DehumidificationMaxCool attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dehumidification_max_cool new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_max_cool
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - DehumidificationMaxCool
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_max_cool_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - DehumidificationMaxCool attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_dehumidification_max_cool_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - DehumidificationMaxCool attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_max_cool_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - DehumidificationMaxCool attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_dehumidification_max_cool_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - DehumidificationMaxCool attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// DehumidificationControl RelativeHumidityDisplay
/**
 * @brief Verifies if the DotDot DehumidificationControl - RelativeHumidityDisplay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RelativeHumidityDisplay is supported
 * @returns false if RelativeHumidityDisplay is not supported
 */
bool dotdot_is_supported_dehumidification_control_relative_humidity_display (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot DehumidificationControl - RelativeHumidityDisplay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RelativeHumidityDisplay attribute
 */
uint8_t dotdot_get_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot DehumidificationControl - RelativeHumidityDisplay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_relative_humidity_display new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity_display
  );

/**
 * @brief Undefines the Reported value of the the DotDot DehumidificationControl - RelativeHumidityDisplay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_relative_humidity_display_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * DehumidificationControl - RelativeHumidityDisplay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_dehumidification_control_relative_humidity_display_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * DehumidificationControl - RelativeHumidityDisplay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_relative_humidity_display_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * DehumidificationControl - RelativeHumidityDisplay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_dehumidification_control_relative_humidity_display_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot DehumidificationControl - RelativeHumidityDisplay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the DehumidificationControl
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_dehumidification_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * DehumidificationControl Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_dehumidification_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ThermostatUserInterfaceConfiguration
////////////////////////////////////////////////////////////////////////////////
// ThermostatUserInterfaceConfiguration TemperatureDisplayMode
/**
 * @brief Verifies if the DotDot ThermostatUserInterfaceConfiguration - TemperatureDisplayMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TemperatureDisplayMode is supported
 * @returns false if TemperatureDisplayMode is not supported
 */
bool dotdot_is_supported_thermostat_user_interface_configuration_temperature_display_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ThermostatUserInterfaceConfiguration - TemperatureDisplayMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TemperatureDisplayMode attribute
 */
uint8_t dotdot_get_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ThermostatUserInterfaceConfiguration - TemperatureDisplayMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_temperature_display_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_display_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot ThermostatUserInterfaceConfiguration - TemperatureDisplayMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_user_interface_configuration_temperature_display_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ThermostatUserInterfaceConfiguration - TemperatureDisplayMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_user_interface_configuration_temperature_display_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ThermostatUserInterfaceConfiguration - TemperatureDisplayMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_user_interface_configuration_temperature_display_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ThermostatUserInterfaceConfiguration - TemperatureDisplayMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_user_interface_configuration_temperature_display_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ThermostatUserInterfaceConfiguration - TemperatureDisplayMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ThermostatUserInterfaceConfiguration KeypadLockout
/**
 * @brief Verifies if the DotDot ThermostatUserInterfaceConfiguration - KeypadLockout is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if KeypadLockout is supported
 * @returns false if KeypadLockout is not supported
 */
bool dotdot_is_supported_thermostat_user_interface_configuration_keypad_lockout (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ThermostatUserInterfaceConfiguration - KeypadLockout attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns KeypadLockout attribute
 */
uint8_t dotdot_get_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ThermostatUserInterfaceConfiguration - KeypadLockout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_keypad_lockout new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_keypad_lockout
  );

/**
 * @brief Undefines the Reported value of the the DotDot ThermostatUserInterfaceConfiguration - KeypadLockout
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_user_interface_configuration_keypad_lockout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ThermostatUserInterfaceConfiguration - KeypadLockout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_user_interface_configuration_keypad_lockout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ThermostatUserInterfaceConfiguration - KeypadLockout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_user_interface_configuration_keypad_lockout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ThermostatUserInterfaceConfiguration - KeypadLockout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_user_interface_configuration_keypad_lockout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ThermostatUserInterfaceConfiguration - KeypadLockout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ThermostatUserInterfaceConfiguration ScheduleProgrammingVisibility
/**
 * @brief Verifies if the DotDot ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ScheduleProgrammingVisibility is supported
 * @returns false if ScheduleProgrammingVisibility is not supported
 */
bool dotdot_is_supported_thermostat_user_interface_configuration_schedule_programming_visibility (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ScheduleProgrammingVisibility attribute
 */
uint8_t dotdot_get_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_schedule_programming_visibility new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_schedule_programming_visibility
  );

/**
 * @brief Undefines the Reported value of the the DotDot ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ThermostatUserInterfaceConfiguration - ScheduleProgrammingVisibility attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ThermostatUserInterfaceConfiguration
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_thermostat_user_interface_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ThermostatUserInterfaceConfiguration Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_thermostat_user_interface_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ColorControl
////////////////////////////////////////////////////////////////////////////////
// ColorControl CurrentHue
/**
 * @brief Verifies if the DotDot ColorControl - CurrentHue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentHue is supported
 * @returns false if CurrentHue is not supported
 */
bool dotdot_is_supported_color_control_current_hue (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - CurrentHue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentHue attribute
 */
uint8_t dotdot_get_color_control_current_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - CurrentHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_hue new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_current_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_hue
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - CurrentHue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_current_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - CurrentHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_current_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - CurrentHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_current_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - CurrentHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_current_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - CurrentHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_current_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl CurrentSaturation
/**
 * @brief Verifies if the DotDot ColorControl - CurrentSaturation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentSaturation is supported
 * @returns false if CurrentSaturation is not supported
 */
bool dotdot_is_supported_color_control_current_saturation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - CurrentSaturation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentSaturation attribute
 */
uint8_t dotdot_get_color_control_current_saturation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - CurrentSaturation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_saturation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_current_saturation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_saturation
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - CurrentSaturation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_current_saturation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - CurrentSaturation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_current_saturation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - CurrentSaturation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_current_saturation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - CurrentSaturation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_current_saturation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - CurrentSaturation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_current_saturation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl RemainingTime
/**
 * @brief Verifies if the DotDot ColorControl - RemainingTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RemainingTime is supported
 * @returns false if RemainingTime is not supported
 */
bool dotdot_is_supported_color_control_remaining_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - RemainingTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RemainingTime attribute
 */
uint16_t dotdot_get_color_control_remaining_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - RemainingTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_remaining_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_remaining_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_remaining_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - RemainingTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_remaining_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - RemainingTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_remaining_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - RemainingTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_remaining_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - RemainingTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_remaining_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - RemainingTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_remaining_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl CurrentX
/**
 * @brief Verifies if the DotDot ColorControl - CurrentX is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentX is supported
 * @returns false if CurrentX is not supported
 */
bool dotdot_is_supported_color_control_currentx (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - CurrentX attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentX attribute
 */
uint16_t dotdot_get_color_control_currentx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - CurrentX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_currentx new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_currentx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_currentx
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - CurrentX
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_currentx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - CurrentX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_currentx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - CurrentX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_currentx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - CurrentX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_currentx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - CurrentX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_currentx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl CurrentY
/**
 * @brief Verifies if the DotDot ColorControl - CurrentY is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentY is supported
 * @returns false if CurrentY is not supported
 */
bool dotdot_is_supported_color_control_currenty (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - CurrentY attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentY attribute
 */
uint16_t dotdot_get_color_control_currenty(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - CurrentY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_currenty new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_currenty(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_currenty
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - CurrentY
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_currenty_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - CurrentY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_currenty_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - CurrentY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_currenty_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - CurrentY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_currenty_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - CurrentY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_currenty(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl DriftCompensation
/**
 * @brief Verifies if the DotDot ColorControl - DriftCompensation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DriftCompensation is supported
 * @returns false if DriftCompensation is not supported
 */
bool dotdot_is_supported_color_control_drift_compensation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - DriftCompensation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DriftCompensation attribute
 */
uint8_t dotdot_get_color_control_drift_compensation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - DriftCompensation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_drift_compensation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_drift_compensation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_drift_compensation
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - DriftCompensation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_drift_compensation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - DriftCompensation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_drift_compensation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - DriftCompensation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_drift_compensation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - DriftCompensation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_drift_compensation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - DriftCompensation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_drift_compensation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl CompensationText
/**
 * @brief Verifies if the DotDot ColorControl - CompensationText is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CompensationText is supported
 * @returns false if CompensationText is not supported
 */
bool dotdot_is_supported_color_control_compensation_text (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - CompensationText attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns CompensationText attribute
 */
const char* dotdot_get_color_control_compensation_text(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - CompensationText attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_compensation_text new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_compensation_text(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_compensation_text
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - CompensationText
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_compensation_text_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - CompensationText attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_compensation_text_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - CompensationText attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_compensation_text_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - CompensationText attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_compensation_text_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - CompensationText attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_compensation_text(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorTemperatureMireds
/**
 * @brief Verifies if the DotDot ColorControl - ColorTemperatureMireds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorTemperatureMireds is supported
 * @returns false if ColorTemperatureMireds is not supported
 */
bool dotdot_is_supported_color_control_color_temperature_mireds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorTemperatureMireds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorTemperatureMireds attribute
 */
uint16_t dotdot_get_color_control_color_temperature_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorTemperatureMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_temperature_mireds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_temperature_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temperature_mireds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorTemperatureMireds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_temperature_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorTemperatureMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_temperature_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorTemperatureMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_temperature_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorTemperatureMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_temperature_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorTemperatureMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_temperature_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorMode
/**
 * @brief Verifies if the DotDot ColorControl - ColorMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorMode is supported
 * @returns false if ColorMode is not supported
 */
bool dotdot_is_supported_color_control_color_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorMode attribute
 */
uint8_t dotdot_get_color_control_color_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Options
/**
 * @brief Verifies if the DotDot ColorControl - Options is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Options is supported
 * @returns false if Options is not supported
 */
bool dotdot_is_supported_color_control_options (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Options attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Options attribute
 */
uint8_t dotdot_get_color_control_options(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Options attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_options new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_options(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_options
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Options
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_options_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Options attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_options_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Options attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_options_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Options attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_options_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Options attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_options(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl NumberOfPrimaries
/**
 * @brief Verifies if the DotDot ColorControl - NumberOfPrimaries is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfPrimaries is supported
 * @returns false if NumberOfPrimaries is not supported
 */
bool dotdot_is_supported_color_control_number_of_primaries (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - NumberOfPrimaries attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfPrimaries attribute
 */
uint8_t dotdot_get_color_control_number_of_primaries(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - NumberOfPrimaries attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_primaries new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_number_of_primaries(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_primaries
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - NumberOfPrimaries
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_number_of_primaries_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - NumberOfPrimaries attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_number_of_primaries_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - NumberOfPrimaries attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_number_of_primaries_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - NumberOfPrimaries attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_number_of_primaries_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - NumberOfPrimaries attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_number_of_primaries(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary1X
/**
 * @brief Verifies if the DotDot ColorControl - Primary1X is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary1X is supported
 * @returns false if Primary1X is not supported
 */
bool dotdot_is_supported_color_control_primary1x (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary1X attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary1X attribute
 */
uint16_t dotdot_get_color_control_primary1x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary1X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary1x new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary1x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary1x
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary1X
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary1x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary1X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary1x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary1X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary1x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary1X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary1x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary1X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary1x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary1Y
/**
 * @brief Verifies if the DotDot ColorControl - Primary1Y is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary1Y is supported
 * @returns false if Primary1Y is not supported
 */
bool dotdot_is_supported_color_control_primary1y (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary1Y attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary1Y attribute
 */
uint16_t dotdot_get_color_control_primary1y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary1Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary1y new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary1y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary1y
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary1Y
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary1y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary1Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary1y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary1Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary1y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary1Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary1y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary1Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary1y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary1Intensity
/**
 * @brief Verifies if the DotDot ColorControl - Primary1Intensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary1Intensity is supported
 * @returns false if Primary1Intensity is not supported
 */
bool dotdot_is_supported_color_control_primary1_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary1Intensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary1Intensity attribute
 */
uint8_t dotdot_get_color_control_primary1_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary1Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary1_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary1_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary1_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary1Intensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary1_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary1Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary1_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary1Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary1_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary1Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary1_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary1Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary1_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary2X
/**
 * @brief Verifies if the DotDot ColorControl - Primary2X is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary2X is supported
 * @returns false if Primary2X is not supported
 */
bool dotdot_is_supported_color_control_primary2x (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary2X attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary2X attribute
 */
uint16_t dotdot_get_color_control_primary2x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary2X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary2x new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary2x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary2x
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary2X
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary2x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary2X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary2x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary2X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary2x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary2X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary2x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary2X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary2x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary2Y
/**
 * @brief Verifies if the DotDot ColorControl - Primary2Y is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary2Y is supported
 * @returns false if Primary2Y is not supported
 */
bool dotdot_is_supported_color_control_primary2y (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary2Y attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary2Y attribute
 */
uint16_t dotdot_get_color_control_primary2y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary2Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary2y new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary2y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary2y
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary2Y
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary2y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary2Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary2y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary2Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary2y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary2Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary2y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary2Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary2y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary2Intensity
/**
 * @brief Verifies if the DotDot ColorControl - Primary2Intensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary2Intensity is supported
 * @returns false if Primary2Intensity is not supported
 */
bool dotdot_is_supported_color_control_primary2_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary2Intensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary2Intensity attribute
 */
uint8_t dotdot_get_color_control_primary2_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary2Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary2_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary2_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary2_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary2Intensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary2_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary2Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary2_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary2Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary2_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary2Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary2_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary2Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary2_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary3X
/**
 * @brief Verifies if the DotDot ColorControl - Primary3X is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary3X is supported
 * @returns false if Primary3X is not supported
 */
bool dotdot_is_supported_color_control_primary3x (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary3X attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary3X attribute
 */
uint16_t dotdot_get_color_control_primary3x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary3X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary3x new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary3x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary3x
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary3X
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary3x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary3X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary3x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary3X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary3x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary3X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary3x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary3X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary3x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary3Y
/**
 * @brief Verifies if the DotDot ColorControl - Primary3Y is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary3Y is supported
 * @returns false if Primary3Y is not supported
 */
bool dotdot_is_supported_color_control_primary3y (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary3Y attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary3Y attribute
 */
uint16_t dotdot_get_color_control_primary3y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary3Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary3y new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary3y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary3y
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary3Y
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary3y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary3Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary3y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary3Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary3y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary3Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary3y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary3Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary3y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary3Intensity
/**
 * @brief Verifies if the DotDot ColorControl - Primary3Intensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary3Intensity is supported
 * @returns false if Primary3Intensity is not supported
 */
bool dotdot_is_supported_color_control_primary3_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary3Intensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary3Intensity attribute
 */
uint8_t dotdot_get_color_control_primary3_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary3Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary3_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary3_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary3_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary3Intensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary3_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary3Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary3_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary3Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary3_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary3Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary3_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary3Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary3_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary4X
/**
 * @brief Verifies if the DotDot ColorControl - Primary4X is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary4X is supported
 * @returns false if Primary4X is not supported
 */
bool dotdot_is_supported_color_control_primary4x (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary4X attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary4X attribute
 */
uint16_t dotdot_get_color_control_primary4x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary4X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary4x new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary4x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary4x
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary4X
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary4x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary4X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary4x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary4X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary4x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary4X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary4x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary4X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary4x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary4Y
/**
 * @brief Verifies if the DotDot ColorControl - Primary4Y is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary4Y is supported
 * @returns false if Primary4Y is not supported
 */
bool dotdot_is_supported_color_control_primary4y (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary4Y attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary4Y attribute
 */
uint16_t dotdot_get_color_control_primary4y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary4Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary4y new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary4y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary4y
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary4Y
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary4y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary4Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary4y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary4Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary4y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary4Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary4y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary4Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary4y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary4Intensity
/**
 * @brief Verifies if the DotDot ColorControl - Primary4Intensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary4Intensity is supported
 * @returns false if Primary4Intensity is not supported
 */
bool dotdot_is_supported_color_control_primary4_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary4Intensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary4Intensity attribute
 */
uint8_t dotdot_get_color_control_primary4_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary4Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary4_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary4_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary4_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary4Intensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary4_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary4Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary4_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary4Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary4_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary4Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary4_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary4Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary4_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary5X
/**
 * @brief Verifies if the DotDot ColorControl - Primary5X is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary5X is supported
 * @returns false if Primary5X is not supported
 */
bool dotdot_is_supported_color_control_primary5x (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary5X attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary5X attribute
 */
uint16_t dotdot_get_color_control_primary5x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary5X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary5x new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary5x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary5x
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary5X
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary5x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary5X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary5x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary5X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary5x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary5X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary5x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary5X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary5x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary5Y
/**
 * @brief Verifies if the DotDot ColorControl - Primary5Y is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary5Y is supported
 * @returns false if Primary5Y is not supported
 */
bool dotdot_is_supported_color_control_primary5y (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary5Y attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary5Y attribute
 */
uint16_t dotdot_get_color_control_primary5y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary5Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary5y new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary5y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary5y
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary5Y
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary5y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary5Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary5y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary5Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary5y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary5Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary5y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary5Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary5y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary5Intensity
/**
 * @brief Verifies if the DotDot ColorControl - Primary5Intensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary5Intensity is supported
 * @returns false if Primary5Intensity is not supported
 */
bool dotdot_is_supported_color_control_primary5_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary5Intensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary5Intensity attribute
 */
uint8_t dotdot_get_color_control_primary5_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary5Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary5_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary5_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary5_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary5Intensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary5_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary5Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary5_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary5Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary5_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary5Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary5_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary5Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary5_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary6X
/**
 * @brief Verifies if the DotDot ColorControl - Primary6X is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary6X is supported
 * @returns false if Primary6X is not supported
 */
bool dotdot_is_supported_color_control_primary6x (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary6X attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary6X attribute
 */
uint16_t dotdot_get_color_control_primary6x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary6X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary6x new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary6x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary6x
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary6X
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary6x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary6X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary6x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary6X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary6x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary6X attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary6x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary6X attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary6x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary6Y
/**
 * @brief Verifies if the DotDot ColorControl - Primary6Y is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary6Y is supported
 * @returns false if Primary6Y is not supported
 */
bool dotdot_is_supported_color_control_primary6y (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary6Y attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary6Y attribute
 */
uint16_t dotdot_get_color_control_primary6y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary6Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary6y new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary6y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary6y
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary6Y
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary6y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary6Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary6y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary6Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary6y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary6Y attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary6y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary6Y attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary6y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl Primary6Intensity
/**
 * @brief Verifies if the DotDot ColorControl - Primary6Intensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Primary6Intensity is supported
 * @returns false if Primary6Intensity is not supported
 */
bool dotdot_is_supported_color_control_primary6_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - Primary6Intensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Primary6Intensity attribute
 */
uint8_t dotdot_get_color_control_primary6_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - Primary6Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_primary6_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_primary6_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary6_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - Primary6Intensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary6_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - Primary6Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_primary6_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - Primary6Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary6_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - Primary6Intensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_primary6_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - Primary6Intensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_primary6_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl WhitePointX
/**
 * @brief Verifies if the DotDot ColorControl - WhitePointX is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if WhitePointX is supported
 * @returns false if WhitePointX is not supported
 */
bool dotdot_is_supported_color_control_white_pointx (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - WhitePointX attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns WhitePointX attribute
 */
uint16_t dotdot_get_color_control_white_pointx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - WhitePointX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_white_pointx new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_white_pointx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_white_pointx
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - WhitePointX
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_white_pointx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - WhitePointX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_white_pointx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - WhitePointX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_white_pointx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - WhitePointX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_white_pointx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - WhitePointX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_white_pointx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl WhitePointY
/**
 * @brief Verifies if the DotDot ColorControl - WhitePointY is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if WhitePointY is supported
 * @returns false if WhitePointY is not supported
 */
bool dotdot_is_supported_color_control_white_pointy (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - WhitePointY attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns WhitePointY attribute
 */
uint16_t dotdot_get_color_control_white_pointy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - WhitePointY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_white_pointy new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_white_pointy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_white_pointy
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - WhitePointY
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_white_pointy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - WhitePointY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_white_pointy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - WhitePointY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_white_pointy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - WhitePointY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_white_pointy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - WhitePointY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_white_pointy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointRX
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointRX is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointRX is supported
 * @returns false if ColorPointRX is not supported
 */
bool dotdot_is_supported_color_control_color_pointrx (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointRX attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointRX attribute
 */
uint16_t dotdot_get_color_control_color_pointrx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointRX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointrx new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointrx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointrx
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointRX
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointrx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointRX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointrx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointRX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointrx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointRX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointrx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointRX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointrx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointRY
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointRY is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointRY is supported
 * @returns false if ColorPointRY is not supported
 */
bool dotdot_is_supported_color_control_color_pointry (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointRY attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointRY attribute
 */
uint16_t dotdot_get_color_control_color_pointry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointRY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointry new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointry
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointRY
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointry_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointRY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointry_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointRY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointry_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointRY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointry_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointRY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointRIntensity
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointRIntensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointRIntensity is supported
 * @returns false if ColorPointRIntensity is not supported
 */
bool dotdot_is_supported_color_control_color_pointr_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointRIntensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointRIntensity attribute
 */
uint8_t dotdot_get_color_control_color_pointr_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointRIntensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointr_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointr_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointr_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointRIntensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointr_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointRIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointr_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointRIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointr_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointRIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointr_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointRIntensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointr_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointGX
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointGX is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointGX is supported
 * @returns false if ColorPointGX is not supported
 */
bool dotdot_is_supported_color_control_color_pointgx (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointGX attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointGX attribute
 */
uint16_t dotdot_get_color_control_color_pointgx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointGX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointgx new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointgx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointgx
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointGX
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointgx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointGX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointgx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointGX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointgx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointGX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointgx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointGX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointgx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointGY
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointGY is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointGY is supported
 * @returns false if ColorPointGY is not supported
 */
bool dotdot_is_supported_color_control_color_pointgy (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointGY attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointGY attribute
 */
uint16_t dotdot_get_color_control_color_pointgy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointGY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointgy new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointgy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointgy
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointGY
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointgy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointGY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointgy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointGY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointgy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointGY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointgy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointGY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointgy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointGIntensity
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointGIntensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointGIntensity is supported
 * @returns false if ColorPointGIntensity is not supported
 */
bool dotdot_is_supported_color_control_color_pointg_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointGIntensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointGIntensity attribute
 */
uint8_t dotdot_get_color_control_color_pointg_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointGIntensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointg_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointg_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointg_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointGIntensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointg_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointGIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointg_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointGIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointg_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointGIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointg_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointGIntensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointg_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointBX
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointBX is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointBX is supported
 * @returns false if ColorPointBX is not supported
 */
bool dotdot_is_supported_color_control_color_pointbx (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointBX attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointBX attribute
 */
uint16_t dotdot_get_color_control_color_pointbx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointBX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointbx new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointbx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointbx
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointBX
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointbx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointBX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointbx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointBX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointbx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointBX attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointbx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointBX attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointbx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointBY
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointBY is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointBY is supported
 * @returns false if ColorPointBY is not supported
 */
bool dotdot_is_supported_color_control_color_pointby (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointBY attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointBY attribute
 */
uint16_t dotdot_get_color_control_color_pointby(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointBY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointby new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointby(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointby
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointBY
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointby_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointBY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointby_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointBY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointby_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointBY attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointby_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointBY attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointby(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorPointBIntensity
/**
 * @brief Verifies if the DotDot ColorControl - ColorPointBIntensity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorPointBIntensity is supported
 * @returns false if ColorPointBIntensity is not supported
 */
bool dotdot_is_supported_color_control_color_pointb_intensity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorPointBIntensity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorPointBIntensity attribute
 */
uint8_t dotdot_get_color_control_color_pointb_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorPointBIntensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_pointb_intensity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_pointb_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointb_intensity
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorPointBIntensity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointb_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorPointBIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_pointb_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorPointBIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointb_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorPointBIntensity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_pointb_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorPointBIntensity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_pointb_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl EnhancedCurrentHue
/**
 * @brief Verifies if the DotDot ColorControl - EnhancedCurrentHue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnhancedCurrentHue is supported
 * @returns false if EnhancedCurrentHue is not supported
 */
bool dotdot_is_supported_color_control_enhanced_current_hue (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - EnhancedCurrentHue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnhancedCurrentHue attribute
 */
uint16_t dotdot_get_color_control_enhanced_current_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - EnhancedCurrentHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enhanced_current_hue new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_enhanced_current_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_enhanced_current_hue
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - EnhancedCurrentHue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_enhanced_current_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - EnhancedCurrentHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_enhanced_current_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - EnhancedCurrentHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_enhanced_current_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - EnhancedCurrentHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_enhanced_current_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - EnhancedCurrentHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_enhanced_current_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl EnhancedColorMode
/**
 * @brief Verifies if the DotDot ColorControl - EnhancedColorMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnhancedColorMode is supported
 * @returns false if EnhancedColorMode is not supported
 */
bool dotdot_is_supported_color_control_enhanced_color_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - EnhancedColorMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnhancedColorMode attribute
 */
uint8_t dotdot_get_color_control_enhanced_color_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - EnhancedColorMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_enhanced_color_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_enhanced_color_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_enhanced_color_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - EnhancedColorMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_enhanced_color_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - EnhancedColorMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_enhanced_color_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - EnhancedColorMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_enhanced_color_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - EnhancedColorMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_enhanced_color_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - EnhancedColorMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_enhanced_color_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorLoopActive
/**
 * @brief Verifies if the DotDot ColorControl - ColorLoopActive is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorLoopActive is supported
 * @returns false if ColorLoopActive is not supported
 */
bool dotdot_is_supported_color_control_color_loop_active (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorLoopActive attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorLoopActive attribute
 */
uint8_t dotdot_get_color_control_color_loop_active(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorLoopActive attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_loop_active new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_loop_active(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_loop_active
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorLoopActive
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_active_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorLoopActive attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_active_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorLoopActive attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_active_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorLoopActive attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_active_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorLoopActive attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_loop_active(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorLoopDirection
/**
 * @brief Verifies if the DotDot ColorControl - ColorLoopDirection is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorLoopDirection is supported
 * @returns false if ColorLoopDirection is not supported
 */
bool dotdot_is_supported_color_control_color_loop_direction (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorLoopDirection attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorLoopDirection attribute
 */
CCColorLoopDirection dotdot_get_color_control_color_loop_direction(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorLoopDirection attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_loop_direction new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_loop_direction(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  CCColorLoopDirection new_color_loop_direction
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorLoopDirection
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_direction_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorLoopDirection attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_direction_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorLoopDirection attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_direction_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorLoopDirection attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_direction_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorLoopDirection attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_loop_direction(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorLoopTime
/**
 * @brief Verifies if the DotDot ColorControl - ColorLoopTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorLoopTime is supported
 * @returns false if ColorLoopTime is not supported
 */
bool dotdot_is_supported_color_control_color_loop_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorLoopTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorLoopTime attribute
 */
uint16_t dotdot_get_color_control_color_loop_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorLoopTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_loop_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_loop_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorLoopTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorLoopTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorLoopTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorLoopTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorLoopTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_loop_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorLoopStartEnhancedHue
/**
 * @brief Verifies if the DotDot ColorControl - ColorLoopStartEnhancedHue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorLoopStartEnhancedHue is supported
 * @returns false if ColorLoopStartEnhancedHue is not supported
 */
bool dotdot_is_supported_color_control_color_loop_start_enhanced_hue (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorLoopStartEnhancedHue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorLoopStartEnhancedHue attribute
 */
uint16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorLoopStartEnhancedHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_loop_start_enhanced_hue new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_start_enhanced_hue
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorLoopStartEnhancedHue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_start_enhanced_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorLoopStartEnhancedHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_start_enhanced_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorLoopStartEnhancedHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_start_enhanced_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorLoopStartEnhancedHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_start_enhanced_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorLoopStartEnhancedHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorLoopStoredEnhancedHue
/**
 * @brief Verifies if the DotDot ColorControl - ColorLoopStoredEnhancedHue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorLoopStoredEnhancedHue is supported
 * @returns false if ColorLoopStoredEnhancedHue is not supported
 */
bool dotdot_is_supported_color_control_color_loop_stored_enhanced_hue (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorLoopStoredEnhancedHue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorLoopStoredEnhancedHue attribute
 */
uint16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorLoopStoredEnhancedHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_loop_stored_enhanced_hue new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_stored_enhanced_hue
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorLoopStoredEnhancedHue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_stored_enhanced_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorLoopStoredEnhancedHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_loop_stored_enhanced_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorLoopStoredEnhancedHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_stored_enhanced_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorLoopStoredEnhancedHue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_loop_stored_enhanced_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorLoopStoredEnhancedHue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorCapabilities
/**
 * @brief Verifies if the DotDot ColorControl - ColorCapabilities is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorCapabilities is supported
 * @returns false if ColorCapabilities is not supported
 */
bool dotdot_is_supported_color_control_color_capabilities (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorCapabilities attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorCapabilities attribute
 */
uint16_t dotdot_get_color_control_color_capabilities(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorCapabilities attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_capabilities new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_capabilities(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_capabilities
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorCapabilities
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_capabilities_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorCapabilities attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_capabilities_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorCapabilities attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_capabilities_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorCapabilities attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_capabilities_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorCapabilities attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_capabilities(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorTempPhysicalMinMireds
/**
 * @brief Verifies if the DotDot ColorControl - ColorTempPhysicalMinMireds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorTempPhysicalMinMireds is supported
 * @returns false if ColorTempPhysicalMinMireds is not supported
 */
bool dotdot_is_supported_color_control_color_temp_physical_min_mireds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorTempPhysicalMinMireds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorTempPhysicalMinMireds attribute
 */
uint16_t dotdot_get_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorTempPhysicalMinMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_temp_physical_min_mireds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temp_physical_min_mireds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorTempPhysicalMinMireds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_temp_physical_min_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorTempPhysicalMinMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_temp_physical_min_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorTempPhysicalMinMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_temp_physical_min_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorTempPhysicalMinMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_temp_physical_min_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorTempPhysicalMinMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl ColorTempPhysicalMaxMireds
/**
 * @brief Verifies if the DotDot ColorControl - ColorTempPhysicalMaxMireds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ColorTempPhysicalMaxMireds is supported
 * @returns false if ColorTempPhysicalMaxMireds is not supported
 */
bool dotdot_is_supported_color_control_color_temp_physical_max_mireds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - ColorTempPhysicalMaxMireds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ColorTempPhysicalMaxMireds attribute
 */
uint16_t dotdot_get_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - ColorTempPhysicalMaxMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_color_temp_physical_max_mireds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temp_physical_max_mireds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - ColorTempPhysicalMaxMireds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_temp_physical_max_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - ColorTempPhysicalMaxMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_color_temp_physical_max_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - ColorTempPhysicalMaxMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_temp_physical_max_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - ColorTempPhysicalMaxMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_color_temp_physical_max_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - ColorTempPhysicalMaxMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl CoupleColorTempToLevelMinMireds
/**
 * @brief Verifies if the DotDot ColorControl - CoupleColorTempToLevelMinMireds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CoupleColorTempToLevelMinMireds is supported
 * @returns false if CoupleColorTempToLevelMinMireds is not supported
 */
bool dotdot_is_supported_color_control_couple_color_temp_to_level_min_mireds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - CoupleColorTempToLevelMinMireds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CoupleColorTempToLevelMinMireds attribute
 */
uint16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - CoupleColorTempToLevelMinMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_couple_color_temp_to_level_min_mireds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_couple_color_temp_to_level_min_mireds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - CoupleColorTempToLevelMinMireds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_couple_color_temp_to_level_min_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - CoupleColorTempToLevelMinMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_couple_color_temp_to_level_min_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - CoupleColorTempToLevelMinMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_couple_color_temp_to_level_min_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - CoupleColorTempToLevelMinMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_couple_color_temp_to_level_min_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - CoupleColorTempToLevelMinMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ColorControl StartUpColorTemperatureMireds
/**
 * @brief Verifies if the DotDot ColorControl - StartUpColorTemperatureMireds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if StartUpColorTemperatureMireds is supported
 * @returns false if StartUpColorTemperatureMireds is not supported
 */
bool dotdot_is_supported_color_control_start_up_color_temperature_mireds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ColorControl - StartUpColorTemperatureMireds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns StartUpColorTemperatureMireds attribute
 */
uint16_t dotdot_get_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ColorControl - StartUpColorTemperatureMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_start_up_color_temperature_mireds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_start_up_color_temperature_mireds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ColorControl - StartUpColorTemperatureMireds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_start_up_color_temperature_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ColorControl - StartUpColorTemperatureMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_color_control_start_up_color_temperature_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ColorControl - StartUpColorTemperatureMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_start_up_color_temperature_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ColorControl - StartUpColorTemperatureMireds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_color_control_start_up_color_temperature_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ColorControl - StartUpColorTemperatureMireds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ColorControl
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_color_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ColorControl Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_color_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster BallastConfiguration
////////////////////////////////////////////////////////////////////////////////
// BallastConfiguration PhysicalMinLevel
/**
 * @brief Verifies if the DotDot BallastConfiguration - PhysicalMinLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalMinLevel is supported
 * @returns false if PhysicalMinLevel is not supported
 */
bool dotdot_is_supported_ballast_configuration_physical_min_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - PhysicalMinLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalMinLevel attribute
 */
uint8_t dotdot_get_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - PhysicalMinLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_min_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_min_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - PhysicalMinLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_physical_min_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - PhysicalMinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_physical_min_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - PhysicalMinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_physical_min_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - PhysicalMinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_physical_min_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - PhysicalMinLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration PhysicalMaxLevel
/**
 * @brief Verifies if the DotDot BallastConfiguration - PhysicalMaxLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalMaxLevel is supported
 * @returns false if PhysicalMaxLevel is not supported
 */
bool dotdot_is_supported_ballast_configuration_physical_max_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - PhysicalMaxLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalMaxLevel attribute
 */
uint8_t dotdot_get_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - PhysicalMaxLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_max_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_max_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - PhysicalMaxLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_physical_max_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - PhysicalMaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_physical_max_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - PhysicalMaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_physical_max_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - PhysicalMaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_physical_max_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - PhysicalMaxLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration BallastStatus
/**
 * @brief Verifies if the DotDot BallastConfiguration - BallastStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BallastStatus is supported
 * @returns false if BallastStatus is not supported
 */
bool dotdot_is_supported_ballast_configuration_ballast_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - BallastStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BallastStatus attribute
 */
uint8_t dotdot_get_ballast_configuration_ballast_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - BallastStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ballast_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_ballast_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ballast_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - BallastStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_ballast_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - BallastStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_ballast_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - BallastStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_ballast_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - BallastStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_ballast_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - BallastStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_ballast_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration MinLevel
/**
 * @brief Verifies if the DotDot BallastConfiguration - MinLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinLevel is supported
 * @returns false if MinLevel is not supported
 */
bool dotdot_is_supported_ballast_configuration_min_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - MinLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinLevel attribute
 */
uint8_t dotdot_get_ballast_configuration_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - MinLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - MinLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_min_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - MinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_min_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - MinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_min_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - MinLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_min_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - MinLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration MaxLevel
/**
 * @brief Verifies if the DotDot BallastConfiguration - MaxLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxLevel is supported
 * @returns false if MaxLevel is not supported
 */
bool dotdot_is_supported_ballast_configuration_max_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - MaxLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxLevel attribute
 */
uint8_t dotdot_get_ballast_configuration_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - MaxLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - MaxLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_max_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - MaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_max_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - MaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_max_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - MaxLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_max_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - MaxLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration PowerOnLevel
/**
 * @brief Verifies if the DotDot BallastConfiguration - PowerOnLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerOnLevel is supported
 * @returns false if PowerOnLevel is not supported
 */
bool dotdot_is_supported_ballast_configuration_power_on_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - PowerOnLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerOnLevel attribute
 */
uint8_t dotdot_get_ballast_configuration_power_on_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - PowerOnLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_on_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_power_on_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_power_on_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - PowerOnLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_power_on_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - PowerOnLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_power_on_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - PowerOnLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_power_on_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - PowerOnLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_power_on_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - PowerOnLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_power_on_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration PowerOnFadeTime
/**
 * @brief Verifies if the DotDot BallastConfiguration - PowerOnFadeTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerOnFadeTime is supported
 * @returns false if PowerOnFadeTime is not supported
 */
bool dotdot_is_supported_ballast_configuration_power_on_fade_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - PowerOnFadeTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerOnFadeTime attribute
 */
uint16_t dotdot_get_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - PowerOnFadeTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_on_fade_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_power_on_fade_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - PowerOnFadeTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_power_on_fade_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - PowerOnFadeTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_power_on_fade_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - PowerOnFadeTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_power_on_fade_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - PowerOnFadeTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_power_on_fade_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - PowerOnFadeTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration IntrinsicBallastFactor
/**
 * @brief Verifies if the DotDot BallastConfiguration - IntrinsicBallastFactor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if IntrinsicBallastFactor is supported
 * @returns false if IntrinsicBallastFactor is not supported
 */
bool dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - IntrinsicBallastFactor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns IntrinsicBallastFactor attribute
 */
uint8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - IntrinsicBallastFactor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_intrinsic_ballast_factor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_intrinsic_ballast_factor
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - IntrinsicBallastFactor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_intrinsic_ballast_factor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - IntrinsicBallastFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_intrinsic_ballast_factor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - IntrinsicBallastFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_intrinsic_ballast_factor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - IntrinsicBallastFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_intrinsic_ballast_factor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - IntrinsicBallastFactor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration BallastFactorAdjustment
/**
 * @brief Verifies if the DotDot BallastConfiguration - BallastFactorAdjustment is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BallastFactorAdjustment is supported
 * @returns false if BallastFactorAdjustment is not supported
 */
bool dotdot_is_supported_ballast_configuration_ballast_factor_adjustment (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - BallastFactorAdjustment attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BallastFactorAdjustment attribute
 */
uint8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - BallastFactorAdjustment attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ballast_factor_adjustment new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ballast_factor_adjustment
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - BallastFactorAdjustment
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_ballast_factor_adjustment_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - BallastFactorAdjustment attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_ballast_factor_adjustment_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - BallastFactorAdjustment attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_ballast_factor_adjustment_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - BallastFactorAdjustment attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_ballast_factor_adjustment_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - BallastFactorAdjustment attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampQuantity
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampQuantity is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampQuantity is supported
 * @returns false if LampQuantity is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_quantity (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampQuantity attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LampQuantity attribute
 */
uint8_t dotdot_get_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampQuantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_quantity new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lamp_quantity
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampQuantity
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampQuantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampQuantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampQuantity attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampQuantity attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampType
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampType is supported
 * @returns false if LampType is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns LampType attribute
 */
const char* dotdot_get_ballast_configuration_lamp_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_lamp_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampManufacturer
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampManufacturer is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampManufacturer is supported
 * @returns false if LampManufacturer is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_manufacturer (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampManufacturer attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns LampManufacturer attribute
 */
const char* dotdot_get_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampManufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_manufacturer new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_lamp_manufacturer
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampManufacturer
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampManufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampManufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampManufacturer attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampManufacturer attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampRatedHours
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampRatedHours is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampRatedHours is supported
 * @returns false if LampRatedHours is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_rated_hours (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampRatedHours attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LampRatedHours attribute
 */
uint32_t dotdot_get_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampRatedHours attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_rated_hours new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_rated_hours
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampRatedHours
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_rated_hours_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampRatedHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_rated_hours_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampRatedHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_rated_hours_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampRatedHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_rated_hours_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampRatedHours attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampBurnHours
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampBurnHours is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampBurnHours is supported
 * @returns false if LampBurnHours is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_burn_hours (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampBurnHours attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LampBurnHours attribute
 */
uint32_t dotdot_get_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampBurnHours attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_burn_hours new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_burn_hours
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampBurnHours
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_burn_hours_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampBurnHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_burn_hours_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampBurnHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_burn_hours_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampBurnHours attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_burn_hours_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampBurnHours attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampAlarmMode
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampAlarmMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampAlarmMode is supported
 * @returns false if LampAlarmMode is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_alarm_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampAlarmMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LampAlarmMode attribute
 */
uint8_t dotdot_get_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampAlarmMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_alarm_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lamp_alarm_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampAlarmMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_alarm_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampAlarmMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_alarm_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampAlarmMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_alarm_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampAlarmMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_alarm_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampAlarmMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// BallastConfiguration LampBurnHoursTripPoint
/**
 * @brief Verifies if the DotDot BallastConfiguration - LampBurnHoursTripPoint is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LampBurnHoursTripPoint is supported
 * @returns false if LampBurnHoursTripPoint is not supported
 */
bool dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot BallastConfiguration - LampBurnHoursTripPoint attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LampBurnHoursTripPoint attribute
 */
uint32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot BallastConfiguration - LampBurnHoursTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_lamp_burn_hours_trip_point new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_burn_hours_trip_point
  );

/**
 * @brief Undefines the Reported value of the the DotDot BallastConfiguration - LampBurnHoursTripPoint
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_burn_hours_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * BallastConfiguration - LampBurnHoursTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ballast_configuration_lamp_burn_hours_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * BallastConfiguration - LampBurnHoursTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_burn_hours_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * BallastConfiguration - LampBurnHoursTripPoint attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ballast_configuration_lamp_burn_hours_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot BallastConfiguration - LampBurnHoursTripPoint attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the BallastConfiguration
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_ballast_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * BallastConfiguration Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_ballast_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IlluminanceMeasurement
////////////////////////////////////////////////////////////////////////////////
// IlluminanceMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot IlluminanceMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_illuminance_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_illuminance_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IlluminanceMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot IlluminanceMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_illuminance_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IlluminanceMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot IlluminanceMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_illuminance_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IlluminanceMeasurement Tolerance
/**
 * @brief Verifies if the DotDot IlluminanceMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_illuminance_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_illuminance_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IlluminanceMeasurement LightSensorType
/**
 * @brief Verifies if the DotDot IlluminanceMeasurement - LightSensorType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LightSensorType is supported
 * @returns false if LightSensorType is not supported
 */
bool dotdot_is_supported_illuminance_measurement_light_sensor_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceMeasurement - LightSensorType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LightSensorType attribute
 */
uint8_t dotdot_get_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceMeasurement - LightSensorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_light_sensor_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_light_sensor_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceMeasurement - LightSensorType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_light_sensor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceMeasurement - LightSensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_measurement_light_sensor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceMeasurement - LightSensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_light_sensor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceMeasurement - LightSensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_measurement_light_sensor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceMeasurement - LightSensorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the IlluminanceMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_illuminance_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * IlluminanceMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_illuminance_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IlluminanceLevelSensing
////////////////////////////////////////////////////////////////////////////////
// IlluminanceLevelSensing LevelStatus
/**
 * @brief Verifies if the DotDot IlluminanceLevelSensing - LevelStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LevelStatus is supported
 * @returns false if LevelStatus is not supported
 */
bool dotdot_is_supported_illuminance_level_sensing_level_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceLevelSensing - LevelStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LevelStatus attribute
 */
uint8_t dotdot_get_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceLevelSensing - LevelStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_level_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_level_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceLevelSensing - LevelStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_level_sensing_level_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceLevelSensing - LevelStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_level_sensing_level_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceLevelSensing - LevelStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_level_sensing_level_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceLevelSensing - LevelStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_level_sensing_level_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceLevelSensing - LevelStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IlluminanceLevelSensing LightSensorType
/**
 * @brief Verifies if the DotDot IlluminanceLevelSensing - LightSensorType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LightSensorType is supported
 * @returns false if LightSensorType is not supported
 */
bool dotdot_is_supported_illuminance_level_sensing_light_sensor_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceLevelSensing - LightSensorType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LightSensorType attribute
 */
uint8_t dotdot_get_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceLevelSensing - LightSensorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_light_sensor_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_light_sensor_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceLevelSensing - LightSensorType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_level_sensing_light_sensor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceLevelSensing - LightSensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_level_sensing_light_sensor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceLevelSensing - LightSensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_level_sensing_light_sensor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceLevelSensing - LightSensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_level_sensing_light_sensor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceLevelSensing - LightSensorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IlluminanceLevelSensing IlluminanceTargetLevel
/**
 * @brief Verifies if the DotDot IlluminanceLevelSensing - IlluminanceTargetLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if IlluminanceTargetLevel is supported
 * @returns false if IlluminanceTargetLevel is not supported
 */
bool dotdot_is_supported_illuminance_level_sensing_illuminance_target_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IlluminanceLevelSensing - IlluminanceTargetLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns IlluminanceTargetLevel attribute
 */
uint16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IlluminanceLevelSensing - IlluminanceTargetLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_illuminance_target_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_illuminance_target_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot IlluminanceLevelSensing - IlluminanceTargetLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_level_sensing_illuminance_target_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IlluminanceLevelSensing - IlluminanceTargetLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_illuminance_level_sensing_illuminance_target_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IlluminanceLevelSensing - IlluminanceTargetLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_level_sensing_illuminance_target_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IlluminanceLevelSensing - IlluminanceTargetLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_illuminance_level_sensing_illuminance_target_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IlluminanceLevelSensing - IlluminanceTargetLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the IlluminanceLevelSensing
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_illuminance_level_sensing_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * IlluminanceLevelSensing Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_illuminance_level_sensing_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster TemperatureMeasurement
////////////////////////////////////////////////////////////////////////////////
// TemperatureMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot TemperatureMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_temperature_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot TemperatureMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
int16_t dotdot_get_temperature_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot TemperatureMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_temperature_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot TemperatureMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * TemperatureMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * TemperatureMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * TemperatureMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot TemperatureMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_temperature_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// TemperatureMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot TemperatureMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_temperature_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot TemperatureMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
int16_t dotdot_get_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot TemperatureMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot TemperatureMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * TemperatureMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * TemperatureMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * TemperatureMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot TemperatureMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// TemperatureMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot TemperatureMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_temperature_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot TemperatureMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
int16_t dotdot_get_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot TemperatureMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot TemperatureMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * TemperatureMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * TemperatureMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * TemperatureMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot TemperatureMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// TemperatureMeasurement Tolerance
/**
 * @brief Verifies if the DotDot TemperatureMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_temperature_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot TemperatureMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_temperature_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot TemperatureMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_temperature_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot TemperatureMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * TemperatureMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_temperature_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * TemperatureMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * TemperatureMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_temperature_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot TemperatureMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_temperature_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the TemperatureMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_temperature_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * TemperatureMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_temperature_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PressureMeasurement
////////////////////////////////////////////////////////////////////////////////
// PressureMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot PressureMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_pressure_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
int16_t dotdot_get_pressure_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot PressureMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_pressure_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
int16_t dotdot_get_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot PressureMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_pressure_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
int16_t dotdot_get_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement Tolerance
/**
 * @brief Verifies if the DotDot PressureMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_pressure_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_pressure_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement ScaledValue
/**
 * @brief Verifies if the DotDot PressureMeasurement - ScaledValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ScaledValue is supported
 * @returns false if ScaledValue is not supported
 */
bool dotdot_is_supported_pressure_measurement_scaled_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - ScaledValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ScaledValue attribute
 */
int16_t dotdot_get_pressure_measurement_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - ScaledValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_scaled_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_scaled_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - ScaledValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_scaled_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - ScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_scaled_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - ScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_scaled_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - ScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_scaled_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - ScaledValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement MinScaledValue
/**
 * @brief Verifies if the DotDot PressureMeasurement - MinScaledValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinScaledValue is supported
 * @returns false if MinScaledValue is not supported
 */
bool dotdot_is_supported_pressure_measurement_min_scaled_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - MinScaledValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinScaledValue attribute
 */
int16_t dotdot_get_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - MinScaledValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_scaled_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_scaled_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - MinScaledValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_min_scaled_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - MinScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_min_scaled_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - MinScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_min_scaled_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - MinScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_min_scaled_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - MinScaledValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement MaxScaledValue
/**
 * @brief Verifies if the DotDot PressureMeasurement - MaxScaledValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxScaledValue is supported
 * @returns false if MaxScaledValue is not supported
 */
bool dotdot_is_supported_pressure_measurement_max_scaled_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - MaxScaledValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxScaledValue attribute
 */
int16_t dotdot_get_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - MaxScaledValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_scaled_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_scaled_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - MaxScaledValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_max_scaled_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - MaxScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_max_scaled_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - MaxScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_max_scaled_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - MaxScaledValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_max_scaled_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - MaxScaledValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement ScaledTolerance
/**
 * @brief Verifies if the DotDot PressureMeasurement - ScaledTolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ScaledTolerance is supported
 * @returns false if ScaledTolerance is not supported
 */
bool dotdot_is_supported_pressure_measurement_scaled_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - ScaledTolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ScaledTolerance attribute
 */
uint16_t dotdot_get_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - ScaledTolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_scaled_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_scaled_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - ScaledTolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_scaled_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - ScaledTolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_scaled_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - ScaledTolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_scaled_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - ScaledTolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_scaled_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - ScaledTolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PressureMeasurement Scale
/**
 * @brief Verifies if the DotDot PressureMeasurement - Scale is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Scale is supported
 * @returns false if Scale is not supported
 */
bool dotdot_is_supported_pressure_measurement_scale (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PressureMeasurement - Scale attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Scale attribute
 */
int8_t dotdot_get_pressure_measurement_scale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PressureMeasurement - Scale attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_scale new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pressure_measurement_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_scale
  );

/**
 * @brief Undefines the Reported value of the the DotDot PressureMeasurement - Scale
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_scale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PressureMeasurement - Scale attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pressure_measurement_scale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PressureMeasurement - Scale attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_scale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PressureMeasurement - Scale attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pressure_measurement_scale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PressureMeasurement - Scale attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pressure_measurement_scale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the PressureMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_pressure_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * PressureMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_pressure_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster FlowMeasurement
////////////////////////////////////////////////////////////////////////////////
// FlowMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot FlowMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_flow_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot FlowMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_flow_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot FlowMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_flow_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot FlowMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * FlowMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * FlowMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * FlowMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot FlowMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_flow_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// FlowMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot FlowMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_flow_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot FlowMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_flow_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot FlowMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_flow_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot FlowMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * FlowMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * FlowMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * FlowMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot FlowMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_flow_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// FlowMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot FlowMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_flow_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot FlowMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_flow_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot FlowMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_flow_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot FlowMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * FlowMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * FlowMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * FlowMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot FlowMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_flow_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// FlowMeasurement Tolerance
/**
 * @brief Verifies if the DotDot FlowMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_flow_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot FlowMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_flow_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot FlowMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_flow_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot FlowMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * FlowMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_flow_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * FlowMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * FlowMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_flow_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot FlowMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_flow_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the FlowMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_flow_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * FlowMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_flow_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster RelativityHumidity
////////////////////////////////////////////////////////////////////////////////
// RelativityHumidity MeasuredValue
/**
 * @brief Verifies if the DotDot RelativityHumidity - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_relativity_humidity_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot RelativityHumidity - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_relativity_humidity_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot RelativityHumidity - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_relativity_humidity_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot RelativityHumidity - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * RelativityHumidity - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * RelativityHumidity - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * RelativityHumidity - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot RelativityHumidity - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_relativity_humidity_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// RelativityHumidity MinMeasuredValue
/**
 * @brief Verifies if the DotDot RelativityHumidity - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_relativity_humidity_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot RelativityHumidity - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot RelativityHumidity - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot RelativityHumidity - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * RelativityHumidity - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * RelativityHumidity - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * RelativityHumidity - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot RelativityHumidity - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// RelativityHumidity MaxMeasuredValue
/**
 * @brief Verifies if the DotDot RelativityHumidity - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_relativity_humidity_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot RelativityHumidity - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot RelativityHumidity - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot RelativityHumidity - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * RelativityHumidity - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * RelativityHumidity - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * RelativityHumidity - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot RelativityHumidity - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// RelativityHumidity Tolerance
/**
 * @brief Verifies if the DotDot RelativityHumidity - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_relativity_humidity_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot RelativityHumidity - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_relativity_humidity_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot RelativityHumidity - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_relativity_humidity_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot RelativityHumidity - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * RelativityHumidity - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_relativity_humidity_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * RelativityHumidity - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * RelativityHumidity - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_relativity_humidity_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot RelativityHumidity - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_relativity_humidity_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the RelativityHumidity
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_relativity_humidity_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * RelativityHumidity Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_relativity_humidity_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster OccupancySensing
////////////////////////////////////////////////////////////////////////////////
// OccupancySensing Occupancy
/**
 * @brief Verifies if the DotDot OccupancySensing - Occupancy is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Occupancy is supported
 * @returns false if Occupancy is not supported
 */
bool dotdot_is_supported_occupancy_sensing_occupancy (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - Occupancy attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Occupancy attribute
 */
uint8_t dotdot_get_occupancy_sensing_occupancy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - Occupancy attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupancy new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_occupancy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - Occupancy
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_occupancy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - Occupancy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_occupancy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - Occupancy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_occupancy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - Occupancy attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_occupancy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - Occupancy attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_occupancy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing OccupancySensorType
/**
 * @brief Verifies if the DotDot OccupancySensing - OccupancySensorType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupancySensorType is supported
 * @returns false if OccupancySensorType is not supported
 */
bool dotdot_is_supported_occupancy_sensing_occupancy_sensor_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - OccupancySensorType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupancySensorType attribute
 */
uint8_t dotdot_get_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - OccupancySensorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupancy_sensor_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy_sensor_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - OccupancySensorType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - OccupancySensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - OccupancySensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_occupancy_sensor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - OccupancySensorType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_occupancy_sensor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - OccupancySensorType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing OccupancySensorTypeBitmap
/**
 * @brief Verifies if the DotDot OccupancySensing - OccupancySensorTypeBitmap is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OccupancySensorTypeBitmap is supported
 * @returns false if OccupancySensorTypeBitmap is not supported
 */
bool dotdot_is_supported_occupancy_sensing_occupancy_sensor_type_bitmap (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - OccupancySensorTypeBitmap attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OccupancySensorTypeBitmap attribute
 */
uint8_t dotdot_get_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - OccupancySensorTypeBitmap attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_occupancy_sensor_type_bitmap new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy_sensor_type_bitmap
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - OccupancySensorTypeBitmap
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - OccupancySensorTypeBitmap attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - OccupancySensorTypeBitmap attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - OccupancySensorTypeBitmap attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - OccupancySensorTypeBitmap attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing PIROccupiedToUnoccupiedDelay
/**
 * @brief Verifies if the DotDot OccupancySensing - PIROccupiedToUnoccupiedDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PIROccupiedToUnoccupiedDelay is supported
 * @returns false if PIROccupiedToUnoccupiedDelay is not supported
 */
bool dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - PIROccupiedToUnoccupiedDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PIROccupiedToUnoccupiedDelay attribute
 */
uint16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - PIROccupiedToUnoccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pir_occupied_to_unoccupied_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pir_occupied_to_unoccupied_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - PIROccupiedToUnoccupiedDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - PIROccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - PIROccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - PIROccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - PIROccupiedToUnoccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing PIRUnoccupiedToOccupiedDelay
/**
 * @brief Verifies if the DotDot OccupancySensing - PIRUnoccupiedToOccupiedDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PIRUnoccupiedToOccupiedDelay is supported
 * @returns false if PIRUnoccupiedToOccupiedDelay is not supported
 */
bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - PIRUnoccupiedToOccupiedDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PIRUnoccupiedToOccupiedDelay attribute
 */
uint16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - PIRUnoccupiedToOccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pir_unoccupied_to_occupied_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pir_unoccupied_to_occupied_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - PIRUnoccupiedToOccupiedDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - PIRUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - PIRUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - PIRUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - PIRUnoccupiedToOccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing PIRUnoccupiedToOccupiedThreshold
/**
 * @brief Verifies if the DotDot OccupancySensing - PIRUnoccupiedToOccupiedThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PIRUnoccupiedToOccupiedThreshold is supported
 * @returns false if PIRUnoccupiedToOccupiedThreshold is not supported
 */
bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - PIRUnoccupiedToOccupiedThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PIRUnoccupiedToOccupiedThreshold attribute
 */
uint8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - PIRUnoccupiedToOccupiedThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pir_unoccupied_to_occupied_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pir_unoccupied_to_occupied_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - PIRUnoccupiedToOccupiedThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - PIRUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - PIRUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - PIRUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - PIRUnoccupiedToOccupiedThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing UltrasonicOccupiedToUnoccupiedDelay
/**
 * @brief Verifies if the DotDot OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UltrasonicOccupiedToUnoccupiedDelay is supported
 * @returns false if UltrasonicOccupiedToUnoccupiedDelay is not supported
 */
bool dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UltrasonicOccupiedToUnoccupiedDelay attribute
 */
uint16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ultrasonic_occupied_to_unoccupied_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ultrasonic_occupied_to_unoccupied_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - UltrasonicOccupiedToUnoccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing UltrasonicUnoccupiedToOccupiedDelay
/**
 * @brief Verifies if the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UltrasonicUnoccupiedToOccupiedDelay is supported
 * @returns false if UltrasonicUnoccupiedToOccupiedDelay is not supported
 */
bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UltrasonicUnoccupiedToOccupiedDelay attribute
 */
uint16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ultrasonic_unoccupied_to_occupied_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ultrasonic_unoccupied_to_occupied_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing UltrasonicUnoccupiedToOccupiedThreshold
/**
 * @brief Verifies if the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UltrasonicUnoccupiedToOccupiedThreshold is supported
 * @returns false if UltrasonicUnoccupiedToOccupiedThreshold is not supported
 */
bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UltrasonicUnoccupiedToOccupiedThreshold attribute
 */
uint8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ultrasonic_unoccupied_to_occupied_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ultrasonic_unoccupied_to_occupied_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - UltrasonicUnoccupiedToOccupiedThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing PhysicalContactOccupiedToUnoccupiedDelay
/**
 * @brief Verifies if the DotDot OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalContactOccupiedToUnoccupiedDelay is supported
 * @returns false if PhysicalContactOccupiedToUnoccupiedDelay is not supported
 */
bool dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalContactOccupiedToUnoccupiedDelay attribute
 */
uint16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_contact_occupied_to_unoccupied_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_contact_occupied_to_unoccupied_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - PhysicalContactOccupiedToUnoccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing PhysicalContactUnoccupiedToOccupiedDelay
/**
 * @brief Verifies if the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalContactUnoccupiedToOccupiedDelay is supported
 * @returns false if PhysicalContactUnoccupiedToOccupiedDelay is not supported
 */
bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalContactUnoccupiedToOccupiedDelay attribute
 */
uint16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_contact_unoccupied_to_occupied_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_contact_unoccupied_to_occupied_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// OccupancySensing PhysicalContactUnoccupiedToOccupiedThreshold
/**
 * @brief Verifies if the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhysicalContactUnoccupiedToOccupiedThreshold is supported
 * @returns false if PhysicalContactUnoccupiedToOccupiedThreshold is not supported
 */
bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhysicalContactUnoccupiedToOccupiedThreshold attribute
 */
uint8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_physical_contact_unoccupied_to_occupied_threshold new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_contact_unoccupied_to_occupied_threshold
  );

/**
 * @brief Undefines the Reported value of the the DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot OccupancySensing - PhysicalContactUnoccupiedToOccupiedThreshold attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the OccupancySensing
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_occupancy_sensing_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * OccupancySensing Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_occupancy_sensing_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster SoilMoisture
////////////////////////////////////////////////////////////////////////////////
// SoilMoisture MeasuredValue
/**
 * @brief Verifies if the DotDot SoilMoisture - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_soil_moisture_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SoilMoisture - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_soil_moisture_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SoilMoisture - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_soil_moisture_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot SoilMoisture - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SoilMoisture - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SoilMoisture - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SoilMoisture - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SoilMoisture - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_soil_moisture_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SoilMoisture MinMeasuredValue
/**
 * @brief Verifies if the DotDot SoilMoisture - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_soil_moisture_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SoilMoisture - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_soil_moisture_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SoilMoisture - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_soil_moisture_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot SoilMoisture - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SoilMoisture - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SoilMoisture - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SoilMoisture - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SoilMoisture - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_soil_moisture_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SoilMoisture MaxMeasuredValue
/**
 * @brief Verifies if the DotDot SoilMoisture - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_soil_moisture_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SoilMoisture - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_soil_moisture_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SoilMoisture - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_soil_moisture_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot SoilMoisture - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SoilMoisture - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SoilMoisture - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SoilMoisture - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SoilMoisture - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_soil_moisture_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SoilMoisture Tolerance
/**
 * @brief Verifies if the DotDot SoilMoisture - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_soil_moisture_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SoilMoisture - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_soil_moisture_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SoilMoisture - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_soil_moisture_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot SoilMoisture - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SoilMoisture - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_soil_moisture_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SoilMoisture - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SoilMoisture - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_soil_moisture_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SoilMoisture - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_soil_moisture_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the SoilMoisture
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_soil_moisture_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * SoilMoisture Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_soil_moisture_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PhMeasurement
////////////////////////////////////////////////////////////////////////////////
// PhMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot PhMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_ph_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PhMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_ph_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PhMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ph_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PhMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PhMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PhMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PhMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PhMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ph_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PhMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot PhMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_ph_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PhMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_ph_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PhMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ph_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PhMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PhMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PhMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PhMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PhMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ph_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PhMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot PhMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_ph_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PhMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_ph_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PhMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ph_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PhMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PhMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PhMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PhMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PhMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ph_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PhMeasurement Tolerance
/**
 * @brief Verifies if the DotDot PhMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_ph_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PhMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_ph_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PhMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ph_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot PhMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PhMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ph_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PhMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PhMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ph_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PhMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ph_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the PhMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_ph_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * PhMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_ph_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ElectricalConductivityMeasurement
////////////////////////////////////////////////////////////////////////////////
// ElectricalConductivityMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot ElectricalConductivityMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_electrical_conductivity_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalConductivityMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalConductivityMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalConductivityMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalConductivityMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalConductivityMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalConductivityMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalConductivityMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalConductivityMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot ElectricalConductivityMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_electrical_conductivity_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalConductivityMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalConductivityMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalConductivityMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalConductivityMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalConductivityMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalConductivityMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalConductivityMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalConductivityMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot ElectricalConductivityMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_electrical_conductivity_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalConductivityMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalConductivityMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalConductivityMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalConductivityMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalConductivityMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalConductivityMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalConductivityMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalConductivityMeasurement Tolerance
/**
 * @brief Verifies if the DotDot ElectricalConductivityMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_electrical_conductivity_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalConductivityMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalConductivityMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalConductivityMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalConductivityMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_conductivity_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalConductivityMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalConductivityMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_conductivity_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalConductivityMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ElectricalConductivityMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_electrical_conductivity_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ElectricalConductivityMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_electrical_conductivity_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster WindSpeedMeasurement
////////////////////////////////////////////////////////////////////////////////
// WindSpeedMeasurement MeasuredValue
/**
 * @brief Verifies if the DotDot WindSpeedMeasurement - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_wind_speed_measurement_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindSpeedMeasurement - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
uint16_t dotdot_get_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindSpeedMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindSpeedMeasurement - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindSpeedMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindSpeedMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindSpeedMeasurement - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindSpeedMeasurement - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindSpeedMeasurement MinMeasuredValue
/**
 * @brief Verifies if the DotDot WindSpeedMeasurement - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_wind_speed_measurement_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindSpeedMeasurement - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
uint16_t dotdot_get_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindSpeedMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindSpeedMeasurement - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindSpeedMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindSpeedMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindSpeedMeasurement - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindSpeedMeasurement - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindSpeedMeasurement MaxMeasuredValue
/**
 * @brief Verifies if the DotDot WindSpeedMeasurement - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_wind_speed_measurement_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindSpeedMeasurement - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
uint16_t dotdot_get_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindSpeedMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindSpeedMeasurement - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindSpeedMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindSpeedMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindSpeedMeasurement - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindSpeedMeasurement - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// WindSpeedMeasurement Tolerance
/**
 * @brief Verifies if the DotDot WindSpeedMeasurement - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_wind_speed_measurement_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot WindSpeedMeasurement - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
uint16_t dotdot_get_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot WindSpeedMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot WindSpeedMeasurement - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * WindSpeedMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_wind_speed_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * WindSpeedMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * WindSpeedMeasurement - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_wind_speed_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot WindSpeedMeasurement - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the WindSpeedMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_wind_speed_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * WindSpeedMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_wind_speed_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster CarbonMonoxide
////////////////////////////////////////////////////////////////////////////////
// CarbonMonoxide MeasuredValue
/**
 * @brief Verifies if the DotDot CarbonMonoxide - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_carbon_monoxide_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonMonoxide - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
float dotdot_get_carbon_monoxide_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonMonoxide - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_monoxide_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonMonoxide - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonMonoxide - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonMonoxide - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonMonoxide - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonMonoxide - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_monoxide_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// CarbonMonoxide MinMeasuredValue
/**
 * @brief Verifies if the DotDot CarbonMonoxide - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_carbon_monoxide_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonMonoxide - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
float dotdot_get_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonMonoxide - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonMonoxide - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonMonoxide - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonMonoxide - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonMonoxide - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonMonoxide - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// CarbonMonoxide MaxMeasuredValue
/**
 * @brief Verifies if the DotDot CarbonMonoxide - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_carbon_monoxide_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonMonoxide - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
float dotdot_get_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonMonoxide - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonMonoxide - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonMonoxide - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonMonoxide - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonMonoxide - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonMonoxide - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// CarbonMonoxide Tolerance
/**
 * @brief Verifies if the DotDot CarbonMonoxide - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_carbon_monoxide_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonMonoxide - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
float dotdot_get_carbon_monoxide_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonMonoxide - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_monoxide_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonMonoxide - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonMonoxide - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_monoxide_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonMonoxide - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonMonoxide - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_monoxide_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonMonoxide - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_monoxide_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the CarbonMonoxide
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_carbon_monoxide_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * CarbonMonoxide Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_carbon_monoxide_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster CarbonDioxide
////////////////////////////////////////////////////////////////////////////////
// CarbonDioxide MeasuredValue
/**
 * @brief Verifies if the DotDot CarbonDioxide - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_carbon_dioxide_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonDioxide - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
float dotdot_get_carbon_dioxide_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonDioxide - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_dioxide_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonDioxide - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonDioxide - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonDioxide - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonDioxide - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonDioxide - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_dioxide_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// CarbonDioxide MinMeasuredValue
/**
 * @brief Verifies if the DotDot CarbonDioxide - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_carbon_dioxide_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonDioxide - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
float dotdot_get_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonDioxide - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonDioxide - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonDioxide - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonDioxide - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonDioxide - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonDioxide - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// CarbonDioxide MaxMeasuredValue
/**
 * @brief Verifies if the DotDot CarbonDioxide - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_carbon_dioxide_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonDioxide - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
float dotdot_get_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonDioxide - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonDioxide - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonDioxide - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonDioxide - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonDioxide - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonDioxide - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// CarbonDioxide Tolerance
/**
 * @brief Verifies if the DotDot CarbonDioxide - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_carbon_dioxide_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot CarbonDioxide - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
float dotdot_get_carbon_dioxide_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot CarbonDioxide - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_carbon_dioxide_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot CarbonDioxide - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * CarbonDioxide - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_carbon_dioxide_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * CarbonDioxide - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * CarbonDioxide - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_carbon_dioxide_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot CarbonDioxide - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_carbon_dioxide_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the CarbonDioxide
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_carbon_dioxide_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * CarbonDioxide Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_carbon_dioxide_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PM25
////////////////////////////////////////////////////////////////////////////////
// PM25 MeasuredValue
/**
 * @brief Verifies if the DotDot PM25 - MeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredValue is supported
 * @returns false if MeasuredValue is not supported
 */
bool dotdot_is_supported_pm25_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PM25 - MeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredValue attribute
 */
float dotdot_get_pm25_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PM25 - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pm25_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PM25 - MeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PM25 - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PM25 - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PM25 - MeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PM25 - MeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pm25_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PM25 MinMeasuredValue
/**
 * @brief Verifies if the DotDot PM25 - MinMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinMeasuredValue is supported
 * @returns false if MinMeasuredValue is not supported
 */
bool dotdot_is_supported_pm25_min_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PM25 - MinMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinMeasuredValue attribute
 */
float dotdot_get_pm25_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PM25 - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pm25_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PM25 - MinMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PM25 - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PM25 - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PM25 - MinMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PM25 - MinMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pm25_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PM25 MaxMeasuredValue
/**
 * @brief Verifies if the DotDot PM25 - MaxMeasuredValue is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxMeasuredValue is supported
 * @returns false if MaxMeasuredValue is not supported
 */
bool dotdot_is_supported_pm25_max_measured_value (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PM25 - MaxMeasuredValue attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxMeasuredValue attribute
 */
float dotdot_get_pm25_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PM25 - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_measured_value new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pm25_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value
  );

/**
 * @brief Undefines the Reported value of the the DotDot PM25 - MaxMeasuredValue
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PM25 - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PM25 - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PM25 - MaxMeasuredValue attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PM25 - MaxMeasuredValue attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pm25_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// PM25 Tolerance
/**
 * @brief Verifies if the DotDot PM25 - Tolerance is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Tolerance is supported
 * @returns false if Tolerance is not supported
 */
bool dotdot_is_supported_pm25_tolerance (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot PM25 - Tolerance attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Tolerance attribute
 */
float dotdot_get_pm25_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot PM25 - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tolerance new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_pm25_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_tolerance
  );

/**
 * @brief Undefines the Reported value of the the DotDot PM25 - Tolerance
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * PM25 - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_pm25_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * PM25 - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * PM25 - Tolerance attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_pm25_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot PM25 - Tolerance attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_pm25_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the PM25
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_pm25_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * PM25 Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_pm25_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IASZone
////////////////////////////////////////////////////////////////////////////////
// IASZone ZoneState
/**
 * @brief Verifies if the DotDot IASZone - ZoneState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ZoneState is supported
 * @returns false if ZoneState is not supported
 */
bool dotdot_is_supported_ias_zone_zone_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - ZoneState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ZoneState attribute
 */
uint8_t dotdot_get_ias_zone_zone_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - ZoneState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_zone_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_zone_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zone_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - ZoneState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zone_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - ZoneState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zone_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - ZoneState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zone_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - ZoneState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zone_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - ZoneState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_zone_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IASZone ZoneType
/**
 * @brief Verifies if the DotDot IASZone - ZoneType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ZoneType is supported
 * @returns false if ZoneType is not supported
 */
bool dotdot_is_supported_ias_zone_zone_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - ZoneType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ZoneType attribute
 */
IasZoneType dotdot_get_ias_zone_zone_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - ZoneType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_zone_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_zone_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  IasZoneType new_zone_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - ZoneType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zone_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - ZoneType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zone_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - ZoneType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zone_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - ZoneType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zone_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - ZoneType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_zone_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IASZone ZoneStatus
/**
 * @brief Verifies if the DotDot IASZone - ZoneStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ZoneStatus is supported
 * @returns false if ZoneStatus is not supported
 */
bool dotdot_is_supported_ias_zone_zone_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - ZoneStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ZoneStatus attribute
 */
uint16_t dotdot_get_ias_zone_zone_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - ZoneStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_zone_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_zone_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_zone_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - ZoneStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zone_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - ZoneStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zone_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - ZoneStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zone_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - ZoneStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zone_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - ZoneStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_zone_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IASZone IASCIEAddress
/**
 * @brief Verifies if the DotDot IASZone - IASCIEAddress is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if IASCIEAddress is supported
 * @returns false if IASCIEAddress is not supported
 */
bool dotdot_is_supported_ias_zone_iascie_address (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - IASCIEAddress attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns IASCIEAddress attribute
 */
EUI64 dotdot_get_ias_zone_iascie_address(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - IASCIEAddress attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_iascie_address new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_iascie_address(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  EUI64 new_iascie_address
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - IASCIEAddress
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_iascie_address_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - IASCIEAddress attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_iascie_address_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - IASCIEAddress attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_iascie_address_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - IASCIEAddress attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_iascie_address_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - IASCIEAddress attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_iascie_address(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IASZone ZoneID
/**
 * @brief Verifies if the DotDot IASZone - ZoneID is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ZoneID is supported
 * @returns false if ZoneID is not supported
 */
bool dotdot_is_supported_ias_zone_zoneid (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - ZoneID attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ZoneID attribute
 */
uint8_t dotdot_get_ias_zone_zoneid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - ZoneID attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_zoneid new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_zoneid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zoneid
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - ZoneID
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zoneid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - ZoneID attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_zoneid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - ZoneID attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zoneid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - ZoneID attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_zoneid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - ZoneID attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_zoneid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IASZone NumberOfZoneSensitivityLevelsSupported
/**
 * @brief Verifies if the DotDot IASZone - NumberOfZoneSensitivityLevelsSupported is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfZoneSensitivityLevelsSupported is supported
 * @returns false if NumberOfZoneSensitivityLevelsSupported is not supported
 */
bool dotdot_is_supported_ias_zone_number_of_zone_sensitivity_levels_supported (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - NumberOfZoneSensitivityLevelsSupported attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfZoneSensitivityLevelsSupported attribute
 */
uint8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - NumberOfZoneSensitivityLevelsSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_zone_sensitivity_levels_supported new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_zone_sensitivity_levels_supported
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - NumberOfZoneSensitivityLevelsSupported
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - NumberOfZoneSensitivityLevelsSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - NumberOfZoneSensitivityLevelsSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - NumberOfZoneSensitivityLevelsSupported attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - NumberOfZoneSensitivityLevelsSupported attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// IASZone CurrentZoneSensitivityLevel
/**
 * @brief Verifies if the DotDot IASZone - CurrentZoneSensitivityLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentZoneSensitivityLevel is supported
 * @returns false if CurrentZoneSensitivityLevel is not supported
 */
bool dotdot_is_supported_ias_zone_current_zone_sensitivity_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASZone - CurrentZoneSensitivityLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentZoneSensitivityLevel attribute
 */
uint8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASZone - CurrentZoneSensitivityLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_zone_sensitivity_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_zone_sensitivity_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASZone - CurrentZoneSensitivityLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_current_zone_sensitivity_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASZone - CurrentZoneSensitivityLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_ias_zone_current_zone_sensitivity_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASZone - CurrentZoneSensitivityLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_current_zone_sensitivity_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASZone - CurrentZoneSensitivityLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_ias_zone_current_zone_sensitivity_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASZone - CurrentZoneSensitivityLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the IASZone
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_ias_zone_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * IASZone Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_ias_zone_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IASWD
////////////////////////////////////////////////////////////////////////////////
// IASWD MaxDuration
/**
 * @brief Verifies if the DotDot IASWD - MaxDuration is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxDuration is supported
 * @returns false if MaxDuration is not supported
 */
bool dotdot_is_supported_iaswd_max_duration (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot IASWD - MaxDuration attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxDuration attribute
 */
uint16_t dotdot_get_iaswd_max_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot IASWD - MaxDuration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_duration new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_iaswd_max_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_duration
  );

/**
 * @brief Undefines the Reported value of the the DotDot IASWD - MaxDuration
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_iaswd_max_duration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * IASWD - MaxDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_iaswd_max_duration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * IASWD - MaxDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_iaswd_max_duration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * IASWD - MaxDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_iaswd_max_duration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot IASWD - MaxDuration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_iaswd_max_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the IASWD
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_iaswd_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * IASWD Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_iaswd_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Metering
////////////////////////////////////////////////////////////////////////////////
// Metering CurrentSummationDelivered
/**
 * @brief Verifies if the DotDot Metering - CurrentSummationDelivered is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentSummationDelivered is supported
 * @returns false if CurrentSummationDelivered is not supported
 */
bool dotdot_is_supported_metering_current_summation_delivered (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentSummationDelivered attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentSummationDelivered attribute
 */
uint64_t dotdot_get_metering_current_summation_delivered(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentSummationDelivered attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_summation_delivered new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_summation_delivered(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_summation_delivered
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentSummationDelivered
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_summation_delivered_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentSummationDelivered attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_summation_delivered_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentSummationDelivered attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_summation_delivered_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentSummationDelivered attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_summation_delivered_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentSummationDelivered attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_summation_delivered(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentSummationReceived
/**
 * @brief Verifies if the DotDot Metering - CurrentSummationReceived is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentSummationReceived is supported
 * @returns false if CurrentSummationReceived is not supported
 */
bool dotdot_is_supported_metering_current_summation_received (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentSummationReceived attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentSummationReceived attribute
 */
uint64_t dotdot_get_metering_current_summation_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentSummationReceived attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_summation_received new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_summation_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_summation_received
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentSummationReceived
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_summation_received_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentSummationReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_summation_received_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentSummationReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_summation_received_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentSummationReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_summation_received_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentSummationReceived attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_summation_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentMaxDemandDelivered
/**
 * @brief Verifies if the DotDot Metering - CurrentMaxDemandDelivered is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentMaxDemandDelivered is supported
 * @returns false if CurrentMaxDemandDelivered is not supported
 */
bool dotdot_is_supported_metering_current_max_demand_delivered (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentMaxDemandDelivered attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentMaxDemandDelivered attribute
 */
uint64_t dotdot_get_metering_current_max_demand_delivered(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentMaxDemandDelivered attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_max_demand_delivered new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_max_demand_delivered(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_max_demand_delivered
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentMaxDemandDelivered
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_delivered_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentMaxDemandDelivered attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_delivered_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentMaxDemandDelivered attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_delivered_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentMaxDemandDelivered attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_delivered_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentMaxDemandDelivered attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_max_demand_delivered(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentMaxDemandReceived
/**
 * @brief Verifies if the DotDot Metering - CurrentMaxDemandReceived is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentMaxDemandReceived is supported
 * @returns false if CurrentMaxDemandReceived is not supported
 */
bool dotdot_is_supported_metering_current_max_demand_received (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentMaxDemandReceived attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentMaxDemandReceived attribute
 */
int8_t dotdot_get_metering_current_max_demand_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentMaxDemandReceived attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_max_demand_received new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_max_demand_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_current_max_demand_received
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentMaxDemandReceived
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_received_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentMaxDemandReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_received_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentMaxDemandReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_received_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentMaxDemandReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_received_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentMaxDemandReceived attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_max_demand_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering PowerFactor
/**
 * @brief Verifies if the DotDot Metering - PowerFactor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerFactor is supported
 * @returns false if PowerFactor is not supported
 */
bool dotdot_is_supported_metering_power_factor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - PowerFactor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerFactor attribute
 */
int8_t dotdot_get_metering_power_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - PowerFactor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_factor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_power_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - PowerFactor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_power_factor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - PowerFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_power_factor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - PowerFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_power_factor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - PowerFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_power_factor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - PowerFactor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_power_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering ReadingSnapShotTime
/**
 * @brief Verifies if the DotDot Metering - ReadingSnapShotTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReadingSnapShotTime is supported
 * @returns false if ReadingSnapShotTime is not supported
 */
bool dotdot_is_supported_metering_reading_snap_shot_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - ReadingSnapShotTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReadingSnapShotTime attribute
 */
UTC dotdot_get_metering_reading_snap_shot_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - ReadingSnapShotTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reading_snap_shot_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_reading_snap_shot_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_reading_snap_shot_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - ReadingSnapShotTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_reading_snap_shot_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - ReadingSnapShotTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_reading_snap_shot_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - ReadingSnapShotTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_reading_snap_shot_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - ReadingSnapShotTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_reading_snap_shot_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - ReadingSnapShotTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_reading_snap_shot_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentMaxDemandDeliveredTime
/**
 * @brief Verifies if the DotDot Metering - CurrentMaxDemandDeliveredTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentMaxDemandDeliveredTime is supported
 * @returns false if CurrentMaxDemandDeliveredTime is not supported
 */
bool dotdot_is_supported_metering_current_max_demand_delivered_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentMaxDemandDeliveredTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentMaxDemandDeliveredTime attribute
 */
UTC dotdot_get_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentMaxDemandDeliveredTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_max_demand_delivered_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_current_max_demand_delivered_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentMaxDemandDeliveredTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_delivered_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentMaxDemandDeliveredTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_delivered_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentMaxDemandDeliveredTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_delivered_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentMaxDemandDeliveredTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_delivered_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentMaxDemandDeliveredTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentMaxDemandReceivedTime
/**
 * @brief Verifies if the DotDot Metering - CurrentMaxDemandReceivedTime is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentMaxDemandReceivedTime is supported
 * @returns false if CurrentMaxDemandReceivedTime is not supported
 */
bool dotdot_is_supported_metering_current_max_demand_received_time (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentMaxDemandReceivedTime attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentMaxDemandReceivedTime attribute
 */
UTC dotdot_get_metering_current_max_demand_received_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentMaxDemandReceivedTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_max_demand_received_time new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_max_demand_received_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_current_max_demand_received_time
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentMaxDemandReceivedTime
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_received_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentMaxDemandReceivedTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_max_demand_received_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentMaxDemandReceivedTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_received_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentMaxDemandReceivedTime attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_max_demand_received_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentMaxDemandReceivedTime attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_max_demand_received_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering DefaultUpdatePeriod
/**
 * @brief Verifies if the DotDot Metering - DefaultUpdatePeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DefaultUpdatePeriod is supported
 * @returns false if DefaultUpdatePeriod is not supported
 */
bool dotdot_is_supported_metering_default_update_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - DefaultUpdatePeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DefaultUpdatePeriod attribute
 */
uint8_t dotdot_get_metering_default_update_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - DefaultUpdatePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_default_update_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_default_update_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_default_update_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - DefaultUpdatePeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_default_update_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - DefaultUpdatePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_default_update_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - DefaultUpdatePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_default_update_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - DefaultUpdatePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_default_update_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - DefaultUpdatePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_default_update_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering SupplyStatus
/**
 * @brief Verifies if the DotDot Metering - SupplyStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SupplyStatus is supported
 * @returns false if SupplyStatus is not supported
 */
bool dotdot_is_supported_metering_supply_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - SupplyStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SupplyStatus attribute
 */
uint8_t dotdot_get_metering_supply_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - SupplyStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_supply_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_supply_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_supply_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - SupplyStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_supply_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - SupplyStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_supply_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - SupplyStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_supply_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - SupplyStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_supply_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - SupplyStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_supply_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentInletEnergyCarrierSummation
/**
 * @brief Verifies if the DotDot Metering - CurrentInletEnergyCarrierSummation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentInletEnergyCarrierSummation is supported
 * @returns false if CurrentInletEnergyCarrierSummation is not supported
 */
bool dotdot_is_supported_metering_current_inlet_energy_carrier_summation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentInletEnergyCarrierSummation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentInletEnergyCarrierSummation attribute
 */
uint64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentInletEnergyCarrierSummation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_inlet_energy_carrier_summation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_inlet_energy_carrier_summation
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentInletEnergyCarrierSummation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_inlet_energy_carrier_summation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentInletEnergyCarrierSummation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_inlet_energy_carrier_summation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentInletEnergyCarrierSummation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_inlet_energy_carrier_summation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentInletEnergyCarrierSummation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_inlet_energy_carrier_summation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentInletEnergyCarrierSummation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering CurrentOutletEnergyCarrierSummation
/**
 * @brief Verifies if the DotDot Metering - CurrentOutletEnergyCarrierSummation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentOutletEnergyCarrierSummation is supported
 * @returns false if CurrentOutletEnergyCarrierSummation is not supported
 */
bool dotdot_is_supported_metering_current_outlet_energy_carrier_summation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - CurrentOutletEnergyCarrierSummation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentOutletEnergyCarrierSummation attribute
 */
uint64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - CurrentOutletEnergyCarrierSummation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_outlet_energy_carrier_summation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_outlet_energy_carrier_summation
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - CurrentOutletEnergyCarrierSummation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_outlet_energy_carrier_summation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - CurrentOutletEnergyCarrierSummation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_current_outlet_energy_carrier_summation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - CurrentOutletEnergyCarrierSummation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_outlet_energy_carrier_summation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - CurrentOutletEnergyCarrierSummation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_current_outlet_energy_carrier_summation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - CurrentOutletEnergyCarrierSummation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering InletTemperature
/**
 * @brief Verifies if the DotDot Metering - InletTemperature is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if InletTemperature is supported
 * @returns false if InletTemperature is not supported
 */
bool dotdot_is_supported_metering_inlet_temperature (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - InletTemperature attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns InletTemperature attribute
 */
uint32_t dotdot_get_metering_inlet_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - InletTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_inlet_temperature new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_inlet_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_inlet_temperature
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - InletTemperature
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_inlet_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - InletTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_inlet_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - InletTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_inlet_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - InletTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_inlet_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - InletTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_inlet_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering OutletTemperature
/**
 * @brief Verifies if the DotDot Metering - OutletTemperature is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if OutletTemperature is supported
 * @returns false if OutletTemperature is not supported
 */
bool dotdot_is_supported_metering_outlet_temperature (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - OutletTemperature attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns OutletTemperature attribute
 */
uint32_t dotdot_get_metering_outlet_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - OutletTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_outlet_temperature new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_outlet_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_outlet_temperature
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - OutletTemperature
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_outlet_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - OutletTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_outlet_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - OutletTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_outlet_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - OutletTemperature attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_outlet_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - OutletTemperature attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_outlet_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering UnitofMeasure
/**
 * @brief Verifies if the DotDot Metering - UnitofMeasure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UnitofMeasure is supported
 * @returns false if UnitofMeasure is not supported
 */
bool dotdot_is_supported_metering_unitof_measure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - UnitofMeasure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UnitofMeasure attribute
 */
uint8_t dotdot_get_metering_unitof_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - UnitofMeasure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_unitof_measure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_unitof_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unitof_measure
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - UnitofMeasure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_unitof_measure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - UnitofMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_unitof_measure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - UnitofMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_unitof_measure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - UnitofMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_unitof_measure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - UnitofMeasure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_unitof_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering Multiplier
/**
 * @brief Verifies if the DotDot Metering - Multiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Multiplier is supported
 * @returns false if Multiplier is not supported
 */
bool dotdot_is_supported_metering_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - Multiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Multiplier attribute
 */
uint32_t dotdot_get_metering_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - Multiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - Multiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - Multiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - Multiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - Multiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - Multiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering Divisor
/**
 * @brief Verifies if the DotDot Metering - Divisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Divisor is supported
 * @returns false if Divisor is not supported
 */
bool dotdot_is_supported_metering_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - Divisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Divisor attribute
 */
uint32_t dotdot_get_metering_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - Divisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - Divisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - Divisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - Divisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - Divisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - Divisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering SummationFormatting
/**
 * @brief Verifies if the DotDot Metering - SummationFormatting is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SummationFormatting is supported
 * @returns false if SummationFormatting is not supported
 */
bool dotdot_is_supported_metering_summation_formatting (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - SummationFormatting attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SummationFormatting attribute
 */
uint8_t dotdot_get_metering_summation_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - SummationFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_summation_formatting new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_summation_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_summation_formatting
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - SummationFormatting
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_summation_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - SummationFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_summation_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - SummationFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_summation_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - SummationFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_summation_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - SummationFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_summation_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering DemandFormatting
/**
 * @brief Verifies if the DotDot Metering - DemandFormatting is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DemandFormatting is supported
 * @returns false if DemandFormatting is not supported
 */
bool dotdot_is_supported_metering_demand_formatting (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - DemandFormatting attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DemandFormatting attribute
 */
uint8_t dotdot_get_metering_demand_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - DemandFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_demand_formatting new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_demand_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_demand_formatting
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - DemandFormatting
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_demand_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - DemandFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_demand_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - DemandFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_demand_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - DemandFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_demand_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - DemandFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_demand_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering HistoricalConsumptionFormatting
/**
 * @brief Verifies if the DotDot Metering - HistoricalConsumptionFormatting is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if HistoricalConsumptionFormatting is supported
 * @returns false if HistoricalConsumptionFormatting is not supported
 */
bool dotdot_is_supported_metering_historical_consumption_formatting (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - HistoricalConsumptionFormatting attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns HistoricalConsumptionFormatting attribute
 */
uint8_t dotdot_get_metering_historical_consumption_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - HistoricalConsumptionFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_historical_consumption_formatting new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_historical_consumption_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_historical_consumption_formatting
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - HistoricalConsumptionFormatting
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_historical_consumption_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - HistoricalConsumptionFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_historical_consumption_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - HistoricalConsumptionFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_historical_consumption_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - HistoricalConsumptionFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_historical_consumption_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - HistoricalConsumptionFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_historical_consumption_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering MeteringDeviceType
/**
 * @brief Verifies if the DotDot Metering - MeteringDeviceType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeteringDeviceType is supported
 * @returns false if MeteringDeviceType is not supported
 */
bool dotdot_is_supported_metering_metering_device_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - MeteringDeviceType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeteringDeviceType attribute
 */
uint8_t dotdot_get_metering_metering_device_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - MeteringDeviceType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_metering_device_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_metering_device_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_metering_device_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - MeteringDeviceType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_metering_device_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - MeteringDeviceType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_metering_device_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - MeteringDeviceType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_metering_device_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - MeteringDeviceType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_metering_device_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - MeteringDeviceType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_metering_device_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering EnergyCarrierUnitOfMeasure
/**
 * @brief Verifies if the DotDot Metering - EnergyCarrierUnitOfMeasure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnergyCarrierUnitOfMeasure is supported
 * @returns false if EnergyCarrierUnitOfMeasure is not supported
 */
bool dotdot_is_supported_metering_energy_carrier_unit_of_measure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - EnergyCarrierUnitOfMeasure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnergyCarrierUnitOfMeasure attribute
 */
uint8_t dotdot_get_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - EnergyCarrierUnitOfMeasure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_energy_carrier_unit_of_measure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_unit_of_measure
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - EnergyCarrierUnitOfMeasure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_energy_carrier_unit_of_measure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - EnergyCarrierUnitOfMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_energy_carrier_unit_of_measure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - EnergyCarrierUnitOfMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_energy_carrier_unit_of_measure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - EnergyCarrierUnitOfMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_energy_carrier_unit_of_measure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - EnergyCarrierUnitOfMeasure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering EnergyCarrierSummationFormatting
/**
 * @brief Verifies if the DotDot Metering - EnergyCarrierSummationFormatting is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnergyCarrierSummationFormatting is supported
 * @returns false if EnergyCarrierSummationFormatting is not supported
 */
bool dotdot_is_supported_metering_energy_carrier_summation_formatting (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - EnergyCarrierSummationFormatting attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnergyCarrierSummationFormatting attribute
 */
uint8_t dotdot_get_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - EnergyCarrierSummationFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_energy_carrier_summation_formatting new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_summation_formatting
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - EnergyCarrierSummationFormatting
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_energy_carrier_summation_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - EnergyCarrierSummationFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_energy_carrier_summation_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - EnergyCarrierSummationFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_energy_carrier_summation_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - EnergyCarrierSummationFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_energy_carrier_summation_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - EnergyCarrierSummationFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering EnergyCarrierDemandFormatting
/**
 * @brief Verifies if the DotDot Metering - EnergyCarrierDemandFormatting is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EnergyCarrierDemandFormatting is supported
 * @returns false if EnergyCarrierDemandFormatting is not supported
 */
bool dotdot_is_supported_metering_energy_carrier_demand_formatting (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - EnergyCarrierDemandFormatting attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EnergyCarrierDemandFormatting attribute
 */
uint8_t dotdot_get_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - EnergyCarrierDemandFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_energy_carrier_demand_formatting new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_demand_formatting
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - EnergyCarrierDemandFormatting
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_energy_carrier_demand_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - EnergyCarrierDemandFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_energy_carrier_demand_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - EnergyCarrierDemandFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_energy_carrier_demand_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - EnergyCarrierDemandFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_energy_carrier_demand_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - EnergyCarrierDemandFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering TemperatureUnitOfMeasure
/**
 * @brief Verifies if the DotDot Metering - TemperatureUnitOfMeasure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TemperatureUnitOfMeasure is supported
 * @returns false if TemperatureUnitOfMeasure is not supported
 */
bool dotdot_is_supported_metering_temperature_unit_of_measure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - TemperatureUnitOfMeasure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TemperatureUnitOfMeasure attribute
 */
uint8_t dotdot_get_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - TemperatureUnitOfMeasure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_temperature_unit_of_measure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_unit_of_measure
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - TemperatureUnitOfMeasure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_temperature_unit_of_measure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - TemperatureUnitOfMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_temperature_unit_of_measure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - TemperatureUnitOfMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_temperature_unit_of_measure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - TemperatureUnitOfMeasure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_temperature_unit_of_measure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - TemperatureUnitOfMeasure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Metering TemperatureFormatting
/**
 * @brief Verifies if the DotDot Metering - TemperatureFormatting is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TemperatureFormatting is supported
 * @returns false if TemperatureFormatting is not supported
 */
bool dotdot_is_supported_metering_temperature_formatting (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Metering - TemperatureFormatting attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TemperatureFormatting attribute
 */
uint8_t dotdot_get_metering_temperature_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Metering - TemperatureFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_temperature_formatting new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_metering_temperature_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_formatting
  );

/**
 * @brief Undefines the Reported value of the the DotDot Metering - TemperatureFormatting
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_temperature_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Metering - TemperatureFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_metering_temperature_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Metering - TemperatureFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_temperature_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Metering - TemperatureFormatting attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_metering_temperature_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Metering - TemperatureFormatting attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_metering_temperature_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Metering
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_metering_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Metering Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_metering_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ElectricalMeasurement
////////////////////////////////////////////////////////////////////////////////
// ElectricalMeasurement MeasurementType
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasurementType is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasurementType is supported
 * @returns false if MeasurementType is not supported
 */
bool dotdot_is_supported_electrical_measurement_measurement_type (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasurementType attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasurementType attribute
 */
uint32_t dotdot_get_electrical_measurement_measurement_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasurementType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measurement_type new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measurement_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_measurement_type
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasurementType
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measurement_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasurementType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measurement_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasurementType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measurement_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasurementType attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measurement_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasurementType attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measurement_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCVoltage
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCVoltage is supported
 * @returns false if DCVoltage is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCVoltage attribute
 */
int16_t dotdot_get_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCVoltageMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCVoltageMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCVoltageMin is supported
 * @returns false if DCVoltageMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_voltage_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCVoltageMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCVoltageMin attribute
 */
int16_t dotdot_get_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCVoltageMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_voltage_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCVoltageMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCVoltageMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCVoltageMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCVoltageMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCVoltageMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCVoltageMax is supported
 * @returns false if DCVoltageMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_voltage_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCVoltageMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCVoltageMax attribute
 */
int16_t dotdot_get_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCVoltageMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_voltage_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCVoltageMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCVoltageMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCVoltageMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCCurrent is supported
 * @returns false if DCCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_dc_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCCurrentMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCCurrentMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCCurrentMin is supported
 * @returns false if DCCurrentMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_current_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCCurrentMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCCurrentMin attribute
 */
int16_t dotdot_get_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCCurrentMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_current_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCCurrentMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCCurrentMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCCurrentMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCCurrentMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCCurrentMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCCurrentMax is supported
 * @returns false if DCCurrentMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_current_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCCurrentMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCCurrentMax attribute
 */
int16_t dotdot_get_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCCurrentMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_current_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCCurrentMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCCurrentMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCCurrentMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCPower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCPower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCPower is supported
 * @returns false if DCPower is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCPower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCPower attribute
 */
int16_t dotdot_get_electrical_measurement_dc_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCPower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCPower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCPower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCPowerMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCPowerMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCPowerMin is supported
 * @returns false if DCPowerMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_power_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCPowerMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCPowerMin attribute
 */
int16_t dotdot_get_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCPowerMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_power_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCPowerMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCPowerMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCPowerMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCPowerMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCPowerMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCPowerMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCPowerMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCPowerMax is supported
 * @returns false if DCPowerMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_power_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCPowerMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCPowerMax attribute
 */
int16_t dotdot_get_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCPowerMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_power_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCPowerMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCPowerMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCPowerMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCPowerMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCPowerMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCVoltageMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCVoltageMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCVoltageMultiplier is supported
 * @returns false if DCVoltageMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_voltage_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCVoltageMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCVoltageMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCVoltageMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_voltage_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_voltage_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCVoltageMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCVoltageMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCVoltageMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCVoltageDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCVoltageDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCVoltageDivisor is supported
 * @returns false if DCVoltageDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_voltage_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCVoltageDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCVoltageDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCVoltageDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_voltage_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_voltage_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCVoltageDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCVoltageDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCVoltageDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCCurrentMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCCurrentMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCCurrentMultiplier is supported
 * @returns false if DCCurrentMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_current_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCCurrentMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCCurrentMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_current_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_current_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCCurrentMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCCurrentDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCCurrentDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCCurrentDivisor is supported
 * @returns false if DCCurrentDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_current_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCCurrentDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCCurrentDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCCurrentDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_current_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_current_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCCurrentDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCCurrentDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCCurrentDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCPowerMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCPowerMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCPowerMultiplier is supported
 * @returns false if DCPowerMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_power_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCPowerMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCPowerMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCPowerMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_power_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_power_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCPowerMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCPowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCPowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCPowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCPowerMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCPowerDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCPowerDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCPowerDivisor is supported
 * @returns false if DCPowerDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_power_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCPowerDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCPowerDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCPowerDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_power_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_power_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCPowerDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCPowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_power_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCPowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCPowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_power_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCPowerDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACFrequency
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACFrequency is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACFrequency is supported
 * @returns false if ACFrequency is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_frequency (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACFrequency attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACFrequency attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_frequency new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACFrequency
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACFrequency attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACFrequency attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACFrequencyMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACFrequencyMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACFrequencyMin is supported
 * @returns false if ACFrequencyMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_frequency_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACFrequencyMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACFrequencyMin attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACFrequencyMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_frequency_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACFrequencyMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACFrequencyMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACFrequencyMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACFrequencyMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACFrequencyMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACFrequencyMax is supported
 * @returns false if ACFrequencyMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_frequency_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACFrequencyMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACFrequencyMax attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACFrequencyMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_frequency_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACFrequencyMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACFrequencyMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACFrequencyMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement NeutralCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - NeutralCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NeutralCurrent is supported
 * @returns false if NeutralCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_neutral_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - NeutralCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NeutralCurrent attribute
 */
uint16_t dotdot_get_electrical_measurement_neutral_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - NeutralCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_neutral_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_neutral_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neutral_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - NeutralCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_neutral_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - NeutralCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_neutral_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - NeutralCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_neutral_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - NeutralCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_neutral_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - NeutralCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_neutral_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement TotalActivePower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - TotalActivePower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TotalActivePower is supported
 * @returns false if TotalActivePower is not supported
 */
bool dotdot_is_supported_electrical_measurement_total_active_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - TotalActivePower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TotalActivePower attribute
 */
int32_t dotdot_get_electrical_measurement_total_active_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - TotalActivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_total_active_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_total_active_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_total_active_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - TotalActivePower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_total_active_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - TotalActivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_total_active_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - TotalActivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_total_active_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - TotalActivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_total_active_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - TotalActivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_total_active_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement TotalReactivePower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - TotalReactivePower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TotalReactivePower is supported
 * @returns false if TotalReactivePower is not supported
 */
bool dotdot_is_supported_electrical_measurement_total_reactive_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - TotalReactivePower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TotalReactivePower attribute
 */
int32_t dotdot_get_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - TotalReactivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_total_reactive_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_total_reactive_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - TotalReactivePower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_total_reactive_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - TotalReactivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_total_reactive_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - TotalReactivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_total_reactive_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - TotalReactivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_total_reactive_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - TotalReactivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement TotalApparentPower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - TotalApparentPower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TotalApparentPower is supported
 * @returns false if TotalApparentPower is not supported
 */
bool dotdot_is_supported_electrical_measurement_total_apparent_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - TotalApparentPower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TotalApparentPower attribute
 */
uint32_t dotdot_get_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - TotalApparentPower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_total_apparent_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_total_apparent_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - TotalApparentPower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_total_apparent_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - TotalApparentPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_total_apparent_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - TotalApparentPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_total_apparent_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - TotalApparentPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_total_apparent_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - TotalApparentPower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement Measured1stHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - Measured1stHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Measured1stHarmonicCurrent is supported
 * @returns false if Measured1stHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured1st_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - Measured1stHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Measured1stHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - Measured1stHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured1st_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured1st_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - Measured1stHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured1st_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - Measured1stHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured1st_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - Measured1stHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured1st_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - Measured1stHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured1st_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - Measured1stHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement Measured3rdHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - Measured3rdHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Measured3rdHarmonicCurrent is supported
 * @returns false if Measured3rdHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured3rd_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - Measured3rdHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Measured3rdHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - Measured3rdHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured3rd_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured3rd_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - Measured3rdHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured3rd_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - Measured3rdHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured3rd_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - Measured3rdHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured3rd_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - Measured3rdHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured3rd_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - Measured3rdHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement Measured5thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - Measured5thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Measured5thHarmonicCurrent is supported
 * @returns false if Measured5thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured5th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - Measured5thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Measured5thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - Measured5thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured5th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured5th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - Measured5thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured5th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - Measured5thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured5th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - Measured5thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured5th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - Measured5thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured5th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - Measured5thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement Measured7thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - Measured7thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Measured7thHarmonicCurrent is supported
 * @returns false if Measured7thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured7th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - Measured7thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Measured7thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - Measured7thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured7th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured7th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - Measured7thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured7th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - Measured7thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured7th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - Measured7thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured7th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - Measured7thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured7th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - Measured7thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement Measured9thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - Measured9thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Measured9thHarmonicCurrent is supported
 * @returns false if Measured9thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured9th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - Measured9thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Measured9thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - Measured9thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured9th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured9th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - Measured9thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured9th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - Measured9thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured9th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - Measured9thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured9th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - Measured9thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured9th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - Measured9thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement Measured11thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - Measured11thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Measured11thHarmonicCurrent is supported
 * @returns false if Measured11thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured11th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - Measured11thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Measured11thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - Measured11thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured11th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured11th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - Measured11thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured11th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - Measured11thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured11th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - Measured11thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured11th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - Measured11thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured11th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - Measured11thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement MeasuredPhase1stHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredPhase1stHarmonicCurrent is supported
 * @returns false if MeasuredPhase1stHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured_phase1st_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredPhase1stHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_phase1st_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase1st_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase1st_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase1st_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase1st_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase1st_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasuredPhase1stHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement MeasuredPhase3rdHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredPhase3rdHarmonicCurrent is supported
 * @returns false if MeasuredPhase3rdHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured_phase3rd_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredPhase3rdHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_phase3rd_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase3rd_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase3rd_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase3rd_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase3rd_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase3rd_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasuredPhase3rdHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement MeasuredPhase5thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredPhase5thHarmonicCurrent is supported
 * @returns false if MeasuredPhase5thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured_phase5th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredPhase5thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_phase5th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase5th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase5th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase5th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase5th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase5th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasuredPhase5thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement MeasuredPhase7thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredPhase7thHarmonicCurrent is supported
 * @returns false if MeasuredPhase7thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured_phase7th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredPhase7thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_phase7th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase7th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase7th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase7th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase7th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase7th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasuredPhase7thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement MeasuredPhase9thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredPhase9thHarmonicCurrent is supported
 * @returns false if MeasuredPhase9thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured_phase9th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredPhase9thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_phase9th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase9th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase9th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase9th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase9th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase9th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasuredPhase9thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement MeasuredPhase11thHarmonicCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MeasuredPhase11thHarmonicCurrent is supported
 * @returns false if MeasuredPhase11thHarmonicCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_measured_phase11th_harmonic_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MeasuredPhase11thHarmonicCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_measured_phase11th_harmonic_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase11th_harmonic_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase11th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_measured_phase11th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase11th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_measured_phase11th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - MeasuredPhase11thHarmonicCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACFrequencyMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACFrequencyMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACFrequencyMultiplier is supported
 * @returns false if ACFrequencyMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_frequency_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACFrequencyMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACFrequencyMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACFrequencyMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_frequency_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACFrequencyMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACFrequencyMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACFrequencyMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACFrequencyDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACFrequencyDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACFrequencyDivisor is supported
 * @returns false if ACFrequencyDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_frequency_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACFrequencyDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACFrequencyDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACFrequencyDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_frequency_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACFrequencyDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACFrequencyDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_frequency_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACFrequencyDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_frequency_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACFrequencyDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement PowerMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - PowerMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerMultiplier is supported
 * @returns false if PowerMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_power_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - PowerMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerMultiplier attribute
 */
uint32_t dotdot_get_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - PowerMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - PowerMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - PowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - PowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - PowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - PowerMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement PowerDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - PowerDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerDivisor is supported
 * @returns false if PowerDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_power_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - PowerDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerDivisor attribute
 */
uint32_t dotdot_get_electrical_measurement_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - PowerDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - PowerDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - PowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - PowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - PowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - PowerDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement HarmonicCurrentMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - HarmonicCurrentMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if HarmonicCurrentMultiplier is supported
 * @returns false if HarmonicCurrentMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_harmonic_current_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - HarmonicCurrentMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns HarmonicCurrentMultiplier attribute
 */
int8_t dotdot_get_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - HarmonicCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_harmonic_current_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_harmonic_current_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - HarmonicCurrentMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_harmonic_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - HarmonicCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_harmonic_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - HarmonicCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_harmonic_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - HarmonicCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_harmonic_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - HarmonicCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement PhaseHarmonicCurrentMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - PhaseHarmonicCurrentMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PhaseHarmonicCurrentMultiplier is supported
 * @returns false if PhaseHarmonicCurrentMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_phase_harmonic_current_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - PhaseHarmonicCurrentMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PhaseHarmonicCurrentMultiplier attribute
 */
int8_t dotdot_get_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - PhaseHarmonicCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_phase_harmonic_current_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_phase_harmonic_current_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - PhaseHarmonicCurrentMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_phase_harmonic_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - PhaseHarmonicCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_phase_harmonic_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - PhaseHarmonicCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_phase_harmonic_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - PhaseHarmonicCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_phase_harmonic_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - PhaseHarmonicCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement LineCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - LineCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LineCurrent is supported
 * @returns false if LineCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_line_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - LineCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LineCurrent attribute
 */
uint16_t dotdot_get_electrical_measurement_line_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - LineCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_line_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_line_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - LineCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_line_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - LineCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_line_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - LineCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_line_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - LineCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_line_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - LineCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_line_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActiveCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActiveCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActiveCurrent is supported
 * @returns false if ActiveCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActiveCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActiveCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_active_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActiveCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActiveCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActiveCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActiveCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActiveCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActiveCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ReactiveCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ReactiveCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReactiveCurrent is supported
 * @returns false if ReactiveCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_reactive_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ReactiveCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReactiveCurrent attribute
 */
int16_t dotdot_get_electrical_measurement_reactive_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ReactiveCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reactive_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_reactive_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ReactiveCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ReactiveCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ReactiveCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ReactiveCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ReactiveCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_reactive_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltage
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltage is supported
 * @returns false if RMSVoltage is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltage attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageMin is supported
 * @returns false if RMSVoltageMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageMin attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageMax is supported
 * @returns false if RMSVoltageMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageMax attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrent
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrent is supported
 * @returns false if RMSCurrent is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrent attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentMin is supported
 * @returns false if RMSCurrentMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentMin attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentMax is supported
 * @returns false if RMSCurrentMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentMax attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePower is supported
 * @returns false if ActivePower is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePower attribute
 */
int16_t dotdot_get_electrical_measurement_active_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerMin
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerMin is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerMin is supported
 * @returns false if ActivePowerMin is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_min (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerMin attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerMin attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_min new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerMin
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMin attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerMin attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerMax
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerMax is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerMax is supported
 * @returns false if ActivePowerMax is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_max (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerMax attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerMax attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_max new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerMax
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMax attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerMax attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ReactivePower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ReactivePower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReactivePower is supported
 * @returns false if ReactivePower is not supported
 */
bool dotdot_is_supported_electrical_measurement_reactive_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ReactivePower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReactivePower attribute
 */
int16_t dotdot_get_electrical_measurement_reactive_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ReactivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reactive_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_reactive_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ReactivePower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ReactivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ReactivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ReactivePower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ReactivePower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_reactive_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ApparentPower
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ApparentPower is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApparentPower is supported
 * @returns false if ApparentPower is not supported
 */
bool dotdot_is_supported_electrical_measurement_apparent_power (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ApparentPower attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApparentPower attribute
 */
uint16_t dotdot_get_electrical_measurement_apparent_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ApparentPower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_apparent_power new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_apparent_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ApparentPower
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_apparent_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ApparentPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_apparent_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ApparentPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_apparent_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ApparentPower attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_apparent_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ApparentPower attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_apparent_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement PowerFactor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - PowerFactor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerFactor is supported
 * @returns false if PowerFactor is not supported
 */
bool dotdot_is_supported_electrical_measurement_power_factor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - PowerFactor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerFactor attribute
 */
int8_t dotdot_get_electrical_measurement_power_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - PowerFactor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_factor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_power_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - PowerFactor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_factor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - PowerFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_factor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - PowerFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_factor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - PowerFactor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_factor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - PowerFactor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_power_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSVoltageMeasurementPeriod
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSVoltageMeasurementPeriod is supported
 * @returns false if AverageRMSVoltageMeasurementPeriod is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSVoltageMeasurementPeriod attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_voltage_measurement_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_voltage_measurement_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSOverVoltageCounter
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounter is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSOverVoltageCounter is supported
 * @returns false if AverageRMSOverVoltageCounter is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounter attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSOverVoltageCounter attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounter attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_over_voltage_counter new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_over_voltage_counter
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounter
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounter attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounter attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_counter_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounter attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_counter_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSOverVoltageCounter attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSUnderVoltageCounter
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounter is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSUnderVoltageCounter is supported
 * @returns false if AverageRMSUnderVoltageCounter is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounter attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSUnderVoltageCounter attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounter attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_under_voltage_counter new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_under_voltage_counter
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounter
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounter attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounter attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_counter_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounter attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_counter_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounter attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeOverVoltagePeriod
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeOverVoltagePeriod is supported
 * @returns false if RMSExtremeOverVoltagePeriod is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeOverVoltagePeriod attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_over_voltage_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeUnderVoltagePeriod
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeUnderVoltagePeriod is supported
 * @returns false if RMSExtremeUnderVoltagePeriod is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeUnderVoltagePeriod attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_under_voltage_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSagPeriod
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSagPeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSagPeriod is supported
 * @returns false if RMSVoltageSagPeriod is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSagPeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSagPeriod attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSagPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_sag_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSagPeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSagPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSwellPeriod
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSwellPeriod is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSwellPeriod is supported
 * @returns false if RMSVoltageSwellPeriod is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSwellPeriod attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSwellPeriod attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSwellPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_swell_period new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSwellPeriod
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriod attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSwellPeriod attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACVoltageMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACVoltageMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACVoltageMultiplier is supported
 * @returns false if ACVoltageMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_voltage_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACVoltageMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACVoltageMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACVoltageMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_voltage_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_voltage_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACVoltageMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_voltage_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACVoltageMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_voltage_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACVoltageMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_voltage_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACVoltageMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_voltage_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACVoltageMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACVoltageDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACVoltageDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACVoltageDivisor is supported
 * @returns false if ACVoltageDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_voltage_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACVoltageDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACVoltageDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACVoltageDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_voltage_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_voltage_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACVoltageDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_voltage_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACVoltageDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_voltage_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACVoltageDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_voltage_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACVoltageDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_voltage_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACVoltageDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACCurrentMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACCurrentMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCurrentMultiplier is supported
 * @returns false if ACCurrentMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_current_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACCurrentMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCurrentMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_current_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_current_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACCurrentMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACCurrentMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACCurrentMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACCurrentDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACCurrentDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCurrentDivisor is supported
 * @returns false if ACCurrentDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_current_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACCurrentDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCurrentDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACCurrentDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_current_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_current_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACCurrentDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_current_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACCurrentDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_current_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACCurrentDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_current_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACCurrentDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_current_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACCurrentDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACPowerMultiplier
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACPowerMultiplier is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACPowerMultiplier is supported
 * @returns false if ACPowerMultiplier is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_power_multiplier (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACPowerMultiplier attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACPowerMultiplier attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACPowerMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_power_multiplier new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_power_multiplier
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACPowerMultiplier
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_power_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACPowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_power_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACPowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_power_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACPowerMultiplier attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_power_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACPowerMultiplier attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACPowerDivisor
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACPowerDivisor is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACPowerDivisor is supported
 * @returns false if ACPowerDivisor is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_power_divisor (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACPowerDivisor attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACPowerDivisor attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACPowerDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_power_divisor new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_power_divisor
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACPowerDivisor
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_power_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACPowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_power_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACPowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_power_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACPowerDivisor attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_power_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACPowerDivisor attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCOverloadAlarmsMask
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCOverloadAlarmsMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCOverloadAlarmsMask is supported
 * @returns false if DCOverloadAlarmsMask is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_overload_alarms_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCOverloadAlarmsMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCOverloadAlarmsMask attribute
 */
uint8_t dotdot_get_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCOverloadAlarmsMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_overload_alarms_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dc_overload_alarms_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCOverloadAlarmsMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_overload_alarms_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCOverloadAlarmsMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_overload_alarms_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCOverloadAlarmsMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_overload_alarms_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCOverloadAlarmsMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_overload_alarms_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCOverloadAlarmsMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCVoltageOverload
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCVoltageOverload is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCVoltageOverload is supported
 * @returns false if DCVoltageOverload is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_voltage_overload (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCVoltageOverload attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCVoltageOverload attribute
 */
int16_t dotdot_get_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCVoltageOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_voltage_overload new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_overload
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCVoltageOverload
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCVoltageOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_voltage_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCVoltageOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_voltage_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCVoltageOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement DCCurrentOverload
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - DCCurrentOverload is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DCCurrentOverload is supported
 * @returns false if DCCurrentOverload is not supported
 */
bool dotdot_is_supported_electrical_measurement_dc_current_overload (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - DCCurrentOverload attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DCCurrentOverload attribute
 */
int16_t dotdot_get_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - DCCurrentOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_dc_current_overload new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_overload
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - DCCurrentOverload
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - DCCurrentOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_dc_current_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - DCCurrentOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_dc_current_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - DCCurrentOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACAlarmsMask
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACAlarmsMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACAlarmsMask is supported
 * @returns false if ACAlarmsMask is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_alarms_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACAlarmsMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACAlarmsMask attribute
 */
uint16_t dotdot_get_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACAlarmsMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_alarms_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_alarms_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACAlarmsMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_alarms_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACAlarmsMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_alarms_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACAlarmsMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_alarms_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACAlarmsMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_alarms_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACAlarmsMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACVoltageOverload
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACVoltageOverload is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACVoltageOverload is supported
 * @returns false if ACVoltageOverload is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_voltage_overload (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACVoltageOverload attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACVoltageOverload attribute
 */
int16_t dotdot_get_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACVoltageOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_voltage_overload new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_voltage_overload
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACVoltageOverload
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_voltage_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACVoltageOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_voltage_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACVoltageOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_voltage_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACVoltageOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_voltage_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACVoltageOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACCurrentOverload
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACCurrentOverload is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACCurrentOverload is supported
 * @returns false if ACCurrentOverload is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_current_overload (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACCurrentOverload attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACCurrentOverload attribute
 */
int16_t dotdot_get_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACCurrentOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_current_overload new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_current_overload
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACCurrentOverload
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_current_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACCurrentOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_current_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACCurrentOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_current_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACCurrentOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_current_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACCurrentOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACActivePowerOverload
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACActivePowerOverload is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACActivePowerOverload is supported
 * @returns false if ACActivePowerOverload is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_active_power_overload (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACActivePowerOverload attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACActivePowerOverload attribute
 */
int16_t dotdot_get_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACActivePowerOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_active_power_overload new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_active_power_overload
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACActivePowerOverload
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_active_power_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACActivePowerOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_active_power_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACActivePowerOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_active_power_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACActivePowerOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_active_power_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACActivePowerOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ACReactivePowerOverload
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ACReactivePowerOverload is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ACReactivePowerOverload is supported
 * @returns false if ACReactivePowerOverload is not supported
 */
bool dotdot_is_supported_electrical_measurement_ac_reactive_power_overload (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ACReactivePowerOverload attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ACReactivePowerOverload attribute
 */
int16_t dotdot_get_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ACReactivePowerOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ac_reactive_power_overload new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_reactive_power_overload
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ACReactivePowerOverload
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_reactive_power_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ACReactivePowerOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_ac_reactive_power_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ACReactivePowerOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_reactive_power_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ACReactivePowerOverload attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_ac_reactive_power_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ACReactivePowerOverload attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSOverVoltage
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSOverVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSOverVoltage is supported
 * @returns false if AverageRMSOverVoltage is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSOverVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSOverVoltage attribute
 */
int16_t dotdot_get_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSOverVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_over_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_average_rms_over_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSOverVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSOverVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSUnderVoltage
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSUnderVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSUnderVoltage is supported
 * @returns false if AverageRMSUnderVoltage is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSUnderVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSUnderVoltage attribute
 */
int16_t dotdot_get_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSUnderVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_under_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_average_rms_under_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSUnderVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSUnderVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeOverVoltage
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeOverVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeOverVoltage is supported
 * @returns false if RMSExtremeOverVoltage is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeOverVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeOverVoltage attribute
 */
int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeOverVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_over_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_extreme_over_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeOverVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeOverVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeUnderVoltage
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeUnderVoltage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeUnderVoltage is supported
 * @returns false if RMSExtremeUnderVoltage is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeUnderVoltage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeUnderVoltage attribute
 */
int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeUnderVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_under_voltage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_extreme_under_voltage
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeUnderVoltage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeUnderVoltage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSag
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSag is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSag is supported
 * @returns false if RMSVoltageSag is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSag attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSag attribute
 */
int16_t dotdot_get_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSag attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_sag new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_voltage_sag
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSag
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSag attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSag attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSag attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSag attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSwell
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSwell is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSwell is supported
 * @returns false if RMSVoltageSwell is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSwell attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSwell attribute
 */
int16_t dotdot_get_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSwell attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_swell new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_voltage_swell
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSwell
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSwell attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwell attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwell attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSwell attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement LineCurrentPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - LineCurrentPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LineCurrentPhB is supported
 * @returns false if LineCurrentPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_line_current_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - LineCurrentPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LineCurrentPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - LineCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_line_current_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - LineCurrentPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_line_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - LineCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_line_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - LineCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_line_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - LineCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_line_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - LineCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActiveCurrentPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActiveCurrentPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActiveCurrentPhB is supported
 * @returns false if ActiveCurrentPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_current_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActiveCurrentPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActiveCurrentPhB attribute
 */
int16_t dotdot_get_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActiveCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_current_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActiveCurrentPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActiveCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActiveCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActiveCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActiveCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ReactiveCurrentPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ReactiveCurrentPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReactiveCurrentPhB is supported
 * @returns false if ReactiveCurrentPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_reactive_current_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ReactiveCurrentPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReactiveCurrentPhB attribute
 */
int16_t dotdot_get_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ReactiveCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reactive_current_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ReactiveCurrentPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ReactiveCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ReactiveCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ReactiveCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ReactiveCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltagePhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltagePhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltagePhB is supported
 * @returns false if RMSVoltagePhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltagePhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltagePhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltagePhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltagePhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltagePhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltagePhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltagePhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltagePhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageMinPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageMinPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageMinPhB is supported
 * @returns false if RMSVoltageMinPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageMinPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageMinPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageMinPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_min_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageMinPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_min_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_min_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_min_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_min_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageMinPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageMaxPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageMaxPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageMaxPhB is supported
 * @returns false if RMSVoltageMaxPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageMaxPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageMaxPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageMaxPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_max_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageMaxPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_max_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_max_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_max_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_max_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageMaxPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentPhB is supported
 * @returns false if RMSCurrentPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentMinPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentMinPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentMinPhB is supported
 * @returns false if RMSCurrentMinPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_min_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentMinPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentMinPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentMinPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_min_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentMinPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_min_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_min_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_min_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_min_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentMinPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentMaxPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentMaxPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentMaxPhB is supported
 * @returns false if RMSCurrentMaxPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_max_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentMaxPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentMaxPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentMaxPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_max_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentMaxPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_max_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_max_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_max_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_max_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentMaxPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerPhB is supported
 * @returns false if ActivePowerPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerPhB attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerMinPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerMinPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerMinPhB is supported
 * @returns false if ActivePowerMinPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_min_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerMinPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerMinPhB attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerMinPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_min_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerMinPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_min_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_min_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_min_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMinPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_min_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerMinPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerMaxPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerMaxPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerMaxPhB is supported
 * @returns false if ActivePowerMaxPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_max_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerMaxPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerMaxPhB attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerMaxPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_max_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerMaxPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_max_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_max_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_max_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMaxPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_max_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerMaxPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ReactivePowerPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ReactivePowerPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReactivePowerPhB is supported
 * @returns false if ReactivePowerPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_reactive_power_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ReactivePowerPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReactivePowerPhB attribute
 */
int16_t dotdot_get_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ReactivePowerPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reactive_power_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ReactivePowerPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_power_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ReactivePowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_power_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ReactivePowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_power_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ReactivePowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_power_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ReactivePowerPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ApparentPowerPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ApparentPowerPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApparentPowerPhB is supported
 * @returns false if ApparentPowerPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_apparent_power_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ApparentPowerPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApparentPowerPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ApparentPowerPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_apparent_power_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ApparentPowerPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_apparent_power_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ApparentPowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_apparent_power_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ApparentPowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_apparent_power_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ApparentPowerPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_apparent_power_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ApparentPowerPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement PowerFactorPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - PowerFactorPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerFactorPhB is supported
 * @returns false if PowerFactorPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_power_factor_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - PowerFactorPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerFactorPhB attribute
 */
int8_t dotdot_get_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - PowerFactorPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_factor_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - PowerFactorPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_factor_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - PowerFactorPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_factor_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - PowerFactorPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_factor_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - PowerFactorPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_factor_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - PowerFactorPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSVoltageMeasurementPeriodPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSVoltageMeasurementPeriodPhB is supported
 * @returns false if AverageRMSVoltageMeasurementPeriodPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSVoltageMeasurementPeriodPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_voltage_measurement_period_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_voltage_measurement_period_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSOverVoltageCounterPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSOverVoltageCounterPhB is supported
 * @returns false if AverageRMSOverVoltageCounterPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSOverVoltageCounterPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_over_voltage_counter_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_over_voltage_counter_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounterPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounterPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounterPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSUnderVoltageCounterPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSUnderVoltageCounterPhB is supported
 * @returns false if AverageRMSUnderVoltageCounterPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSUnderVoltageCounterPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_under_voltage_counter_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_under_voltage_counter_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeOverVoltagePeriodPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeOverVoltagePeriodPhB is supported
 * @returns false if RMSExtremeOverVoltagePeriodPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeOverVoltagePeriodPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_over_voltage_period_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeUnderVoltagePeriodPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeUnderVoltagePeriodPhB is supported
 * @returns false if RMSExtremeUnderVoltagePeriodPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeUnderVoltagePeriodPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_under_voltage_period_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSagPeriodPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSagPeriodPhB is supported
 * @returns false if RMSVoltageSagPeriodPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSagPeriodPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_sag_period_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSwellPeriodPhB
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSwellPeriodPhB is supported
 * @returns false if RMSVoltageSwellPeriodPhB is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSwellPeriodPhB attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_swell_period_phb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period_phb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriodPhB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement LineCurrentPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - LineCurrentPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LineCurrentPhC is supported
 * @returns false if LineCurrentPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_line_current_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - LineCurrentPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LineCurrentPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - LineCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_line_current_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - LineCurrentPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_line_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - LineCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_line_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - LineCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_line_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - LineCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_line_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - LineCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActiveCurrentPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActiveCurrentPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActiveCurrentPhC is supported
 * @returns false if ActiveCurrentPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_current_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActiveCurrentPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActiveCurrentPhC attribute
 */
int16_t dotdot_get_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActiveCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_current_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActiveCurrentPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActiveCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActiveCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActiveCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActiveCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ReactiveCurrentPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ReactiveCurrentPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReactiveCurrentPhC is supported
 * @returns false if ReactiveCurrentPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_reactive_current_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ReactiveCurrentPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReactiveCurrentPhC attribute
 */
int16_t dotdot_get_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ReactiveCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reactive_current_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ReactiveCurrentPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ReactiveCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ReactiveCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ReactiveCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ReactiveCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltagePhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltagePhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltagePhC is supported
 * @returns false if RMSVoltagePhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltagePhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltagePhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltagePhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltagePhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltagePhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltagePhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltagePhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltagePhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageMinPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageMinPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageMinPhC is supported
 * @returns false if RMSVoltageMinPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageMinPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageMinPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageMinPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_min_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageMinPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_min_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_min_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_min_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_min_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageMinPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageMaxPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageMaxPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageMaxPhC is supported
 * @returns false if RMSVoltageMaxPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageMaxPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageMaxPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageMaxPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_max_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageMaxPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_max_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_max_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_max_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_max_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageMaxPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentPhC is supported
 * @returns false if RMSCurrentPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentMinPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentMinPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentMinPhC is supported
 * @returns false if RMSCurrentMinPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_min_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentMinPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentMinPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentMinPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_min_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentMinPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_min_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_min_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_min_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_min_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentMinPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSCurrentMaxPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSCurrentMaxPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSCurrentMaxPhC is supported
 * @returns false if RMSCurrentMaxPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_current_max_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSCurrentMaxPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSCurrentMaxPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSCurrentMaxPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_current_max_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSCurrentMaxPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_max_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSCurrentMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_current_max_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_max_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSCurrentMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_current_max_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSCurrentMaxPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerPhC is supported
 * @returns false if ActivePowerPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerPhC attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerMinPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerMinPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerMinPhC is supported
 * @returns false if ActivePowerMinPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_min_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerMinPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerMinPhC attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerMinPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_min_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerMinPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_min_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_min_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_min_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMinPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_min_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerMinPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ActivePowerMaxPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ActivePowerMaxPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ActivePowerMaxPhC is supported
 * @returns false if ActivePowerMaxPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_active_power_max_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ActivePowerMaxPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ActivePowerMaxPhC attribute
 */
int16_t dotdot_get_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ActivePowerMaxPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_active_power_max_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ActivePowerMaxPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_max_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ActivePowerMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_active_power_max_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_max_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ActivePowerMaxPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_active_power_max_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ActivePowerMaxPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ReactivePowerPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ReactivePowerPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReactivePowerPhC is supported
 * @returns false if ReactivePowerPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_reactive_power_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ReactivePowerPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReactivePowerPhC attribute
 */
int16_t dotdot_get_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ReactivePowerPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reactive_power_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ReactivePowerPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_power_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ReactivePowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_reactive_power_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ReactivePowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_power_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ReactivePowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_reactive_power_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ReactivePowerPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement ApparentPowerPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - ApparentPowerPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApparentPowerPhC is supported
 * @returns false if ApparentPowerPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_apparent_power_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - ApparentPowerPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApparentPowerPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - ApparentPowerPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_apparent_power_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - ApparentPowerPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_apparent_power_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - ApparentPowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_apparent_power_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - ApparentPowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_apparent_power_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - ApparentPowerPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_apparent_power_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - ApparentPowerPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement PowerFactorPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - PowerFactorPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerFactorPhC is supported
 * @returns false if PowerFactorPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_power_factor_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - PowerFactorPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerFactorPhC attribute
 */
int8_t dotdot_get_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - PowerFactorPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_factor_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - PowerFactorPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_factor_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - PowerFactorPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_power_factor_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - PowerFactorPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_factor_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - PowerFactorPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_power_factor_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - PowerFactorPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSVoltageMeasurementPeriodPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSVoltageMeasurementPeriodPhC is supported
 * @returns false if AverageRMSVoltageMeasurementPeriodPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSVoltageMeasurementPeriodPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_voltage_measurement_period_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_voltage_measurement_period_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSVoltageMeasurementPeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSOverVoltageCounterPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSOverVoltageCounterPhC is supported
 * @returns false if AverageRMSOverVoltageCounterPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSOverVoltageCounterPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_over_voltage_counter_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_over_voltage_counter_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounterPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounterPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSOverVoltageCounterPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSOverVoltageCounterPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement AverageRMSUnderVoltageCounterPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageRMSUnderVoltageCounterPhC is supported
 * @returns false if AverageRMSUnderVoltageCounterPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageRMSUnderVoltageCounterPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_rms_under_voltage_counter_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_under_voltage_counter_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - AverageRMSUnderVoltageCounterPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeOverVoltagePeriodPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeOverVoltagePeriodPhC is supported
 * @returns false if RMSExtremeOverVoltagePeriodPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeOverVoltagePeriodPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_over_voltage_period_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeOverVoltagePeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSExtremeUnderVoltagePeriodPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSExtremeUnderVoltagePeriodPhC is supported
 * @returns false if RMSExtremeUnderVoltagePeriodPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSExtremeUnderVoltagePeriodPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_extreme_under_voltage_period_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSExtremeUnderVoltagePeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSagPeriodPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSagPeriodPhC is supported
 * @returns false if RMSVoltageSagPeriodPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSagPeriodPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_sag_period_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSagPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_sag_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSagPeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ElectricalMeasurement RMSVoltageSwellPeriodPhC
/**
 * @brief Verifies if the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhC is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RMSVoltageSwellPeriodPhC is supported
 * @returns false if RMSVoltageSwellPeriodPhC is not supported
 */
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhC attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RMSVoltageSwellPeriodPhC attribute
 */
uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_rms_voltage_swell_period_phc new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period_phc
  );

/**
 * @brief Undefines the Reported value of the the DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhC
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ElectricalMeasurement - RMSVoltageSwellPeriodPhC attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_electrical_measurement_rms_voltage_swell_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ElectricalMeasurement - RMSVoltageSwellPeriodPhC attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ElectricalMeasurement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_electrical_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ElectricalMeasurement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_electrical_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Diagnostics
////////////////////////////////////////////////////////////////////////////////
// Diagnostics NumberOfResets
/**
 * @brief Verifies if the DotDot Diagnostics - NumberOfResets is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NumberOfResets is supported
 * @returns false if NumberOfResets is not supported
 */
bool dotdot_is_supported_diagnostics_number_of_resets (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - NumberOfResets attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NumberOfResets attribute
 */
uint16_t dotdot_get_diagnostics_number_of_resets(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - NumberOfResets attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_number_of_resets new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_number_of_resets(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_resets
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - NumberOfResets
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_number_of_resets_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - NumberOfResets attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_number_of_resets_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - NumberOfResets attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_number_of_resets_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - NumberOfResets attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_number_of_resets_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - NumberOfResets attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_number_of_resets(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics PersistentMemoryWrites
/**
 * @brief Verifies if the DotDot Diagnostics - PersistentMemoryWrites is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PersistentMemoryWrites is supported
 * @returns false if PersistentMemoryWrites is not supported
 */
bool dotdot_is_supported_diagnostics_persistent_memory_writes (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - PersistentMemoryWrites attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PersistentMemoryWrites attribute
 */
uint16_t dotdot_get_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - PersistentMemoryWrites attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_persistent_memory_writes new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_persistent_memory_writes
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - PersistentMemoryWrites
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_persistent_memory_writes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - PersistentMemoryWrites attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_persistent_memory_writes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - PersistentMemoryWrites attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_persistent_memory_writes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - PersistentMemoryWrites attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_persistent_memory_writes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - PersistentMemoryWrites attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics MacRxBcast
/**
 * @brief Verifies if the DotDot Diagnostics - MacRxBcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MacRxBcast is supported
 * @returns false if MacRxBcast is not supported
 */
bool dotdot_is_supported_diagnostics_mac_rx_bcast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - MacRxBcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MacRxBcast attribute
 */
uint32_t dotdot_get_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - MacRxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mac_rx_bcast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_rx_bcast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - MacRxBcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_rx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - MacRxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_rx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - MacRxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_rx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - MacRxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_rx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - MacRxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics MacTxBcast
/**
 * @brief Verifies if the DotDot Diagnostics - MacTxBcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MacTxBcast is supported
 * @returns false if MacTxBcast is not supported
 */
bool dotdot_is_supported_diagnostics_mac_tx_bcast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - MacTxBcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MacTxBcast attribute
 */
uint32_t dotdot_get_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - MacTxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mac_tx_bcast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_tx_bcast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - MacTxBcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - MacTxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - MacTxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - MacTxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - MacTxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics MacRxUcast
/**
 * @brief Verifies if the DotDot Diagnostics - MacRxUcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MacRxUcast is supported
 * @returns false if MacRxUcast is not supported
 */
bool dotdot_is_supported_diagnostics_mac_rx_ucast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - MacRxUcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MacRxUcast attribute
 */
uint32_t dotdot_get_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - MacRxUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mac_rx_ucast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_rx_ucast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - MacRxUcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_rx_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - MacRxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_rx_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - MacRxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_rx_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - MacRxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_rx_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - MacRxUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics MacTxUcast
/**
 * @brief Verifies if the DotDot Diagnostics - MacTxUcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MacTxUcast is supported
 * @returns false if MacTxUcast is not supported
 */
bool dotdot_is_supported_diagnostics_mac_tx_ucast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - MacTxUcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MacTxUcast attribute
 */
uint32_t dotdot_get_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - MacTxUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mac_tx_ucast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_tx_ucast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - MacTxUcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - MacTxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - MacTxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - MacTxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - MacTxUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics MacTxUcastRetry
/**
 * @brief Verifies if the DotDot Diagnostics - MacTxUcastRetry is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MacTxUcastRetry is supported
 * @returns false if MacTxUcastRetry is not supported
 */
bool dotdot_is_supported_diagnostics_mac_tx_ucast_retry (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - MacTxUcastRetry attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MacTxUcastRetry attribute
 */
uint16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - MacTxUcastRetry attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mac_tx_ucast_retry new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mac_tx_ucast_retry
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - MacTxUcastRetry
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_ucast_retry_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - MacTxUcastRetry attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_ucast_retry_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - MacTxUcastRetry attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_ucast_retry_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - MacTxUcastRetry attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_ucast_retry_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - MacTxUcastRetry attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics MacTxUcastFail
/**
 * @brief Verifies if the DotDot Diagnostics - MacTxUcastFail is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MacTxUcastFail is supported
 * @returns false if MacTxUcastFail is not supported
 */
bool dotdot_is_supported_diagnostics_mac_tx_ucast_fail (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - MacTxUcastFail attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MacTxUcastFail attribute
 */
uint16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - MacTxUcastFail attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mac_tx_ucast_fail new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mac_tx_ucast_fail
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - MacTxUcastFail
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_ucast_fail_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - MacTxUcastFail attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_mac_tx_ucast_fail_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - MacTxUcastFail attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_ucast_fail_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - MacTxUcastFail attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_mac_tx_ucast_fail_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - MacTxUcastFail attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSRxBcast
/**
 * @brief Verifies if the DotDot Diagnostics - APSRxBcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSRxBcast is supported
 * @returns false if APSRxBcast is not supported
 */
bool dotdot_is_supported_diagnostics_aps_rx_bcast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSRxBcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSRxBcast attribute
 */
uint16_t dotdot_get_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSRxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_rx_bcast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_rx_bcast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSRxBcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_rx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSRxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_rx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSRxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_rx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSRxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_rx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSRxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSTxBcast
/**
 * @brief Verifies if the DotDot Diagnostics - APSTxBcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSTxBcast is supported
 * @returns false if APSTxBcast is not supported
 */
bool dotdot_is_supported_diagnostics_aps_tx_bcast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSTxBcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSTxBcast attribute
 */
uint16_t dotdot_get_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSTxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_tx_bcast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_bcast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSTxBcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSTxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSTxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSTxBcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSTxBcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSRxUcast
/**
 * @brief Verifies if the DotDot Diagnostics - APSRxUcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSRxUcast is supported
 * @returns false if APSRxUcast is not supported
 */
bool dotdot_is_supported_diagnostics_aps_rx_ucast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSRxUcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSRxUcast attribute
 */
uint16_t dotdot_get_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSRxUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_rx_ucast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_rx_ucast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSRxUcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_rx_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSRxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_rx_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSRxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_rx_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSRxUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_rx_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSRxUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSTxUcastSuccess
/**
 * @brief Verifies if the DotDot Diagnostics - APSTxUcastSuccess is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSTxUcastSuccess is supported
 * @returns false if APSTxUcastSuccess is not supported
 */
bool dotdot_is_supported_diagnostics_aps_tx_ucast_success (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSTxUcastSuccess attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSTxUcastSuccess attribute
 */
uint16_t dotdot_get_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSTxUcastSuccess attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_tx_ucast_success new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_success
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSTxUcastSuccess
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_ucast_success_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSTxUcastSuccess attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_ucast_success_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSTxUcastSuccess attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_ucast_success_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSTxUcastSuccess attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_ucast_success_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSTxUcastSuccess attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSTxUcastRetry
/**
 * @brief Verifies if the DotDot Diagnostics - APSTxUcastRetry is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSTxUcastRetry is supported
 * @returns false if APSTxUcastRetry is not supported
 */
bool dotdot_is_supported_diagnostics_aps_tx_ucast_retry (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSTxUcastRetry attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSTxUcastRetry attribute
 */
uint16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSTxUcastRetry attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_tx_ucast_retry new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_retry
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSTxUcastRetry
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_ucast_retry_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSTxUcastRetry attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_ucast_retry_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSTxUcastRetry attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_ucast_retry_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSTxUcastRetry attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_ucast_retry_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSTxUcastRetry attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSTxUcastFail
/**
 * @brief Verifies if the DotDot Diagnostics - APSTxUcastFail is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSTxUcastFail is supported
 * @returns false if APSTxUcastFail is not supported
 */
bool dotdot_is_supported_diagnostics_aps_tx_ucast_fail (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSTxUcastFail attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSTxUcastFail attribute
 */
uint16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSTxUcastFail attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_tx_ucast_fail new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_fail
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSTxUcastFail
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_ucast_fail_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSTxUcastFail attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_tx_ucast_fail_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSTxUcastFail attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_ucast_fail_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSTxUcastFail attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_tx_ucast_fail_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSTxUcastFail attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics RouteDiscInitiated
/**
 * @brief Verifies if the DotDot Diagnostics - RouteDiscInitiated is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RouteDiscInitiated is supported
 * @returns false if RouteDiscInitiated is not supported
 */
bool dotdot_is_supported_diagnostics_route_disc_initiated (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - RouteDiscInitiated attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RouteDiscInitiated attribute
 */
uint16_t dotdot_get_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - RouteDiscInitiated attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_route_disc_initiated new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_route_disc_initiated
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - RouteDiscInitiated
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_route_disc_initiated_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - RouteDiscInitiated attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_route_disc_initiated_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - RouteDiscInitiated attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_route_disc_initiated_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - RouteDiscInitiated attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_route_disc_initiated_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - RouteDiscInitiated attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics NeighborAdded
/**
 * @brief Verifies if the DotDot Diagnostics - NeighborAdded is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NeighborAdded is supported
 * @returns false if NeighborAdded is not supported
 */
bool dotdot_is_supported_diagnostics_neighbor_added (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - NeighborAdded attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NeighborAdded attribute
 */
uint16_t dotdot_get_diagnostics_neighbor_added(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - NeighborAdded attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_neighbor_added new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_neighbor_added(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_added
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - NeighborAdded
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_neighbor_added_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - NeighborAdded attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_neighbor_added_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - NeighborAdded attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_neighbor_added_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - NeighborAdded attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_neighbor_added_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - NeighborAdded attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_neighbor_added(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics NeighborRemoved
/**
 * @brief Verifies if the DotDot Diagnostics - NeighborRemoved is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NeighborRemoved is supported
 * @returns false if NeighborRemoved is not supported
 */
bool dotdot_is_supported_diagnostics_neighbor_removed (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - NeighborRemoved attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NeighborRemoved attribute
 */
uint16_t dotdot_get_diagnostics_neighbor_removed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - NeighborRemoved attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_neighbor_removed new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_neighbor_removed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_removed
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - NeighborRemoved
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_neighbor_removed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - NeighborRemoved attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_neighbor_removed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - NeighborRemoved attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_neighbor_removed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - NeighborRemoved attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_neighbor_removed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - NeighborRemoved attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_neighbor_removed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics NeighborStale
/**
 * @brief Verifies if the DotDot Diagnostics - NeighborStale is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NeighborStale is supported
 * @returns false if NeighborStale is not supported
 */
bool dotdot_is_supported_diagnostics_neighbor_stale (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - NeighborStale attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NeighborStale attribute
 */
uint16_t dotdot_get_diagnostics_neighbor_stale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - NeighborStale attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_neighbor_stale new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_neighbor_stale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_stale
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - NeighborStale
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_neighbor_stale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - NeighborStale attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_neighbor_stale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - NeighborStale attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_neighbor_stale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - NeighborStale attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_neighbor_stale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - NeighborStale attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_neighbor_stale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics JoinIndication
/**
 * @brief Verifies if the DotDot Diagnostics - JoinIndication is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if JoinIndication is supported
 * @returns false if JoinIndication is not supported
 */
bool dotdot_is_supported_diagnostics_join_indication (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - JoinIndication attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns JoinIndication attribute
 */
uint16_t dotdot_get_diagnostics_join_indication(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - JoinIndication attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_join_indication new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_join_indication(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_join_indication
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - JoinIndication
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_join_indication_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - JoinIndication attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_join_indication_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - JoinIndication attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_join_indication_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - JoinIndication attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_join_indication_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - JoinIndication attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_join_indication(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics ChildMoved
/**
 * @brief Verifies if the DotDot Diagnostics - ChildMoved is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ChildMoved is supported
 * @returns false if ChildMoved is not supported
 */
bool dotdot_is_supported_diagnostics_child_moved (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - ChildMoved attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ChildMoved attribute
 */
uint16_t dotdot_get_diagnostics_child_moved(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - ChildMoved attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_child_moved new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_child_moved(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_child_moved
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - ChildMoved
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_child_moved_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - ChildMoved attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_child_moved_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - ChildMoved attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_child_moved_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - ChildMoved attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_child_moved_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - ChildMoved attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_child_moved(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics NWKFCFailure
/**
 * @brief Verifies if the DotDot Diagnostics - NWKFCFailure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NWKFCFailure is supported
 * @returns false if NWKFCFailure is not supported
 */
bool dotdot_is_supported_diagnostics_nwkfc_failure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - NWKFCFailure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NWKFCFailure attribute
 */
uint16_t dotdot_get_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - NWKFCFailure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_nwkfc_failure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_nwkfc_failure
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - NWKFCFailure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_nwkfc_failure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - NWKFCFailure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_nwkfc_failure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - NWKFCFailure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_nwkfc_failure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - NWKFCFailure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_nwkfc_failure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - NWKFCFailure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSFCFailure
/**
 * @brief Verifies if the DotDot Diagnostics - APSFCFailure is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSFCFailure is supported
 * @returns false if APSFCFailure is not supported
 */
bool dotdot_is_supported_diagnostics_apsfc_failure (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSFCFailure attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSFCFailure attribute
 */
uint16_t dotdot_get_diagnostics_apsfc_failure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSFCFailure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_apsfc_failure new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_apsfc_failure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apsfc_failure
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSFCFailure
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_apsfc_failure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSFCFailure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_apsfc_failure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSFCFailure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_apsfc_failure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSFCFailure attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_apsfc_failure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSFCFailure attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_apsfc_failure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSUnauthorizedKey
/**
 * @brief Verifies if the DotDot Diagnostics - APSUnauthorizedKey is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSUnauthorizedKey is supported
 * @returns false if APSUnauthorizedKey is not supported
 */
bool dotdot_is_supported_diagnostics_aps_unauthorized_key (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSUnauthorizedKey attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSUnauthorizedKey attribute
 */
uint16_t dotdot_get_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSUnauthorizedKey attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_unauthorized_key new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_unauthorized_key
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSUnauthorizedKey
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_unauthorized_key_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSUnauthorizedKey attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_unauthorized_key_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSUnauthorizedKey attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_unauthorized_key_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSUnauthorizedKey attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_unauthorized_key_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSUnauthorizedKey attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics NWKDecryptFailures
/**
 * @brief Verifies if the DotDot Diagnostics - NWKDecryptFailures is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NWKDecryptFailures is supported
 * @returns false if NWKDecryptFailures is not supported
 */
bool dotdot_is_supported_diagnostics_nwk_decrypt_failures (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - NWKDecryptFailures attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NWKDecryptFailures attribute
 */
uint16_t dotdot_get_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - NWKDecryptFailures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_nwk_decrypt_failures new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_nwk_decrypt_failures
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - NWKDecryptFailures
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_nwk_decrypt_failures_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - NWKDecryptFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_nwk_decrypt_failures_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - NWKDecryptFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_nwk_decrypt_failures_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - NWKDecryptFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_nwk_decrypt_failures_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - NWKDecryptFailures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics APSDecryptFailures
/**
 * @brief Verifies if the DotDot Diagnostics - APSDecryptFailures is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if APSDecryptFailures is supported
 * @returns false if APSDecryptFailures is not supported
 */
bool dotdot_is_supported_diagnostics_aps_decrypt_failures (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - APSDecryptFailures attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns APSDecryptFailures attribute
 */
uint16_t dotdot_get_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - APSDecryptFailures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aps_decrypt_failures new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_decrypt_failures
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - APSDecryptFailures
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_decrypt_failures_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - APSDecryptFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_aps_decrypt_failures_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - APSDecryptFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_decrypt_failures_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - APSDecryptFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_aps_decrypt_failures_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - APSDecryptFailures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics PacketBufferAllocateFailures
/**
 * @brief Verifies if the DotDot Diagnostics - PacketBufferAllocateFailures is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PacketBufferAllocateFailures is supported
 * @returns false if PacketBufferAllocateFailures is not supported
 */
bool dotdot_is_supported_diagnostics_packet_buffer_allocate_failures (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - PacketBufferAllocateFailures attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PacketBufferAllocateFailures attribute
 */
uint16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - PacketBufferAllocateFailures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_packet_buffer_allocate_failures new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_packet_buffer_allocate_failures
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - PacketBufferAllocateFailures
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_packet_buffer_allocate_failures_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - PacketBufferAllocateFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_packet_buffer_allocate_failures_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - PacketBufferAllocateFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_packet_buffer_allocate_failures_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - PacketBufferAllocateFailures attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_packet_buffer_allocate_failures_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - PacketBufferAllocateFailures attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics RelayedUcast
/**
 * @brief Verifies if the DotDot Diagnostics - RelayedUcast is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RelayedUcast is supported
 * @returns false if RelayedUcast is not supported
 */
bool dotdot_is_supported_diagnostics_relayed_ucast (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - RelayedUcast attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RelayedUcast attribute
 */
uint16_t dotdot_get_diagnostics_relayed_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - RelayedUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_relayed_ucast new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_relayed_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_relayed_ucast
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - RelayedUcast
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_relayed_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - RelayedUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_relayed_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - RelayedUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_relayed_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - RelayedUcast attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_relayed_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - RelayedUcast attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_relayed_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics PHYToMACQueueLimitReached
/**
 * @brief Verifies if the DotDot Diagnostics - PHYToMACQueueLimitReached is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PHYToMACQueueLimitReached is supported
 * @returns false if PHYToMACQueueLimitReached is not supported
 */
bool dotdot_is_supported_diagnostics_phy_to_mac_queue_limit_reached (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - PHYToMACQueueLimitReached attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PHYToMACQueueLimitReached attribute
 */
uint16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - PHYToMACQueueLimitReached attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_phy_to_mac_queue_limit_reached new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_phy_to_mac_queue_limit_reached
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - PHYToMACQueueLimitReached
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_phy_to_mac_queue_limit_reached_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - PHYToMACQueueLimitReached attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_phy_to_mac_queue_limit_reached_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - PHYToMACQueueLimitReached attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_phy_to_mac_queue_limit_reached_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - PHYToMACQueueLimitReached attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_phy_to_mac_queue_limit_reached_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - PHYToMACQueueLimitReached attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics PacketValidateDropCount
/**
 * @brief Verifies if the DotDot Diagnostics - PacketValidateDropCount is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PacketValidateDropCount is supported
 * @returns false if PacketValidateDropCount is not supported
 */
bool dotdot_is_supported_diagnostics_packet_validate_drop_count (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - PacketValidateDropCount attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PacketValidateDropCount attribute
 */
uint16_t dotdot_get_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - PacketValidateDropCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_packet_validate_drop_count new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_packet_validate_drop_count
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - PacketValidateDropCount
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_packet_validate_drop_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - PacketValidateDropCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_packet_validate_drop_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - PacketValidateDropCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_packet_validate_drop_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - PacketValidateDropCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_packet_validate_drop_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - PacketValidateDropCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics AverageMACRetryPerAPSMessageSent
/**
 * @brief Verifies if the DotDot Diagnostics - AverageMACRetryPerAPSMessageSent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageMACRetryPerAPSMessageSent is supported
 * @returns false if AverageMACRetryPerAPSMessageSent is not supported
 */
bool dotdot_is_supported_diagnostics_average_mac_retry_per_aps_message_sent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - AverageMACRetryPerAPSMessageSent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageMACRetryPerAPSMessageSent attribute
 */
uint16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - AverageMACRetryPerAPSMessageSent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_mac_retry_per_aps_message_sent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_mac_retry_per_aps_message_sent
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - AverageMACRetryPerAPSMessageSent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_average_mac_retry_per_aps_message_sent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - AverageMACRetryPerAPSMessageSent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_average_mac_retry_per_aps_message_sent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - AverageMACRetryPerAPSMessageSent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_average_mac_retry_per_aps_message_sent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - AverageMACRetryPerAPSMessageSent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_average_mac_retry_per_aps_message_sent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - AverageMACRetryPerAPSMessageSent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics LastMessageLQI
/**
 * @brief Verifies if the DotDot Diagnostics - LastMessageLQI is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LastMessageLQI is supported
 * @returns false if LastMessageLQI is not supported
 */
bool dotdot_is_supported_diagnostics_last_messagelqi (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - LastMessageLQI attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LastMessageLQI attribute
 */
uint8_t dotdot_get_diagnostics_last_messagelqi(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - LastMessageLQI attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_last_messagelqi new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_last_messagelqi(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_last_messagelqi
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - LastMessageLQI
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_last_messagelqi_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - LastMessageLQI attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_last_messagelqi_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - LastMessageLQI attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_last_messagelqi_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - LastMessageLQI attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_last_messagelqi_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - LastMessageLQI attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_last_messagelqi(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Diagnostics LastMessageRSSI
/**
 * @brief Verifies if the DotDot Diagnostics - LastMessageRSSI is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if LastMessageRSSI is supported
 * @returns false if LastMessageRSSI is not supported
 */
bool dotdot_is_supported_diagnostics_last_messagerssi (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Diagnostics - LastMessageRSSI attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns LastMessageRSSI attribute
 */
int8_t dotdot_get_diagnostics_last_messagerssi(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Diagnostics - LastMessageRSSI attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_last_messagerssi new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_diagnostics_last_messagerssi(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_last_messagerssi
  );

/**
 * @brief Undefines the Reported value of the the DotDot Diagnostics - LastMessageRSSI
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_last_messagerssi_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Diagnostics - LastMessageRSSI attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_diagnostics_last_messagerssi_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Diagnostics - LastMessageRSSI attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_last_messagerssi_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Diagnostics - LastMessageRSSI attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_diagnostics_last_messagerssi_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Diagnostics - LastMessageRSSI attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_diagnostics_last_messagerssi(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Diagnostics
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_diagnostics_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Diagnostics Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_diagnostics_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ProtocolController-RFTelemetry
////////////////////////////////////////////////////////////////////////////////
// ProtocolController-RFTelemetry TxReportEnabled
/**
 * @brief Verifies if the DotDot ProtocolController-RFTelemetry - TxReportEnabled is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if TxReportEnabled is supported
 * @returns false if TxReportEnabled is not supported
 */
bool dotdot_is_supported_protocol_controller_rf_telemetry_tx_report_enabled (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ProtocolController-RFTelemetry - TxReportEnabled attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns TxReportEnabled attribute
 */
bool dotdot_get_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ProtocolController-RFTelemetry - TxReportEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_tx_report_enabled new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_tx_report_enabled
  );

/**
 * @brief Undefines the Reported value of the the DotDot ProtocolController-RFTelemetry - TxReportEnabled
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_protocol_controller_rf_telemetry_tx_report_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ProtocolController-RFTelemetry - TxReportEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_protocol_controller_rf_telemetry_tx_report_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ProtocolController-RFTelemetry - TxReportEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_protocol_controller_rf_telemetry_tx_report_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ProtocolController-RFTelemetry - TxReportEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_protocol_controller_rf_telemetry_tx_report_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ProtocolController-RFTelemetry - TxReportEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ProtocolController-RFTelemetry PTIEnabled
/**
 * @brief Verifies if the DotDot ProtocolController-RFTelemetry - PTIEnabled is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PTIEnabled is supported
 * @returns false if PTIEnabled is not supported
 */
bool dotdot_is_supported_protocol_controller_rf_telemetry_pti_enabled (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ProtocolController-RFTelemetry - PTIEnabled attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PTIEnabled attribute
 */
bool dotdot_get_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ProtocolController-RFTelemetry - PTIEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_pti_enabled new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_pti_enabled
  );

/**
 * @brief Undefines the Reported value of the the DotDot ProtocolController-RFTelemetry - PTIEnabled
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_protocol_controller_rf_telemetry_pti_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ProtocolController-RFTelemetry - PTIEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_protocol_controller_rf_telemetry_pti_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ProtocolController-RFTelemetry - PTIEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_protocol_controller_rf_telemetry_pti_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ProtocolController-RFTelemetry - PTIEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_protocol_controller_rf_telemetry_pti_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ProtocolController-RFTelemetry - PTIEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ProtocolController-RFTelemetry
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_protocol_controller_rf_telemetry_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ProtocolController-RFTelemetry Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_protocol_controller_rf_telemetry_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster State
////////////////////////////////////////////////////////////////////////////////
// State EndpointIdList
/**
 * @brief Verifies if the DotDot State - EndpointIdList is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if EndpointIdList is supported
 * @returns false if EndpointIdList is not supported
 */
bool dotdot_is_supported_state_endpoint_id_list (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot State - EndpointIdList attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns EndpointIdList attribute
 */
uint8_t dotdot_get_state_endpoint_id_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot State - EndpointIdList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_endpoint_id_list_count Number of elements in the array
 * 
 * @param new_endpoint_id_list new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_state_endpoint_id_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_endpoint_id_list_count,
  const uint8_t* new_endpoint_id_list
  );

/**
 * @brief Undefines the Reported value of the the DotDot State - EndpointIdList
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_endpoint_id_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * State - EndpointIdList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_endpoint_id_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * State - EndpointIdList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_endpoint_id_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * State - EndpointIdList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_endpoint_id_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot State - EndpointIdList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_state_endpoint_id_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// State NetworkStatus
/**
 * @brief Verifies if the DotDot State - NetworkStatus is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NetworkStatus is supported
 * @returns false if NetworkStatus is not supported
 */
bool dotdot_is_supported_state_network_status (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot State - NetworkStatus attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NetworkStatus attribute
 */
NodeStateNetworkStatus dotdot_get_state_network_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot State - NetworkStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_network_status new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_state_network_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  NodeStateNetworkStatus new_network_status
  );

/**
 * @brief Undefines the Reported value of the the DotDot State - NetworkStatus
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_network_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * State - NetworkStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_network_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * State - NetworkStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_network_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * State - NetworkStatus attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_network_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot State - NetworkStatus attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_state_network_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// State Security
/**
 * @brief Verifies if the DotDot State - Security is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Security is supported
 * @returns false if Security is not supported
 */
bool dotdot_is_supported_state_security (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot State - Security attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Security attribute
 */
NodeStateSecurity dotdot_get_state_security(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot State - Security attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_security new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_state_security(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  NodeStateSecurity new_security
  );

/**
 * @brief Undefines the Reported value of the the DotDot State - Security
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_security_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * State - Security attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_security_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * State - Security attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_security_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * State - Security attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_security_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot State - Security attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_state_security(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// State MaximumCommandDelay
/**
 * @brief Verifies if the DotDot State - MaximumCommandDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaximumCommandDelay is supported
 * @returns false if MaximumCommandDelay is not supported
 */
bool dotdot_is_supported_state_maximum_command_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot State - MaximumCommandDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaximumCommandDelay attribute
 */
uint32_t dotdot_get_state_maximum_command_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot State - MaximumCommandDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_maximum_command_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_state_maximum_command_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_maximum_command_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot State - MaximumCommandDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_maximum_command_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * State - MaximumCommandDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_maximum_command_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * State - MaximumCommandDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_maximum_command_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * State - MaximumCommandDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_maximum_command_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot State - MaximumCommandDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_state_maximum_command_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// State NetworkList
/**
 * @brief Verifies if the DotDot State - NetworkList is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NetworkList is supported
 * @returns false if NetworkList is not supported
 */
bool dotdot_is_supported_state_network_list (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot State - NetworkList attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns NetworkList attribute
 */
const char* dotdot_get_state_network_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot State - NetworkList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_network_list_count Number of elements in the array
 * 
 * @param new_network_list new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_state_network_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_network_list_count,
  const char** new_network_list
  );

/**
 * @brief Undefines the Reported value of the the DotDot State - NetworkList
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_network_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * State - NetworkList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_state_network_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * State - NetworkList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_network_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * State - NetworkList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_state_network_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot State - NetworkList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_state_network_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the State
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_state_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * State Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_state_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Binding
////////////////////////////////////////////////////////////////////////////////
// Binding BindingTableFull
/**
 * @brief Verifies if the DotDot Binding - BindingTableFull is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BindingTableFull is supported
 * @returns false if BindingTableFull is not supported
 */
bool dotdot_is_supported_binding_binding_table_full (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Binding - BindingTableFull attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BindingTableFull attribute
 */
bool dotdot_get_binding_binding_table_full(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Binding - BindingTableFull attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_binding_table_full new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_binding_binding_table_full(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_binding_table_full
  );

/**
 * @brief Undefines the Reported value of the the DotDot Binding - BindingTableFull
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_binding_binding_table_full_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Binding - BindingTableFull attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_binding_binding_table_full_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Binding - BindingTableFull attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_binding_binding_table_full_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Binding - BindingTableFull attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_binding_binding_table_full_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Binding - BindingTableFull attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_binding_binding_table_full(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Binding BindableClusterList
/**
 * @brief Verifies if the DotDot Binding - BindableClusterList is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BindableClusterList is supported
 * @returns false if BindableClusterList is not supported
 */
bool dotdot_is_supported_binding_bindable_cluster_list (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Binding - BindableClusterList attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns BindableClusterList attribute
 */
const char* dotdot_get_binding_bindable_cluster_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Binding - BindableClusterList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_bindable_cluster_list_count Number of elements in the array
 * 
 * @param new_bindable_cluster_list new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_binding_bindable_cluster_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_bindable_cluster_list_count,
  const char** new_bindable_cluster_list
  );

/**
 * @brief Undefines the Reported value of the the DotDot Binding - BindableClusterList
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_binding_bindable_cluster_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Binding - BindableClusterList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_binding_bindable_cluster_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Binding - BindableClusterList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_binding_bindable_cluster_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Binding - BindableClusterList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_binding_bindable_cluster_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Binding - BindableClusterList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_binding_bindable_cluster_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// Binding BindingTable
/**
 * @brief Verifies if the DotDot Binding - BindingTable is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BindingTable is supported
 * @returns false if BindingTable is not supported
 */
bool dotdot_is_supported_binding_binding_table (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Binding - BindingTable attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BindingTable attribute
 */
BindingObject dotdot_get_binding_binding_table(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Binding - BindingTable attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_binding_table_count Number of elements in the array
 * 
 * @param new_binding_table new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_binding_binding_table(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_binding_table_count,
  const BindingObject* new_binding_table
  );

/**
 * @brief Undefines the Reported value of the the DotDot Binding - BindingTable
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_binding_binding_table_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Binding - BindingTable attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_binding_binding_table_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Binding - BindingTable attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_binding_binding_table_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Binding - BindingTable attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_binding_binding_table_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Binding - BindingTable attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_binding_binding_table(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Binding
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_binding_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Binding Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_binding_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster SystemMetrics
////////////////////////////////////////////////////////////////////////////////
// SystemMetrics ReportingIntervalSeconds
/**
 * @brief Verifies if the DotDot SystemMetrics - ReportingIntervalSeconds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReportingIntervalSeconds is supported
 * @returns false if ReportingIntervalSeconds is not supported
 */
bool dotdot_is_supported_system_metrics_reporting_interval_seconds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - ReportingIntervalSeconds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReportingIntervalSeconds attribute
 */
uint32_t dotdot_get_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - ReportingIntervalSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reporting_interval_seconds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_reporting_interval_seconds
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - ReportingIntervalSeconds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_reporting_interval_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - ReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_reporting_interval_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - ReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_reporting_interval_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - ReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_reporting_interval_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - ReportingIntervalSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics CPUUsagePercent
/**
 * @brief Verifies if the DotDot SystemMetrics - CPUUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CPUUsagePercent is supported
 * @returns false if CPUUsagePercent is not supported
 */
bool dotdot_is_supported_system_metrics_cpu_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - CPUUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CPUUsagePercent attribute
 */
double dotdot_get_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - CPUUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cpu_usage_percent_count Number of elements in the array
 * 
 * @param new_cpu_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_usage_percent_count,
  const double* new_cpu_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - CPUUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - CPUUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - CPUUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - CPUUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - CPUUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics CPUFrequencyMHz
/**
 * @brief Verifies if the DotDot SystemMetrics - CPUFrequencyMHz is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CPUFrequencyMHz is supported
 * @returns false if CPUFrequencyMHz is not supported
 */
bool dotdot_is_supported_system_metrics_cpu_frequencym_hz (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - CPUFrequencyMHz attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CPUFrequencyMHz attribute
 */
double dotdot_get_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - CPUFrequencyMHz attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cpu_frequencym_hz_count Number of elements in the array
 * 
 * @param new_cpu_frequencym_hz new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_frequencym_hz_count,
  const double* new_cpu_frequencym_hz
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - CPUFrequencyMHz
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_frequencym_hz_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - CPUFrequencyMHz attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_frequencym_hz_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - CPUFrequencyMHz attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_frequencym_hz_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - CPUFrequencyMHz attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_frequencym_hz_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - CPUFrequencyMHz attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics CPUAverageUsagePercent
/**
 * @brief Verifies if the DotDot SystemMetrics - CPUAverageUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CPUAverageUsagePercent is supported
 * @returns false if CPUAverageUsagePercent is not supported
 */
bool dotdot_is_supported_system_metrics_cpu_average_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - CPUAverageUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CPUAverageUsagePercent attribute
 */
double dotdot_get_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - CPUAverageUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cpu_average_usage_percent_count Number of elements in the array
 * 
 * @param new_cpu_average_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_average_usage_percent_count,
  const double* new_cpu_average_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - CPUAverageUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_average_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - CPUAverageUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_average_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - CPUAverageUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_average_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - CPUAverageUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_average_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - CPUAverageUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics CPUMinUsagePercent
/**
 * @brief Verifies if the DotDot SystemMetrics - CPUMinUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CPUMinUsagePercent is supported
 * @returns false if CPUMinUsagePercent is not supported
 */
bool dotdot_is_supported_system_metrics_cpu_min_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - CPUMinUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CPUMinUsagePercent attribute
 */
double dotdot_get_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - CPUMinUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cpu_min_usage_percent_count Number of elements in the array
 * 
 * @param new_cpu_min_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_min_usage_percent_count,
  const double* new_cpu_min_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - CPUMinUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_min_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - CPUMinUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_min_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - CPUMinUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_min_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - CPUMinUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_min_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - CPUMinUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics CPUMaxUsagePercent
/**
 * @brief Verifies if the DotDot SystemMetrics - CPUMaxUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CPUMaxUsagePercent is supported
 * @returns false if CPUMaxUsagePercent is not supported
 */
bool dotdot_is_supported_system_metrics_cpu_max_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - CPUMaxUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CPUMaxUsagePercent attribute
 */
double dotdot_get_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - CPUMaxUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cpu_max_usage_percent_count Number of elements in the array
 * 
 * @param new_cpu_max_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_max_usage_percent_count,
  const double* new_cpu_max_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - CPUMaxUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_max_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - CPUMaxUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_cpu_max_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - CPUMaxUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_max_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - CPUMaxUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_cpu_max_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - CPUMaxUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics RAMTotalMB
/**
 * @brief Verifies if the DotDot SystemMetrics - RAMTotalMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RAMTotalMB is supported
 * @returns false if RAMTotalMB is not supported
 */
bool dotdot_is_supported_system_metrics_ram_totalmb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - RAMTotalMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RAMTotalMB attribute
 */
double dotdot_get_system_metrics_ram_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - RAMTotalMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ram_totalmb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_ram_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_ram_totalmb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - RAMTotalMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_ram_totalmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - RAMTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_ram_totalmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - RAMTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_ram_totalmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - RAMTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_ram_totalmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - RAMTotalMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_ram_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics RAMFreeMB
/**
 * @brief Verifies if the DotDot SystemMetrics - RAMFreeMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RAMFreeMB is supported
 * @returns false if RAMFreeMB is not supported
 */
bool dotdot_is_supported_system_metrics_ram_freemb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - RAMFreeMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RAMFreeMB attribute
 */
double dotdot_get_system_metrics_ram_freemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - RAMFreeMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ram_freemb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_ram_freemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_ram_freemb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - RAMFreeMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_ram_freemb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - RAMFreeMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_ram_freemb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - RAMFreeMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_ram_freemb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - RAMFreeMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_ram_freemb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - RAMFreeMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_ram_freemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics RAMAvailableMB
/**
 * @brief Verifies if the DotDot SystemMetrics - RAMAvailableMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if RAMAvailableMB is supported
 * @returns false if RAMAvailableMB is not supported
 */
bool dotdot_is_supported_system_metrics_ram_availablemb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - RAMAvailableMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns RAMAvailableMB attribute
 */
double dotdot_get_system_metrics_ram_availablemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - RAMAvailableMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_ram_availablemb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_ram_availablemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_ram_availablemb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - RAMAvailableMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_ram_availablemb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - RAMAvailableMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_ram_availablemb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - RAMAvailableMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_ram_availablemb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - RAMAvailableMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_ram_availablemb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - RAMAvailableMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_ram_availablemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics SWAPMemoryTotalMB
/**
 * @brief Verifies if the DotDot SystemMetrics - SWAPMemoryTotalMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SWAPMemoryTotalMB is supported
 * @returns false if SWAPMemoryTotalMB is not supported
 */
bool dotdot_is_supported_system_metrics_swap_memory_totalmb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - SWAPMemoryTotalMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SWAPMemoryTotalMB attribute
 */
double dotdot_get_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - SWAPMemoryTotalMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_swap_memory_totalmb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_swap_memory_totalmb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - SWAPMemoryTotalMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_swap_memory_totalmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - SWAPMemoryTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_swap_memory_totalmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - SWAPMemoryTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_swap_memory_totalmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - SWAPMemoryTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_swap_memory_totalmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - SWAPMemoryTotalMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics SWAPMemoryUsedMB
/**
 * @brief Verifies if the DotDot SystemMetrics - SWAPMemoryUsedMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SWAPMemoryUsedMB is supported
 * @returns false if SWAPMemoryUsedMB is not supported
 */
bool dotdot_is_supported_system_metrics_swap_memory_usedmb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - SWAPMemoryUsedMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SWAPMemoryUsedMB attribute
 */
double dotdot_get_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - SWAPMemoryUsedMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_swap_memory_usedmb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_swap_memory_usedmb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - SWAPMemoryUsedMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_swap_memory_usedmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - SWAPMemoryUsedMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_swap_memory_usedmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - SWAPMemoryUsedMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_swap_memory_usedmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - SWAPMemoryUsedMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_swap_memory_usedmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - SWAPMemoryUsedMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics VirtualMemoryTotalMB
/**
 * @brief Verifies if the DotDot SystemMetrics - VirtualMemoryTotalMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if VirtualMemoryTotalMB is supported
 * @returns false if VirtualMemoryTotalMB is not supported
 */
bool dotdot_is_supported_system_metrics_virtual_memory_totalmb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - VirtualMemoryTotalMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns VirtualMemoryTotalMB attribute
 */
double dotdot_get_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - VirtualMemoryTotalMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_virtual_memory_totalmb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_virtual_memory_totalmb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - VirtualMemoryTotalMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_virtual_memory_totalmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - VirtualMemoryTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_virtual_memory_totalmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - VirtualMemoryTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_virtual_memory_totalmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - VirtualMemoryTotalMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_virtual_memory_totalmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - VirtualMemoryTotalMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics VirtualMemoryUsedMB
/**
 * @brief Verifies if the DotDot SystemMetrics - VirtualMemoryUsedMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if VirtualMemoryUsedMB is supported
 * @returns false if VirtualMemoryUsedMB is not supported
 */
bool dotdot_is_supported_system_metrics_virtual_memory_usedmb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - VirtualMemoryUsedMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns VirtualMemoryUsedMB attribute
 */
double dotdot_get_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - VirtualMemoryUsedMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_virtual_memory_usedmb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_virtual_memory_usedmb
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - VirtualMemoryUsedMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_virtual_memory_usedmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - VirtualMemoryUsedMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_virtual_memory_usedmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - VirtualMemoryUsedMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_virtual_memory_usedmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - VirtualMemoryUsedMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_virtual_memory_usedmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - VirtualMemoryUsedMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics DisksUsage
/**
 * @brief Verifies if the DotDot SystemMetrics - DisksUsage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DisksUsage is supported
 * @returns false if DisksUsage is not supported
 */
bool dotdot_is_supported_system_metrics_disks_usage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - DisksUsage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DisksUsage attribute
 */
DiskUsageData dotdot_get_system_metrics_disks_usage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - DisksUsage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_disks_usage_count Number of elements in the array
 * 
 * @param new_disks_usage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_disks_usage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_disks_usage_count,
  const DiskUsageData* new_disks_usage
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - DisksUsage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_disks_usage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - DisksUsage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_disks_usage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - DisksUsage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_disks_usage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - DisksUsage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_disks_usage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - DisksUsage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_disks_usage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics DisksCounters
/**
 * @brief Verifies if the DotDot SystemMetrics - DisksCounters is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DisksCounters is supported
 * @returns false if DisksCounters is not supported
 */
bool dotdot_is_supported_system_metrics_disks_counters (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - DisksCounters attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DisksCounters attribute
 */
DiskIOCounters dotdot_get_system_metrics_disks_counters(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - DisksCounters attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_disks_counters_count Number of elements in the array
 * 
 * @param new_disks_counters new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_disks_counters(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_disks_counters_count,
  const DiskIOCounters* new_disks_counters
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - DisksCounters
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_disks_counters_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - DisksCounters attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_disks_counters_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - DisksCounters attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_disks_counters_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - DisksCounters attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_disks_counters_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - DisksCounters attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_disks_counters(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics NetworkInterfacesData
/**
 * @brief Verifies if the DotDot SystemMetrics - NetworkInterfacesData is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NetworkInterfacesData is supported
 * @returns false if NetworkInterfacesData is not supported
 */
bool dotdot_is_supported_system_metrics_network_interfaces_data (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - NetworkInterfacesData attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NetworkInterfacesData attribute
 */
NetworkInterfaceData dotdot_get_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - NetworkInterfacesData attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_network_interfaces_data_count Number of elements in the array
 * 
 * @param new_network_interfaces_data new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_network_interfaces_data_count,
  const NetworkInterfaceData* new_network_interfaces_data
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - NetworkInterfacesData
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_network_interfaces_data_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - NetworkInterfacesData attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_network_interfaces_data_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - NetworkInterfacesData attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_network_interfaces_data_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - NetworkInterfacesData attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_network_interfaces_data_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - NetworkInterfacesData attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics WirelessNetworkInterfacesData
/**
 * @brief Verifies if the DotDot SystemMetrics - WirelessNetworkInterfacesData is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if WirelessNetworkInterfacesData is supported
 * @returns false if WirelessNetworkInterfacesData is not supported
 */
bool dotdot_is_supported_system_metrics_wireless_network_interfaces_data (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - WirelessNetworkInterfacesData attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns WirelessNetworkInterfacesData attribute
 */
WirelessNetworkInterfaceData dotdot_get_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - WirelessNetworkInterfacesData attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_wireless_network_interfaces_data_count Number of elements in the array
 * 
 * @param new_wireless_network_interfaces_data new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_wireless_network_interfaces_data_count,
  const WirelessNetworkInterfaceData* new_wireless_network_interfaces_data
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - WirelessNetworkInterfacesData
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_wireless_network_interfaces_data_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - WirelessNetworkInterfacesData attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_wireless_network_interfaces_data_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - WirelessNetworkInterfacesData attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_wireless_network_interfaces_data_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - WirelessNetworkInterfacesData attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_wireless_network_interfaces_data_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - WirelessNetworkInterfacesData attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics Hostname
/**
 * @brief Verifies if the DotDot SystemMetrics - Hostname is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Hostname is supported
 * @returns false if Hostname is not supported
 */
bool dotdot_is_supported_system_metrics_hostname (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - Hostname attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Hostname attribute
 */
const char* dotdot_get_system_metrics_hostname(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - Hostname attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_hostname new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_hostname(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_hostname
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - Hostname
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_hostname_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - Hostname attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_hostname_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - Hostname attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_hostname_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - Hostname attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_hostname_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - Hostname attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_hostname(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics FQDN
/**
 * @brief Verifies if the DotDot SystemMetrics - FQDN is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FQDN is supported
 * @returns false if FQDN is not supported
 */
bool dotdot_is_supported_system_metrics_fqdn (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - FQDN attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns FQDN attribute
 */
const char* dotdot_get_system_metrics_fqdn(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - FQDN attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_fqdn new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_fqdn(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_fqdn
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - FQDN
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_fqdn_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - FQDN attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_fqdn_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - FQDN attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_fqdn_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - FQDN attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_fqdn_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - FQDN attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_fqdn(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics UptimeMinutes
/**
 * @brief Verifies if the DotDot SystemMetrics - UptimeMinutes is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UptimeMinutes is supported
 * @returns false if UptimeMinutes is not supported
 */
bool dotdot_is_supported_system_metrics_uptime_minutes (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - UptimeMinutes attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UptimeMinutes attribute
 */
uint64_t dotdot_get_system_metrics_uptime_minutes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - UptimeMinutes attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_uptime_minutes new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_uptime_minutes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_uptime_minutes
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - UptimeMinutes
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_uptime_minutes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - UptimeMinutes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_uptime_minutes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - UptimeMinutes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_uptime_minutes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - UptimeMinutes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_uptime_minutes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - UptimeMinutes attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_uptime_minutes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics CurrentTemperatureCelcius
/**
 * @brief Verifies if the DotDot SystemMetrics - CurrentTemperatureCelcius is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CurrentTemperatureCelcius is supported
 * @returns false if CurrentTemperatureCelcius is not supported
 */
bool dotdot_is_supported_system_metrics_current_temperature_celcius (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - CurrentTemperatureCelcius attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CurrentTemperatureCelcius attribute
 */
double dotdot_get_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - CurrentTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_current_temperature_celcius new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_current_temperature_celcius
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - CurrentTemperatureCelcius
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_current_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - CurrentTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_current_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - CurrentTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_current_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - CurrentTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_current_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - CurrentTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics AverageTemperatureCelcius
/**
 * @brief Verifies if the DotDot SystemMetrics - AverageTemperatureCelcius is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AverageTemperatureCelcius is supported
 * @returns false if AverageTemperatureCelcius is not supported
 */
bool dotdot_is_supported_system_metrics_average_temperature_celcius (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - AverageTemperatureCelcius attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AverageTemperatureCelcius attribute
 */
double dotdot_get_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - AverageTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_average_temperature_celcius new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_average_temperature_celcius
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - AverageTemperatureCelcius
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_average_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - AverageTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_average_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - AverageTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_average_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - AverageTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_average_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - AverageTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics MinTemperatureCelcius
/**
 * @brief Verifies if the DotDot SystemMetrics - MinTemperatureCelcius is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MinTemperatureCelcius is supported
 * @returns false if MinTemperatureCelcius is not supported
 */
bool dotdot_is_supported_system_metrics_min_temperature_celcius (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - MinTemperatureCelcius attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MinTemperatureCelcius attribute
 */
double dotdot_get_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - MinTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_min_temperature_celcius new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_min_temperature_celcius
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - MinTemperatureCelcius
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_min_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - MinTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_min_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - MinTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_min_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - MinTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_min_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - MinTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics MaxTemperatureCelcius
/**
 * @brief Verifies if the DotDot SystemMetrics - MaxTemperatureCelcius is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MaxTemperatureCelcius is supported
 * @returns false if MaxTemperatureCelcius is not supported
 */
bool dotdot_is_supported_system_metrics_max_temperature_celcius (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - MaxTemperatureCelcius attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MaxTemperatureCelcius attribute
 */
double dotdot_get_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - MaxTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_max_temperature_celcius new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_max_temperature_celcius
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - MaxTemperatureCelcius
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_max_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - MaxTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_max_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - MaxTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_max_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - MaxTemperatureCelcius attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_max_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - MaxTemperatureCelcius attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics PowerPlugged
/**
 * @brief Verifies if the DotDot SystemMetrics - PowerPlugged is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PowerPlugged is supported
 * @returns false if PowerPlugged is not supported
 */
bool dotdot_is_supported_system_metrics_power_plugged (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - PowerPlugged attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PowerPlugged attribute
 */
bool dotdot_get_system_metrics_power_plugged(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - PowerPlugged attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_power_plugged new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_power_plugged(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_power_plugged
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - PowerPlugged
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_power_plugged_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - PowerPlugged attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_power_plugged_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - PowerPlugged attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_power_plugged_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - PowerPlugged attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_power_plugged_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - PowerPlugged attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_power_plugged(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics BatteryPercentage
/**
 * @brief Verifies if the DotDot SystemMetrics - BatteryPercentage is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if BatteryPercentage is supported
 * @returns false if BatteryPercentage is not supported
 */
bool dotdot_is_supported_system_metrics_battery_percentage (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - BatteryPercentage attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns BatteryPercentage attribute
 */
double dotdot_get_system_metrics_battery_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - BatteryPercentage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_battery_percentage new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_battery_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_battery_percentage
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - BatteryPercentage
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_battery_percentage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - BatteryPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_battery_percentage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - BatteryPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_battery_percentage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - BatteryPercentage attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_battery_percentage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - BatteryPercentage attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_battery_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// SystemMetrics SystemInterrupts
/**
 * @brief Verifies if the DotDot SystemMetrics - SystemInterrupts is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SystemInterrupts is supported
 * @returns false if SystemInterrupts is not supported
 */
bool dotdot_is_supported_system_metrics_system_interrupts (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot SystemMetrics - SystemInterrupts attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SystemInterrupts attribute
 */
uint64_t dotdot_get_system_metrics_system_interrupts(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot SystemMetrics - SystemInterrupts attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_system_interrupts new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_system_metrics_system_interrupts(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_system_interrupts
  );

/**
 * @brief Undefines the Reported value of the the DotDot SystemMetrics - SystemInterrupts
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_system_interrupts_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * SystemMetrics - SystemInterrupts attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_system_metrics_system_interrupts_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * SystemMetrics - SystemInterrupts attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_system_interrupts_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * SystemMetrics - SystemInterrupts attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_system_metrics_system_interrupts_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot SystemMetrics - SystemInterrupts attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_system_metrics_system_interrupts(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the SystemMetrics
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_system_metrics_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * SystemMetrics Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_system_metrics_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ApplicationMonitoring
////////////////////////////////////////////////////////////////////////////////
// ApplicationMonitoring ApplicationName
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationName is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationName is supported
 * @returns false if ApplicationName is not supported
 */
bool dotdot_is_supported_application_monitoring_application_name (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationName attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ApplicationName attribute
 */
const char* dotdot_get_application_monitoring_application_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationName attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_name new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_application_name
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationName
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_name_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationName attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_name_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationName attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_name_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationName attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_name_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationName attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationVersion
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationVersion is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationVersion is supported
 * @returns false if ApplicationVersion is not supported
 */
bool dotdot_is_supported_application_monitoring_application_version (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationVersion attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ApplicationVersion attribute
 */
const char* dotdot_get_application_monitoring_application_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_version new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_application_version
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationVersion
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationVersion attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationVersion attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationConnected
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationConnected is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationConnected is supported
 * @returns false if ApplicationConnected is not supported
 */
bool dotdot_is_supported_application_monitoring_application_connected (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationConnected attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationConnected attribute
 */
bool dotdot_get_application_monitoring_application_connected(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationConnected attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_connected new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_connected(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_application_connected
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationConnected
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_connected_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationConnected attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_connected_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationConnected attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_connected_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationConnected attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_connected_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationConnected attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_connected(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationMQTTTopics
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationMQTTTopics is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationMQTTTopics is supported
 * @returns false if ApplicationMQTTTopics is not supported
 */
bool dotdot_is_supported_application_monitoring_application_mqtt_topics (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationMQTTTopics attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns ApplicationMQTTTopics attribute
 */
const char* dotdot_get_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationMQTTTopics attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_mqtt_topics_count Number of elements in the array
 * 
 * @param new_application_mqtt_topics new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_application_mqtt_topics_count,
  const char** new_application_mqtt_topics
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationMQTTTopics
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_mqtt_topics_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationMQTTTopics attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_mqtt_topics_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationMQTTTopics attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_mqtt_topics_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationMQTTTopics attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_mqtt_topics_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationMQTTTopics attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring UptimeMinutes
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - UptimeMinutes is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if UptimeMinutes is supported
 * @returns false if UptimeMinutes is not supported
 */
bool dotdot_is_supported_application_monitoring_uptime_minutes (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - UptimeMinutes attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns UptimeMinutes attribute
 */
uint64_t dotdot_get_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - UptimeMinutes attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_uptime_minutes new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_uptime_minutes
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - UptimeMinutes
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_uptime_minutes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - UptimeMinutes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_uptime_minutes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - UptimeMinutes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_uptime_minutes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - UptimeMinutes attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_uptime_minutes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - UptimeMinutes attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ProcessId
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ProcessId is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ProcessId is supported
 * @returns false if ProcessId is not supported
 */
bool dotdot_is_supported_application_monitoring_process_id (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ProcessId attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ProcessId attribute
 */
uint64_t dotdot_get_application_monitoring_process_id(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ProcessId attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_process_id new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_process_id(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_process_id
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ProcessId
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_process_id_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ProcessId attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_process_id_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ProcessId attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_process_id_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ProcessId attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_process_id_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ProcessId attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_process_id(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring Hostname
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - Hostname is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Hostname is supported
 * @returns false if Hostname is not supported
 */
bool dotdot_is_supported_application_monitoring_hostname (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - Hostname attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Hostname attribute
 */
const char* dotdot_get_application_monitoring_hostname(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - Hostname attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_hostname new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_hostname(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_hostname
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - Hostname
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_hostname_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - Hostname attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_hostname_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - Hostname attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_hostname_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - Hostname attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_hostname_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - Hostname attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_hostname(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring FQDN
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - FQDN is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if FQDN is supported
 * @returns false if FQDN is not supported
 */
bool dotdot_is_supported_application_monitoring_fqdn (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - FQDN attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns FQDN attribute
 */
const char* dotdot_get_application_monitoring_fqdn(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - FQDN attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_fqdn new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_fqdn(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_fqdn
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - FQDN
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_fqdn_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - FQDN attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_fqdn_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - FQDN attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_fqdn_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - FQDN attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_fqdn_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - FQDN attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_fqdn(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTLoggingEnabled
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTLoggingEnabled is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTLoggingEnabled is supported
 * @returns false if MQTTLoggingEnabled is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_logging_enabled (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTLoggingEnabled attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTLoggingEnabled attribute
 */
bool dotdot_get_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTLoggingEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_logging_enabled new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_mqtt_logging_enabled
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTLoggingEnabled
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_logging_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTLoggingEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_logging_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTLoggingEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_logging_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTLoggingEnabled attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_logging_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTLoggingEnabled attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTLoggingLevel
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTLoggingLevel is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTLoggingLevel is supported
 * @returns false if MQTTLoggingLevel is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_logging_level (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTLoggingLevel attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTLoggingLevel attribute
 */
LoggingLevelEnum dotdot_get_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTLoggingLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_logging_level new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  LoggingLevelEnum new_mqtt_logging_level
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTLoggingLevel
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_logging_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTLoggingLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_logging_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTLoggingLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_logging_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTLoggingLevel attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_logging_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTLoggingLevel attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTStatisticsReportingIntervalSeconds
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTStatisticsReportingIntervalSeconds is supported
 * @returns false if MQTTStatisticsReportingIntervalSeconds is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interval_seconds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTStatisticsReportingIntervalSeconds attribute
 */
uint32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_statistics_reporting_interval_seconds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mqtt_statistics_reporting_interval_seconds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTStatisticsReportingIntervalSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTMessagesSent
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTMessagesSent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTMessagesSent is supported
 * @returns false if MQTTMessagesSent is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_messages_sent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTMessagesSent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTMessagesSent attribute
 */
uint64_t dotdot_get_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTMessagesSent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_messages_sent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_messages_sent
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTMessagesSent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_messages_sent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTMessagesSent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_messages_sent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTMessagesSent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_messages_sent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTMessagesSent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_messages_sent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTMessagesSent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTMessagesReceived
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTMessagesReceived is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTMessagesReceived is supported
 * @returns false if MQTTMessagesReceived is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_messages_received (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTMessagesReceived attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTMessagesReceived attribute
 */
uint64_t dotdot_get_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTMessagesReceived attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_messages_received new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_messages_received
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTMessagesReceived
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_messages_received_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTMessagesReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_messages_received_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTMessagesReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_messages_received_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTMessagesReceived attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_messages_received_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTMessagesReceived attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTSubscriptionCount
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTSubscriptionCount is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTSubscriptionCount is supported
 * @returns false if MQTTSubscriptionCount is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_subscription_count (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTSubscriptionCount attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTSubscriptionCount attribute
 */
uint64_t dotdot_get_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTSubscriptionCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_subscription_count new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_subscription_count
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTSubscriptionCount
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_subscription_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTSubscriptionCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_subscription_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTSubscriptionCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_subscription_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTSubscriptionCount attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_subscription_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTSubscriptionCount attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTAverageDeliveryTimeSeconds
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTAverageDeliveryTimeSeconds is supported
 * @returns false if MQTTAverageDeliveryTimeSeconds is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_average_delivery_time_seconds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTAverageDeliveryTimeSeconds attribute
 */
double dotdot_get_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_average_delivery_time_seconds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_average_delivery_time_seconds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_average_delivery_time_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_average_delivery_time_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_average_delivery_time_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_average_delivery_time_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTAverageDeliveryTimeSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTMinDeliveryTimeSeconds
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTMinDeliveryTimeSeconds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTMinDeliveryTimeSeconds is supported
 * @returns false if MQTTMinDeliveryTimeSeconds is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_min_delivery_time_seconds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTMinDeliveryTimeSeconds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTMinDeliveryTimeSeconds attribute
 */
double dotdot_get_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTMinDeliveryTimeSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_min_delivery_time_seconds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_min_delivery_time_seconds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTMinDeliveryTimeSeconds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_min_delivery_time_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTMinDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_min_delivery_time_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTMinDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_min_delivery_time_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTMinDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_min_delivery_time_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTMinDeliveryTimeSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring MQTTMaxDeliveryTimeSeconds
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if MQTTMaxDeliveryTimeSeconds is supported
 * @returns false if MQTTMaxDeliveryTimeSeconds is not supported
 */
bool dotdot_is_supported_application_monitoring_mqtt_max_delivery_time_seconds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns MQTTMaxDeliveryTimeSeconds attribute
 */
double dotdot_get_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_mqtt_max_delivery_time_seconds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_max_delivery_time_seconds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_max_delivery_time_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_mqtt_max_delivery_time_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_max_delivery_time_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_mqtt_max_delivery_time_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - MQTTMaxDeliveryTimeSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationStatisticsReportingIntervalSeconds
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationStatisticsReportingIntervalSeconds is supported
 * @returns false if ApplicationStatisticsReportingIntervalSeconds is not supported
 */
bool dotdot_is_supported_application_monitoring_application_statistics_reporting_interval_seconds (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationStatisticsReportingIntervalSeconds attribute
 */
uint32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_statistics_reporting_interval_seconds new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_application_statistics_reporting_interval_seconds
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_statistics_reporting_interval_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_statistics_reporting_interval_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_statistics_reporting_interval_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_statistics_reporting_interval_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationStatisticsReportingIntervalSeconds attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationCPUUsagePercent
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationCPUUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationCPUUsagePercent is supported
 * @returns false if ApplicationCPUUsagePercent is not supported
 */
bool dotdot_is_supported_application_monitoring_application_cpu_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationCPUUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationCPUUsagePercent attribute
 */
double dotdot_get_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationCPUUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_cpu_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationCPUUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationCPUUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationCPUUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationCPUAverageUsagePercent
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationCPUAverageUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationCPUAverageUsagePercent is supported
 * @returns false if ApplicationCPUAverageUsagePercent is not supported
 */
bool dotdot_is_supported_application_monitoring_application_cpu_average_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationCPUAverageUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationCPUAverageUsagePercent attribute
 */
double dotdot_get_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationCPUAverageUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_cpu_average_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_average_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationCPUAverageUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_average_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationCPUAverageUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_average_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUAverageUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_average_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUAverageUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_average_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationCPUAverageUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationCPUMinUsagePercent
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationCPUMinUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationCPUMinUsagePercent is supported
 * @returns false if ApplicationCPUMinUsagePercent is not supported
 */
bool dotdot_is_supported_application_monitoring_application_cpu_min_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationCPUMinUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationCPUMinUsagePercent attribute
 */
double dotdot_get_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationCPUMinUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_cpu_min_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_min_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationCPUMinUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_min_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationCPUMinUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_min_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUMinUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_min_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUMinUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_min_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationCPUMinUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationCPUMaxUsagePercent
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationCPUMaxUsagePercent is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationCPUMaxUsagePercent is supported
 * @returns false if ApplicationCPUMaxUsagePercent is not supported
 */
bool dotdot_is_supported_application_monitoring_application_cpu_max_usage_percent (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationCPUMaxUsagePercent attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationCPUMaxUsagePercent attribute
 */
double dotdot_get_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationCPUMaxUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_cpu_max_usage_percent new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_max_usage_percent
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationCPUMaxUsagePercent
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_max_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationCPUMaxUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_cpu_max_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUMaxUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_max_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationCPUMaxUsagePercent attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_cpu_max_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationCPUMaxUsagePercent attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// ApplicationMonitoring ApplicationRAMUsageMB
/**
 * @brief Verifies if the DotDot ApplicationMonitoring - ApplicationRAMUsageMB is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ApplicationRAMUsageMB is supported
 * @returns false if ApplicationRAMUsageMB is not supported
 */
bool dotdot_is_supported_application_monitoring_application_ram_usagemb (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ApplicationMonitoring - ApplicationRAMUsageMB attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ApplicationRAMUsageMB attribute
 */
double dotdot_get_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ApplicationMonitoring - ApplicationRAMUsageMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_application_ram_usagemb new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_ram_usagemb
  );

/**
 * @brief Undefines the Reported value of the the DotDot ApplicationMonitoring - ApplicationRAMUsageMB
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_ram_usagemb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ApplicationMonitoring - ApplicationRAMUsageMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_application_monitoring_application_ram_usagemb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ApplicationMonitoring - ApplicationRAMUsageMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_ram_usagemb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ApplicationMonitoring - ApplicationRAMUsageMB attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_application_monitoring_application_ram_usagemb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ApplicationMonitoring - ApplicationRAMUsageMB attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ApplicationMonitoring
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_application_monitoring_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ApplicationMonitoring Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_application_monitoring_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster NameAndLocation
////////////////////////////////////////////////////////////////////////////////
// NameAndLocation Name
/**
 * @brief Verifies if the DotDot NameAndLocation - Name is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Name is supported
 * @returns false if Name is not supported
 */
bool dotdot_is_supported_name_and_location_name (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot NameAndLocation - Name attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Name attribute
 */
const char* dotdot_get_name_and_location_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot NameAndLocation - Name attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_name new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_name_and_location_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_name
  );

/**
 * @brief Undefines the Reported value of the the DotDot NameAndLocation - Name
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_name_and_location_name_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * NameAndLocation - Name attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_name_and_location_name_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * NameAndLocation - Name attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_name_and_location_name_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * NameAndLocation - Name attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_name_and_location_name_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot NameAndLocation - Name attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_name_and_location_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// NameAndLocation Location
/**
 * @brief Verifies if the DotDot NameAndLocation - Location is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Location is supported
 * @returns false if Location is not supported
 */
bool dotdot_is_supported_name_and_location_location (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot NameAndLocation - Location attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns Location attribute
 */
const char* dotdot_get_name_and_location_location(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot NameAndLocation - Location attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_location new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_name_and_location_location(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_location
  );

/**
 * @brief Undefines the Reported value of the the DotDot NameAndLocation - Location
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_name_and_location_location_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * NameAndLocation - Location attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_name_and_location_location_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * NameAndLocation - Location attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_name_and_location_location_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * NameAndLocation - Location attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_name_and_location_location_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot NameAndLocation - Location attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_name_and_location_location(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the NameAndLocation
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_name_and_location_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * NameAndLocation Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_name_and_location_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ConfigurationParameters
////////////////////////////////////////////////////////////////////////////////
// ConfigurationParameters ConfigurationParameters
/**
 * @brief Verifies if the DotDot ConfigurationParameters - ConfigurationParameters is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ConfigurationParameters is supported
 * @returns false if ConfigurationParameters is not supported
 */
bool dotdot_is_supported_configuration_parameters_configuration_parameters (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ConfigurationParameters - ConfigurationParameters attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ConfigurationParameters attribute
 */
ConfigurationParameter dotdot_get_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ConfigurationParameters - ConfigurationParameters attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_configuration_parameters_count Number of elements in the array
 * 
 * @param new_configuration_parameters new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_configuration_parameters_count,
  const ConfigurationParameter* new_configuration_parameters
  );

/**
 * @brief Undefines the Reported value of the the DotDot ConfigurationParameters - ConfigurationParameters
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_configuration_parameters_configuration_parameters_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ConfigurationParameters - ConfigurationParameters attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_configuration_parameters_configuration_parameters_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ConfigurationParameters - ConfigurationParameters attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_configuration_parameters_configuration_parameters_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ConfigurationParameters - ConfigurationParameters attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_configuration_parameters_configuration_parameters_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ConfigurationParameters - ConfigurationParameters attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ConfigurationParameters
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_configuration_parameters_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ConfigurationParameters Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_configuration_parameters_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster AoXLocator
////////////////////////////////////////////////////////////////////////////////
// AoXLocator ReportingMode
/**
 * @brief Verifies if the DotDot AoXLocator - ReportingMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ReportingMode is supported
 * @returns false if ReportingMode is not supported
 */
bool dotdot_is_supported_aox_locator_reporting_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - ReportingMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ReportingMode attribute
 */
uint8_t dotdot_get_aox_locator_reporting_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - ReportingMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_reporting_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_reporting_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - ReportingMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_reporting_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - ReportingMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_reporting_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - ReportingMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_reporting_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - ReportingMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_reporting_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - ReportingMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_reporting_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator PositionAndOrientationValid
/**
 * @brief Verifies if the DotDot AoXLocator - PositionAndOrientationValid is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PositionAndOrientationValid is supported
 * @returns false if PositionAndOrientationValid is not supported
 */
bool dotdot_is_supported_aox_locator_position_and_orientation_valid (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - PositionAndOrientationValid attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PositionAndOrientationValid attribute
 */
bool dotdot_get_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - PositionAndOrientationValid attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_position_and_orientation_valid new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_position_and_orientation_valid
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - PositionAndOrientationValid
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_position_and_orientation_valid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - PositionAndOrientationValid attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_position_and_orientation_valid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - PositionAndOrientationValid attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_position_and_orientation_valid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - PositionAndOrientationValid attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_position_and_orientation_valid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - PositionAndOrientationValid attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator PositionAndOrientation
/**
 * @brief Verifies if the DotDot AoXLocator - PositionAndOrientation is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PositionAndOrientation is supported
 * @returns false if PositionAndOrientation is not supported
 */
bool dotdot_is_supported_aox_locator_position_and_orientation (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - PositionAndOrientation attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PositionAndOrientation attribute
 */
CoordinateAndOrientation dotdot_get_aox_locator_position_and_orientation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - PositionAndOrientation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_position_and_orientation new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_position_and_orientation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  CoordinateAndOrientation new_position_and_orientation
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - PositionAndOrientation
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_position_and_orientation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - PositionAndOrientation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_position_and_orientation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - PositionAndOrientation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_position_and_orientation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - PositionAndOrientation attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_position_and_orientation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - PositionAndOrientation attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_position_and_orientation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AzimuthMask
/**
 * @brief Verifies if the DotDot AoXLocator - AzimuthMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AzimuthMask is supported
 * @returns false if AzimuthMask is not supported
 */
bool dotdot_is_supported_aox_locator_azimuth_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AzimuthMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AzimuthMask attribute
 */
MinMaxPair dotdot_get_aox_locator_azimuth_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AzimuthMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_azimuth_mask_count Number of elements in the array
 * 
 * @param new_azimuth_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_azimuth_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_azimuth_mask_count,
  const MinMaxPair* new_azimuth_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AzimuthMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_azimuth_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AzimuthMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_azimuth_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AzimuthMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_azimuth_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AzimuthMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_azimuth_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AzimuthMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_azimuth_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator ElevationMask
/**
 * @brief Verifies if the DotDot AoXLocator - ElevationMask is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ElevationMask is supported
 * @returns false if ElevationMask is not supported
 */
bool dotdot_is_supported_aox_locator_elevation_mask (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - ElevationMask attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ElevationMask attribute
 */
MinMaxPair dotdot_get_aox_locator_elevation_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - ElevationMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_elevation_mask_count Number of elements in the array
 * 
 * @param new_elevation_mask new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_elevation_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_elevation_mask_count,
  const MinMaxPair* new_elevation_mask
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - ElevationMask
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_elevation_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - ElevationMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_elevation_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - ElevationMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_elevation_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - ElevationMask attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_elevation_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - ElevationMask attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_elevation_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AllowList
/**
 * @brief Verifies if the DotDot AoXLocator - AllowList is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AllowList is supported
 * @returns false if AllowList is not supported
 */
bool dotdot_is_supported_aox_locator_allow_list (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AllowList attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 * WARNING: This function is not thread safe, if you retrieve a string, read the
 * value immediately and cache it yourself before invoking another get function.
 * 
 *
 * @returns AllowList attribute
 */
const char* dotdot_get_aox_locator_allow_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AllowList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_allow_list_count Number of elements in the array
 * 
 * @param new_allow_list new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_allow_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_allow_list_count,
  const char** new_allow_list
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AllowList
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_allow_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AllowList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_allow_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AllowList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_allow_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AllowList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_allow_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AllowList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_allow_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AoXMode
/**
 * @brief Verifies if the DotDot AoXLocator - AoXMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AoXMode is supported
 * @returns false if AoXMode is not supported
 */
bool dotdot_is_supported_aox_locator_aox_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AoXMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AoXMode attribute
 */
uint8_t dotdot_get_aox_locator_aox_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AoXMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_aox_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_aox_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_aox_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AoXMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_aox_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AoXMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_aox_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AoXMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_aox_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AoXMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_aox_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AoXMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_aox_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AntennaMode
/**
 * @brief Verifies if the DotDot AoXLocator - AntennaMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AntennaMode is supported
 * @returns false if AntennaMode is not supported
 */
bool dotdot_is_supported_aox_locator_antenna_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AntennaMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AntennaMode attribute
 */
uint8_t dotdot_get_aox_locator_antenna_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AntennaMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_antenna_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_antenna_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_antenna_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AntennaMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_antenna_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AntennaMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_antenna_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AntennaMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_antenna_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AntennaMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_antenna_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AntennaMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_antenna_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AntennaArray
/**
 * @brief Verifies if the DotDot AoXLocator - AntennaArray is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AntennaArray is supported
 * @returns false if AntennaArray is not supported
 */
bool dotdot_is_supported_aox_locator_antenna_array (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AntennaArray attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AntennaArray attribute
 */
int8_t dotdot_get_aox_locator_antenna_array(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AntennaArray attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_antenna_array_count Number of elements in the array
 * 
 * @param new_antenna_array new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_antenna_array(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_antenna_array_count,
  const int8_t* new_antenna_array
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AntennaArray
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_antenna_array_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AntennaArray attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_antenna_array_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AntennaArray attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_antenna_array_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AntennaArray attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_antenna_array_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AntennaArray attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_antenna_array(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator PeriodSamples
/**
 * @brief Verifies if the DotDot AoXLocator - PeriodSamples is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if PeriodSamples is supported
 * @returns false if PeriodSamples is not supported
 */
bool dotdot_is_supported_aox_locator_period_samples (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - PeriodSamples attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns PeriodSamples attribute
 */
int8_t dotdot_get_aox_locator_period_samples(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - PeriodSamples attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_period_samples new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_period_samples(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_period_samples
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - PeriodSamples
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_period_samples_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - PeriodSamples attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_period_samples_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - PeriodSamples attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_period_samples_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - PeriodSamples attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_period_samples_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - PeriodSamples attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_period_samples(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AngleFiltering
/**
 * @brief Verifies if the DotDot AoXLocator - AngleFiltering is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AngleFiltering is supported
 * @returns false if AngleFiltering is not supported
 */
bool dotdot_is_supported_aox_locator_angle_filtering (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AngleFiltering attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AngleFiltering attribute
 */
bool dotdot_get_aox_locator_angle_filtering(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AngleFiltering attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_angle_filtering new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_angle_filtering(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_angle_filtering
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AngleFiltering
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_filtering_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AngleFiltering attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_filtering_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AngleFiltering attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_filtering_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AngleFiltering attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_filtering_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AngleFiltering attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_angle_filtering(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AngleFilteringWeight
/**
 * @brief Verifies if the DotDot AoXLocator - AngleFilteringWeight is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AngleFilteringWeight is supported
 * @returns false if AngleFilteringWeight is not supported
 */
bool dotdot_is_supported_aox_locator_angle_filtering_weight (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AngleFilteringWeight attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AngleFilteringWeight attribute
 */
double dotdot_get_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AngleFilteringWeight attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_angle_filtering_weight new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_angle_filtering_weight
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AngleFilteringWeight
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_filtering_weight_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AngleFilteringWeight attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_filtering_weight_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AngleFilteringWeight attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_filtering_weight_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AngleFilteringWeight attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_filtering_weight_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AngleFilteringWeight attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AngleCorrectionTimeout
/**
 * @brief Verifies if the DotDot AoXLocator - AngleCorrectionTimeout is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AngleCorrectionTimeout is supported
 * @returns false if AngleCorrectionTimeout is not supported
 */
bool dotdot_is_supported_aox_locator_angle_correction_timeout (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AngleCorrectionTimeout attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AngleCorrectionTimeout attribute
 */
int8_t dotdot_get_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AngleCorrectionTimeout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_angle_correction_timeout new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_angle_correction_timeout
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AngleCorrectionTimeout
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_correction_timeout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AngleCorrectionTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_correction_timeout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AngleCorrectionTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_correction_timeout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AngleCorrectionTimeout attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_correction_timeout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AngleCorrectionTimeout attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator AngleCorrectionDelay
/**
 * @brief Verifies if the DotDot AoXLocator - AngleCorrectionDelay is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if AngleCorrectionDelay is supported
 * @returns false if AngleCorrectionDelay is not supported
 */
bool dotdot_is_supported_aox_locator_angle_correction_delay (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - AngleCorrectionDelay attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns AngleCorrectionDelay attribute
 */
int8_t dotdot_get_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - AngleCorrectionDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_angle_correction_delay new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_angle_correction_delay
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - AngleCorrectionDelay
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_correction_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - AngleCorrectionDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_angle_correction_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - AngleCorrectionDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_correction_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - AngleCorrectionDelay attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_angle_correction_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - AngleCorrectionDelay attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator CTEMode
/**
 * @brief Verifies if the DotDot AoXLocator - CTEMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CTEMode is supported
 * @returns false if CTEMode is not supported
 */
bool dotdot_is_supported_aox_locator_cte_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - CTEMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CTEMode attribute
 */
uint8_t dotdot_get_aox_locator_cte_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - CTEMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cte_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_cte_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_cte_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - CTEMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_cte_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - CTEMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_cte_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - CTEMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_cte_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - CTEMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_cte_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - CTEMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_cte_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator CTESamplingInterval
/**
 * @brief Verifies if the DotDot AoXLocator - CTESamplingInterval is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CTESamplingInterval is supported
 * @returns false if CTESamplingInterval is not supported
 */
bool dotdot_is_supported_aox_locator_cte_sampling_interval (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - CTESamplingInterval attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CTESamplingInterval attribute
 */
int8_t dotdot_get_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - CTESamplingInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cte_sampling_interval new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_cte_sampling_interval
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - CTESamplingInterval
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_cte_sampling_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - CTESamplingInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_cte_sampling_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - CTESamplingInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_cte_sampling_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - CTESamplingInterval attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_cte_sampling_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - CTESamplingInterval attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator CTELength
/**
 * @brief Verifies if the DotDot AoXLocator - CTELength is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if CTELength is supported
 * @returns false if CTELength is not supported
 */
bool dotdot_is_supported_aox_locator_cte_length (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - CTELength attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns CTELength attribute
 */
int8_t dotdot_get_aox_locator_cte_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - CTELength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_cte_length new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_cte_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_cte_length
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - CTELength
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_cte_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - CTELength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_cte_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - CTELength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_cte_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - CTELength attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_cte_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - CTELength attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_cte_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// AoXLocator SlotDuration
/**
 * @brief Verifies if the DotDot AoXLocator - SlotDuration is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SlotDuration is supported
 * @returns false if SlotDuration is not supported
 */
bool dotdot_is_supported_aox_locator_slot_duration (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXLocator - SlotDuration attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SlotDuration attribute
 */
int8_t dotdot_get_aox_locator_slot_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXLocator - SlotDuration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_slot_duration new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_locator_slot_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_slot_duration
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXLocator - SlotDuration
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_slot_duration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXLocator - SlotDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_locator_slot_duration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXLocator - SlotDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_slot_duration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXLocator - SlotDuration attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_locator_slot_duration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXLocator - SlotDuration attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_locator_slot_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the AoXLocator
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_aox_locator_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * AoXLocator Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_aox_locator_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster AoXPositionEstimation
////////////////////////////////////////////////////////////////////////////////
// AoXPositionEstimation Position
/**
 * @brief Verifies if the DotDot AoXPositionEstimation - Position is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if Position is supported
 * @returns false if Position is not supported
 */
bool dotdot_is_supported_aox_position_estimation_position (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot AoXPositionEstimation - Position attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns Position attribute
 */
EstimatedPosition dotdot_get_aox_position_estimation_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot AoXPositionEstimation - Position attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_position new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_aox_position_estimation_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  EstimatedPosition new_position
  );

/**
 * @brief Undefines the Reported value of the the DotDot AoXPositionEstimation - Position
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_position_estimation_position_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * AoXPositionEstimation - Position attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_aox_position_estimation_position_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * AoXPositionEstimation - Position attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_position_estimation_position_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * AoXPositionEstimation - Position attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_aox_position_estimation_position_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot AoXPositionEstimation - Position attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_aox_position_estimation_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the AoXPositionEstimation
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_aox_position_estimation_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * AoXPositionEstimation Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_aox_position_estimation_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ProtocolController-NetworkManagement
////////////////////////////////////////////////////////////////////////////////
// ProtocolController-NetworkManagement NetworkManagementState
/**
 * @brief Verifies if the DotDot ProtocolController-NetworkManagement - NetworkManagementState is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if NetworkManagementState is supported
 * @returns false if NetworkManagementState is not supported
 */
bool dotdot_is_supported_protocol_controller_network_management_network_management_state (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot ProtocolController-NetworkManagement - NetworkManagementState attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns NetworkManagementState attribute
 */
NetworkManagementState dotdot_get_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot ProtocolController-NetworkManagement - NetworkManagementState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_network_management_state new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  NetworkManagementState new_network_management_state
  );

/**
 * @brief Undefines the Reported value of the the DotDot ProtocolController-NetworkManagement - NetworkManagementState
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_protocol_controller_network_management_network_management_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * ProtocolController-NetworkManagement - NetworkManagementState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_protocol_controller_network_management_network_management_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * ProtocolController-NetworkManagement - NetworkManagementState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_protocol_controller_network_management_network_management_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * ProtocolController-NetworkManagement - NetworkManagementState attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_protocol_controller_network_management_network_management_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot ProtocolController-NetworkManagement - NetworkManagementState attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the ProtocolController-NetworkManagement
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_protocol_controller_network_management_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * ProtocolController-NetworkManagement Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_protocol_controller_network_management_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Descriptor
////////////////////////////////////////////////////////////////////////////////
// Descriptor DeviceTypeList
/**
 * @brief Verifies if the DotDot Descriptor - DeviceTypeList is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if DeviceTypeList is supported
 * @returns false if DeviceTypeList is not supported
 */
bool dotdot_is_supported_descriptor_device_type_list (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot Descriptor - DeviceTypeList attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns DeviceTypeList attribute
 */
DeviceTypeStruct dotdot_get_descriptor_device_type_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot Descriptor - DeviceTypeList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_device_type_list_count Number of elements in the array
 * 
 * @param new_device_type_list new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_descriptor_device_type_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_device_type_list_count,
  const DeviceTypeStruct* new_device_type_list
  );

/**
 * @brief Undefines the Reported value of the the DotDot Descriptor - DeviceTypeList
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_descriptor_device_type_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * Descriptor - DeviceTypeList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_descriptor_device_type_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * Descriptor - DeviceTypeList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_descriptor_device_type_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * Descriptor - DeviceTypeList attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_descriptor_device_type_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot Descriptor - DeviceTypeList attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_descriptor_device_type_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the Descriptor
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_descriptor_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * Descriptor Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_descriptor_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

////////////////////////////////////////////////////////////////////////////////
// Start of cluster UnifyThermostat
////////////////////////////////////////////////////////////////////////////////
// UnifyThermostat ThermostatMode
/**
 * @brief Verifies if the DotDot UnifyThermostat - ThermostatMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if ThermostatMode is supported
 * @returns false if ThermostatMode is not supported
 */
bool dotdot_is_supported_unify_thermostat_thermostat_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot UnifyThermostat - ThermostatMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns ThermostatMode attribute
 */
uint8_t dotdot_get_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot UnifyThermostat - ThermostatMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_thermostat_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot UnifyThermostat - ThermostatMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_unify_thermostat_thermostat_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * UnifyThermostat - ThermostatMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_unify_thermostat_thermostat_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * UnifyThermostat - ThermostatMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_unify_thermostat_thermostat_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * UnifyThermostat - ThermostatMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_unify_thermostat_thermostat_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot UnifyThermostat - ThermostatMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);
// UnifyThermostat SupportedThermostatMode
/**
 * @brief Verifies if the DotDot UnifyThermostat - SupportedThermostatMode is supported
 * under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 *
 * @returns true if SupportedThermostatMode is supported
 * @returns false if SupportedThermostatMode is not supported
 */
bool dotdot_is_supported_unify_thermostat_supported_thermostat_mode (
              const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Gets the DotDot UnifyThermostat - SupportedThermostatMode attribute value under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to get,
 *                      see \ref attribute_store_get_node_attribute_value
 * 
 *
 * @returns SupportedThermostatMode attribute
 */
uint16_t dotdot_get_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot UnifyThermostat - SupportedThermostatMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @param value_state   value state to write for the node,
 *                      see \ref attribute_store_set_node_attribute_value
 * 
 * @param new_supported_thermostat_mode new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_set_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_thermostat_mode
  );

/**
 * @brief Undefines the Reported value of the the DotDot UnifyThermostat - SupportedThermostatMode
 * attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_unify_thermostat_supported_thermostat_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Undefines the Desired value of the DotDot
 * UnifyThermostat - SupportedThermostatMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_unify_thermostat_supported_thermostat_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the reported value is defined for the DotDot
 * UnifyThermostat - SupportedThermostatMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_unify_thermostat_supported_thermostat_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if the desired value is defined for the DotDot
 * UnifyThermostat - SupportedThermostatMode attribute under a UNID/EndpointID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if defined, false is undefined or non-existent
 */
bool dotdot_unify_thermostat_supported_thermostat_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Creates a DotDot UnifyThermostat - SupportedThermostatMode attribute under a UNID/EndpoinID
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t dotdot_create_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any attribute for the UnifyThermostat
 * Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_unify_thermostat_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

/**
 * @brief Checks if a UNID/Endpoint supports any writable attribute for the
 * UnifyThermostat Cluster
 *
 * @param unid          Node's UNID
 * @param endpoint_id   Endpoint ID
 * @returns true if at least 1 writable attribute in the Attribute Store, false otherwise
 */
bool dotdot_is_any_unify_thermostat_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id);

#ifdef __cplusplus
}
#endif // __cplusplus
#endif // UNIFY_DOTDOT_ATTRIBUTE_STORE_HELPERS_H
/** @} end unify_dotdot_attribute_store_helpers */
