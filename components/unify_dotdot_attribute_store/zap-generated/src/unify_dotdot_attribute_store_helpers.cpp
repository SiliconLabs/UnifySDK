/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/
// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
#include "unify_dotdot_attribute_store_configuration.h"
#include "unify_dotdot_attribute_store_helpers.h"
#include "unify_dotdot_defined_attribute_types.h"

#include "sl_status.h"
#include "zap-types.h"
#include "attribute_store.h"
#include "attribute_store_helper.h"

#include "sl_log.h"
#define LOG_TAG "unify_dotdot_attribute_store_helpers"

// Static variables used to return pointers.
static char received_string[ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH] = {};

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Basic
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_basic_zcl_version(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_zcl_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_zcl_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zcl_version
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zcl_version,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_zcl_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_zcl_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_zcl_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_zcl_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_zcl_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_application_version(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_application_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_application_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_application_version
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_version,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_application_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_application_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_application_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_application_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_application_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_stack_version(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_stack_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_stack_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_stack_version
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_stack_version,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_stack_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_stack_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_stack_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_stack_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_stack_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_hw_version(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_hw_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_hw_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_hw_version
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_hw_version,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_hw_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_hw_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_hw_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_hw_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_hw_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_manufacturer_name(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_manufacturer_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_manufacturer_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_manufacturer_name
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_manufacturer_name);
  } else {
    return attribute_store_set_desired_string(node, new_manufacturer_name);
  }
}

sl_status_t dotdot_basic_manufacturer_name_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_manufacturer_name_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_manufacturer_name_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_manufacturer_name_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_manufacturer_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_model_identifier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_model_identifier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_model_identifier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_model_identifier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_model_identifier);
  } else {
    return attribute_store_set_desired_string(node, new_model_identifier);
  }
}

sl_status_t dotdot_basic_model_identifier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_model_identifier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_model_identifier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_model_identifier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_model_identifier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_date_code(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_date_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_date_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_date_code
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_date_code);
  } else {
    return attribute_store_set_desired_string(node, new_date_code);
  }
}

sl_status_t dotdot_basic_date_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_date_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_date_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_date_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_date_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_power_source(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_power_source(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_power_source(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_power_source
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_source,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_power_source_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_power_source_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_power_source_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_power_source_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_power_source(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_generic_device_class(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_generic_device_class(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_generic_device_class(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_generic_device_class
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_generic_device_class,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_generic_device_class_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_generic_device_class_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_generic_device_class_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_generic_device_class_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_generic_device_class(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_generic_device_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_generic_device_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_generic_device_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_generic_device_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_generic_device_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_generic_device_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_generic_device_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_generic_device_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_generic_device_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_generic_device_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_product_code(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_product_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_product_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_product_code
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_product_code);
  } else {
    return attribute_store_set_desired_string(node, new_product_code);
  }
}

sl_status_t dotdot_basic_product_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_product_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_product_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_product_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_product_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_producturl(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_producturl(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_producturl(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_producturl
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_producturl);
  } else {
    return attribute_store_set_desired_string(node, new_producturl);
  }
}

sl_status_t dotdot_basic_producturl_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_producturl_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_producturl_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_producturl_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_producturl(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_manufacturer_version_details(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_manufacturer_version_details(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_manufacturer_version_details(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_manufacturer_version_details
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_manufacturer_version_details);
  } else {
    return attribute_store_set_desired_string(node, new_manufacturer_version_details);
  }
}

sl_status_t dotdot_basic_manufacturer_version_details_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_manufacturer_version_details_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_manufacturer_version_details_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_manufacturer_version_details_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_manufacturer_version_details(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_serial_number(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_serial_number(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_serial_number(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_serial_number
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_serial_number);
  } else {
    return attribute_store_set_desired_string(node, new_serial_number);
  }
}

sl_status_t dotdot_basic_serial_number_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_serial_number_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_serial_number_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_serial_number_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_serial_number(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_product_label(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_product_label(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_product_label(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_product_label
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_product_label);
  } else {
    return attribute_store_set_desired_string(node, new_product_label);
  }
}

sl_status_t dotdot_basic_product_label_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_product_label_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_product_label_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_product_label_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_product_label(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_location_description(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_location_description(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_location_description(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_location_description
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_location_description);
  } else {
    return attribute_store_set_desired_string(node, new_location_description);
  }
}

sl_status_t dotdot_basic_location_description_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_location_description_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_location_description_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_location_description_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_location_description(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_physical_environment(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_physical_environment(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_physical_environment(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_environment
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_environment,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_physical_environment_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_physical_environment_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_physical_environment_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_physical_environment_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_physical_environment(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_device_enabled(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_basic_device_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_device_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_device_enabled
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_device_enabled,
                                                  sizeof(bool));
  }

sl_status_t dotdot_basic_device_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_device_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_device_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_device_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_device_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_disable_local_config(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_basic_disable_local_config(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_disable_local_config(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_disable_local_config
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_disable_local_config,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_basic_disable_local_config_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_disable_local_config_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_disable_local_config_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_disable_local_config_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_disable_local_config(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_basic_sw_buildid(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_basic_sw_buildid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_basic_sw_buildid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_sw_buildid
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_sw_buildid);
  } else {
    return attribute_store_set_desired_string(node, new_sw_buildid);
  }
}

sl_status_t dotdot_basic_sw_buildid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_basic_sw_buildid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_basic_sw_buildid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_basic_sw_buildid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_basic_sw_buildid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_basic_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_basic_zcl_version(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_application_version(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_stack_version(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_hw_version(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_manufacturer_name(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_model_identifier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_date_code(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_power_source(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_generic_device_class(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_generic_device_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_product_code(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_producturl(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_manufacturer_version_details(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_serial_number(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_product_label(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_location_description(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_physical_environment(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_device_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_disable_local_config(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_sw_buildid(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_basic_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_basic_location_description(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_physical_environment(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_device_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_basic_disable_local_config(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster PowerConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_power_configuration_mains_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_mains_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_mains_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_mains_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_mains_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_mains_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_mains_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_mains_frequency(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_mains_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mains_frequency
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_frequency,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_mains_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_mains_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_mains_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_mains_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_mains_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mains_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_mains_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_mains_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_mains_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_mains_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_mains_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage_min_threshold,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_mains_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_mains_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_mains_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_mains_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_mains_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_max_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage_max_threshold,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_mains_voltage_max_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_mains_voltage_max_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_mains_voltage_max_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_mains_voltage_max_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_mains_voltage_max_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_dwell_trip_point
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage_dwell_trip_point,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_mains_voltage_dwell_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_mains_voltage_dwell_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_mains_voltage_dwell_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_mains_voltage_dwell_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_mains_voltage_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_remaining
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_remaining,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_percentage_remaining_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_percentage_remaining_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_percentage_remaining_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_percentage_remaining_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_battery_manufacturer
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_battery_manufacturer);
  } else {
    return attribute_store_set_desired_string(node, new_battery_manufacturer);
  }
}

sl_status_t dotdot_power_configuration_battery_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_size(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  return attribute_store_node_exists(node);
}

BatterySize dotdot_get_power_configuration_battery_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);

  BatterySize result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery_size
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_size,
                                                  sizeof(BatterySize));
  }

sl_status_t dotdot_power_configuration_battery_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_batterya_hr_rating
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_batterya_hr_rating,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_batterya_hr_rating_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_batterya_hr_rating_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_batterya_hr_rating_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_batterya_hr_rating_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_batterya_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_quantity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_quantity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_quantity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_rated_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_rated_voltage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_rated_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_rated_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_rated_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_rated_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_min_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold1
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_threshold1,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_voltage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_voltage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_voltage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_voltage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold2
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_threshold2,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_voltage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_voltage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_voltage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_voltage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold3
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_threshold3,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_voltage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_voltage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_voltage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_voltage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_min_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_percentage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_percentage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_percentage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_percentage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold1
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_threshold1,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_percentage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_percentage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_percentage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_percentage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold2
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_threshold2,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_percentage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_percentage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_percentage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_percentage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold3
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_threshold3,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery_percentage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_percentage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_percentage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_percentage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery_alarm_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_alarm_state,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_power_configuration_battery_alarm_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery_alarm_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery_alarm_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery_alarm_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_remaining
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_remaining,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_percentage_remaining_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_percentage_remaining_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_percentage_remaining_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_percentage_remaining_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_battery2_manufacturer
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_battery2_manufacturer);
  } else {
    return attribute_store_set_desired_string(node, new_battery2_manufacturer);
  }
}

sl_status_t dotdot_power_configuration_battery2_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_size(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  return attribute_store_node_exists(node);
}

BatterySize dotdot_get_power_configuration_battery2_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);

  BatterySize result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery2_size
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_size,
                                                  sizeof(BatterySize));
  }

sl_status_t dotdot_power_configuration_battery2_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_battery2a_hr_rating
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2a_hr_rating,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_battery2a_hr_rating_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2a_hr_rating_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2a_hr_rating_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2a_hr_rating_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2a_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_quantity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_quantity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_quantity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_rated_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_rated_voltage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_rated_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_rated_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_rated_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_rated_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_min_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold1
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_threshold1,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_voltage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_voltage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_voltage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_voltage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold2
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_threshold2,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_voltage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_voltage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_voltage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_voltage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold3
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_threshold3,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_voltage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_voltage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_voltage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_voltage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_min_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_percentage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_percentage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_percentage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_percentage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold1
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_threshold1,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_percentage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_percentage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_percentage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_percentage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold2
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_threshold2,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_percentage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_percentage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_percentage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_percentage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold3
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_threshold3,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery2_percentage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_percentage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_percentage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_percentage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery2_alarm_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_alarm_state,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_power_configuration_battery2_alarm_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery2_alarm_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery2_alarm_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery2_alarm_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery2_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_remaining
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_remaining,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_percentage_remaining_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_percentage_remaining_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_percentage_remaining_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_percentage_remaining_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_percentage_remaining(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_battery3_manufacturer
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_battery3_manufacturer);
  } else {
    return attribute_store_set_desired_string(node, new_battery3_manufacturer);
  }
}

sl_status_t dotdot_power_configuration_battery3_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_size(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  return attribute_store_node_exists(node);
}

BatterySize dotdot_get_power_configuration_battery3_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);

  BatterySize result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery3_size
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_size,
                                                  sizeof(BatterySize));
  }

sl_status_t dotdot_power_configuration_battery3_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_battery3a_hr_rating
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3a_hr_rating,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_power_configuration_battery3a_hr_rating_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3a_hr_rating_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3a_hr_rating_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3a_hr_rating_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3a_hr_rating(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_quantity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_quantity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_quantity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_rated_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_rated_voltage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_rated_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_rated_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_rated_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_rated_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_rated_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_min_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_voltage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_voltage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_voltage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_voltage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_voltage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold1
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_threshold1,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_voltage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_voltage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_voltage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_voltage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_voltage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold2
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_threshold2,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_voltage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_voltage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_voltage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_voltage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_voltage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold3
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_threshold3,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_voltage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_voltage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_voltage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_voltage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_voltage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_min_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_min_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_percentage_min_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_percentage_min_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_percentage_min_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_percentage_min_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_percentage_min_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold1
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_threshold1,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_percentage_threshold1_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_percentage_threshold1_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_percentage_threshold1_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_percentage_threshold1_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_percentage_threshold1(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold2
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_threshold2,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_percentage_threshold2_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_percentage_threshold2_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_percentage_threshold2_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_percentage_threshold2_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_percentage_threshold2(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold3
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_threshold3,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_power_configuration_battery3_percentage_threshold3_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_percentage_threshold3_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_percentage_threshold3_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_percentage_threshold3_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_percentage_threshold3(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery3_alarm_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_alarm_state,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_power_configuration_battery3_alarm_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_power_configuration_battery3_alarm_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_power_configuration_battery3_alarm_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_power_configuration_battery3_alarm_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_power_configuration_battery3_alarm_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_power_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_power_configuration_mains_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_frequency(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_voltage_max_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_remaining(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_batterya_hr_rating(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_rated_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_alarm_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_remaining(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2a_hr_rating(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_rated_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_alarm_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_remaining(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3a_hr_rating(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_rated_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_alarm_state(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_power_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_power_configuration_mains_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_voltage_max_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_batterya_hr_rating(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_rated_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_voltage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery_percentage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2a_hr_rating(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_rated_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_voltage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery2_percentage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3a_hr_rating(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_rated_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_voltage_threshold3(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_min_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_threshold1(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_threshold2(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_power_configuration_battery3_percentage_threshold3(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster DeviceTemperatureConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_current_temperature
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_temperature,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_device_temperature_configuration_current_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_current_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_current_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_current_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_current_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_temp_experienced
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_temp_experienced,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_device_temperature_configuration_min_temp_experienced_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_min_temp_experienced_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_min_temp_experienced_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_min_temp_experienced_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_min_temp_experienced(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_temp_experienced
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_temp_experienced,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_device_temperature_configuration_max_temp_experienced_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_max_temp_experienced_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_max_temp_experienced_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_max_temp_experienced_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_max_temp_experienced(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_over_temp_total_dwell
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_over_temp_total_dwell,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_device_temperature_configuration_over_temp_total_dwell_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_over_temp_total_dwell_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_over_temp_total_dwell_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_over_temp_total_dwell_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_over_temp_total_dwell(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_device_temp_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_device_temp_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_device_temperature_configuration_device_temp_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_device_temp_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_device_temp_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_device_temp_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_device_temp_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_low_temp_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_low_temp_threshold,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_device_temperature_configuration_low_temp_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_low_temp_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_low_temp_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_low_temp_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_low_temp_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_high_temp_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_high_temp_threshold,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_device_temperature_configuration_high_temp_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_high_temp_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_high_temp_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_high_temp_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_high_temp_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_low_temp_dwell_trip_point
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_low_temp_dwell_trip_point,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_device_temperature_configuration_low_temp_dwell_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_low_temp_dwell_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_low_temp_dwell_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_low_temp_dwell_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_low_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_high_temp_dwell_trip_point
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_high_temp_dwell_trip_point,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_device_temperature_configuration_high_temp_dwell_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_device_temperature_configuration_high_temp_dwell_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_device_temperature_configuration_high_temp_dwell_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_device_temperature_configuration_high_temp_dwell_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_device_temperature_configuration_high_temp_dwell_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_device_temperature_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_device_temperature_configuration_current_temperature(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_min_temp_experienced(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_max_temp_experienced(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_over_temp_total_dwell(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_device_temp_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_low_temp_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_high_temp_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_point(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_point(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_device_temperature_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_device_temperature_configuration_device_temp_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_low_temp_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_high_temp_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_point(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_point(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Identify
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_identify_identify_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_identify_identify_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_identify_identify_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_identify_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_identify_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_identify_identify_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_identify_identify_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_identify_identify_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_identify_identify_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_identify_identify_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_identify_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_identify_identify_time(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_identify_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_identify_identify_time(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Groups
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_groups_name_support(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_groups_name_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_groups_name_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_name_support
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_name_support,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_groups_name_support_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_groups_name_support_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_groups_name_support_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_groups_name_support_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_groups_name_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_groups_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_groups_name_support(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_groups_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Scenes
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_scenes_scene_count(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_scenes_scene_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_scene_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_scene_count
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scene_count,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_scenes_scene_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_scene_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_scene_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_scene_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_scene_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_scenes_current_scene(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_scenes_current_scene(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_current_scene(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_scene
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_scene,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_scenes_current_scene_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_current_scene_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_current_scene_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_current_scene_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_current_scene(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_scenes_current_group(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  return attribute_store_node_exists(node);
}

SGroupId dotdot_get_scenes_current_group(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);

  SGroupId result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_current_group(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  SGroupId new_current_group
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_group,
                                                  sizeof(SGroupId));
  }

sl_status_t dotdot_scenes_current_group_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_current_group_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_current_group_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_current_group_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_current_group(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_scenes_scene_valid(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  return attribute_store_node_exists(node);
}

bool dotdot_get_scenes_scene_valid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_scene_valid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_scene_valid
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scene_valid,
                                                  sizeof(bool));
  }

sl_status_t dotdot_scenes_scene_valid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_scene_valid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_scene_valid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_scene_valid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_scene_valid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_scenes_name_support(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_scenes_name_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_name_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_name_support
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_name_support,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_scenes_name_support_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_name_support_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_name_support_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_name_support_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_name_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_scenes_last_configured_by(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  return attribute_store_node_exists(node);
}

EUI64 dotdot_get_scenes_last_configured_by(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);

  EUI64 result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_last_configured_by(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  EUI64 new_last_configured_by
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_configured_by,
                                                  sizeof(EUI64));
  }

sl_status_t dotdot_scenes_last_configured_by_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_last_configured_by_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_last_configured_by_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_last_configured_by_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_last_configured_by(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_scenes_scene_table(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);
  return attribute_store_node_exists(node);
}

SSceneTable dotdot_get_scenes_scene_table(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);

  SSceneTable result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_scene_table(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_scene_table_count,
  const SSceneTable* new_scene_table
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);

  // Skip attribute SceneTable because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of SceneTable, Attribute %d, "
                        "because it is a complicated type (array: SSceneTable). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_scene_table_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_scenes_scene_table_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_scenes_scene_table_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_scenes_scene_table_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_scenes_scene_table(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_scenes_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_scenes_scene_count(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_scenes_current_scene(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_scenes_current_group(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_scenes_scene_valid(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_scenes_name_support(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_scenes_last_configured_by(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_scenes_scene_table(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_scenes_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster OnOff
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_on_off_on_off(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  return attribute_store_node_exists(node);
}

bool dotdot_get_on_off_on_off(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_on_off(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_on_off
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_off,
                                                  sizeof(bool));
  }

sl_status_t dotdot_on_off_on_off_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_on_off_on_off_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_on_off_on_off_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_on_off_on_off_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_on_off_on_off(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_on_off_global_scene_control(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  return attribute_store_node_exists(node);
}

bool dotdot_get_on_off_global_scene_control(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_global_scene_control(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_global_scene_control
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_global_scene_control,
                                                  sizeof(bool));
  }

sl_status_t dotdot_on_off_global_scene_control_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_on_off_global_scene_control_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_on_off_global_scene_control_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_on_off_global_scene_control_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_on_off_global_scene_control(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_on_off_on_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_on_off_on_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_on_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_on_off_on_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_on_off_on_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_on_off_on_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_on_off_on_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_on_off_on_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_on_off_off_wait_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_on_off_off_wait_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_off_wait_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_off_wait_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_off_wait_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_on_off_off_wait_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_on_off_off_wait_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_on_off_off_wait_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_on_off_off_wait_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_on_off_off_wait_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_on_off_start_up_on_off(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_on_off_start_up_on_off(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_start_up_on_off(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_up_on_off
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_up_on_off,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_on_off_start_up_on_off_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_on_off_start_up_on_off_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_on_off_start_up_on_off_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_on_off_start_up_on_off_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_on_off_start_up_on_off(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_on_off_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_on_off_on_off(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_on_off_global_scene_control(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_on_off_on_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_on_off_off_wait_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_on_off_start_up_on_off(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_on_off_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_on_off_on_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_on_off_off_wait_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_on_off_start_up_on_off(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Level
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_level_current_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_level_current_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_current_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_level_current_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_current_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_current_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_current_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_current_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_remaining_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_remaining_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_remaining_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_remaining_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_remaining_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_remaining_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_remaining_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_remaining_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_remaining_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_remaining_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_min_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_level_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_level_min_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_min_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_min_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_min_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_max_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_level_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_level_max_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_max_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_max_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_max_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_current_frequency(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_current_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_current_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_frequency
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_frequency,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_current_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_current_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_current_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_current_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_current_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_min_frequency(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_min_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_min_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_frequency
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_frequency,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_min_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_min_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_min_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_min_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_min_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_max_frequency(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_max_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_max_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_frequency
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_frequency,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_max_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_max_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_max_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_max_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_max_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_options(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_level_options(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_options(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_options
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_options,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_level_options_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_options_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_options_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_options_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_options(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_on_off_transition_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_on_off_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_on_off_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_off_transition_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_off_transition_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_on_off_transition_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_on_off_transition_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_on_off_transition_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_on_off_transition_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_on_off_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_on_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_level_on_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_on_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_on_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_level_on_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_on_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_on_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_on_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_on_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_on_transition_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_on_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_on_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_transition_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_transition_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_on_transition_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_on_transition_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_on_transition_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_on_transition_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_on_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_off_transition_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_off_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_off_transition_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_off_transition_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_off_transition_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_off_transition_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_off_transition_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_off_transition_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_off_transition_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_off_transition_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_default_move_rate(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_level_default_move_rate(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_default_move_rate(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_default_move_rate
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_default_move_rate,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_level_default_move_rate_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_default_move_rate_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_default_move_rate_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_default_move_rate_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_default_move_rate(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_level_start_up_current_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_level_start_up_current_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_start_up_current_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_up_current_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_up_current_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_level_start_up_current_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_level_start_up_current_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_level_start_up_current_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_level_start_up_current_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_level_start_up_current_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_level_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_level_current_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_remaining_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_min_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_max_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_current_frequency(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_min_frequency(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_max_frequency(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_options(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_on_off_transition_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_on_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_on_transition_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_off_transition_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_default_move_rate(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_start_up_current_level(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_level_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_level_options(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_on_off_transition_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_on_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_on_transition_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_off_transition_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_default_move_rate(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_level_start_up_current_level(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Alarms
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_alarms_alarm_count(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_alarms_alarm_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_alarms_alarm_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_count
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_count,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_alarms_alarm_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_alarms_alarm_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_alarms_alarm_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_alarms_alarm_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_alarms_alarm_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_alarms_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_alarms_alarm_count(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_alarms_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Time
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_time_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_time_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_time,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_time_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_time_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_time_time_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_time_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_time_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_time_status,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_time_time_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_time_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_time_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_time_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_time_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_time_zone(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_time_time_zone(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_time_zone(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_time_zone
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_time_zone,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_time_time_zone_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_time_zone_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_time_zone_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_time_zone_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_time_zone(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_dst_start(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_time_dst_start(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_dst_start(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_dst_start
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dst_start,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_time_dst_start_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_dst_start_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_dst_start_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_dst_start_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_dst_start(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_DST_START);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_dst_end(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_time_dst_end(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_dst_end(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_dst_end
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dst_end,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_time_dst_end_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_dst_end_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_dst_end_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_dst_end_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_dst_end(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_DST_END);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_dst_shift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_time_dst_shift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_dst_shift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_dst_shift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dst_shift,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_time_dst_shift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_dst_shift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_dst_shift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_dst_shift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_dst_shift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_standard_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_time_standard_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_standard_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_standard_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_standard_time,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_time_standard_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_standard_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_standard_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_standard_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_standard_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_local_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_time_local_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_local_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_local_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_time,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_time_local_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_local_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_local_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_local_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_local_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_last_set_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_time_last_set_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_last_set_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_last_set_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_set_time,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_time_last_set_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_last_set_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_last_set_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_last_set_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_last_set_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_time_valid_until_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_time_valid_until_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_valid_until_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_valid_until_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_valid_until_time,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_time_valid_until_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_time_valid_until_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_time_valid_until_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_time_valid_until_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_time_valid_until_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_time_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_time_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_time_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_time_zone(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_dst_start(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_dst_end(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_dst_shift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_standard_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_local_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_last_set_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_valid_until_time(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_time_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_time_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_time_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_time_zone(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_dst_start(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_dst_end(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_dst_shift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_time_valid_until_time(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster PollControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_poll_control_check_in_interval(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_poll_control_check_in_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_check_in_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_check_in_interval
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_check_in_interval,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_poll_control_check_in_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_check_in_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_check_in_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_check_in_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_check_in_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_poll_control_long_poll_interval(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_poll_control_long_poll_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_long_poll_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_long_poll_interval
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_long_poll_interval,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_poll_control_long_poll_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_long_poll_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_long_poll_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_long_poll_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_long_poll_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_poll_control_short_poll_interval(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_poll_control_short_poll_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_short_poll_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_short_poll_interval
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_short_poll_interval,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_poll_control_short_poll_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_short_poll_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_short_poll_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_short_poll_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_short_poll_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_fast_poll_timeout
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fast_poll_timeout,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_poll_control_fast_poll_timeout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_fast_poll_timeout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_fast_poll_timeout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_fast_poll_timeout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_fast_poll_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_poll_control_check_in_interval_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_poll_control_check_in_interval_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_check_in_interval_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_check_in_interval_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_check_in_interval_min,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_poll_control_check_in_interval_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_check_in_interval_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_check_in_interval_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_check_in_interval_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_check_in_interval_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_long_poll_interval_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_long_poll_interval_min,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_poll_control_long_poll_interval_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_long_poll_interval_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_long_poll_interval_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_long_poll_interval_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_long_poll_interval_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_fast_poll_timeout_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fast_poll_timeout_max,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_poll_control_fast_poll_timeout_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_poll_control_fast_poll_timeout_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_poll_control_fast_poll_timeout_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_poll_control_fast_poll_timeout_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_poll_control_fast_poll_timeout_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_poll_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_poll_control_check_in_interval(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_long_poll_interval(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_short_poll_interval(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_fast_poll_timeout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_check_in_interval_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_long_poll_interval_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_fast_poll_timeout_max(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_poll_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_poll_control_check_in_interval(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_poll_control_fast_poll_timeout(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ShadeConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_closed_limit,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_shade_configuration_physical_closed_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_shade_configuration_physical_closed_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_shade_configuration_physical_closed_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_shade_configuration_physical_closed_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_shade_configuration_physical_closed_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_shade_configuration_motor_step_size(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_shade_configuration_motor_step_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_motor_step_size(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_motor_step_size
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_motor_step_size,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_shade_configuration_motor_step_size_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_shade_configuration_motor_step_size_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_shade_configuration_motor_step_size_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_shade_configuration_motor_step_size_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_shade_configuration_motor_step_size(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_shade_configuration_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_shade_configuration_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_status,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_shade_configuration_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_shade_configuration_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_shade_configuration_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_shade_configuration_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_shade_configuration_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_shade_configuration_closed_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_shade_configuration_closed_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_closed_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_closed_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_closed_limit,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_shade_configuration_closed_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_shade_configuration_closed_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_shade_configuration_closed_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_shade_configuration_closed_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_shade_configuration_closed_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_shade_configuration_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_shade_configuration_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_shade_configuration_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_shade_configuration_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_shade_configuration_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_shade_configuration_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_shade_configuration_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_shade_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_shade_configuration_physical_closed_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_shade_configuration_motor_step_size(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_shade_configuration_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_shade_configuration_closed_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_shade_configuration_mode(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_shade_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_shade_configuration_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_shade_configuration_closed_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_shade_configuration_mode(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster DoorLock
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_door_lock_lock_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_lock_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_lock_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lock_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lock_state,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_lock_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_lock_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_lock_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_lock_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_lock_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_lock_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_lock_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_lock_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lock_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lock_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_lock_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_lock_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_lock_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_lock_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_lock_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_actuator_enabled(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_actuator_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_actuator_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_actuator_enabled
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_actuator_enabled,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_actuator_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_actuator_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_actuator_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_actuator_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_actuator_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_door_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_door_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_door_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_door_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_door_state,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_door_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_door_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_door_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_door_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_door_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_door_open_events(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_door_lock_door_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_door_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_door_open_events
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_door_open_events,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_door_lock_door_open_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_door_open_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_door_open_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_door_open_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_door_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_door_closed_events(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_door_lock_door_closed_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_door_closed_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_door_closed_events
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_door_closed_events,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_door_lock_door_closed_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_door_closed_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_door_closed_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_door_closed_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_door_closed_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_open_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_open_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_open_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_open_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_open_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_open_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_open_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_open_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_open_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_log_records_supported
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_log_records_supported,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_number_of_log_records_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_log_records_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_log_records_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_log_records_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_log_records_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_total_users_supported
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_total_users_supported,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_number_of_total_users_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_total_users_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_total_users_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_total_users_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_total_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_pin_users_supported
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_pin_users_supported,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_number_of_pin_users_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_pin_users_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_pin_users_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_pin_users_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_pin_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_PIN_USERS_SUPPORTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_rfid_users_supported
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_rfid_users_supported,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_number_of_rfid_users_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_rfid_users_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_rfid_users_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_rfid_users_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_rfid_users_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_RFID_USERS_SUPPORTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_week_day_schedules_supported_per_user
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_week_day_schedules_supported_per_user,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_number_of_week_day_schedules_supported_per_user_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_week_day_schedules_supported_per_user_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_week_day_schedules_supported_per_user_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_week_day_schedules_supported_per_user_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_week_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_year_day_schedules_supported_per_user
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_year_day_schedules_supported_per_user,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_number_of_year_day_schedules_supported_per_user_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_year_day_schedules_supported_per_user_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_year_day_schedules_supported_per_user_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_year_day_schedules_supported_per_user_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_year_day_schedules_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_holiday_schedules_supported
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_holiday_schedules_supported,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_number_of_holiday_schedules_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_holiday_schedules_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_holiday_schedules_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_holiday_schedules_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_holiday_schedules_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_max_pin_code_length(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_max_pin_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_max_pin_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_pin_code_length
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_pin_code_length,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_max_pin_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_max_pin_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_max_pin_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_max_pin_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_max_pin_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_PIN_CODE_LENGTH);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_min_pin_code_length(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_min_pin_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_min_pin_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_pin_code_length
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_pin_code_length,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_min_pin_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_min_pin_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_min_pin_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_min_pin_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_min_pin_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_PIN_CODE_LENGTH);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_rfid_code_length
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_rfid_code_length,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_max_rfid_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_max_rfid_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_max_rfid_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_max_rfid_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_max_rfid_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAX_RFID_CODE_LENGTH);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_rfid_code_length
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_rfid_code_length,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_min_rfid_code_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_min_rfid_code_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_min_rfid_code_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_min_rfid_code_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_min_rfid_code_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MIN_RFID_CODE_LENGTH);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_credential_rules_support(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_credential_rules_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_credential_rules_support(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_credential_rules_support
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_credential_rules_support,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_credential_rules_support_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_credential_rules_support_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_credential_rules_support_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_credential_rules_support_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_credential_rules_support(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_CREDENTIAL_RULES_SUPPORT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_credentials_supported_per_user
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_credentials_supported_per_user,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_number_of_credentials_supported_per_user_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_number_of_credentials_supported_per_user_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_number_of_credentials_supported_per_user_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_number_of_credentials_supported_per_user_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_number_of_credentials_supported_per_user(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_CREDENTIALS_SUPPORTED_PER_USER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_enable_logging(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_enable_logging(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_logging(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_logging
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_logging,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_enable_logging_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_enable_logging_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_enable_logging_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_enable_logging_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_enable_logging(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_language(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_door_lock_language(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_door_lock_language(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_language
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_language);
  } else {
    return attribute_store_set_desired_string(node, new_language);
  }
}

sl_status_t dotdot_door_lock_language_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_language_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_language_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_language_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_language(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_led_settings(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_led_settings(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_led_settings(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_led_settings
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_led_settings,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_led_settings_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_led_settings_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_led_settings_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_led_settings_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_led_settings(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_auto_relock_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_door_lock_auto_relock_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_auto_relock_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_auto_relock_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_relock_time,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_door_lock_auto_relock_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_auto_relock_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_auto_relock_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_auto_relock_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_auto_relock_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_sound_volume(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_sound_volume(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_sound_volume(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_sound_volume
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_sound_volume,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_sound_volume_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_sound_volume_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_sound_volume_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_sound_volume_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_sound_volume(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_operating_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  return attribute_store_node_exists(node);
}

DrlkOperMode dotdot_get_door_lock_operating_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);

  DrlkOperMode result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_operating_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  DrlkOperMode new_operating_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_operating_mode,
                                                  sizeof(DrlkOperMode));
  }

sl_status_t dotdot_door_lock_operating_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_operating_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_operating_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_operating_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_operating_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_supported_operating_modes(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_supported_operating_modes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_supported_operating_modes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_operating_modes
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_operating_modes,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_supported_operating_modes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_supported_operating_modes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_supported_operating_modes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_supported_operating_modes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_supported_operating_modes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_default_configuration_register(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_default_configuration_register(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_default_configuration_register(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_default_configuration_register
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_default_configuration_register,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_default_configuration_register_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_default_configuration_register_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_default_configuration_register_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_default_configuration_register_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_default_configuration_register(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_enable_local_programming(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_enable_local_programming(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_local_programming(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_local_programming
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_local_programming,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_enable_local_programming_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_enable_local_programming_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_enable_local_programming_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_enable_local_programming_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_enable_local_programming(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_one_touch_locking
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_one_touch_locking,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_enable_one_touch_locking_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_enable_one_touch_locking_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_enable_one_touch_locking_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_enable_one_touch_locking_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_enable_one_touch_locking(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_inside_statusled
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_inside_statusled,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_enable_inside_statusled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_enable_inside_statusled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_enable_inside_statusled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_enable_inside_statusled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_enable_inside_statusled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_enable_privacy_mode_button
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_privacy_mode_button,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_enable_privacy_mode_button_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_enable_privacy_mode_button_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_enable_privacy_mode_button_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_enable_privacy_mode_button_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_enable_privacy_mode_button(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_local_programming_features(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_local_programming_features(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_local_programming_features(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_local_programming_features
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_programming_features,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_local_programming_features_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_local_programming_features_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_local_programming_features_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_local_programming_features_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_local_programming_features(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCAL_PROGRAMMING_FEATURES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_wrong_code_entry_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_wrong_code_entry_limit,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_wrong_code_entry_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_wrong_code_entry_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_wrong_code_entry_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_wrong_code_entry_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_wrong_code_entry_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_user_code_temporary_disable_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_user_code_temporary_disable_time,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_user_code_temporary_disable_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_user_code_temporary_disable_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_user_code_temporary_disable_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_user_code_temporary_disable_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_user_code_temporary_disable_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_send_pin_over_the_air
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_send_pin_over_the_air,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_send_pin_over_the_air_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_send_pin_over_the_air_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_send_pin_over_the_air_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_send_pin_over_the_air_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_send_pin_over_the_air(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SEND_PIN_OVER_THE_AIR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);
  return attribute_store_node_exists(node);
}

bool dotdot_get_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_require_pi_nfor_rf_operation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_require_pi_nfor_rf_operation,
                                                  sizeof(bool));
  }

sl_status_t dotdot_door_lock_require_pi_nfor_rf_operation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_require_pi_nfor_rf_operation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_require_pi_nfor_rf_operation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_require_pi_nfor_rf_operation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_require_pi_nfor_rf_operation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIRE_PI_NFOR_RF_OPERATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_security_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_door_lock_security_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_security_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_security_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_security_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_door_lock_security_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_security_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_security_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_security_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_security_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_expiring_user_timeout
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_expiring_user_timeout,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_expiring_user_timeout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_expiring_user_timeout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_expiring_user_timeout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_expiring_user_timeout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_expiring_user_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_EXPIRING_USER_TIMEOUT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_keypad_operation_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_keypad_operation_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_keypad_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_keypad_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_keypad_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_keypad_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_keypad_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rf_operation_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rf_operation_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_rf_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_rf_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_rf_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_rf_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_rf_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_manual_operation_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_manual_operation_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_manual_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_manual_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_manual_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_manual_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_manual_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rfid_operation_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rfid_operation_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_rfid_operation_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_rfid_operation_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_rfid_operation_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_rfid_operation_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_rfid_operation_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_keypad_programming_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_keypad_programming_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_keypad_programming_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_keypad_programming_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_keypad_programming_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_keypad_programming_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_keypad_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rf_programming_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rf_programming_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_rf_programming_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_rf_programming_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_rf_programming_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_rf_programming_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_rf_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rfid_programming_event_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rfid_programming_event_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_rfid_programming_event_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_rfid_programming_event_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_rfid_programming_event_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_rfid_programming_event_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_rfid_programming_event_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_door_lock_feature_map(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_door_lock_feature_map(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_feature_map(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_feature_map
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_feature_map,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_door_lock_feature_map_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_door_lock_feature_map_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_door_lock_feature_map_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_door_lock_feature_map_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_door_lock_feature_map(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_FEATURE_MAP);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_door_lock_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_door_lock_lock_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_lock_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_actuator_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_door_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_door_open_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_door_closed_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_open_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_log_records_supported(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_total_users_supported(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_pin_users_supported(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_rfid_users_supported(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_week_day_schedules_supported_per_user(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_year_day_schedules_supported_per_user(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_holiday_schedules_supported(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_max_pin_code_length(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_min_pin_code_length(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_max_rfid_code_length(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_min_rfid_code_length(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_credential_rules_support(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_number_of_credentials_supported_per_user(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_logging(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_language(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_led_settings(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_auto_relock_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_sound_volume(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_operating_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_supported_operating_modes(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_default_configuration_register(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_local_programming(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_one_touch_locking(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_inside_statusled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_privacy_mode_button(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_local_programming_features(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_wrong_code_entry_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_user_code_temporary_disable_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_send_pin_over_the_air(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_require_pi_nfor_rf_operation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_security_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_expiring_user_timeout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_keypad_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rf_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_manual_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rfid_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_keypad_programming_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rf_programming_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rfid_programming_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_feature_map(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_door_lock_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_door_lock_door_open_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_door_closed_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_open_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_logging(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_language(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_led_settings(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_auto_relock_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_sound_volume(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_operating_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_local_programming(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_one_touch_locking(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_inside_statusled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_enable_privacy_mode_button(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_local_programming_features(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_wrong_code_entry_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_user_code_temporary_disable_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_send_pin_over_the_air(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_require_pi_nfor_rf_operation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_expiring_user_timeout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_keypad_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rf_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_manual_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rfid_operation_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_keypad_programming_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rf_programming_event_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_door_lock_rfid_programming_event_mask(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster WindowCovering
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_window_covering_window_covering_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_window_covering_window_covering_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_window_covering_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_window_covering_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_window_covering_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_window_covering_window_covering_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_window_covering_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_window_covering_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_window_covering_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_window_covering_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_closed_limit_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_physical_closed_limit_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_physical_closed_limit_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_physical_closed_limit_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_physical_closed_limit_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_physical_closed_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit_tilt
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_closed_limit_tilt,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_physical_closed_limit_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_physical_closed_limit_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_physical_closed_limit_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_physical_closed_limit_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_physical_closed_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_current_position_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_current_position_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_position_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_current_position_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_current_position_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_current_position_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_current_position_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_current_position_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_current_position_tilt(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_current_position_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_position_tilt
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_tilt,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_current_position_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_current_position_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_current_position_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_current_position_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_current_position_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_actuations_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_actuations_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_number_of_actuations_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_number_of_actuations_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_number_of_actuations_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_number_of_actuations_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_number_of_actuations_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_actuations_tilt
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_actuations_tilt,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_number_of_actuations_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_number_of_actuations_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_number_of_actuations_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_number_of_actuations_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_number_of_actuations_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_config_or_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_window_covering_config_or_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_config_or_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_config_or_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_config_or_status,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_window_covering_config_or_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_config_or_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_config_or_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_config_or_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_config_or_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_position_lift_percentage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_lift_percentage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_window_covering_current_position_lift_percentage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_current_position_lift_percentage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_current_position_lift_percentage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_current_position_lift_percentage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_current_position_lift_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_position_tilt_percentage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_tilt_percentage,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_window_covering_current_position_tilt_percentage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_current_position_tilt_percentage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_current_position_tilt_percentage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_current_position_tilt_percentage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_current_position_tilt_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_open_limit_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_open_limit_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_installed_open_limit_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_installed_open_limit_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_installed_open_limit_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_installed_open_limit_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_installed_open_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_closed_limit_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_closed_limit_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_installed_closed_limit_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_installed_closed_limit_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_installed_closed_limit_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_installed_closed_limit_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_installed_closed_limit_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_open_limit_tilt
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_open_limit_tilt,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_installed_open_limit_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_installed_open_limit_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_installed_open_limit_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_installed_open_limit_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_installed_open_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_closed_limit_tilt
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_closed_limit_tilt,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_installed_closed_limit_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_installed_closed_limit_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_installed_closed_limit_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_installed_closed_limit_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_installed_closed_limit_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_velocity_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_velocity_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_velocity_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_velocity_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_velocity_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_velocity_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_velocity_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_velocity_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_velocity_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_velocity_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_acceleration_time_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_acceleration_time_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_acceleration_time_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_acceleration_time_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_acceleration_time_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_acceleration_time_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_acceleration_time_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_deceleration_time_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_deceleration_time_lift,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_window_covering_deceleration_time_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_deceleration_time_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_deceleration_time_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_deceleration_time_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_deceleration_time_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_window_covering_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_window_covering_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_intermediate_setpoints_lift
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_intermediate_setpoints_lift);
  } else {
    return attribute_store_set_desired_string(node, new_intermediate_setpoints_lift);
  }
}

sl_status_t dotdot_window_covering_intermediate_setpoints_lift_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_intermediate_setpoints_lift_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_intermediate_setpoints_lift_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_intermediate_setpoints_lift_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_intermediate_setpoints_lift(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_intermediate_setpoints_tilt
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_intermediate_setpoints_tilt);
  } else {
    return attribute_store_set_desired_string(node, new_intermediate_setpoints_tilt);
  }
}

sl_status_t dotdot_window_covering_intermediate_setpoints_tilt_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_window_covering_intermediate_setpoints_tilt_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_window_covering_intermediate_setpoints_tilt_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_window_covering_intermediate_setpoints_tilt_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_window_covering_intermediate_setpoints_tilt(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_window_covering_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_window_covering_window_covering_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_physical_closed_limit_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_physical_closed_limit_tilt(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_current_position_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_current_position_tilt(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_number_of_actuations_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_number_of_actuations_tilt(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_config_or_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_current_position_lift_percentage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_current_position_tilt_percentage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_installed_open_limit_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_installed_closed_limit_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_installed_open_limit_tilt(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_installed_closed_limit_tilt(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_velocity_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_acceleration_time_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_deceleration_time_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_intermediate_setpoints_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_intermediate_setpoints_tilt(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_window_covering_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_window_covering_velocity_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_acceleration_time_lift(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_window_covering_deceleration_time_lift(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster BarrierControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_barrier_control_moving_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_barrier_control_moving_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_moving_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_moving_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_moving_state,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_barrier_control_moving_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_moving_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_moving_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_moving_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_moving_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_safety_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_safety_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_safety_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_safety_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_safety_status,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_safety_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_safety_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_safety_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_safety_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_safety_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_capabilities(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_barrier_control_capabilities(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_capabilities(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_capabilities
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_capabilities,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_barrier_control_capabilities_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_capabilities_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_capabilities_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_capabilities_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_capabilities(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_open_events(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_events
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_open_events,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_open_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_open_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_open_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_open_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_close_events(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_close_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_close_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_close_events
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_close_events,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_close_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_close_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_close_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_close_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_close_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_command_open_events(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_command_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_command_open_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_command_open_events
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_command_open_events,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_command_open_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_command_open_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_command_open_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_command_open_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_command_open_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_command_close_events(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_command_close_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_command_close_events(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_command_close_events
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_command_close_events,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_command_close_events_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_command_close_events_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_command_close_events_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_command_close_events_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_command_close_events(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_open_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_open_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_open_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_open_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_open_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_open_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_open_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_open_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_open_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_close_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_barrier_control_close_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_close_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_close_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_close_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_barrier_control_close_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_close_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_close_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_close_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_close_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_barrier_control_barrier_position(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_barrier_control_barrier_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_barrier_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_barrier_position
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_barrier_position,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_barrier_control_barrier_position_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_barrier_control_barrier_position_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_barrier_control_barrier_position_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_barrier_control_barrier_position_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_barrier_control_barrier_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_barrier_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_barrier_control_moving_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_safety_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_capabilities(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_open_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_close_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_command_open_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_command_close_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_open_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_close_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_barrier_position(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_barrier_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_barrier_control_open_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_close_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_command_open_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_command_close_events(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_open_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_barrier_control_close_period(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster PumpConfigurationAndControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_pressure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_pressure,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_speed
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_speed,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_flow
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_flow,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_flow_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_flow_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_flow_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_flow_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_const_pressure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_pressure,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_min_const_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_min_const_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_min_const_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_min_const_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_min_const_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_const_pressure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_pressure,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_const_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_const_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_const_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_const_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_const_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_comp_pressure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_comp_pressure,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_min_comp_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_min_comp_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_min_comp_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_min_comp_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_min_comp_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_comp_pressure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_comp_pressure,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_comp_pressure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_comp_pressure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_comp_pressure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_comp_pressure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_comp_pressure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_const_speed
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_speed,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_min_const_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_min_const_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_min_const_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_min_const_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_min_const_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_const_speed
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_speed,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_const_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_const_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_const_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_const_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_const_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_const_flow
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_flow,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_min_const_flow_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_min_const_flow_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_min_const_flow_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_min_const_flow_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_min_const_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_const_flow
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_flow,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_const_flow_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_const_flow_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_const_flow_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_const_flow_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_const_flow(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_const_temp
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_temp,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_min_const_temp_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_min_const_temp_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_min_const_temp_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_min_const_temp_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_min_const_temp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_const_temp
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_temp,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_max_const_temp_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_max_const_temp_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_max_const_temp_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_max_const_temp_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_max_const_temp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pump_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pump_status,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_pump_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_pump_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_pump_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_pump_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_pump_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  return attribute_store_node_exists(node);
}

PumpOperationMode dotdot_get_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);

  PumpOperationMode result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpOperationMode new_effective_operation_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_effective_operation_mode,
                                                  sizeof(PumpOperationMode));
  }

sl_status_t dotdot_pump_configuration_and_control_effective_operation_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_effective_operation_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_effective_operation_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_effective_operation_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_effective_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  return attribute_store_node_exists(node);
}

PumpControlMode dotdot_get_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);

  PumpControlMode result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpControlMode new_effective_control_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_effective_control_mode,
                                                  sizeof(PumpControlMode));
  }

sl_status_t dotdot_pump_configuration_and_control_effective_control_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_effective_control_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_effective_control_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_effective_control_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_effective_control_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_capacity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_capacity,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_capacity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_capacity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_capacity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_capacity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_capacity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_speed(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_speed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_speed
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_speed,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_speed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_speed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_speed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_speed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_speed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lifetime_running_hours
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lifetime_running_hours,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_pump_configuration_and_control_lifetime_running_hours_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_lifetime_running_hours_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_lifetime_running_hours_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_lifetime_running_hours_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_lifetime_running_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_pump_configuration_and_control_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_pump_configuration_and_control_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lifetime_energy_consumed
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lifetime_energy_consumed,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_pump_configuration_and_control_lifetime_energy_consumed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_lifetime_energy_consumed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_lifetime_energy_consumed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_lifetime_energy_consumed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_lifetime_energy_consumed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  return attribute_store_node_exists(node);
}

PumpOperationMode dotdot_get_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);

  PumpOperationMode result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpOperationMode new_operation_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_operation_mode,
                                                  sizeof(PumpOperationMode));
  }

sl_status_t dotdot_pump_configuration_and_control_operation_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_operation_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_operation_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_operation_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  return attribute_store_node_exists(node);
}

PumpControlMode dotdot_get_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);

  PumpControlMode result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  PumpControlMode new_control_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_control_mode,
                                                  sizeof(PumpControlMode));
  }

sl_status_t dotdot_pump_configuration_and_control_control_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_control_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_control_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_control_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_control_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pump_configuration_and_control_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pump_configuration_and_control_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pump_configuration_and_control_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pump_configuration_and_control_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pump_configuration_and_control_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_pump_configuration_and_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_pump_configuration_and_control_max_pressure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_speed(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_flow(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_min_const_pressure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_const_pressure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_min_comp_pressure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_comp_pressure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_min_const_speed(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_const_speed(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_min_const_flow(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_const_flow(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_min_const_temp(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_max_const_temp(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_pump_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_effective_operation_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_effective_control_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_capacity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_speed(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_lifetime_energy_consumed(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_operation_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_control_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_alarm_mask(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_pump_configuration_and_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_operation_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pump_configuration_and_control_control_mode(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Thermostat
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_thermostat_local_temperature(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_local_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_local_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_local_temperature
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_temperature,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_local_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_local_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_local_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_local_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_local_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_outdoor_temperature(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_outdoor_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_outdoor_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_outdoor_temperature
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_outdoor_temperature,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_outdoor_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_outdoor_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_outdoor_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_outdoor_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_outdoor_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_occupancy(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_occupancy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupancy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_occupancy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_occupancy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_occupancy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_occupancy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_occupancy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_min_heat_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_min_heat_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_abs_min_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_abs_min_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_abs_min_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_abs_min_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_abs_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_max_heat_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_max_heat_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_abs_max_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_abs_max_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_abs_max_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_abs_max_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_abs_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_min_cool_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_min_cool_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_abs_min_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_abs_min_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_abs_min_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_abs_min_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_abs_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_max_cool_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_max_cool_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_abs_max_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_abs_max_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_abs_max_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_abs_max_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_abs_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pi_cooling_demand
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pi_cooling_demand,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_pi_cooling_demand_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_pi_cooling_demand_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_pi_cooling_demand_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_pi_cooling_demand_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_pi_cooling_demand(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_pi_heating_demand(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_pi_heating_demand(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_pi_heating_demand(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pi_heating_demand
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pi_heating_demand,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_pi_heating_demand_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_pi_heating_demand_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_pi_heating_demand_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_pi_heating_demand_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_pi_heating_demand(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_hvac_system_type_configuration
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_hvac_system_type_configuration,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_hvac_system_type_configuration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_hvac_system_type_configuration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_hvac_system_type_configuration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_hvac_system_type_configuration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_hvac_system_type_configuration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_local_temperature_calibration
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_temperature_calibration,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_thermostat_local_temperature_calibration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_local_temperature_calibration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_local_temperature_calibration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_local_temperature_calibration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_local_temperature_calibration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_occupied_cooling_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_cooling_setpoint,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_occupied_cooling_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_occupied_cooling_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_occupied_cooling_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_occupied_cooling_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_occupied_cooling_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_occupied_heating_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_heating_setpoint,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_occupied_heating_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_occupied_heating_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_occupied_heating_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_occupied_heating_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_occupied_heating_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_unoccupied_cooling_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_cooling_setpoint,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_unoccupied_cooling_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_unoccupied_cooling_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_unoccupied_cooling_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_unoccupied_cooling_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_unoccupied_cooling_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_unoccupied_heating_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_heating_setpoint,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_unoccupied_heating_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_unoccupied_heating_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_unoccupied_heating_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_unoccupied_heating_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_unoccupied_heating_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_heat_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_heat_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_min_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_min_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_min_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_min_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_min_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_heat_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_heat_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_max_heat_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_max_heat_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_max_heat_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_max_heat_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_max_heat_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_cool_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_cool_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_min_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_min_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_min_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_min_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_min_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_cool_setpoint_limit
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_cool_setpoint_limit,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_max_cool_setpoint_limit_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_max_cool_setpoint_limit_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_max_cool_setpoint_limit_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_max_cool_setpoint_limit_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_max_cool_setpoint_limit(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_min_setpoint_dead_band
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_setpoint_dead_band,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_thermostat_min_setpoint_dead_band_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_min_setpoint_dead_band_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_min_setpoint_dead_band_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_min_setpoint_dead_band_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_min_setpoint_dead_band(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_remote_sensing(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_remote_sensing(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_remote_sensing(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_remote_sensing
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_remote_sensing,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_remote_sensing_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_remote_sensing_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_remote_sensing_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_remote_sensing_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_remote_sensing(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_control_sequence_of_operation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_control_sequence_of_operation,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_control_sequence_of_operation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_control_sequence_of_operation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_control_sequence_of_operation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_control_sequence_of_operation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_control_sequence_of_operation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_system_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_system_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_system_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_system_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_system_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_system_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_system_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_system_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_system_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_system_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_alarm_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_alarm_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_alarm_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_alarm_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_alarm_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_alarm_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_alarm_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_alarm_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_running_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_running_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_thermostat_running_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_thermostat_running_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_thermostat_running_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_thermostat_running_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_thermostat_running_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_start_of_week(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_start_of_week(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_start_of_week(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_of_week
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_of_week,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_start_of_week_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_start_of_week_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_start_of_week_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_start_of_week_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_start_of_week(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_weekly_transitions
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_weekly_transitions,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_number_of_weekly_transitions_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_number_of_weekly_transitions_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_number_of_weekly_transitions_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_number_of_weekly_transitions_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_number_of_weekly_transitions(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_daily_transitions
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_daily_transitions,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_number_of_daily_transitions_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_number_of_daily_transitions_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_number_of_daily_transitions_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_number_of_daily_transitions_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_number_of_daily_transitions(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_setpoint_hold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_setpoint_hold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_temperature_setpoint_hold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_temperature_setpoint_hold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_temperature_setpoint_hold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_temperature_setpoint_hold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_temperature_setpoint_hold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_temperature_setpoint_hold_duration
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_setpoint_hold_duration,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_thermostat_temperature_setpoint_hold_duration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_temperature_setpoint_hold_duration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_temperature_setpoint_hold_duration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_temperature_setpoint_hold_duration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_temperature_setpoint_hold_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_programming_operation_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_programming_operation_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_thermostat_programming_operation_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_thermostat_programming_operation_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_thermostat_programming_operation_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_thermostat_programming_operation_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_thermostat_programming_operation_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_thermostat_running_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_thermostat_thermostat_running_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_thermostat_running_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_thermostat_running_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_running_state,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_thermostat_thermostat_running_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_thermostat_running_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_thermostat_running_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_thermostat_running_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_thermostat_running_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_setpoint_change_source(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_setpoint_change_source(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_setpoint_change_source(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_setpoint_change_source
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_setpoint_change_source,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_setpoint_change_source_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_setpoint_change_source_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_setpoint_change_source_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_setpoint_change_source_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_setpoint_change_source(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_setpoint_change_amount
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_setpoint_change_amount,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_setpoint_change_amount_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_setpoint_change_amount_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_setpoint_change_amount_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_setpoint_change_amount_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_setpoint_change_amount(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_setpoint_change_source_timestamp
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_setpoint_change_source_timestamp,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_thermostat_setpoint_change_source_timestamp_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_setpoint_change_source_timestamp_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_setpoint_change_source_timestamp_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_setpoint_change_source_timestamp_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_setpoint_change_source_timestamp(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_occupied_setback(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_occupied_setback(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_setback(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_setback,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_occupied_setback_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_occupied_setback_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_occupied_setback_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_occupied_setback_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_occupied_setback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_occupied_setback_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_occupied_setback_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_setback_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_setback_min,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_occupied_setback_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_occupied_setback_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_occupied_setback_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_occupied_setback_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_occupied_setback_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_occupied_setback_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_occupied_setback_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_setback_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_setback_max,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_occupied_setback_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_occupied_setback_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_occupied_setback_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_occupied_setback_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_occupied_setback_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_unoccupied_setback(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_unoccupied_setback(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_setback(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_setback,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_unoccupied_setback_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_unoccupied_setback_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_unoccupied_setback_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_unoccupied_setback_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_unoccupied_setback(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_setback_min,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_unoccupied_setback_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_unoccupied_setback_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_unoccupied_setback_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_unoccupied_setback_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_unoccupied_setback_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_setback_max,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_unoccupied_setback_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_unoccupied_setback_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_unoccupied_setback_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_unoccupied_setback_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_unoccupied_setback_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_emergency_heat_delta
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_emergency_heat_delta,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_emergency_heat_delta_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_emergency_heat_delta_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_emergency_heat_delta_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_emergency_heat_delta_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_emergency_heat_delta(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_ac_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_ac_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_capacity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_thermostat_ac_capacity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_capacity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_capacity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_capacity,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_thermostat_ac_capacity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_capacity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_capacity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_capacity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_capacity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_refrigerant_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_refrigerant_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_ac_refrigerant_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_refrigerant_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_refrigerant_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_refrigerant_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_refrigerant_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_compressor_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_ac_compressor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_compressor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_compressor_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_compressor_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_ac_compressor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_compressor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_compressor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_compressor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_compressor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_error_code(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_thermostat_ac_error_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_error_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_ac_error_code
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_error_code,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_thermostat_ac_error_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_error_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_error_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_error_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_error_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_louver_position(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_ac_louver_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_louver_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_louver_position
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_louver_position,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_ac_louver_position_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_louver_position_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_louver_position_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_louver_position_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_louver_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_coil_temperature
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_coil_temperature,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_thermostat_ac_coil_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_coil_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_coil_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_coil_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_coil_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_ac_capacity_format(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_ac_capacity_format(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_capacity_format(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_capacity_format
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_capacity_format,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_ac_capacity_format_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_ac_capacity_format_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_ac_capacity_format_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_ac_capacity_format_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_ac_capacity_format(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_thermostat_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_thermostat_local_temperature(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_outdoor_temperature(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupancy(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_abs_min_heat_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_abs_max_heat_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_abs_min_cool_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_abs_max_cool_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_pi_cooling_demand(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_pi_heating_demand(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_hvac_system_type_configuration(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_local_temperature_calibration(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_cooling_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_heating_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_cooling_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_heating_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_min_heat_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_max_heat_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_min_cool_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_max_cool_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_min_setpoint_dead_band(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_remote_sensing(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_control_sequence_of_operation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_system_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_alarm_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_thermostat_running_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_start_of_week(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_number_of_weekly_transitions(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_number_of_daily_transitions(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_temperature_setpoint_hold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_temperature_setpoint_hold_duration(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_thermostat_programming_operation_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_thermostat_running_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_setpoint_change_source(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_setpoint_change_amount(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_setpoint_change_source_timestamp(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_setback(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_setback_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_setback_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_setback(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_setback_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_setback_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_emergency_heat_delta(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_capacity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_refrigerant_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_compressor_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_error_code(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_louver_position(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_coil_temperature(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_capacity_format(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_thermostat_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_thermostat_hvac_system_type_configuration(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_local_temperature_calibration(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_cooling_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_heating_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_cooling_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_heating_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_min_heat_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_max_heat_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_min_cool_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_max_cool_setpoint_limit(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_min_setpoint_dead_band(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_remote_sensing(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_control_sequence_of_operation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_system_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_temperature_setpoint_hold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_temperature_setpoint_hold_duration(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_thermostat_programming_operation_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_occupied_setback(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_unoccupied_setback(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_emergency_heat_delta(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_capacity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_refrigerant_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_compressor_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_error_code(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_louver_position(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_ac_capacity_format(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster FanControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_fan_control_fan_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_fan_control_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_fan_control_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_fan_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fan_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_fan_control_fan_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_fan_control_fan_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_fan_control_fan_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_fan_control_fan_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_fan_control_fan_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_fan_mode_sequence
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fan_mode_sequence,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_fan_control_fan_mode_sequence_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_fan_control_fan_mode_sequence_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_fan_control_fan_mode_sequence_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_fan_control_fan_mode_sequence_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_fan_control_fan_mode_sequence(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_fan_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_fan_control_fan_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_fan_control_fan_mode_sequence(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_fan_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_fan_control_fan_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_fan_control_fan_mode_sequence(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster DehumidificationControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relative_humidity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_relative_humidity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_relative_humidity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_relative_humidity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_relative_humidity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_relative_humidity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_cooling
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_cooling,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_dehumidification_cooling_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_dehumidification_cooling_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_dehumidification_cooling_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_dehumidification_cooling_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_dehumidification_cooling(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_rh_dehumidification_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rh_dehumidification_setpoint,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_rh_dehumidification_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_rh_dehumidification_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_rh_dehumidification_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_rh_dehumidification_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_rh_dehumidification_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relative_humidity_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_relative_humidity_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_relative_humidity_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_relative_humidity_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_relative_humidity_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_relative_humidity_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_lockout
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_lockout,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_dehumidification_lockout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_dehumidification_lockout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_dehumidification_lockout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_dehumidification_lockout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_dehumidification_lockout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_hysteresis
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_hysteresis,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_dehumidification_hysteresis_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_dehumidification_hysteresis_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_dehumidification_hysteresis_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_dehumidification_hysteresis_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_dehumidification_hysteresis(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_max_cool
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_max_cool,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_dehumidification_max_cool_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_dehumidification_max_cool_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_dehumidification_max_cool_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_dehumidification_max_cool_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_dehumidification_max_cool(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity_display
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relative_humidity_display,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_dehumidification_control_relative_humidity_display_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_dehumidification_control_relative_humidity_display_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_dehumidification_control_relative_humidity_display_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_dehumidification_control_relative_humidity_display_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_dehumidification_control_relative_humidity_display(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_dehumidification_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_dehumidification_control_relative_humidity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_cooling(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_relative_humidity_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_lockout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_hysteresis(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_max_cool(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_relative_humidity_display(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_dehumidification_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_relative_humidity_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_lockout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_hysteresis(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_dehumidification_max_cool(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_dehumidification_control_relative_humidity_display(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ThermostatUserInterfaceConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_display_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_display_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_user_interface_configuration_temperature_display_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_user_interface_configuration_temperature_display_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_user_interface_configuration_temperature_display_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_user_interface_configuration_temperature_display_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_user_interface_configuration_temperature_display_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_keypad_lockout
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_keypad_lockout,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_user_interface_configuration_keypad_lockout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_user_interface_configuration_keypad_lockout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_user_interface_configuration_keypad_lockout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_user_interface_configuration_keypad_lockout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_user_interface_configuration_keypad_lockout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_schedule_programming_visibility
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_schedule_programming_visibility,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_thermostat_user_interface_configuration_schedule_programming_visibility(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_thermostat_user_interface_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_thermostat_user_interface_configuration_temperature_display_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_user_interface_configuration_keypad_lockout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_user_interface_configuration_schedule_programming_visibility(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_thermostat_user_interface_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_thermostat_user_interface_configuration_temperature_display_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_user_interface_configuration_keypad_lockout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_thermostat_user_interface_configuration_schedule_programming_visibility(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ColorControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_color_control_current_hue(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_current_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_current_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_hue
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_hue,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_current_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_current_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_current_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_current_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_current_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_current_saturation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_current_saturation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_current_saturation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_saturation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_saturation,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_current_saturation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_current_saturation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_current_saturation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_current_saturation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_current_saturation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_remaining_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_remaining_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_remaining_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_remaining_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_remaining_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_remaining_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_remaining_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_remaining_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_remaining_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_remaining_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_currentx(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_currentx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_currentx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_currentx
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_currentx,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_currentx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_currentx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_currentx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_currentx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_currentx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_currenty(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_currenty(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_currenty(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_currenty
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_currenty,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_currenty_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_currenty_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_currenty_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_currenty_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_currenty(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_drift_compensation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_drift_compensation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_drift_compensation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_drift_compensation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_drift_compensation,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_drift_compensation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_drift_compensation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_drift_compensation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_drift_compensation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_drift_compensation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_compensation_text(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_color_control_compensation_text(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_color_control_compensation_text(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_compensation_text
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_compensation_text);
  } else {
    return attribute_store_set_desired_string(node, new_compensation_text);
  }
}

sl_status_t dotdot_color_control_compensation_text_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_compensation_text_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_compensation_text_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_compensation_text_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_compensation_text(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_temperature_mireds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_temperature_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_temperature_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temperature_mireds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_temperature_mireds,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_temperature_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_temperature_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_temperature_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_temperature_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_temperature_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_color_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_color_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_options(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_options(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_options(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_options
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_options,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_options_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_options_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_options_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_options_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_options(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_number_of_primaries(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_number_of_primaries(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_number_of_primaries(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_primaries
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_primaries,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_number_of_primaries_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_number_of_primaries_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_number_of_primaries_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_number_of_primaries_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_number_of_primaries(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary1x(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary1x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary1x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary1x
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary1x,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary1x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary1x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary1x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary1x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary1x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary1y(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary1y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary1y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary1y
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary1y,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary1y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary1y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary1y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary1y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary1y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary1_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_primary1_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary1_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary1_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary1_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_primary1_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary1_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary1_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary1_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary1_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary2x(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary2x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary2x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary2x
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary2x,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary2x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary2x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary2x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary2x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary2x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary2y(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary2y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary2y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary2y
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary2y,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary2y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary2y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary2y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary2y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary2y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary2_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_primary2_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary2_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary2_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary2_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_primary2_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary2_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary2_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary2_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary2_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary3x(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary3x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary3x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary3x
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary3x,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary3x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary3x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary3x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary3x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary3x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary3y(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary3y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary3y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary3y
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary3y,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary3y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary3y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary3y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary3y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary3y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary3_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_primary3_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary3_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary3_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary3_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_primary3_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary3_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary3_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary3_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary3_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary4x(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary4x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary4x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary4x
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary4x,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary4x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary4x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary4x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary4x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary4x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary4y(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary4y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary4y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary4y
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary4y,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary4y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary4y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary4y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary4y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary4y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary4_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_primary4_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary4_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary4_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary4_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_primary4_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary4_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary4_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary4_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary4_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary5x(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary5x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary5x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary5x
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary5x,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary5x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary5x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary5x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary5x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary5x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary5y(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary5y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary5y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary5y
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary5y,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary5y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary5y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary5y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary5y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary5y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary5_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_primary5_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary5_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary5_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary5_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_primary5_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary5_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary5_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary5_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary5_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary6x(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary6x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary6x(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary6x
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary6x,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary6x_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary6x_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary6x_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary6x_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary6x(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary6y(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_primary6y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary6y(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary6y
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary6y,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_primary6y_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary6y_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary6y_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary6y_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary6y(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_primary6_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_primary6_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary6_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary6_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary6_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_primary6_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_primary6_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_primary6_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_primary6_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_primary6_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_white_pointx(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_white_pointx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_white_pointx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_white_pointx
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_white_pointx,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_white_pointx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_white_pointx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_white_pointx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_white_pointx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_white_pointx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_white_pointy(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_white_pointy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_white_pointy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_white_pointy
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_white_pointy,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_white_pointy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_white_pointy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_white_pointy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_white_pointy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_white_pointy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointrx(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_pointrx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointrx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointrx
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointrx,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_pointrx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointrx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointrx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointrx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointrx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointry(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_pointry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointry
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointry,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_pointry_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointry_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointry_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointry_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointr_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_color_pointr_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointr_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointr_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointr_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_color_pointr_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointr_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointr_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointr_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointr_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointgx(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_pointgx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointgx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointgx
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointgx,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_pointgx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointgx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointgx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointgx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointgx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointgy(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_pointgy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointgy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointgy
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointgy,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_pointgy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointgy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointgy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointgy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointgy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointg_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_color_pointg_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointg_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointg_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointg_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_color_pointg_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointg_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointg_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointg_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointg_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointbx(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_pointbx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointbx(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointbx
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointbx,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_pointbx_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointbx_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointbx_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointbx_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointbx(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointby(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_pointby(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointby(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointby
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointby,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_pointby_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointby_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointby_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointby_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointby(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_pointb_intensity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_color_pointb_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointb_intensity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointb_intensity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointb_intensity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_color_pointb_intensity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_pointb_intensity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_pointb_intensity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_pointb_intensity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_pointb_intensity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_enhanced_current_hue(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_enhanced_current_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_enhanced_current_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_enhanced_current_hue
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enhanced_current_hue,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_enhanced_current_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_enhanced_current_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_enhanced_current_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_enhanced_current_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_enhanced_current_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_enhanced_color_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_enhanced_color_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_enhanced_color_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_enhanced_color_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enhanced_color_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_enhanced_color_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_enhanced_color_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_enhanced_color_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_enhanced_color_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_enhanced_color_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_loop_active(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_color_loop_active(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_active(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_loop_active
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_active,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_color_loop_active_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_loop_active_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_loop_active_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_loop_active_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_loop_active(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_loop_direction(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_color_control_color_loop_direction(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_direction(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_loop_direction
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_direction,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_color_control_color_loop_direction_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_loop_direction_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_loop_direction_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_loop_direction_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_loop_direction(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_loop_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_loop_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_loop_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_loop_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_loop_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_loop_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_loop_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_start_enhanced_hue
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_start_enhanced_hue,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_loop_start_enhanced_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_loop_start_enhanced_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_loop_start_enhanced_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_loop_start_enhanced_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_loop_start_enhanced_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_stored_enhanced_hue
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_stored_enhanced_hue,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_loop_stored_enhanced_hue_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_loop_stored_enhanced_hue_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_loop_stored_enhanced_hue_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_loop_stored_enhanced_hue_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_loop_stored_enhanced_hue(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_capabilities(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_capabilities(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_capabilities(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_capabilities
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_capabilities,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_capabilities_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_capabilities_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_capabilities_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_capabilities_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_capabilities(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temp_physical_min_mireds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_temp_physical_min_mireds,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_temp_physical_min_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_temp_physical_min_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_temp_physical_min_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_temp_physical_min_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_temp_physical_min_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temp_physical_max_mireds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_temp_physical_max_mireds,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_color_temp_physical_max_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_color_temp_physical_max_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_color_temp_physical_max_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_color_temp_physical_max_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_color_temp_physical_max_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_couple_color_temp_to_level_min_mireds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_couple_color_temp_to_level_min_mireds,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_couple_color_temp_to_level_min_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_couple_color_temp_to_level_min_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_couple_color_temp_to_level_min_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_couple_color_temp_to_level_min_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_couple_color_temp_to_level_min_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_start_up_color_temperature_mireds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_up_color_temperature_mireds,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_color_control_start_up_color_temperature_mireds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_color_control_start_up_color_temperature_mireds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_color_control_start_up_color_temperature_mireds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_color_control_start_up_color_temperature_mireds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_color_control_start_up_color_temperature_mireds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_color_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_color_control_current_hue(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_current_saturation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_remaining_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_currentx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_currenty(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_drift_compensation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_compensation_text(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_temperature_mireds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_options(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_number_of_primaries(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary1x(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary1y(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary1_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary2x(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary2y(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary2_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary3x(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary3y(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary3_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary4x(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary4y(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary4_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary5x(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary5y(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary5_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary6x(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary6y(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_primary6_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_white_pointx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_white_pointy(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointrx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointry(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointr_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointgx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointgy(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointg_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointbx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointby(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointb_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_enhanced_current_hue(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_enhanced_color_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_loop_active(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_loop_direction(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_loop_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_loop_start_enhanced_hue(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_loop_stored_enhanced_hue(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_capabilities(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_temp_physical_min_mireds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_temp_physical_max_mireds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_couple_color_temp_to_level_min_mireds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_start_up_color_temperature_mireds(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_color_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_color_control_options(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_white_pointx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_white_pointy(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointrx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointry(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointr_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointgx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointgy(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointg_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointbx(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointby(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_color_pointb_intensity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_color_control_start_up_color_temperature_mireds(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster BallastConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_min_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_min_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_physical_min_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_physical_min_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_physical_min_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_physical_min_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_physical_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_max_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_max_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_physical_max_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_physical_max_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_physical_max_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_physical_max_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_physical_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_ballast_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_ballast_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_ballast_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ballast_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ballast_status,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_ballast_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_ballast_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_ballast_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_ballast_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_ballast_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_min_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_min_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_min_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_min_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_min_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_min_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_min_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_max_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_max_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_max_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_max_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_max_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_max_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_max_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_power_on_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_power_on_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_power_on_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_power_on_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_on_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_power_on_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_power_on_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_power_on_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_power_on_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_power_on_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_power_on_fade_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_on_fade_time,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_ballast_configuration_power_on_fade_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_power_on_fade_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_power_on_fade_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_power_on_fade_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_power_on_fade_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_intrinsic_ballast_factor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_intrinsic_ballast_factor,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_intrinsic_ballast_factor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_intrinsic_ballast_factor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_intrinsic_ballast_factor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_intrinsic_ballast_factor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_intrinsic_ballast_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ballast_factor_adjustment
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ballast_factor_adjustment,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_ballast_factor_adjustment_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_ballast_factor_adjustment_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_ballast_factor_adjustment_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_ballast_factor_adjustment_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_ballast_factor_adjustment(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lamp_quantity
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_quantity,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_lamp_quantity_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_quantity_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_quantity_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_quantity_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_quantity(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_ballast_configuration_lamp_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_ballast_configuration_lamp_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_lamp_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_lamp_type);
  } else {
    return attribute_store_set_desired_string(node, new_lamp_type);
  }
}

sl_status_t dotdot_ballast_configuration_lamp_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_lamp_manufacturer
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_lamp_manufacturer);
  } else {
    return attribute_store_set_desired_string(node, new_lamp_manufacturer);
  }
}

sl_status_t dotdot_ballast_configuration_lamp_manufacturer_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_manufacturer_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_manufacturer_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_manufacturer_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_manufacturer(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_rated_hours
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_rated_hours,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_ballast_configuration_lamp_rated_hours_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_rated_hours_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_rated_hours_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_rated_hours_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_rated_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_burn_hours
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_burn_hours,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_ballast_configuration_lamp_burn_hours_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_burn_hours_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_burn_hours_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_burn_hours_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_burn_hours(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lamp_alarm_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_alarm_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ballast_configuration_lamp_alarm_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_alarm_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_alarm_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_alarm_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_alarm_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_burn_hours_trip_point
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_burn_hours_trip_point,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_ballast_configuration_lamp_burn_hours_trip_point_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ballast_configuration_lamp_burn_hours_trip_point_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ballast_configuration_lamp_burn_hours_trip_point_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ballast_configuration_lamp_burn_hours_trip_point_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ballast_configuration_lamp_burn_hours_trip_point(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_ballast_configuration_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_ballast_configuration_physical_min_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_physical_max_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_ballast_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_min_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_max_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_power_on_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_power_on_fade_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_ballast_factor_adjustment(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_quantity(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_rated_hours(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_burn_hours(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_alarm_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_ballast_configuration_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_ballast_configuration_min_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_max_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_power_on_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_power_on_fade_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_ballast_factor_adjustment(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_manufacturer(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_rated_hours(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_burn_hours(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_alarm_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster IlluminanceMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_illuminance_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_illuminance_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_illuminance_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_illuminance_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_illuminance_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_illuminance_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_illuminance_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_illuminance_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_light_sensor_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_light_sensor_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_illuminance_measurement_light_sensor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_measurement_light_sensor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_measurement_light_sensor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_measurement_light_sensor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_measurement_light_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_illuminance_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_illuminance_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_illuminance_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_illuminance_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_illuminance_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_illuminance_measurement_light_sensor_type(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_illuminance_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster IlluminanceLevelSensing
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_level_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_level_status,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_illuminance_level_sensing_level_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_level_sensing_level_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_level_sensing_level_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_level_sensing_level_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_level_sensing_level_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_light_sensor_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_light_sensor_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_illuminance_level_sensing_light_sensor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_level_sensing_light_sensor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_level_sensing_light_sensor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_level_sensing_light_sensor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_level_sensing_light_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_illuminance_target_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_illuminance_target_level,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_illuminance_level_sensing_illuminance_target_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_illuminance_level_sensing_illuminance_target_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_illuminance_level_sensing_illuminance_target_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_illuminance_level_sensing_illuminance_target_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_illuminance_level_sensing_illuminance_target_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_illuminance_level_sensing_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_illuminance_level_sensing_level_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_illuminance_level_sensing_light_sensor_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_illuminance_level_sensing_illuminance_target_level(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_illuminance_level_sensing_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_illuminance_level_sensing_illuminance_target_level(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster TemperatureMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_temperature_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_temperature_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_temperature_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_temperature_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_temperature_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_temperature_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_temperature_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_temperature_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_temperature_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_temperature_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_temperature_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_temperature_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_temperature_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_temperature_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_temperature_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_temperature_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_temperature_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_temperature_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_temperature_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_temperature_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_temperature_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_temperature_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_temperature_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_temperature_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_temperature_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_temperature_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_temperature_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_temperature_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_temperature_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_temperature_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster PressureMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_pressure_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pressure_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pressure_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pressure_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pressure_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pressure_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pressure_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_scaled_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pressure_measurement_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_scaled_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scaled_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pressure_measurement_scaled_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_scaled_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_scaled_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_scaled_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_scaled_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_scaled_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pressure_measurement_min_scaled_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_min_scaled_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_min_scaled_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_min_scaled_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_min_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_scaled_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_scaled_value,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_pressure_measurement_max_scaled_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_max_scaled_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_max_scaled_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_max_scaled_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_max_scaled_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_scaled_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scaled_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_pressure_measurement_scaled_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_scaled_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_scaled_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_scaled_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_scaled_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pressure_measurement_scale(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_pressure_measurement_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_scale
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scale,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_pressure_measurement_scale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pressure_measurement_scale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pressure_measurement_scale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pressure_measurement_scale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pressure_measurement_scale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_pressure_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_pressure_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_scaled_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_min_scaled_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_max_scaled_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_scaled_tolerance(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pressure_measurement_scale(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_pressure_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster FlowMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_flow_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_flow_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_flow_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_flow_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_flow_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_flow_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_flow_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_flow_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_flow_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_flow_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_flow_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_flow_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_flow_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_flow_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_flow_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_flow_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_flow_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_flow_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_flow_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_flow_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_flow_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_flow_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_flow_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_flow_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_flow_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_flow_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_flow_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_flow_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_flow_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_flow_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_flow_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_flow_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_flow_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_flow_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster RelativityHumidity
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_relativity_humidity_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_relativity_humidity_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_relativity_humidity_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_relativity_humidity_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_relativity_humidity_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_relativity_humidity_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_relativity_humidity_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_relativity_humidity_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_relativity_humidity_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_relativity_humidity_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_relativity_humidity_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_relativity_humidity_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_relativity_humidity_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_relativity_humidity_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_relativity_humidity_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_relativity_humidity_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_relativity_humidity_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_relativity_humidity_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_relativity_humidity_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_relativity_humidity_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_relativity_humidity_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_relativity_humidity_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_relativity_humidity_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_relativity_humidity_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_relativity_humidity_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_relativity_humidity_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_relativity_humidity_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_relativity_humidity_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_relativity_humidity_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_relativity_humidity_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster OccupancySensing
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_occupancy_sensing_occupancy(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_occupancy_sensing_occupancy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_occupancy(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_occupancy_sensing_occupancy_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_occupancy_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_occupancy_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_occupancy_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_occupancy(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy_sensor_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy_sensor_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_occupancy_sensor_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_occupancy_sensor_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_occupancy_sensor_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy_sensor_type_bitmap
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy_sensor_type_bitmap,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_occupancy_sensor_type_bitmap(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pir_occupied_to_unoccupied_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pir_occupied_to_unoccupied_delay,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pir_unoccupied_to_occupied_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pir_unoccupied_to_occupied_delay,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pir_unoccupied_to_occupied_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pir_unoccupied_to_occupied_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ultrasonic_occupied_to_unoccupied_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ultrasonic_occupied_to_unoccupied_delay,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ultrasonic_unoccupied_to_occupied_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ultrasonic_unoccupied_to_occupied_delay,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ultrasonic_unoccupied_to_occupied_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ultrasonic_unoccupied_to_occupied_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_contact_occupied_to_unoccupied_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_contact_occupied_to_unoccupied_delay,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_contact_unoccupied_to_occupied_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_contact_unoccupied_to_occupied_delay,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_contact_unoccupied_to_occupied_threshold
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_contact_unoccupied_to_occupied_threshold,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_occupancy_sensing_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_occupancy_sensing_occupancy(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_occupancy_sensor_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_occupancy_sensor_type_bitmap(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_occupancy_sensing_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster SoilMoisture
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_soil_moisture_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_soil_moisture_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_soil_moisture_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_soil_moisture_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_soil_moisture_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_soil_moisture_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_soil_moisture_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_soil_moisture_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_soil_moisture_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_soil_moisture_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_soil_moisture_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_soil_moisture_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_soil_moisture_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_soil_moisture_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_soil_moisture_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_soil_moisture_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_soil_moisture_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_soil_moisture_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_soil_moisture_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_soil_moisture_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_soil_moisture_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_soil_moisture_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_soil_moisture_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_soil_moisture_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_soil_moisture_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_soil_moisture_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_soil_moisture_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_soil_moisture_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_soil_moisture_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_soil_moisture_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_soil_moisture_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_soil_moisture_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SOIL_MOISTURE_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_soil_moisture_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_soil_moisture_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_soil_moisture_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_soil_moisture_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_soil_moisture_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_soil_moisture_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster PhMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ph_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_ph_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_ph_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ph_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ph_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ph_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ph_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ph_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_ph_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_ph_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ph_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ph_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ph_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ph_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ph_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_ph_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_ph_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ph_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ph_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ph_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ph_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ph_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_ph_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_ph_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ph_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ph_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ph_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ph_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_ph_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_ph_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ph_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ph_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ph_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_ph_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ElectricalConductivityMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_conductivity_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_conductivity_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_conductivity_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_conductivity_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_conductivity_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_conductivity_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_conductivity_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_conductivity_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_conductivity_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_conductivity_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_conductivity_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_conductivity_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_conductivity_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_conductivity_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_conductivity_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_conductivity_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_conductivity_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_conductivity_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_conductivity_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_conductivity_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_electrical_conductivity_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_electrical_conductivity_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_conductivity_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_conductivity_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_conductivity_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_electrical_conductivity_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster WindSpeedMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_wind_speed_measurement_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_wind_speed_measurement_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_wind_speed_measurement_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_wind_speed_measurement_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_wind_speed_measurement_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_wind_speed_measurement_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_wind_speed_measurement_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_wind_speed_measurement_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_wind_speed_measurement_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_wind_speed_measurement_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_wind_speed_measurement_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_wind_speed_measurement_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_wind_speed_measurement_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_wind_speed_measurement_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_wind_speed_measurement_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_wind_speed_measurement_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_wind_speed_measurement_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_wind_speed_measurement_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_wind_speed_measurement_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_wind_speed_measurement_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_wind_speed_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_wind_speed_measurement_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_wind_speed_measurement_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_wind_speed_measurement_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_wind_speed_measurement_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_wind_speed_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster CarbonMonoxide
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_carbon_monoxide_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_monoxide_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_monoxide_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_monoxide_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_monoxide_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_monoxide_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_monoxide_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_monoxide_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_monoxide_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_monoxide_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_monoxide_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_monoxide_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_monoxide_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_monoxide_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_monoxide_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_monoxide_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_monoxide_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_carbon_monoxide_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_monoxide_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_monoxide_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_monoxide_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_monoxide_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_monoxide_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_monoxide_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_carbon_monoxide_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_carbon_monoxide_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_carbon_monoxide_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_carbon_monoxide_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_carbon_monoxide_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_carbon_monoxide_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster CarbonDioxide
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_carbon_dioxide_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_dioxide_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_dioxide_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_dioxide_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_dioxide_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_dioxide_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_dioxide_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_dioxide_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_dioxide_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_dioxide_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_dioxide_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_dioxide_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_dioxide_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_dioxide_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_dioxide_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_dioxide_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_dioxide_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_dioxide_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_carbon_dioxide_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);
  return attribute_store_node_exists(node);
}

float dotdot_get_carbon_dioxide_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_dioxide_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(float));
  }

sl_status_t dotdot_carbon_dioxide_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_carbon_dioxide_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_carbon_dioxide_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_carbon_dioxide_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_carbon_dioxide_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CARBON_DIOXIDE_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_carbon_dioxide_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_carbon_dioxide_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_carbon_dioxide_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_carbon_dioxide_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_carbon_dioxide_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_carbon_dioxide_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster PM25
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_pm25_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_pm25_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pm25_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_pm25_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pm25_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pm25_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pm25_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pm25_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PM25_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pm25_min_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_pm25_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pm25_min_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_pm25_min_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pm25_min_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pm25_min_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pm25_min_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pm25_min_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PM25_MIN_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pm25_max_measured_value(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);
  return attribute_store_node_exists(node);
}

float dotdot_get_pm25_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pm25_max_measured_value(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(float));
  }

sl_status_t dotdot_pm25_max_measured_value_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pm25_max_measured_value_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pm25_max_measured_value_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pm25_max_measured_value_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pm25_max_measured_value(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PM25_MAX_MEASURED_VALUE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_pm25_tolerance(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);
  return attribute_store_node_exists(node);
}

float dotdot_get_pm25_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);

  float result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pm25_tolerance(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  float new_tolerance
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(float));
  }

sl_status_t dotdot_pm25_tolerance_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_pm25_tolerance_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_pm25_tolerance_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_pm25_tolerance_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_pm25_tolerance(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PM25_TOLERANCE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_pm25_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_pm25_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pm25_min_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pm25_max_measured_value(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_pm25_tolerance(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_pm25_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster IASZone
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ias_zone_zone_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ias_zone_zone_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zone_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zone_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zone_state,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ias_zone_zone_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_zone_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_zone_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_zone_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_zone_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ias_zone_zone_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  return attribute_store_node_exists(node);
}

IasZoneType dotdot_get_ias_zone_zone_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);

  IasZoneType result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zone_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  IasZoneType new_zone_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zone_type,
                                                  sizeof(IasZoneType));
  }

sl_status_t dotdot_ias_zone_zone_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_zone_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_zone_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_zone_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_zone_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ias_zone_zone_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_ias_zone_zone_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zone_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_zone_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zone_status,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_ias_zone_zone_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_zone_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_zone_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_zone_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_zone_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ias_zone_iascie_address(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  return attribute_store_node_exists(node);
}

EUI64 dotdot_get_ias_zone_iascie_address(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);

  EUI64 result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_iascie_address(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  EUI64 new_iascie_address
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_iascie_address,
                                                  sizeof(EUI64));
  }

sl_status_t dotdot_ias_zone_iascie_address_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_iascie_address_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_iascie_address_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_iascie_address_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_iascie_address(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ias_zone_zoneid(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ias_zone_zoneid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zoneid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zoneid
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zoneid,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ias_zone_zoneid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_zoneid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_zoneid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_zoneid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_zoneid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_zone_sensitivity_levels_supported
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_zone_sensitivity_levels_supported,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_number_of_zone_sensitivity_levels_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_zone_sensitivity_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_zone_sensitivity_level,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_ias_zone_current_zone_sensitivity_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_ias_zone_current_zone_sensitivity_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_ias_zone_current_zone_sensitivity_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_ias_zone_current_zone_sensitivity_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_ias_zone_current_zone_sensitivity_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_ias_zone_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_ias_zone_zone_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_zone_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_zone_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_iascie_address(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_zoneid(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_number_of_zone_sensitivity_levels_supported(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_current_zone_sensitivity_level(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_ias_zone_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_ias_zone_iascie_address(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_ias_zone_current_zone_sensitivity_level(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster IASWD
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_iaswd_max_duration(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_iaswd_max_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_iaswd_max_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_duration
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_duration,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_iaswd_max_duration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_iaswd_max_duration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_iaswd_max_duration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_iaswd_max_duration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_iaswd_max_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_iaswd_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_iaswd_max_duration(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_iaswd_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_iaswd_max_duration(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Metering
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_metering_current_summation_delivered(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_metering_current_summation_delivered(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_summation_delivered(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_summation_delivered
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_summation_delivered,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_metering_current_summation_delivered_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_summation_delivered_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_summation_delivered_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_summation_delivered_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_summation_delivered(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_summation_received(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_metering_current_summation_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_summation_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_summation_received
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_summation_received,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_metering_current_summation_received_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_summation_received_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_summation_received_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_summation_received_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_summation_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_max_demand_delivered(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_metering_current_max_demand_delivered(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_delivered(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_max_demand_delivered
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_delivered,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_metering_current_max_demand_delivered_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_max_demand_delivered_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_max_demand_delivered_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_max_demand_delivered_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_max_demand_delivered(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_max_demand_received(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_metering_current_max_demand_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_current_max_demand_received
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_received,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_metering_current_max_demand_received_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_max_demand_received_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_max_demand_received_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_max_demand_received_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_max_demand_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_power_factor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_metering_power_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_power_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_metering_power_factor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_power_factor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_power_factor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_power_factor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_power_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_reading_snap_shot_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_metering_reading_snap_shot_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_reading_snap_shot_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_reading_snap_shot_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reading_snap_shot_time,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_metering_reading_snap_shot_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_reading_snap_shot_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_reading_snap_shot_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_reading_snap_shot_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_reading_snap_shot_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_current_max_demand_delivered_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_delivered_time,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_metering_current_max_demand_delivered_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_max_demand_delivered_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_max_demand_delivered_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_max_demand_delivered_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_max_demand_delivered_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_max_demand_received_time(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  return attribute_store_node_exists(node);
}

UTC dotdot_get_metering_current_max_demand_received_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);

  UTC result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_received_time(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  UTC new_current_max_demand_received_time
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_received_time,
                                                  sizeof(UTC));
  }

sl_status_t dotdot_metering_current_max_demand_received_time_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_max_demand_received_time_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_max_demand_received_time_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_max_demand_received_time_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_max_demand_received_time(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_default_update_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_default_update_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_default_update_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_default_update_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_default_update_period,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_default_update_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_default_update_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_default_update_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_default_update_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_default_update_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_supply_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_supply_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_supply_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_supply_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supply_status,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_supply_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_supply_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_supply_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_supply_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_supply_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_inlet_energy_carrier_summation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_inlet_energy_carrier_summation,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_metering_current_inlet_energy_carrier_summation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_inlet_energy_carrier_summation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_inlet_energy_carrier_summation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_inlet_energy_carrier_summation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_inlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_outlet_energy_carrier_summation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_outlet_energy_carrier_summation,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_metering_current_outlet_energy_carrier_summation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_current_outlet_energy_carrier_summation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_current_outlet_energy_carrier_summation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_current_outlet_energy_carrier_summation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_current_outlet_energy_carrier_summation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_inlet_temperature(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_metering_inlet_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_inlet_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_inlet_temperature
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_inlet_temperature,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_metering_inlet_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_inlet_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_inlet_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_inlet_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_inlet_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_outlet_temperature(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_metering_outlet_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_outlet_temperature(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_outlet_temperature
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_outlet_temperature,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_metering_outlet_temperature_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_outlet_temperature_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_outlet_temperature_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_outlet_temperature_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_outlet_temperature(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_unitof_measure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_unitof_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_unitof_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unitof_measure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unitof_measure,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_unitof_measure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_unitof_measure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_unitof_measure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_unitof_measure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_unitof_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_metering_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_multiplier,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_metering_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_metering_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_divisor,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_metering_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_summation_formatting(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_summation_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_summation_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_summation_formatting
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_summation_formatting,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_summation_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_summation_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_summation_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_summation_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_summation_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_demand_formatting(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_demand_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_demand_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_demand_formatting
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_demand_formatting,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_demand_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_demand_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_demand_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_demand_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_demand_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_historical_consumption_formatting(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_historical_consumption_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_historical_consumption_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_historical_consumption_formatting
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_historical_consumption_formatting,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_historical_consumption_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_historical_consumption_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_historical_consumption_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_historical_consumption_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_historical_consumption_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_metering_device_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_metering_device_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_metering_device_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_metering_device_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_metering_device_type,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_metering_device_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_metering_device_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_metering_device_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_metering_device_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_metering_device_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_unit_of_measure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_energy_carrier_unit_of_measure,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_energy_carrier_unit_of_measure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_energy_carrier_unit_of_measure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_energy_carrier_unit_of_measure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_energy_carrier_unit_of_measure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_energy_carrier_unit_of_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_summation_formatting
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_energy_carrier_summation_formatting,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_energy_carrier_summation_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_energy_carrier_summation_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_energy_carrier_summation_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_energy_carrier_summation_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_energy_carrier_summation_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_demand_formatting
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_energy_carrier_demand_formatting,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_energy_carrier_demand_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_energy_carrier_demand_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_energy_carrier_demand_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_energy_carrier_demand_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_energy_carrier_demand_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_unit_of_measure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_unit_of_measure,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_temperature_unit_of_measure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_temperature_unit_of_measure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_temperature_unit_of_measure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_temperature_unit_of_measure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_temperature_unit_of_measure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_metering_temperature_formatting(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_metering_temperature_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_temperature_formatting(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_formatting
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_formatting,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_metering_temperature_formatting_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_metering_temperature_formatting_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_metering_temperature_formatting_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_metering_temperature_formatting_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_metering_temperature_formatting(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_metering_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_metering_current_summation_delivered(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_summation_received(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_max_demand_delivered(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_max_demand_received(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_power_factor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_reading_snap_shot_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_max_demand_delivered_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_max_demand_received_time(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_default_update_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_supply_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_inlet_energy_carrier_summation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_current_outlet_energy_carrier_summation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_inlet_temperature(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_outlet_temperature(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_unitof_measure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_summation_formatting(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_demand_formatting(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_historical_consumption_formatting(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_metering_device_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_energy_carrier_unit_of_measure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_energy_carrier_summation_formatting(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_energy_carrier_demand_formatting(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_temperature_unit_of_measure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_metering_temperature_formatting(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_metering_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ElectricalMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_electrical_measurement_measurement_type(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_electrical_measurement_measurement_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measurement_type(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_measurement_type
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measurement_type,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_electrical_measurement_measurement_type_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measurement_type_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measurement_type_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measurement_type_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measurement_type(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_min,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_voltage_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_voltage_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_voltage_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_voltage_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_voltage_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_max,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_voltage_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_voltage_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_voltage_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_voltage_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_voltage_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_min,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_current_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_current_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_current_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_current_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_current_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_max,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_current_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_current_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_current_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_current_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_current_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_min,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_power_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_power_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_power_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_power_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_power_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_max,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_power_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_power_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_power_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_power_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_power_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_voltage_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_voltage_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_voltage_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_voltage_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_voltage_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_voltage_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_voltage_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_voltage_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_voltage_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_voltage_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_voltage_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_voltage_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_current_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_current_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_current_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_current_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_current_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_current_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_current_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_power_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_power_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_power_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_power_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_power_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_power_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_power_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_power_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_power_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_power_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_frequency_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_frequency_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_frequency_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_frequency_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_frequency(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_min,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_frequency_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_frequency_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_frequency_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_frequency_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_frequency_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_max,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_frequency_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_frequency_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_frequency_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_frequency_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_frequency_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_neutral_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_neutral_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_neutral_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neutral_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neutral_current,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_neutral_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_neutral_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_neutral_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_neutral_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_neutral_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_total_active_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_electrical_measurement_total_active_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_total_active_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_total_active_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_total_active_power,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_electrical_measurement_total_active_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_total_active_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_total_active_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_total_active_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_total_active_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_total_reactive_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_total_reactive_power,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_electrical_measurement_total_reactive_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_total_reactive_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_total_reactive_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_total_reactive_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_total_reactive_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_total_apparent_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_total_apparent_power,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_electrical_measurement_total_apparent_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_total_apparent_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_total_apparent_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_total_apparent_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_total_apparent_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured1st_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured1st_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured1st_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured1st_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured1st_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured1st_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured1st_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured3rd_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured3rd_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured3rd_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured3rd_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured3rd_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured3rd_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured3rd_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured5th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured5th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured5th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured5th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured5th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured5th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured5th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured7th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured7th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured7th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured7th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured7th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured7th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured7th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured9th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured9th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured9th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured9th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured9th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured9th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured9th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured11th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured11th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured11th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured11th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured11th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured11th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured11th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase1st_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase1st_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured_phase1st_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured_phase1st_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured_phase1st_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured_phase1st_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured_phase1st_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase3rd_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase3rd_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured_phase3rd_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured_phase3rd_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured_phase3rd_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured_phase3rd_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured_phase3rd_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase5th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase5th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured_phase5th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured_phase5th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured_phase5th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured_phase5th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured_phase5th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase7th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase7th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured_phase7th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured_phase7th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured_phase7th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured_phase7th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured_phase7th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase9th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase9th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured_phase9th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured_phase9th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured_phase9th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured_phase9th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured_phase9th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase11th_harmonic_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase11th_harmonic_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_measured_phase11th_harmonic_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_measured_phase11th_harmonic_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_measured_phase11th_harmonic_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_measured_phase11th_harmonic_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_measured_phase11th_harmonic_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_frequency_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_frequency_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_frequency_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_frequency_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_frequency_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_frequency_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_frequency_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_frequency_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_frequency_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_frequency_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_multiplier,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_electrical_measurement_power_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_power_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_power_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_power_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_power_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_electrical_measurement_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_divisor,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_electrical_measurement_power_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_power_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_power_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_power_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_harmonic_current_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_harmonic_current_multiplier,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_electrical_measurement_harmonic_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_harmonic_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_harmonic_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_harmonic_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_phase_harmonic_current_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_phase_harmonic_current_multiplier,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_electrical_measurement_phase_harmonic_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_phase_harmonic_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_phase_harmonic_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_phase_harmonic_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_phase_harmonic_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_line_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_line_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_line_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_line_current,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_line_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_line_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_line_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_line_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_line_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_reactive_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_reactive_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_current,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_reactive_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_reactive_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_reactive_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_reactive_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_reactive_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_min,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_max,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_min,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_max,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_min,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_max,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_reactive_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_reactive_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_power,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_reactive_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_reactive_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_reactive_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_reactive_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_reactive_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_apparent_power(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_apparent_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_apparent_power(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apparent_power,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_apparent_power_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_apparent_power_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_apparent_power_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_apparent_power_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_apparent_power(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_power_factor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_electrical_measurement_power_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_factor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_electrical_measurement_power_factor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_power_factor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_power_factor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_power_factor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_power_factor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_voltage_measurement_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_voltage_measurement_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_voltage_measurement_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_over_voltage_counter
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_over_voltage_counter,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_over_voltage_counter_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_over_voltage_counter_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage_counter(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_under_voltage_counter
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_under_voltage_counter,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_under_voltage_counter_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_under_voltage_counter_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage_counter(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_sag_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_sag_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell_period,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_swell_period_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_swell_period_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell_period(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_voltage_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_voltage_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_voltage_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_voltage_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_voltage_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_voltage_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_voltage_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_voltage_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_voltage_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_voltage_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_voltage_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_voltage_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_voltage_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_voltage_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_current_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_current_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_current_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_current_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_current_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_current_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_current_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_current_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_current_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_current_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_current_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_current_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_current_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_current_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_power_multiplier
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_power_multiplier,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_power_multiplier_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_power_multiplier_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_power_multiplier_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_power_multiplier_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_power_multiplier(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_power_divisor
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_power_divisor,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_power_divisor_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_power_divisor_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_power_divisor_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_power_divisor_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_power_divisor(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dc_overload_alarms_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_overload_alarms_mask,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_electrical_measurement_dc_overload_alarms_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_overload_alarms_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_overload_alarms_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_overload_alarms_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_overload_alarms_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_overload
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_overload,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_voltage_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_voltage_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_voltage_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_voltage_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_voltage_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_overload
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_overload,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_dc_current_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_dc_current_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_dc_current_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_dc_current_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_dc_current_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_alarms_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_alarms_mask,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_alarms_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_alarms_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_alarms_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_alarms_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_alarms_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_voltage_overload
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_voltage_overload,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_voltage_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_voltage_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_voltage_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_voltage_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_voltage_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_current_overload
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_current_overload,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_current_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_current_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_current_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_current_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_current_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_active_power_overload
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_active_power_overload,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_active_power_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_active_power_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_active_power_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_active_power_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_active_power_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_reactive_power_overload
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_reactive_power_overload,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_ac_reactive_power_overload_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_ac_reactive_power_overload_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_ac_reactive_power_overload_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_ac_reactive_power_overload_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_ac_reactive_power_overload(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_average_rms_over_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_over_voltage,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_over_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_over_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_average_rms_under_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_under_voltage,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_under_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_under_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_extreme_over_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_over_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_over_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_extreme_under_voltage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_under_voltage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_under_voltage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_voltage_sag
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_sag_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_sag_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_voltage_swell
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_swell_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_swell_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_line_current_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_line_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_line_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_line_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_line_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_line_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_current_phb,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_current_phb,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_reactive_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_reactive_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_reactive_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_reactive_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_reactive_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_min_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_min_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_min_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_min_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_min_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_max_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_max_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_max_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_max_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_max_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_min_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_min_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_min_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_min_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_min_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_max_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_max_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_max_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_max_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_max_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_phb,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_min_phb,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_min_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_min_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_min_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_min_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_min_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_max_phb,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_max_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_max_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_max_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_max_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_max_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_power_phb,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_reactive_power_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_reactive_power_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_reactive_power_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_reactive_power_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_reactive_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apparent_power_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_apparent_power_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_apparent_power_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_apparent_power_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_apparent_power_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_apparent_power_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor_phb,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_electrical_measurement_power_factor_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_power_factor_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_power_factor_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_power_factor_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_power_factor_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_voltage_measurement_period_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_voltage_measurement_period_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_voltage_measurement_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_over_voltage_counter_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_over_voltage_counter_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage_counter_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_under_voltage_counter_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_under_voltage_counter_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage_counter_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage_period_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage_period_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag_period_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_sag_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_sag_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period_phb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell_period_phb,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_swell_period_phb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_swell_period_phb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell_period_phb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_line_current_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_line_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_line_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_line_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_line_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_line_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_current_phc,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_current_phc,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_reactive_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_reactive_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_reactive_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_reactive_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_reactive_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_min_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_min_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_min_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_min_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_min_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_max_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_max_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_max_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_max_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_max_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_min_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_min_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_min_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_min_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_min_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_max_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_current_max_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_current_max_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_current_max_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_current_max_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_current_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_phc,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_min_phc,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_min_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_min_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_min_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_min_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_min_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_max_phc,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_active_power_max_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_active_power_max_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_active_power_max_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_active_power_max_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_active_power_max_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  return attribute_store_node_exists(node);
}

int16_t dotdot_get_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);

  int16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_power_phc,
                                                  sizeof(int16_t));
  }

sl_status_t dotdot_electrical_measurement_reactive_power_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_reactive_power_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_reactive_power_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_reactive_power_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_reactive_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apparent_power_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_apparent_power_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_apparent_power_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_apparent_power_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_apparent_power_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_apparent_power_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor_phc,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_electrical_measurement_power_factor_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_power_factor_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_power_factor_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_power_factor_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_power_factor_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_voltage_measurement_period_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_voltage_measurement_period_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_voltage_measurement_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_voltage_measurement_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_over_voltage_counter_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_over_voltage_counter_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_over_voltage_counter_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_over_voltage_counter_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_OVER_VOLTAGE_COUNTER_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_rms_under_voltage_counter_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_rms_under_voltage_counter_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_average_rms_under_voltage_counter_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_average_rms_under_voltage_counter_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGE_RMS_UNDER_VOLTAGE_COUNTER_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage_period_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage_period_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag_period_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_sag_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_sag_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_sag_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_sag_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period_phc
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell_period_phc,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phc_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_electrical_measurement_rms_voltage_swell_period_phc_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_electrical_measurement_rms_voltage_swell_period_phc_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_electrical_measurement_rms_voltage_swell_period_phc_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_electrical_measurement_rms_voltage_swell_period_phc(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_electrical_measurement_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_electrical_measurement_measurement_type(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_voltage_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_voltage_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_current_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_current_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_power_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_power_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_voltage_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_voltage_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_current_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_current_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_power_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_power_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_frequency(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_frequency_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_frequency_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_neutral_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_total_active_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_total_reactive_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_total_apparent_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured1st_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured3rd_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured5th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured7th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured9th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured11th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured_phase1st_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured_phase3rd_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured_phase5th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured_phase7th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured_phase9th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_measured_phase11th_harmonic_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_frequency_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_frequency_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_power_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_power_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_harmonic_current_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_phase_harmonic_current_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_line_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_reactive_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_reactive_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_apparent_power(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_power_factor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_voltage_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_voltage_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_current_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_current_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_power_multiplier(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_power_divisor(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_overload_alarms_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_voltage_overload(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_current_overload(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_alarms_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_voltage_overload(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_current_overload(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_active_power_overload(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_reactive_power_overload(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_line_current_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_current_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_reactive_current_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_min_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_max_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_min_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_max_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_min_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_max_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_reactive_power_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_apparent_power_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_power_factor_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_line_current_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_current_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_reactive_current_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_min_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_max_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_min_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_current_max_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_min_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_active_power_max_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_reactive_power_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_apparent_power_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_power_factor_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_electrical_measurement_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell_period(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_dc_overload_alarms_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_ac_alarms_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_voltage_measurement_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_over_voltage_counter_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_average_rms_under_voltage_counter_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Diagnostics
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_diagnostics_number_of_resets(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_number_of_resets(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_number_of_resets(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_resets
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_resets,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_number_of_resets_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_number_of_resets_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_number_of_resets_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_number_of_resets_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_number_of_resets(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_persistent_memory_writes
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_persistent_memory_writes,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_persistent_memory_writes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_persistent_memory_writes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_persistent_memory_writes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_persistent_memory_writes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_persistent_memory_writes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_rx_bcast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_rx_bcast,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_diagnostics_mac_rx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_mac_rx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_mac_rx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_mac_rx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_mac_rx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_tx_bcast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_bcast,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_diagnostics_mac_tx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_mac_tx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_mac_tx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_mac_tx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_mac_tx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_rx_ucast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_rx_ucast,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_diagnostics_mac_rx_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_mac_rx_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_mac_rx_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_mac_rx_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_mac_rx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_tx_ucast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_ucast,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_diagnostics_mac_tx_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_mac_tx_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_mac_tx_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_mac_tx_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_mac_tx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mac_tx_ucast_retry
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_ucast_retry,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_mac_tx_ucast_retry_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_mac_tx_ucast_retry_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_mac_tx_ucast_retry_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_mac_tx_ucast_retry_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_mac_tx_ucast_retry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mac_tx_ucast_fail
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_ucast_fail,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_mac_tx_ucast_fail_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_mac_tx_ucast_fail_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_mac_tx_ucast_fail_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_mac_tx_ucast_fail_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_mac_tx_ucast_fail(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_rx_bcast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_rx_bcast,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_rx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_rx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_rx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_rx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_rx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_bcast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_bcast,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_tx_bcast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_tx_bcast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_tx_bcast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_tx_bcast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_tx_bcast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_rx_ucast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_rx_ucast,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_rx_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_rx_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_rx_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_rx_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_rx_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_success
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_ucast_success,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_tx_ucast_success_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_tx_ucast_success_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_tx_ucast_success_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_tx_ucast_success_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_tx_ucast_success(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_retry
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_ucast_retry,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_tx_ucast_retry_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_tx_ucast_retry_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_tx_ucast_retry_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_tx_ucast_retry_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_tx_ucast_retry(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_fail
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_ucast_fail,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_tx_ucast_fail_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_tx_ucast_fail_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_tx_ucast_fail_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_tx_ucast_fail_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_tx_ucast_fail(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_route_disc_initiated
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_route_disc_initiated,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_route_disc_initiated_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_route_disc_initiated_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_route_disc_initiated_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_route_disc_initiated_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_route_disc_initiated(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_neighbor_added(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_neighbor_added(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_neighbor_added(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_added
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neighbor_added,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_neighbor_added_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_neighbor_added_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_neighbor_added_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_neighbor_added_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_neighbor_added(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_neighbor_removed(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_neighbor_removed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_neighbor_removed(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_removed
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neighbor_removed,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_neighbor_removed_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_neighbor_removed_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_neighbor_removed_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_neighbor_removed_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_neighbor_removed(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_neighbor_stale(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_neighbor_stale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_neighbor_stale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_stale
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neighbor_stale,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_neighbor_stale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_neighbor_stale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_neighbor_stale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_neighbor_stale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_neighbor_stale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_join_indication(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_join_indication(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_join_indication(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_join_indication
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_join_indication,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_join_indication_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_join_indication_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_join_indication_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_join_indication_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_join_indication(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_child_moved(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_child_moved(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_child_moved(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_child_moved
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_child_moved,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_child_moved_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_child_moved_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_child_moved_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_child_moved_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_child_moved(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_nwkfc_failure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_nwkfc_failure,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_nwkfc_failure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_nwkfc_failure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_nwkfc_failure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_nwkfc_failure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_nwkfc_failure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_apsfc_failure(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_apsfc_failure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_apsfc_failure(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apsfc_failure
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apsfc_failure,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_apsfc_failure_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_apsfc_failure_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_apsfc_failure_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_apsfc_failure_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_apsfc_failure(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_unauthorized_key
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_unauthorized_key,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_unauthorized_key_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_unauthorized_key_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_unauthorized_key_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_unauthorized_key_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_unauthorized_key(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_nwk_decrypt_failures
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_nwk_decrypt_failures,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_nwk_decrypt_failures_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_nwk_decrypt_failures_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_nwk_decrypt_failures_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_nwk_decrypt_failures_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_nwk_decrypt_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_decrypt_failures
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_decrypt_failures,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_aps_decrypt_failures_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_aps_decrypt_failures_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_aps_decrypt_failures_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_aps_decrypt_failures_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_aps_decrypt_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_packet_buffer_allocate_failures
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_packet_buffer_allocate_failures,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_packet_buffer_allocate_failures_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_packet_buffer_allocate_failures_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_packet_buffer_allocate_failures_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_packet_buffer_allocate_failures_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_packet_buffer_allocate_failures(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_relayed_ucast(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_relayed_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_relayed_ucast(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_relayed_ucast
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relayed_ucast,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_relayed_ucast_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_relayed_ucast_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_relayed_ucast_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_relayed_ucast_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_relayed_ucast(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_phy_to_mac_queue_limit_reached
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_phy_to_mac_queue_limit_reached,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_phy_to_mac_queue_limit_reached_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_phy_to_mac_queue_limit_reached_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_phy_to_mac_queue_limit_reached_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_phy_to_mac_queue_limit_reached_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_phy_to_mac_queue_limit_reached(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TO_MAC_QUEUE_LIMIT_REACHED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_packet_validate_drop_count
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_packet_validate_drop_count,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_packet_validate_drop_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_packet_validate_drop_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_packet_validate_drop_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_packet_validate_drop_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_packet_validate_drop_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_average_mac_retry_per_aps_message_sent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_mac_retry_per_aps_message_sent,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_diagnostics_average_mac_retry_per_aps_message_sent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_average_mac_retry_per_aps_message_sent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_average_mac_retry_per_aps_message_sent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_average_mac_retry_per_aps_message_sent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_average_mac_retry_per_aps_message_sent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGE_MAC_RETRY_PER_APS_MESSAGE_SENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_last_messagelqi(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_diagnostics_last_messagelqi(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_last_messagelqi(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_last_messagelqi
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_messagelqi,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_diagnostics_last_messagelqi_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_last_messagelqi_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_last_messagelqi_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_last_messagelqi_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_last_messagelqi(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_diagnostics_last_messagerssi(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_diagnostics_last_messagerssi(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_last_messagerssi(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_last_messagerssi
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_messagerssi,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_diagnostics_last_messagerssi_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_diagnostics_last_messagerssi_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_diagnostics_last_messagerssi_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_diagnostics_last_messagerssi_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_diagnostics_last_messagerssi(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_diagnostics_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_diagnostics_number_of_resets(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_persistent_memory_writes(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_mac_rx_bcast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_mac_tx_bcast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_mac_rx_ucast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_mac_tx_ucast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_mac_tx_ucast_retry(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_mac_tx_ucast_fail(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_rx_bcast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_tx_bcast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_rx_ucast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_tx_ucast_success(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_tx_ucast_retry(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_tx_ucast_fail(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_route_disc_initiated(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_neighbor_added(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_neighbor_removed(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_neighbor_stale(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_join_indication(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_child_moved(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_nwkfc_failure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_apsfc_failure(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_unauthorized_key(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_nwk_decrypt_failures(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_aps_decrypt_failures(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_packet_buffer_allocate_failures(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_relayed_ucast(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_phy_to_mac_queue_limit_reached(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_packet_validate_drop_count(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_average_mac_retry_per_aps_message_sent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_last_messagelqi(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_diagnostics_last_messagerssi(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_diagnostics_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ProtocolController-RFTelemetry
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_tx_report_enabled
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tx_report_enabled,
                                                  sizeof(bool));
  }

sl_status_t dotdot_protocol_controller_rf_telemetry_tx_report_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_protocol_controller_rf_telemetry_tx_report_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_protocol_controller_rf_telemetry_tx_report_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_protocol_controller_rf_telemetry_tx_report_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_protocol_controller_rf_telemetry_tx_report_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_pti_enabled
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pti_enabled,
                                                  sizeof(bool));
  }

sl_status_t dotdot_protocol_controller_rf_telemetry_pti_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_protocol_controller_rf_telemetry_pti_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_protocol_controller_rf_telemetry_pti_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_protocol_controller_rf_telemetry_pti_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_protocol_controller_rf_telemetry_pti_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_protocol_controller_rf_telemetry_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_protocol_controller_rf_telemetry_tx_report_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_protocol_controller_rf_telemetry_pti_enabled(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_protocol_controller_rf_telemetry_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_protocol_controller_rf_telemetry_tx_report_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_protocol_controller_rf_telemetry_pti_enabled(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster State
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_state_endpoint_id_list(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_state_endpoint_id_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_state_endpoint_id_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_endpoint_id_list_count,
  const uint8_t* new_endpoint_id_list
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);

  // Skip attribute EndpointIdList because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of EndpointIdList, Attribute %d, "
                        "because it is a complicated type (array: uint8). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_state_endpoint_id_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_state_endpoint_id_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_state_endpoint_id_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_state_endpoint_id_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_state_endpoint_id_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_state_network_status(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);
  return attribute_store_node_exists(node);
}

NodeStateNetworkStatus dotdot_get_state_network_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);

  NodeStateNetworkStatus result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_state_network_status(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  NodeStateNetworkStatus new_network_status
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_network_status,
                                                  sizeof(NodeStateNetworkStatus));
  }

sl_status_t dotdot_state_network_status_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_state_network_status_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_state_network_status_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_state_network_status_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_state_network_status(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_STATUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_state_security(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);
  return attribute_store_node_exists(node);
}

NodeStateSecurity dotdot_get_state_security(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);

  NodeStateSecurity result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_state_security(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  NodeStateSecurity new_security
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_security,
                                                  sizeof(NodeStateSecurity));
  }

sl_status_t dotdot_state_security_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_state_security_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_state_security_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_state_security_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_state_security(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_STATE_SECURITY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_state_maximum_command_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_state_maximum_command_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_state_maximum_command_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_maximum_command_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_maximum_command_delay,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_state_maximum_command_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_state_maximum_command_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_state_maximum_command_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_state_maximum_command_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_state_maximum_command_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_STATE_MAXIMUM_COMMAND_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_state_network_list(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_state_network_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_state_network_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_network_list_count,
  const char** new_network_list
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);

  // Skip attribute NetworkList because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of NetworkList, Attribute %d, "
                        "because it is a complicated type (array: string). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_state_network_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_state_network_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_state_network_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_state_network_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_state_network_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_STATE_NETWORK_LIST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_state_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_state_endpoint_id_list(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_state_network_status(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_state_security(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_state_maximum_command_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_state_network_list(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_state_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Binding
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_binding_binding_table_full(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  return attribute_store_node_exists(node);
}

bool dotdot_get_binding_binding_table_full(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_binding_binding_table_full(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_binding_table_full
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_binding_table_full,
                                                  sizeof(bool));
  }

sl_status_t dotdot_binding_binding_table_full_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_binding_binding_table_full_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_binding_binding_table_full_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_binding_binding_table_full_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_binding_binding_table_full(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_binding_bindable_cluster_list(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_binding_bindable_cluster_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_binding_bindable_cluster_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_bindable_cluster_list_count,
  const char** new_bindable_cluster_list
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);

  // Skip attribute BindableClusterList because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of BindableClusterList, Attribute %d, "
                        "because it is a complicated type (array: string). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_binding_bindable_cluster_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_binding_bindable_cluster_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_binding_bindable_cluster_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_binding_bindable_cluster_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_binding_bindable_cluster_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_binding_binding_table(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  return attribute_store_node_exists(node);
}

BindingObject dotdot_get_binding_binding_table(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);

  BindingObject result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_binding_binding_table(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_binding_table_count,
  const BindingObject* new_binding_table
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);

  // Skip attribute BindingTable because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of BindingTable, Attribute %d, "
                        "because it is a complicated type (array: BindingObject). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_binding_binding_table_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_binding_binding_table_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_binding_binding_table_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_binding_binding_table_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_binding_binding_table(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_binding_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_binding_binding_table_full(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_binding_bindable_cluster_list(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_binding_binding_table(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_binding_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster SystemMetrics
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_reporting_interval_seconds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reporting_interval_seconds,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_system_metrics_reporting_interval_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_reporting_interval_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_reporting_interval_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_reporting_interval_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_usage_percent_count,
  const double* new_cpu_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);

  // Skip attribute CPUUsagePercent because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of CPUUsagePercent, Attribute %d, "
                        "because it is a complicated type (array: double). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_cpu_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_cpu_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_cpu_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_frequencym_hz_count,
  const double* new_cpu_frequencym_hz
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);

  // Skip attribute CPUFrequencyMHz because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of CPUFrequencyMHz, Attribute %d, "
                        "because it is a complicated type (array: double). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_frequencym_hz_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_frequencym_hz_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_cpu_frequencym_hz_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_cpu_frequencym_hz_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_cpu_frequencym_hz(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_average_usage_percent_count,
  const double* new_cpu_average_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);

  // Skip attribute CPUAverageUsagePercent because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of CPUAverageUsagePercent, Attribute %d, "
                        "because it is a complicated type (array: double). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_average_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_average_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_cpu_average_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_cpu_average_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_min_usage_percent_count,
  const double* new_cpu_min_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);

  // Skip attribute CPUMinUsagePercent because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of CPUMinUsagePercent, Attribute %d, "
                        "because it is a complicated type (array: double). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_min_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_min_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_cpu_min_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_cpu_min_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_cpu_max_usage_percent_count,
  const double* new_cpu_max_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);

  // Skip attribute CPUMaxUsagePercent because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of CPUMaxUsagePercent, Attribute %d, "
                        "because it is a complicated type (array: double). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_max_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_cpu_max_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_cpu_max_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_cpu_max_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_ram_totalmb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_ram_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_ram_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_ram_totalmb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ram_totalmb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_ram_totalmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_ram_totalmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_ram_totalmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_ram_totalmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_ram_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_ram_freemb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_ram_freemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_ram_freemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_ram_freemb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ram_freemb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_ram_freemb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_ram_freemb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_ram_freemb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_ram_freemb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_ram_freemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_ram_availablemb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_ram_availablemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_ram_availablemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_ram_availablemb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ram_availablemb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_ram_availablemb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_ram_availablemb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_ram_availablemb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_ram_availablemb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_ram_availablemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_swap_memory_totalmb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_swap_memory_totalmb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_swap_memory_totalmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_swap_memory_totalmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_swap_memory_totalmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_swap_memory_totalmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_swap_memory_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_swap_memory_usedmb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_swap_memory_usedmb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_swap_memory_usedmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_swap_memory_usedmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_swap_memory_usedmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_swap_memory_usedmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_swap_memory_usedmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_virtual_memory_totalmb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_virtual_memory_totalmb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_virtual_memory_totalmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_virtual_memory_totalmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_virtual_memory_totalmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_virtual_memory_totalmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_virtual_memory_totalmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_virtual_memory_usedmb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_virtual_memory_usedmb,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_virtual_memory_usedmb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_virtual_memory_usedmb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_virtual_memory_usedmb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_virtual_memory_usedmb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_virtual_memory_usedmb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_disks_usage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  return attribute_store_node_exists(node);
}

DiskUsageData dotdot_get_system_metrics_disks_usage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);

  DiskUsageData result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_disks_usage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_disks_usage_count,
  const DiskUsageData* new_disks_usage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);

  // Skip attribute DisksUsage because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of DisksUsage, Attribute %d, "
                        "because it is a complicated type (array: DiskUsageData). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_disks_usage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_disks_usage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_disks_usage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_disks_usage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_disks_usage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_disks_counters(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  return attribute_store_node_exists(node);
}

DiskIOCounters dotdot_get_system_metrics_disks_counters(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);

  DiskIOCounters result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_disks_counters(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_disks_counters_count,
  const DiskIOCounters* new_disks_counters
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);

  // Skip attribute DisksCounters because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of DisksCounters, Attribute %d, "
                        "because it is a complicated type (array: DiskIOCounters). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_disks_counters_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_disks_counters_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_disks_counters_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_disks_counters_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_disks_counters(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  return attribute_store_node_exists(node);
}

NetworkInterfaceData dotdot_get_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);

  NetworkInterfaceData result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_network_interfaces_data_count,
  const NetworkInterfaceData* new_network_interfaces_data
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);

  // Skip attribute NetworkInterfacesData because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of NetworkInterfacesData, Attribute %d, "
                        "because it is a complicated type (array: NetworkInterfaceData). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_network_interfaces_data_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_network_interfaces_data_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_network_interfaces_data_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_network_interfaces_data_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_network_interfaces_data(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  return attribute_store_node_exists(node);
}

WirelessNetworkInterfaceData dotdot_get_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);

  WirelessNetworkInterfaceData result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_wireless_network_interfaces_data_count,
  const WirelessNetworkInterfaceData* new_wireless_network_interfaces_data
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);

  // Skip attribute WirelessNetworkInterfacesData because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of WirelessNetworkInterfacesData, Attribute %d, "
                        "because it is a complicated type (array: WirelessNetworkInterfaceData). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_wireless_network_interfaces_data_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_wireless_network_interfaces_data_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_wireless_network_interfaces_data_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_wireless_network_interfaces_data_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_wireless_network_interfaces_data(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_hostname(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_system_metrics_hostname(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_system_metrics_hostname(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_hostname
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_hostname);
  } else {
    return attribute_store_set_desired_string(node, new_hostname);
  }
}

sl_status_t dotdot_system_metrics_hostname_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_hostname_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_hostname_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_hostname_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_hostname(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_fqdn(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_system_metrics_fqdn(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_system_metrics_fqdn(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_fqdn
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_fqdn);
  } else {
    return attribute_store_set_desired_string(node, new_fqdn);
  }
}

sl_status_t dotdot_system_metrics_fqdn_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_fqdn_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_fqdn_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_fqdn_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_fqdn(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_uptime_minutes(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_system_metrics_uptime_minutes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_uptime_minutes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_uptime_minutes
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_uptime_minutes,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_system_metrics_uptime_minutes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_uptime_minutes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_uptime_minutes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_uptime_minutes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_uptime_minutes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_current_temperature_celcius
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_temperature_celcius,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_current_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_current_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_current_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_current_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_current_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_average_temperature_celcius
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_temperature_celcius,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_average_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_average_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_average_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_average_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_average_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_min_temperature_celcius
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_temperature_celcius,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_min_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_min_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_min_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_min_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_min_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_max_temperature_celcius
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_temperature_celcius,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_max_temperature_celcius_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_max_temperature_celcius_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_max_temperature_celcius_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_max_temperature_celcius_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_max_temperature_celcius(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_power_plugged(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_system_metrics_power_plugged(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_power_plugged(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_power_plugged
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_plugged,
                                                  sizeof(bool));
  }

sl_status_t dotdot_system_metrics_power_plugged_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_power_plugged_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_power_plugged_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_power_plugged_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_power_plugged(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_battery_percentage(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  return attribute_store_node_exists(node);
}

double dotdot_get_system_metrics_battery_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_battery_percentage(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_battery_percentage
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage,
                                                  sizeof(double));
  }

sl_status_t dotdot_system_metrics_battery_percentage_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_battery_percentage_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_battery_percentage_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_battery_percentage_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_battery_percentage(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_system_metrics_system_interrupts(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_system_metrics_system_interrupts(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_system_interrupts(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_system_interrupts
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_system_interrupts,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_system_metrics_system_interrupts_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_system_metrics_system_interrupts_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_system_metrics_system_interrupts_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_system_metrics_system_interrupts_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_system_metrics_system_interrupts(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_system_metrics_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_system_metrics_reporting_interval_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_cpu_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_cpu_frequencym_hz(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_cpu_average_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_cpu_min_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_cpu_max_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_ram_totalmb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_ram_freemb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_ram_availablemb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_swap_memory_totalmb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_swap_memory_usedmb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_virtual_memory_totalmb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_virtual_memory_usedmb(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_disks_usage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_disks_counters(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_network_interfaces_data(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_wireless_network_interfaces_data(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_hostname(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_fqdn(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_uptime_minutes(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_current_temperature_celcius(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_average_temperature_celcius(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_min_temperature_celcius(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_max_temperature_celcius(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_power_plugged(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_battery_percentage(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_system_metrics_system_interrupts(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_system_metrics_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_system_metrics_reporting_interval_seconds(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ApplicationMonitoring
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_application_monitoring_application_name(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_application_monitoring_application_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_application_monitoring_application_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_application_name
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_application_name);
  } else {
    return attribute_store_set_desired_string(node, new_application_name);
  }
}

sl_status_t dotdot_application_monitoring_application_name_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_name_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_name_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_name_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_version(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_application_monitoring_application_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_application_monitoring_application_version(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_application_version
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_application_version);
  } else {
    return attribute_store_set_desired_string(node, new_application_version);
  }
}

sl_status_t dotdot_application_monitoring_application_version_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_version_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_version_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_version_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_version(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_connected(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_application_monitoring_application_connected(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_connected(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_application_connected
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_connected,
                                                  sizeof(bool));
  }

sl_status_t dotdot_application_monitoring_application_connected_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_connected_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_connected_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_connected_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_connected(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_application_mqtt_topics_count,
  const char** new_application_mqtt_topics
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);

  // Skip attribute ApplicationMQTTTopics because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of ApplicationMQTTTopics, Attribute %d, "
                        "because it is a complicated type (array: string). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_mqtt_topics_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_mqtt_topics_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_mqtt_topics_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_mqtt_topics_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_mqtt_topics(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_MQTT_TOPICS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_uptime_minutes
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_uptime_minutes,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_application_monitoring_uptime_minutes_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_uptime_minutes_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_uptime_minutes_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_uptime_minutes_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_uptime_minutes(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_process_id(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_application_monitoring_process_id(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_process_id(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_process_id
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_process_id,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_application_monitoring_process_id_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_process_id_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_process_id_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_process_id_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_process_id(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_hostname(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_application_monitoring_hostname(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_application_monitoring_hostname(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_hostname
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_hostname);
  } else {
    return attribute_store_set_desired_string(node, new_hostname);
  }
}

sl_status_t dotdot_application_monitoring_hostname_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_hostname_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_hostname_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_hostname_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_hostname(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_fqdn(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_application_monitoring_fqdn(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_application_monitoring_fqdn(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_fqdn
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_fqdn);
  } else {
    return attribute_store_set_desired_string(node, new_fqdn);
  }
}

sl_status_t dotdot_application_monitoring_fqdn_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_fqdn_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_fqdn_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_fqdn_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_fqdn(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  return attribute_store_node_exists(node);
}

bool dotdot_get_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_mqtt_logging_enabled
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_logging_enabled,
                                                  sizeof(bool));
  }

sl_status_t dotdot_application_monitoring_mqtt_logging_enabled_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_logging_enabled_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_logging_enabled_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_logging_enabled_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_logging_enabled(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  return attribute_store_node_exists(node);
}

LoggingLevelEnum dotdot_get_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);

  LoggingLevelEnum result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  LoggingLevelEnum new_mqtt_logging_level
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_logging_level,
                                                  sizeof(LoggingLevelEnum));
  }

sl_status_t dotdot_application_monitoring_mqtt_logging_level_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_logging_level_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_logging_level_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_logging_level_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_logging_level(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mqtt_statistics_reporting_interval_seconds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_statistics_reporting_interval_seconds,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_messages_sent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_messages_sent,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_application_monitoring_mqtt_messages_sent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_messages_sent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_messages_sent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_messages_sent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_messages_sent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_messages_received
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_messages_received,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_application_monitoring_mqtt_messages_received_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_messages_received_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_messages_received_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_messages_received_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_messages_received(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  return attribute_store_node_exists(node);
}

uint64_t dotdot_get_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);

  uint64_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_subscription_count
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_subscription_count,
                                                  sizeof(uint64_t));
  }

sl_status_t dotdot_application_monitoring_mqtt_subscription_count_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_subscription_count_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_subscription_count_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_subscription_count_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_subscription_count(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_average_delivery_time_seconds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_average_delivery_time_seconds,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_mqtt_average_delivery_time_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_average_delivery_time_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_average_delivery_time_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_average_delivery_time_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_average_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_min_delivery_time_seconds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_min_delivery_time_seconds,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_mqtt_min_delivery_time_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_min_delivery_time_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_min_delivery_time_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_min_delivery_time_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_min_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_max_delivery_time_seconds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_max_delivery_time_seconds,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_mqtt_max_delivery_time_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_mqtt_max_delivery_time_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_mqtt_max_delivery_time_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_mqtt_max_delivery_time_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_mqtt_max_delivery_time_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_node_exists(node);
}

uint32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);

  uint32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint32_t new_application_statistics_reporting_interval_seconds
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_statistics_reporting_interval_seconds,
                                                  sizeof(uint32_t));
  }

sl_status_t dotdot_application_monitoring_application_statistics_reporting_interval_seconds_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_statistics_reporting_interval_seconds_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_statistics_reporting_interval_seconds_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_statistics_reporting_interval_seconds_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_statistics_reporting_interval_seconds(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_cpu_usage_percent,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_application_cpu_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_cpu_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_cpu_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_cpu_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_cpu_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_average_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_cpu_average_usage_percent,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_application_cpu_average_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_cpu_average_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_cpu_average_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_cpu_average_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_cpu_average_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_AVERAGE_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_min_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_cpu_min_usage_percent,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_application_cpu_min_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_cpu_min_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_cpu_min_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_cpu_min_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_cpu_min_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MIN_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_cpu_max_usage_percent
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_cpu_max_usage_percent,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_application_cpu_max_usage_percent_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_cpu_max_usage_percent_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_cpu_max_usage_percent_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_cpu_max_usage_percent_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_cpu_max_usage_percent(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CPU_MAX_USAGE_PERCENT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);
  return attribute_store_node_exists(node);
}

double dotdot_get_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_application_ram_usagemb
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_ram_usagemb,
                                                  sizeof(double));
  }

sl_status_t dotdot_application_monitoring_application_ram_usagemb_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_application_monitoring_application_ram_usagemb_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_application_monitoring_application_ram_usagemb_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_application_monitoring_application_ram_usagemb_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_application_monitoring_application_ram_usagemb(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_RAM_USAGEMB);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_application_monitoring_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_application_monitoring_application_name(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_version(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_connected(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_mqtt_topics(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_uptime_minutes(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_process_id(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_hostname(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_fqdn(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_logging_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_logging_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interval_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_messages_sent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_messages_received(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_subscription_count(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_average_delivery_time_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_min_delivery_time_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_max_delivery_time_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_statistics_reporting_interval_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_cpu_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_cpu_average_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_cpu_min_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_cpu_max_usage_percent(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_ram_usagemb(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_application_monitoring_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_application_monitoring_mqtt_logging_enabled(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_logging_level(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interval_seconds(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_application_monitoring_application_statistics_reporting_interval_seconds(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster NameAndLocation
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_name_and_location_name(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_name_and_location_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_name_and_location_name(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_name
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_name);
  } else {
    return attribute_store_set_desired_string(node, new_name);
  }
}

sl_status_t dotdot_name_and_location_name_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_name_and_location_name_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_name_and_location_name_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_name_and_location_name_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_name_and_location_name(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_name_and_location_location(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_name_and_location_location(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_name_and_location_location(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_location
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_location);
  } else {
    return attribute_store_set_desired_string(node, new_location);
  }
}

sl_status_t dotdot_name_and_location_location_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_name_and_location_location_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_name_and_location_location_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_name_and_location_location_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_name_and_location_location(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_name_and_location_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_name_and_location_name(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_name_and_location_location(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_name_and_location_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_name_and_location_name(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_name_and_location_location(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ConfigurationParameters
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  return attribute_store_node_exists(node);
}

ConfigurationParameter dotdot_get_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);

  ConfigurationParameter result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_configuration_parameters_count,
  const ConfigurationParameter* new_configuration_parameters
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);

  // Skip attribute ConfigurationParameters because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of ConfigurationParameters, Attribute %d, "
                        "because it is a complicated type (array: ConfigurationParameter). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_configuration_parameters_configuration_parameters_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_configuration_parameters_configuration_parameters_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_configuration_parameters_configuration_parameters_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_configuration_parameters_configuration_parameters_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_configuration_parameters_configuration_parameters(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_configuration_parameters_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_configuration_parameters_configuration_parameters(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_configuration_parameters_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster UserCredential
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_user_credential_supported_user_unique_identifiers(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_user_credential_supported_user_unique_identifiers(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_supported_user_unique_identifiers(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_user_unique_identifiers
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_user_unique_identifiers,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_user_credential_supported_user_unique_identifiers_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_supported_user_unique_identifiers_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_supported_user_unique_identifiers_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_supported_user_unique_identifiers_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_supported_user_unique_identifiers(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_UNIQUE_IDENTIFIERS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_supported_credential_rules(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_user_credential_supported_credential_rules(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_supported_credential_rules(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_supported_credential_rules
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_credential_rules,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_user_credential_supported_credential_rules_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_supported_credential_rules_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_supported_credential_rules_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_supported_credential_rules_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_supported_credential_rules(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_RULES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_supported_credential_types(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_user_credential_supported_credential_types(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_supported_credential_types(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_credential_types
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_credential_types,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_user_credential_supported_credential_types_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_supported_credential_types_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_supported_credential_types_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_supported_credential_types_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_supported_credential_types(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_CREDENTIAL_TYPES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_supported_user_types(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_user_credential_supported_user_types(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_supported_user_types(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_user_types
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_user_types,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_user_credential_supported_user_types_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_supported_user_types_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_supported_user_types_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_supported_user_types_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_supported_user_types(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORTED_USER_TYPES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_support_credential_checksum(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);
  return attribute_store_node_exists(node);
}

bool dotdot_get_user_credential_support_credential_checksum(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_support_credential_checksum(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_support_credential_checksum
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_support_credential_checksum,
                                                  sizeof(bool));
  }

sl_status_t dotdot_user_credential_support_credential_checksum_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_support_credential_checksum_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_support_credential_checksum_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_support_credential_checksum_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_support_credential_checksum(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_CREDENTIAL_CHECKSUM);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_support_admin_pin_code(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);
  return attribute_store_node_exists(node);
}

bool dotdot_get_user_credential_support_admin_pin_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_support_admin_pin_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_support_admin_pin_code
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_support_admin_pin_code,
                                                  sizeof(bool));
  }

sl_status_t dotdot_user_credential_support_admin_pin_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_support_admin_pin_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_support_admin_pin_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_support_admin_pin_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_support_admin_pin_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_support_admin_pin_code_deactivation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);
  return attribute_store_node_exists(node);
}

bool dotdot_get_user_credential_support_admin_pin_code_deactivation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_user_credential_support_admin_pin_code_deactivation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_support_admin_pin_code_deactivation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_support_admin_pin_code_deactivation,
                                                  sizeof(bool));
  }

sl_status_t dotdot_user_credential_support_admin_pin_code_deactivation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_support_admin_pin_code_deactivation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_support_admin_pin_code_deactivation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_support_admin_pin_code_deactivation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_support_admin_pin_code_deactivation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_SUPPORT_ADMIN_PIN_CODE_DEACTIVATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_user_credential_admin_pin_code(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_user_credential_admin_pin_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_user_credential_admin_pin_code(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  const char* new_admin_pin_code
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);

  if (REPORTED_ATTRIBUTE == value_state){
    return attribute_store_set_reported_string(node, new_admin_pin_code);
  } else {
    return attribute_store_set_desired_string(node, new_admin_pin_code);
  }
}

sl_status_t dotdot_user_credential_admin_pin_code_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_user_credential_admin_pin_code_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_user_credential_admin_pin_code_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_user_credential_admin_pin_code_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_user_credential_admin_pin_code(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_USER_CREDENTIAL_ADMIN_PIN_CODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_user_credential_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_user_credential_supported_user_unique_identifiers(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_supported_credential_rules(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_supported_credential_types(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_supported_user_types(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_support_credential_checksum(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_support_admin_pin_code(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_support_admin_pin_code_deactivation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_user_credential_admin_pin_code(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_user_credential_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster AoXLocator
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_aox_locator_reporting_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_aox_locator_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_reporting_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reporting_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_aox_locator_reporting_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_reporting_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_reporting_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_reporting_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_reporting_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  return attribute_store_node_exists(node);
}

bool dotdot_get_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_position_and_orientation_valid
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_position_and_orientation_valid,
                                                  sizeof(bool));
  }

sl_status_t dotdot_aox_locator_position_and_orientation_valid_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_position_and_orientation_valid_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_position_and_orientation_valid_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_position_and_orientation_valid_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_position_and_orientation_valid(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_position_and_orientation(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  return attribute_store_node_exists(node);
}

CoordinateAndOrientation dotdot_get_aox_locator_position_and_orientation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);

  CoordinateAndOrientation result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_position_and_orientation(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  CoordinateAndOrientation new_position_and_orientation
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);

  // Skip attribute PositionAndOrientation because it is a struct,
  // we typically don't save them as structs in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of PositionAndOrientation, Attribute %d, "
                        "because it is a complicated type (struct: CoordinateAndOrientation). "
                        "Please change the code to do this manually.", node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_position_and_orientation_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_position_and_orientation_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_position_and_orientation_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_position_and_orientation_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_position_and_orientation(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_azimuth_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  return attribute_store_node_exists(node);
}

MinMaxPair dotdot_get_aox_locator_azimuth_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);

  MinMaxPair result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_azimuth_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_azimuth_mask_count,
  const MinMaxPair* new_azimuth_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);

  // Skip attribute AzimuthMask because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of AzimuthMask, Attribute %d, "
                        "because it is a complicated type (array: MinMaxPair). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_azimuth_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_azimuth_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_azimuth_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_azimuth_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_azimuth_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_elevation_mask(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  return attribute_store_node_exists(node);
}

MinMaxPair dotdot_get_aox_locator_elevation_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);

  MinMaxPair result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_elevation_mask(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_elevation_mask_count,
  const MinMaxPair* new_elevation_mask
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);

  // Skip attribute ElevationMask because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of ElevationMask, Attribute %d, "
                        "because it is a complicated type (array: MinMaxPair). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_elevation_mask_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_elevation_mask_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_elevation_mask_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_elevation_mask_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_elevation_mask(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_allow_list(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  return attribute_store_node_exists(node);
}

const char* dotdot_get_aox_locator_allow_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);

  if (REPORTED_ATTRIBUTE == value_state) {
    attribute_store_get_reported_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  } else {
    attribute_store_get_desired_string(node, received_string, ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH);
  }
  return received_string;
}

sl_status_t dotdot_set_aox_locator_allow_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_allow_list_count,
  const char** new_allow_list
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);

  // Skip attribute AllowList because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of AllowList, Attribute %d, "
                        "because it is a complicated type (array: string). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_allow_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_allow_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_allow_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_allow_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_allow_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_aox_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_aox_locator_aox_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_aox_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_aox_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aox_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_aox_locator_aox_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_aox_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_aox_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_aox_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_aox_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_antenna_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_aox_locator_antenna_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_antenna_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_antenna_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_antenna_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_aox_locator_antenna_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_antenna_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_antenna_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_antenna_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_antenna_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_antenna_array(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_antenna_array(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_antenna_array(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_antenna_array_count,
  const int8_t* new_antenna_array
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);

  // Skip attribute AntennaArray because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of AntennaArray, Attribute %d, "
                        "because it is a complicated type (array: int8). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_antenna_array_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_antenna_array_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_antenna_array_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_antenna_array_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_antenna_array(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_period_samples(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_period_samples(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_period_samples(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_period_samples
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_period_samples,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_aox_locator_period_samples_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_period_samples_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_period_samples_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_period_samples_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_period_samples(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_angle_filtering(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  return attribute_store_node_exists(node);
}

bool dotdot_get_aox_locator_angle_filtering(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);

  bool result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_filtering(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  bool new_angle_filtering
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_filtering,
                                                  sizeof(bool));
  }

sl_status_t dotdot_aox_locator_angle_filtering_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_angle_filtering_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_angle_filtering_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_angle_filtering_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_angle_filtering(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  return attribute_store_node_exists(node);
}

double dotdot_get_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);

  double result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  double new_angle_filtering_weight
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_filtering_weight,
                                                  sizeof(double));
  }

sl_status_t dotdot_aox_locator_angle_filtering_weight_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_angle_filtering_weight_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_angle_filtering_weight_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_angle_filtering_weight_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_angle_filtering_weight(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_angle_correction_timeout
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_correction_timeout,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_aox_locator_angle_correction_timeout_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_angle_correction_timeout_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_angle_correction_timeout_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_angle_correction_timeout_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_angle_correction_timeout(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_angle_correction_delay
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_correction_delay,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_aox_locator_angle_correction_delay_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_angle_correction_delay_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_angle_correction_delay_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_angle_correction_delay_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_angle_correction_delay(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_cte_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_aox_locator_cte_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_cte_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_cte_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cte_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_aox_locator_cte_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_cte_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_cte_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_cte_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_cte_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_cte_sampling_interval
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cte_sampling_interval,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_aox_locator_cte_sampling_interval_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_cte_sampling_interval_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_cte_sampling_interval_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_cte_sampling_interval_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_cte_sampling_interval(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_cte_length(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_cte_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_cte_length(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_cte_length
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cte_length,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_aox_locator_cte_length_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_cte_length_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_cte_length_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_cte_length_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_cte_length(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_aox_locator_slot_duration(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  return attribute_store_node_exists(node);
}

int8_t dotdot_get_aox_locator_slot_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);

  int8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_slot_duration(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int8_t new_slot_duration
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_slot_duration,
                                                  sizeof(int8_t));
  }

sl_status_t dotdot_aox_locator_slot_duration_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_locator_slot_duration_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_locator_slot_duration_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_locator_slot_duration_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_locator_slot_duration(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_aox_locator_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_aox_locator_reporting_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_position_and_orientation_valid(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_position_and_orientation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_azimuth_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_elevation_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_allow_list(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_aox_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_antenna_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_antenna_array(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_period_samples(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_filtering(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_filtering_weight(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_correction_timeout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_correction_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_cte_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_cte_sampling_interval(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_cte_length(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_slot_duration(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_aox_locator_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_aox_locator_reporting_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_position_and_orientation_valid(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_position_and_orientation(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_azimuth_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_elevation_mask(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_allow_list(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_aox_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_antenna_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_antenna_array(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_period_samples(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_filtering(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_filtering_weight(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_correction_timeout(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_angle_correction_delay(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_cte_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_cte_sampling_interval(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_cte_length(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_aox_locator_slot_duration(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster AoXPositionEstimation
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_aox_position_estimation_position(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  return attribute_store_node_exists(node);
}

EstimatedPosition dotdot_get_aox_position_estimation_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);

  EstimatedPosition result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_position_estimation_position(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  EstimatedPosition new_position
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);

  // Skip attribute Position because it is a struct,
  // we typically don't save them as structs in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of Position, Attribute %d, "
                        "because it is a complicated type (struct: EstimatedPosition). "
                        "Please change the code to do this manually.", node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_position_estimation_position_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_aox_position_estimation_position_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_aox_position_estimation_position_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_aox_position_estimation_position_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_aox_position_estimation_position(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_aox_position_estimation_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_aox_position_estimation_position(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_aox_position_estimation_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster ProtocolController-NetworkManagement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  return attribute_store_node_exists(node);
}

NetworkManagementState dotdot_get_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);

  NetworkManagementState result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  NetworkManagementState new_network_management_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);

  // Skip attribute NetworkManagementState because it is a struct,
  // we typically don't save them as structs in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of NetworkManagementState, Attribute %d, "
                        "because it is a complicated type (struct: NetworkManagementState). "
                        "Please change the code to do this manually.", node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_protocol_controller_network_management_network_management_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_protocol_controller_network_management_network_management_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_protocol_controller_network_management_network_management_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_protocol_controller_network_management_network_management_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_protocol_controller_network_management_network_management_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_protocol_controller_network_management_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_protocol_controller_network_management_network_management_state(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_protocol_controller_network_management_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster Descriptor
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_descriptor_device_type_list(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);
  return attribute_store_node_exists(node);
}

DeviceTypeStruct dotdot_get_descriptor_device_type_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);

  DeviceTypeStruct result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_descriptor_device_type_list(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  size_t new_device_type_list_count,
  const DeviceTypeStruct* new_device_type_list
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);

  // Skip attribute DeviceTypeList because it is an array,
  // we typically don't save them as array in the attribute store.
  sl_log_error(LOG_TAG, "Error, skipping to change the desired value of DeviceTypeList, Attribute %d, "
                        "because it is a complicated type (array: DeviceTypeStruct). "
                        "Please change the code to do this manually.",node);
  return SL_STATUS_FAIL;
}

sl_status_t dotdot_descriptor_device_type_list_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_descriptor_device_type_list_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_descriptor_device_type_list_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_descriptor_device_type_list_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_descriptor_device_type_list(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_DESCRIPTOR_DEVICE_TYPE_LIST);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_descriptor_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_descriptor_device_type_list(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_descriptor_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster UnifyFanControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_unify_fan_control_z_wave_fan_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);
  return attribute_store_node_exists(node);
}

ZWaveFanModeEnum dotdot_get_unify_fan_control_z_wave_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);

  ZWaveFanModeEnum result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_fan_control_z_wave_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  ZWaveFanModeEnum new_z_wave_fan_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_z_wave_fan_mode,
                                                  sizeof(ZWaveFanModeEnum));
  }

sl_status_t dotdot_unify_fan_control_z_wave_fan_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_fan_control_z_wave_fan_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_fan_control_z_wave_fan_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_fan_control_z_wave_fan_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_fan_control_z_wave_fan_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_fan_control_z_wave_supported_fan_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_unify_fan_control_z_wave_supported_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_fan_control_z_wave_supported_fan_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_z_wave_supported_fan_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_z_wave_supported_fan_mode,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_unify_fan_control_z_wave_supported_fan_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_fan_control_z_wave_supported_fan_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_fan_control_z_wave_supported_fan_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_fan_control_z_wave_supported_fan_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_fan_control_z_wave_supported_fan_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_SUPPORTED_FAN_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_fan_control_z_wave_fan_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);
  return attribute_store_node_exists(node);
}

ZWaveFanStateEnum dotdot_get_unify_fan_control_z_wave_fan_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);

  ZWaveFanStateEnum result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_fan_control_z_wave_fan_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  ZWaveFanStateEnum new_z_wave_fan_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_z_wave_fan_state,
                                                  sizeof(ZWaveFanStateEnum));
  }

sl_status_t dotdot_unify_fan_control_z_wave_fan_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_fan_control_z_wave_fan_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_fan_control_z_wave_fan_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_fan_control_z_wave_fan_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_fan_control_z_wave_fan_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_FAN_CONTROL_Z_WAVE_FAN_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_unify_fan_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_unify_fan_control_z_wave_fan_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_fan_control_z_wave_supported_fan_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_fan_control_z_wave_fan_state(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_unify_fan_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_unify_fan_control_z_wave_fan_mode(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster UnifyThermostat
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_thermostat_thermostat_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_thermostat_thermostat_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_thermostat_thermostat_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_thermostat_thermostat_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_thermostat_thermostat_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_THERMOSTAT_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);
  return attribute_store_node_exists(node);
}

uint16_t dotdot_get_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);

  uint16_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_thermostat_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_thermostat_mode,
                                                  sizeof(uint16_t));
  }

sl_status_t dotdot_unify_thermostat_supported_thermostat_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_thermostat_supported_thermostat_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_thermostat_supported_thermostat_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_thermostat_supported_thermostat_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_thermostat_supported_thermostat_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_SUPPORTED_THERMOSTAT_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_thermostat_operating_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_thermostat_operating_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_thermostat_operating_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_operating_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_operating_state,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_thermostat_operating_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_thermostat_operating_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_thermostat_operating_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_thermostat_operating_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_thermostat_operating_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_THERMOSTAT_OPERATING_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_unify_thermostat_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_unify_thermostat_thermostat_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_thermostat_supported_thermostat_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_thermostat_operating_state(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_unify_thermostat_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_unify_thermostat_thermostat_mode(unid, endpoint_id)) {
    return true;
  }

  return false;
}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster UnifyHumidityControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_unify_humidity_control_reporting_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);
  return attribute_store_node_exists(node);
}

ModeType dotdot_get_unify_humidity_control_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);

  ModeType result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  ModeType new_reporting_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reporting_mode,
                                                  sizeof(ModeType));
  }

sl_status_t dotdot_unify_humidity_control_reporting_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_reporting_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_reporting_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_reporting_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_reporting_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_REPORTING_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_supported_reporting_mode(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_humidity_control_supported_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_supported_reporting_mode(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_supported_reporting_mode
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_reporting_mode,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_humidity_control_supported_reporting_mode_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_supported_reporting_mode_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_supported_reporting_mode_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_supported_reporting_mode_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_supported_reporting_mode(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_REPORTING_MODE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_current_state(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_humidity_control_current_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_current_state(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_state
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_state,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_humidity_control_current_state_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_current_state_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_current_state_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_current_state_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_current_state(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_CURRENT_STATE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_supported_set_points(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_humidity_control_supported_set_points(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_supported_set_points(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_supported_set_points
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_set_points,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_humidity_control_supported_set_points_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_supported_set_points_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_supported_set_points_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_supported_set_points_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_supported_set_points(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_SUPPORTED_SET_POINTS);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_humidifier_setpoint_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_humidifier_setpoint_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_humidifier_setpoint_min,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_humidifier_setpoint_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_humidifier_setpoint_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_humidifier_setpoint_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_humidifier_setpoint_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_humidifier_setpoint_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_humidifier_setpoint_max,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_humidifier_setpoint_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_humidifier_setpoint_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_humidifier_setpoint_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_humidifier_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_humidifier_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_humidifier_setpoint,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_humidifier_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_humidifier_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_humidifier_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint_scale(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);
  return attribute_store_node_exists(node);
}

ScaleType dotdot_get_unify_humidity_control_humidifier_setpoint_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);

  ScaleType result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  ScaleType new_humidifier_setpoint_scale
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_humidifier_setpoint_scale,
                                                  sizeof(ScaleType));
  }

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_scale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_scale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_humidifier_setpoint_scale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_humidifier_setpoint_scale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_humidifier_setpoint_scale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_SCALE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_humidifier_setpoint_precision(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_humidity_control_humidifier_setpoint_precision(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_humidifier_setpoint_precision(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_humidifier_setpoint_precision
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_humidifier_setpoint_precision,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_precision_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_humidifier_setpoint_precision_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_humidifier_setpoint_precision_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_humidifier_setpoint_precision_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_humidifier_setpoint_precision(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_HUMIDIFIER_SETPOINT_PRECISION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_dehumidifier_setpoint_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidifier_setpoint_min,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_dehumidifier_setpoint_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_dehumidifier_setpoint_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_dehumidifier_setpoint_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_dehumidifier_setpoint_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidifier_setpoint_max,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_dehumidifier_setpoint_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_dehumidifier_setpoint_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_dehumidifier_setpoint_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_dehumidifier_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_dehumidifier_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidifier_setpoint,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_dehumidifier_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_dehumidifier_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_dehumidifier_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_scale(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);
  return attribute_store_node_exists(node);
}

ScaleType dotdot_get_unify_humidity_control_dehumidifier_setpoint_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);

  ScaleType result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  ScaleType new_dehumidifier_setpoint_scale
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidifier_setpoint_scale,
                                                  sizeof(ScaleType));
  }

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_scale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_scale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_dehumidifier_setpoint_scale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_dehumidifier_setpoint_scale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_dehumidifier_setpoint_scale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_SCALE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_precision(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_humidity_control_dehumidifier_setpoint_precision(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_dehumidifier_setpoint_precision(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidifier_setpoint_precision
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidifier_setpoint_precision,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_precision_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_dehumidifier_setpoint_precision_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_dehumidifier_setpoint_precision_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_dehumidifier_setpoint_precision_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_dehumidifier_setpoint_precision(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_DEHUMIDIFIER_SETPOINT_PRECISION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_auto_setpoint_min(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_auto_setpoint_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_min(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_auto_setpoint_min
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_setpoint_min,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_auto_setpoint_min_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_auto_setpoint_min_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_auto_setpoint_min_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_auto_setpoint_min_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_auto_setpoint_min(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MIN);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_auto_setpoint_max(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_auto_setpoint_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_max(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_auto_setpoint_max
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_setpoint_max,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_auto_setpoint_max_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_auto_setpoint_max_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_auto_setpoint_max_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_auto_setpoint_max_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_auto_setpoint_max(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_MAX);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_auto_setpoint(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);
  return attribute_store_node_exists(node);
}

int32_t dotdot_get_unify_humidity_control_auto_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);

  int32_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_auto_setpoint(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  int32_t new_auto_setpoint
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_setpoint,
                                                  sizeof(int32_t));
  }

sl_status_t dotdot_unify_humidity_control_auto_setpoint_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_auto_setpoint_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_auto_setpoint_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_auto_setpoint_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_auto_setpoint(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_auto_setpoint_scale(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);
  return attribute_store_node_exists(node);
}

ScaleType dotdot_get_unify_humidity_control_auto_setpoint_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);

  ScaleType result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_scale(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  ScaleType new_auto_setpoint_scale
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_setpoint_scale,
                                                  sizeof(ScaleType));
  }

sl_status_t dotdot_unify_humidity_control_auto_setpoint_scale_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_auto_setpoint_scale_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_auto_setpoint_scale_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_auto_setpoint_scale_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_auto_setpoint_scale(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_SCALE);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}
bool dotdot_is_supported_unify_humidity_control_auto_setpoint_precision(
  const dotdot_unid_t unid, const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);
  return attribute_store_node_exists(node);
}

uint8_t dotdot_get_unify_humidity_control_auto_setpoint_precision(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);

  uint8_t result = {};
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_unify_humidity_control_auto_setpoint_precision(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint_id,
  attribute_store_node_value_state_t value_state,
  uint8_t new_auto_setpoint_precision
  )
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);

  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_setpoint_precision,
                                                  sizeof(uint8_t));
  }

sl_status_t dotdot_unify_humidity_control_auto_setpoint_precision_undefine_reported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);
  attribute_store_undefine_reported(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

sl_status_t dotdot_unify_humidity_control_auto_setpoint_precision_undefine_desired(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);
  attribute_store_undefine_desired(node);
  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}


bool dotdot_unify_humidity_control_auto_setpoint_precision_is_reported_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);
  return attribute_store_is_reported_defined(node);
}

bool dotdot_unify_humidity_control_auto_setpoint_precision_is_desired_defined(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id)
{
  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);
  return attribute_store_is_desired_defined(node);
}

sl_status_t dotdot_create_unify_humidity_control_auto_setpoint_precision(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  attribute_store_node_t endpoint_node = unify_dotdot_attributes_get_endpoint_node()(unid, endpoint_id);
  attribute_store_node_t node =
    attribute_store_create_child_if_missing(endpoint_node,
                                           DOTDOT_ATTRIBUTE_ID_UNIFY_HUMIDITY_CONTROL_AUTO_SETPOINT_PRECISION);

  return (node != ATTRIBUTE_STORE_INVALID_NODE) ? SL_STATUS_OK : SL_STATUS_FAIL;
}

bool dotdot_is_any_unify_humidity_control_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {

  if (true == dotdot_is_supported_unify_humidity_control_reporting_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_supported_reporting_mode(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_current_state(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_supported_set_points(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_humidifier_setpoint_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_humidifier_setpoint_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_humidifier_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_humidifier_setpoint_scale(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_humidifier_setpoint_precision(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_scale(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_dehumidifier_setpoint_precision(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_auto_setpoint_min(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_auto_setpoint_max(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_auto_setpoint(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_auto_setpoint_scale(unid, endpoint_id)) {
    return true;
  }
  if (true == dotdot_is_supported_unify_humidity_control_auto_setpoint_precision(unid, endpoint_id)) {
    return true;
  }

  return false;
}

bool dotdot_is_any_unify_humidity_control_writable_attribute_supported(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint_id) {


  return false;
}
