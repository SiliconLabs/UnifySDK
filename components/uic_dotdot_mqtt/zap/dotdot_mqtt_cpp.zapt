/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}
#include "uic_mqtt.h"
#include "sl_log.h"
#include "sl_status.h"
#include "json_helpers.hpp"

#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <vector>
#include <inttypes.h>
#include <stdexcept>

#include <boost/algorithm/string.hpp>

#include "dotdot_mqtt.h"
#include "dotdot_mqtt.hpp"
#include "dotdot_bitmap.hpp"
#include "dotdot_mqtt_command_helpers.hpp"
#include "dotdot_mqtt_internals.hpp"
#include "dotdot_mqtt_attributes.h"
#include "dotdot_mqtt_translators.h"

#include <nlohmann/json.hpp>

static constexpr char LOG_TAG[] = "dotdot_mqtt";
static constexpr char LOG_FMT_JSON_PARSE_FAIL[] = "by-unid %s::%s: Unable to parse JSON payload: check payload syntax";
static constexpr char LOG_FMT_JSON_ERROR[] = "by-unid %s::%s: Unable to parse JSON payload: %s";



{{#zcl_clusters}}
{{#if (supportedCluster label)}}

// Callbacks pointers
{{#zcl_commands}}
{{asCommandCallback this}}_t {{asCommandCallback this}} = nullptr;
static {{asCommandCallback this}}_t {{asGeneratedCommandCallback this}} = nullptr;
{{/zcl_commands}}
{{asWriteAttributesCallback this}}_t {{asWriteAttributesCallback this}} = nullptr;
static {{asForceReadAttributesCallback this}}_t {{asForceReadAttributesCallback this}} = nullptr;

// Callbacks setters
{{#zcl_commands}}
void {{asCommandCallback this}}_set(const {{asCommandCallback this}}_t callback)
{
  {{asCommandCallback this}} = callback;
}
void {{asGeneratedCommandCallback this}}_set(const {{asCommandCallback this}}_t callback)
{
  {{asGeneratedCommandCallback this}} = callback;
}

{{/zcl_commands}}

void {{dotdot_prefix}}_set_{{asSnakeCaseLower label}}_write_attributes_callback(
  const {{asWriteAttributesCallback this}}_t callback)
{
  {{asWriteAttributesCallback this}} = callback;
}

void {{dotdot_prefix}}_set_{{asSnakeCaseLower label}}_force_read_attributes_callback(
  const {{asForceReadAttributesCallback this}}_t callback)
{
  {{asForceReadAttributesCallback this}} = callback;
}

{{#zcl_commands}}

// Callback function for incoming publications on ucl/by-unid/+/+/{{parent.label}}/Commands/{{label}}
void {{dotdot_prefix}}_on_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}(
  const char *topic,
  const char *message,
  const size_t message_length)
{
  if (message_length == 0 || ({{asCommandCallback this}} == nullptr)) {
    return;
  }

  std::string unid;
  uint8_t endpoint = 0; // Default value for endpoint-less topics.
  {{#if (clusterWithoutEndpoints parent.label)}}
  if(! uic_dotdot_mqtt::parse_topic_no_endpoint(topic,unid)) {
    sl_log_debug(LOG_TAG,
                "Error parsing UNID from topic %s. Ignoring",
                topic);
    return;
  }
  {{else}}
  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
    sl_log_debug(LOG_TAG,
                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
                topic);
    return;
  }
  {{/if}}

{{#zcl_command_arguments}}
{{#if isArray}}
  std::vector<{{asUnderlyingType type}}> {{asSnakeCaseLower label}};
{{else}}
  {{asUnderlyingType type}} {{asSnakeCaseLower label}} = {};
{{/if}}{{/zcl_command_arguments}}

  nlohmann::json jsn;
  try {
    jsn = nlohmann::json::parse(std::string(message));

  {{#zcl_command_arguments}}{{#first}}
    {{asCommandParseFunction parent}}(
      jsn,{{/first}}
      {{asSnakeCaseLower label}}{{listComma this}}
{{#last}}
      );
{{/last}}{{/zcl_command_arguments}}
  } catch (const nlohmann::json::parse_error& e) {
    // Catch JSON object field parsing errors
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "{{parent.label}}", "{{label}}");
    return;
  } catch (const nlohmann::json::exception& e) {
    // Catch JSON object field parsing errors
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{parent.label}}", "{{label}}", e.what());
    return;
  } catch (const std::exception& e) {
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{parent.label}}", "{{label}}", "");
    return;
  }

  {{asCommandCallback this}}(
    static_cast<dotdot_unid_t>(unid.c_str()),
    endpoint,
    {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_NORMAL{{#zcl_command_arguments}}{{#first}},{{/first}}
{{#if isArray}}
    {{asSnakeCaseLower label}}.size(),
    {{asSnakeCaseLower label}}.data(){{listComma this}}
{{else}}
    {{asSnakeCaseLower label}}{{listComma this}}
{{/if}}{{/zcl_command_arguments}}
  );

}

// Callback function for incoming publications on ucl/by-unid/+/+/{{parent.label}}/GeneratedCommands/{{label}}
static void {{dotdot_prefix}}_on_generated_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}(
  const char *topic,
  const char *message,
  const size_t message_length)
{
  if (message_length == 0 || ({{asGeneratedCommandCallback this}} == nullptr)) {
    return;
  }

  std::string unid;
  uint8_t endpoint = 0; // Default value for endpoint-less topics.
  {{#if (clusterWithoutEndpoints parent.label)}}
  if(! uic_dotdot_mqtt::parse_topic_no_endpoint(topic,unid)) {
    sl_log_debug(LOG_TAG,
                "Error parsing UNID from topic %s. Ignoring",
                topic);
    return;
  }
  {{else}}
  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
    sl_log_debug(LOG_TAG,
                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
                topic);
    return;
  }
  {{/if}}

{{#zcl_command_arguments}}
{{#if isArray}}
  std::vector<{{asUnderlyingType type}}> {{asSnakeCaseLower label}};
{{else}}
  {{asUnderlyingType type}} {{asSnakeCaseLower label}};
{{/if}}{{/zcl_command_arguments}}

  nlohmann::json jsn;
  try {
    jsn = nlohmann::json::parse(std::string(message));

  {{#zcl_command_arguments}}{{#first}}
    {{asCommandParseFunction parent}}(
      jsn,{{/first}}
      {{asSnakeCaseLower label}}{{listComma this}}
{{#last}}
      );
{{/last}}{{/zcl_command_arguments}}
  } catch (const nlohmann::json::parse_error& e) {
    // Catch JSON object field parsing errors
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "{{parent.label}}", "{{label}}");
    return;
  } catch (const nlohmann::json::exception& e) {
    // Catch JSON object field parsing errors
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{parent.label}}", "{{label}}", e.what());
    return;
  } catch (const std::exception& e) {
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{parent.label}}", "{{label}}", "");
    return;
  }

  {{asGeneratedCommandCallback this}}(
    static_cast<dotdot_unid_t>(unid.c_str()),
    endpoint,
    {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_NORMAL{{#zcl_command_arguments}}{{#first}},{{/first}}
{{#if isArray}}
    {{asSnakeCaseLower label}}.size(),
    {{asSnakeCaseLower label}}.data(){{listComma this}}
{{else}}
    {{asSnakeCaseLower label}}{{listComma this}}
{{/if}}{{/zcl_command_arguments}}
  );

}

{{/zcl_commands}}

// Callback function for incoming publications on ucl/by-unid/+/+/{{label}}/Commands/WriteAttributes
void {{dotdot_prefix}}_on_{{asSnakeCaseLower label}}_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length)
{
  if ({{asWriteAttributesCallback this}} == nullptr) {
    return;
  }

  if (message_length == 0) {
    return;
  }

  std::string unid;
  uint8_t endpoint = 0; // Default value for endpoint-less topics.
  {{#if (clusterWithoutEndpoints label)}}
  if(! uic_dotdot_mqtt::parse_topic_no_endpoint(topic,unid)) {
    sl_log_debug(LOG_TAG,
                "Error parsing UNID from topic %s. Ignoring",
                topic);
    return;
  }
  {{else}}
  if(! uic_dotdot_mqtt::parse_topic(topic,unid,endpoint)) {
    sl_log_debug(LOG_TAG,
                "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
                topic);
    return;
  }
  {{/if}}

  {{dotdot_prefix}}_{{asSnakeCaseLower label}}_state_t new_state = {};
  {{dotdot_prefix}}_{{asSnakeCaseLower label}}_updated_state_t new_updated_state = {};
{{#zcl_attributes}}{{#if isWritable}}{{#if (isMonotonousArray label)}}
  std::vector<{{asUnderlyingType type}}> {{asSnakeCaseLower label}};
{{/if}}{{/if}}{{/zcl_attributes}}

  nlohmann::json jsn;
  try {
    jsn = nlohmann::json::parse(std::string(message));

    {{asWriteAttributesParseFunction this}}(
      jsn,
      new_state,
      new_updated_state{{#zcl_attributes}}{{#if isWritable}}{{#if (isMonotonousArray label)}},
      {{asSnakeCaseLower label}}{{/if}}{{/if}}{{/zcl_attributes}}
    );
  } catch (const nlohmann::json::parse_error& e) {
    // Catch JSON object field parsing errors
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_PARSE_FAIL, "{{label}}", "WriteAttributes");
    return;
  } catch (const nlohmann::json::exception& e) {
    // Catch JSON object field parsing errors
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{label}}", "WriteAttributes", e.what());
    return;
  } catch (const std::exception& e) {
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{label}}", "WriteAttributes", "");
    return;
  }

  {{asWriteAttributesCallback this}}(
    static_cast<dotdot_unid_t>(unid.c_str()),
    endpoint,
    {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_NORMAL,
    new_state,
    new_updated_state
  );

}

static void {{dotdot_prefix}}_on_{{asSnakeCaseLower label}}_force_read_attributes(
  const char *topic,
  const char *message,
  const size_t message_length)
{
  uint8_t endpoint = 0;
  std::string unid;

  if (message_length == 0) {
    return;
  } else if ( {{asForceReadAttributesCallback this}} ) {

    {{#if (clusterWithoutEndpoints parent.label)}}
    if(! uic_dotdot_mqtt::parse_topic_no_endpoint(topic, unid)) {
      sl_log_debug(LOG_TAG,
                  "Error parsing UNID from topic %s. Ignoring",
                  topic);
      return;
    }
    {{else}}
    if(! uic_dotdot_mqtt::parse_topic(topic, unid, endpoint)) {
      sl_log_debug(LOG_TAG,
                  "Error parsing UNID / Endpoint ID from topic %s. Ignoring",
                  topic);
      return;
    }
    {{/if}}

    try {
      {{dotdot_prefix}}_{{asSnakeCaseLower label}}_updated_state_t force_update = {0};
      bool trigger_handler = false;

      nlohmann::json jsn = nlohmann::json::parse(std::string(message));
      std::vector<std::string> attributes = jsn["value"].get<std::vector<std::string>>();

      // Assume all attributes to be read on empty array received
      if (attributes.size() == 0) {
        {{#zcl_attributes}}
        force_update.{{asSnakeCaseLower label}} = true;
        {{/zcl_attributes}}
        trigger_handler = true;
      } else {
        std::unordered_map<std::string, bool *> supported_attrs = {
        {{#zcl_attributes}}
          {"{{label}}", &force_update.{{asSnakeCaseLower label}} },
        {{/zcl_attributes}}
        };

        for (auto& attribute : attributes) {
          auto found_attr = supported_attrs.find(attribute);
          if (found_attr != supported_attrs.end()) {
            *(found_attr->second) = true;
            trigger_handler = true;
          }
        }
      }

      if (trigger_handler == true) {
        {{asForceReadAttributesCallback this}}(
          static_cast<dotdot_unid_t>(unid.c_str()),
          endpoint,
          {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_NORMAL,
          force_update
        );
      }
    } catch (...) {
      sl_log_debug(LOG_TAG, "{{label}}/Commands/ForceReadAttributes: Unable to parse JSON payload");
      return;
    }
  }
}

{{#zcl_attributes}}
sl_status_t {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
  const char *base_topic,
  {{#if (isMonotonousArray label)}}
  size_t value_count,
  {{#unless (isString type)}}const {{/unless}}{{asUnderlyingType type}}* value,
  {{else}}
  {{asUnderlyingType type}} value,
  {{/if}}
  {{dotdot_prefix}}_attribute_publish_type_t publish_type
)
{
  nlohmann::json jsn;

  {{#if (isMonotonousArray label)}}
  // This is a variable size array of the same known type.
  // Create an array under the value {"value":[]}
  jsn["value"] = nlohmann::json::array();

  for (size_t i = 0; i<value_count;i++){
    {{#if_is_enum type}}
    #ifdef {{asSnakeCaseUpper parent.label}}_{{asSnakeCaseUpper label}}_ENUM_NAME_AVAILABLE
    jsn["value"].push_back(({{asUnderlyingType type}}){{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_get_enum_value_name((uint32_t)value[i]));
    #else
    jsn["value"].push_back(static_cast<{{chooseTypeOrEnumName type parent.label label}}>(value[i]));
    #endif
    {{else}}
      {{#if_is_bitmap type}}
        {{#if (isUnknownBitmap label)}}
    // Unknown bitmap
    jsn["value"].push_back(str(value[i]));
        {{else}}
    // Known bitmap
    jsn["value"].push_back({{chooseTypeOrBitmapName type parent.label label}}.get_bitmap_values_as_json_tree((uint32_t)value[i]));
        {{/if}}
      {{else}}
        {{#if (isString type)}}
    // String type
    jsn["value"].push_back(std::string(value[i]));
        {{else}}
          {{#if (isStruct type)}}
    // Struct type
    nlohmann::json json_object = nlohmann::json::object();
            {{#zcl_struct_items_by_struct_name type}}
    json_object["{{label}}"] = value[i].{{label}};
    try {
        std::string check = json_object["{{label}}"].dump();
    } catch (const nlohmann::json::exception& e) {
        sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{parent.label}}", "{{label}}", e.what());
    }
            {{/zcl_struct_items_by_struct_name}}
    jsn["value"].push_back(json_object);
          {{else}}
    jsn["value"].push_back(value[i]);
          {{/if}}
        {{/if}}
      {{/if_is_bitmap}}
    {{/if_is_enum}}
  }


  {{else}}
  // This is a single value

  {{#if_is_enum type}}
  #ifdef {{asSnakeCaseUpper parent.label}}_{{asSnakeCaseUpper label}}_ENUM_NAME_AVAILABLE
  jsn["value"] = {{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_get_enum_value_name((uint32_t)value);
  #else
  jsn["value"] = static_cast<{{chooseTypeOrEnumName type parent.label label}}>(value);
  #endif
  {{else}}
    {{#if_is_bitmap type}}
      {{#if (isUnknownBitmap label)}}
  jsn["value"] = std::to_string(value);
      {{else}}
  nlohmann::json bitmap_values = {{chooseTypeOrBitmapName type parent.label label}}.get_bitmap_values_as_json_tree((uint32_t)value);
  jsn["value"] = bitmap_values;
      {{/if}}
    {{else}}
      {{#if (isString type)}}
  jsn["value"] = std::string(value);
      {{else}}
        {{#if (isStruct type)}}
  nlohmann::json json_object = nlohmann::json::object();
  {{#zcl_struct_items_by_struct_name type}}
   json_object["{{label}}"] = value.{{label}};
  {{/zcl_struct_items_by_struct_name}}
  jsn["value"]= json_object;
         {{else}}
  jsn["value"] = value;
         {{/if}}
        {{/if}}
      {{/if_is_bitmap}}
    {{/if_is_enum}}

  {{/if}}

  std::string payload_str;
  try {
    payload_str = jsn.dump(-1, ' ', true, nlohmann::detail::error_handler_t::replace);
  } catch (const nlohmann::json::exception& e) {
    sl_log_debug(LOG_TAG, LOG_FMT_JSON_ERROR, "{{asPublicationName parent.label}}/Attributes/{{label}}", e.what());
    return SL_STATUS_OK;
  }

  {{#if_is_bitmap type}}
  boost::replace_all(payload_str, "\"true\"", "true");
  boost::replace_all(payload_str, "\"false\"", "false");
  {{/if_is_bitmap}}

  std::string topic = std::string(base_topic) + "/{{asPublicationName parent.label}}/Attributes/{{label}}";
  if (publish_type & UCL_MQTT_PUBLISH_TYPE_DESIRED)
  {
    std::string topic_desired = topic + "/Desired";
    uic_mqtt_publish(topic_desired.c_str(),
              payload_str.c_str(),
              payload_str.length(),
              true);
  }
  if (publish_type & UCL_MQTT_PUBLISH_TYPE_REPORTED)
  {
    std::string topic_reported = topic + "/Reported";
    uic_mqtt_publish(topic_reported.c_str(),
              payload_str.c_str(),
              payload_str.length(),
              true);
  }
  return SL_STATUS_OK;
}
{{/zcl_attributes}}

sl_status_t {{dotdot_prefix}}_{{asSnakeCaseLower label}}_init()
{
  {{#if (clusterWithoutEndpoints label)}}
  std::string base_topic = "ucl/by-unid/+/";
  {{else}}
  std::string base_topic = "ucl/by-unid/+/+/";
  {{/if}}

  std::string subscription_topic;
  if({{asWriteAttributesCallback this}}) {
    subscription_topic = base_topic + "{{asPublicationName label}}/Commands/WriteAttributes";
    uic_mqtt_subscribe(subscription_topic.c_str(), {{dotdot_prefix}}_on_{{asSnakeCaseLower label}}_WriteAttributes);
  }

  if({{asForceReadAttributesCallback this}}) {
    subscription_topic = base_topic + "{{asPublicationName label}}/Commands/ForceReadAttributes";
    uic_mqtt_subscribe(subscription_topic.c_str(), {{dotdot_prefix}}_on_{{asSnakeCaseLower label}}_force_read_attributes);
  }
  {{#zcl_commands}}
  if ({{asCommandCallback this}}) {
    subscription_topic = base_topic + "{{asPublicationName parent.label}}/Commands/{{label}}";
    uic_mqtt_subscribe(subscription_topic.c_str(), {{dotdot_prefix}}_on_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}});
  }
  if ({{asGeneratedCommandCallback this}}) {
    subscription_topic = base_topic + "{{asPublicationName parent.label}}/GeneratedCommands/{{label}}";
    uic_mqtt_subscribe(subscription_topic.c_str(), {{dotdot_prefix}}_on_generated_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}});
  }
  {{/zcl_commands}}

  // Init the attributes for that cluster
  {{dotdot_prefix}}_{{asSnakeCaseLower label}}_attributes_init();

  {{#unless (clusterWithoutEndpoints label)}}
  {{dotdot_prefix}}_by_group_{{asSnakeCaseLower label}}_init();
  {{/unless}}

  return SL_STATUS_OK;
}
{{/if}}
{{/zcl_clusters}}


sl_status_t {{dotdot_prefix}}_init() {

  sl_status_t status_flag = SL_STATUS_OK;

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
  if (status_flag == SL_STATUS_OK) {
    status_flag = {{dotdot_prefix}}_{{asSnakeCaseLower label}}_init();
  }

{{/if}}
{{/zcl_clusters}}

  return status_flag;
}

// Publish all supported dotdot cluster commands per each endpoints.
// Here is the steps what this API does:
// - For each dotdot cluster
// - -  For each dotdot cluster command
// - - - Invoke the callback to ask if that particular unid/ep supports the command
// - - - - add or not the command in supported command list based on the return value of the command handler callback
// - - - end
// - - - publish the list of supported commands
//- - end
//-  end
void {{dotdot_prefix}}_publish_supported_commands(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint)
{
  std::stringstream ss;
  bool first_command;
  {{#zcl_clusters}}
  // {{label}} cluster
  {{#if (supportedCluster label)}}
  { // Reset our SupportedCommand stream for each cluster.
    ss.str("");
    first_command = true;
    {{#zcl_commands}}
    // check if there is callback for each command
    if ({{asCommandCallback this}}) {
      {{#zcl_command_arguments}}
      {{#unless isArray}}
        {{asUnderlyingType type}} {{asSnakeCaseLower label}}_value;
        memset(&{{asSnakeCaseLower label}}_value, 0x00, sizeof({{asSnakeCaseLower label}}_value));
      {{/unless}}{{/zcl_command_arguments}}

      if ( {{asCommandCallback this}}(
              unid,
              endpoint,
              {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_SUPPORT_CHECK{{#zcl_command_arguments}}{{#first}},{{/first}}
{{#if isArray}}
              0,
              nullptr{{listComma this}}
{{else}}
              {{asSnakeCaseLower label}}_value{{listComma this}}
{{/if}}{{/zcl_command_arguments}}
          ) == SL_STATUS_OK) {
        if (first_command == false) {
          ss << ", ";
        }
        first_command = false;
        ss << R"("{{label}}")";
      }
    }
    {{/zcl_commands}}
    // Check for a WriteAttributes Callback
    if({{asWriteAttributesCallback this}}) {
      {{dotdot_prefix}}_{{asSnakeCaseLower label}}_state_t {{asSnakeCaseLower label}}_new_state = {0};
      {{dotdot_prefix}}_{{asSnakeCaseLower label}}_updated_state_t {{asSnakeCaseLower label}}_new_updated_state = {0};

      if({{asWriteAttributesCallback this}}(
            unid,
            endpoint,
            {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_SUPPORT_CHECK,
            {{asSnakeCaseLower label}}_new_state,
            {{asSnakeCaseLower label}}_new_updated_state
        ) == SL_STATUS_OK) {
        if (first_command == false) {
          ss << ", ";
        }
        first_command = false;
        ss << R"("WriteAttributes")";
      }
    }

    // Check for a ForceReadAttributes Callback
    if({{asForceReadAttributesCallback this}}) {
      {{dotdot_prefix}}_{{asSnakeCaseLower label}}_updated_state_t {{asSnakeCaseLower label}}_force_update = {0};

      if({{asForceReadAttributesCallback this}}(
            unid,
            endpoint,
            {{asSnakeCaseUpper (dotdot_prefix)}}_CALLBACK_TYPE_SUPPORT_CHECK,
            {{asSnakeCaseLower label}}_force_update
        ) == SL_STATUS_OK) {
        if (first_command == false) {
          ss << ", ";
        }
        first_command = false;
        ss << R"("ForceReadAttributes")";
      }
    }

    // Publish supported commands
    std::string topic = "ucl/by-unid/" + std::string(unid);
    {{#if (clusterWithoutEndpoints label)}}
    // No endpoint for this topic
    {{else}}
    topic +=  "/ep"+ std::to_string(endpoint);
    {{/if}}
    topic +=  "/{{asPublicationName label}}/SupportedCommands";
    std::string payload_str("{\"value\": [" + ss.str() + "]" + "}");
    if (first_command == false) {
      uic_mqtt_publish(topic.c_str(),
                       payload_str.c_str(),
                       payload_str.length(),
                       true);
    }

    // Make sure we publish some SupportedCommands if any attribute has been
    // published
    if (uic_mqtt_count_topics(topic.c_str()) == 0) {
      std::string attributes_topic = "ucl/by-unid/" + std::string(unid) + "/ep"
                                     + std::to_string(endpoint)
                                     + "/{{asPublicationName label}}/Attributes";
      if (uic_mqtt_count_topics(attributes_topic.c_str()) > 0) {
        uic_mqtt_publish(topic.c_str(),
                         payload_str.c_str(),
                         payload_str.length(),
                         true);
      }
    }

  } // End of scope

  {{/if}}
  {{/zcl_clusters}}
}

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
  // Publishing Cluster Revision
  void {{dotdot_prefix}}_{{asSnakeCaseLower label}}_publish_cluster_revision(const char* base_topic, uint16_t value)
  {
    std::string cluster_topic = std::string(base_topic) + "/{{asPublicationName label}}/Attributes/ClusterRevision";
    // Publish Desired
    std::string pub_topic_des = cluster_topic + "/Desired";
    std::string payload = std::string(R"({"value": )")
      + std::to_string(value) + std::string("}");
    uic_mqtt_publish(pub_topic_des.c_str(),
                     payload.c_str(),
                     payload.size(),
                     true);
    // Publish Reported
    std::string pub_topic_rep = cluster_topic + "/Reported";
    uic_mqtt_publish(pub_topic_rep.c_str(),
                     payload.c_str(),
                     payload.size(),
                     true);
  }
{{/if}}
{{/zcl_clusters}}

////////////////////////////////////////////////////////////////////////////////
// Generated Commands publications functions
////////////////////////////////////////////////////////////////////////////////
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_commands}}
/**
 * @brief Publishes an incoming/generated {{label}} command for
 * the {{parent.label}} cluster.
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/{{#unless (clusterWithoutEndpoints parent.label)}}epID/{{/unless}}{{asPublicationName parent.label}}/GeneratedCommands/{{label}}
 *
 * @param unid      The UNID of the node that sent us the command.
 * {{#unless (clusterWithoutEndpoints parent.label)}}
 * @param endpoint  The Endpoint ID of the node that sent us the command.
 * {{/unless}}
 * {{#zcl_command_arguments}}{{#first}}
 * @param fields                Struct pointer with the fields value of the command
 * {{/first}}{{/zcl_command_arguments}}
 */
void {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_publish_generated_{{asSnakeCaseLower label}}_command(
  const dotdot_unid_t unid{{#unless (clusterWithoutEndpoints parent.label)}},
  const dotdot_endpoint_id_t endpoint{{/unless}}{{#zcl_command_arguments}}{{#first}},
  const {{asCommandFieldsType parent}} *fields
  {{/first}}{{/zcl_command_arguments}}
) {
  // Create the topic
  {{#if (clusterWithoutEndpoints parent.label)}}
  std::string topic = "ucl/by-unid/" + std::string(unid) + "/";
  {{else}}
  std::string topic = "ucl/by-unid/"+ std::string(unid) + "/ep" +
                      std::to_string(endpoint) + "/";
  {{/if}}
  topic += "{{asPublicationName parent.label}}/GeneratedCommands/{{label}}";

  std::string payload =
    get_json_payload_for_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_command(
    {{#zcl_command_arguments}}{{#first}}fields{{/first}}{{/zcl_command_arguments}});

  // Publish our command
  uic_mqtt_publish(topic.c_str(),
                    payload.c_str(),
                    payload.size(),
                    false);
}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}
