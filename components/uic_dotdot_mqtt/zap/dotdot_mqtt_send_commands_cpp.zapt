/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

// Includes from this component
#include "dotdot_mqtt_send_commands.h"
#include "dotdot_mqtt.hpp"
#include "dotdot_mqtt_command_helpers.hpp"
#include "dotdot_mqtt_internals.hpp"
#include "sl_log.h"

// Generic includes
#include <string>
#include <nlohmann/json.hpp>

#define LOG_TAG "dotdot_mqtt_send_commands"

////////////////////////////////////////////////////////////////////////////////
// Sending Commands functions
////////////////////////////////////////////////////////////////////////////////
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_commands}}

/**
 * @brief Sends/Publishes a {{label}} command for
 * the {{parent.label}} cluster to a destination.
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/{{#unless (clusterWithoutEndpoints parent.label)}}epID/{{/unless}}{{asPublicationName parent.label}}/Commands/{{label}}
 *
 * @param destination_unid      The UNID of the node that should receive the command.
 * {{#unless (clusterWithoutEndpoints parent.label)}}
 * @param destination_endpoint  The Endpoint ID of the node that should receive the command.
 * {{/unless}}
 * {{#zcl_command_arguments}}{{#first}}
 * @param fields                Struct pointer with the fields value of the command
 * {{/first}}{{/zcl_command_arguments}}
 */
void {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_publish_{{asSnakeCaseLower label}}_command(
  const dotdot_unid_t destination_unid{{#unless (clusterWithoutEndpoints parent.label)}},
  const dotdot_endpoint_id_t destination_endpoint{{/unless}}{{#zcl_command_arguments}}{{#first}},
  const {{asCommandFieldsType parent}} *fields
  {{/first}}{{/zcl_command_arguments}}
) {
  // Create the topic
  {{#if (clusterWithoutEndpoints parent.label)}}
  std::string topic = "ucl/by-unid/" + std::string(destination_unid) + "/";
  {{else}}
  std::string topic = "ucl/by-unid/"+ std::string(destination_unid) + "/ep" +
                      std::to_string(destination_endpoint) + "/";
  {{/if}}
  topic += "{{asPublicationName parent.label}}/Commands/{{label}}";


  std::string payload =
    get_json_payload_for_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_command(
    {{#zcl_command_arguments}}{{#first}}fields{{/first}}{{/zcl_command_arguments}});
  
  sl_log_debug(LOG_TAG, "Sending command to %s with payload %s ---", topic.c_str() , payload.c_str());

  // Publish our command, not retained
  uic_mqtt_publish(topic.c_str(),
                   payload.c_str(),
                   payload.size(),
                   false);
}

/**
 * @brief Sends/Publishes a {{label}} command for
 * the {{parent.label}} cluster to a group.
 *
 * Publication will be made at the following topic
 * ucl/by-group/GroupID/{{asPublicationName parent.label}}/Commands/{{label}}
 *
 * @param destination_group_id  The GroupID that should receive the command.
 * {{#zcl_command_arguments}}{{#first}}
 * @param fields                Struct pointer with the fields value of the command
 * {{/first}}{{/zcl_command_arguments}}
 */
void {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_publish_{{asSnakeCaseLower label}}_command_to_group(
  uint16_t destination_group_id{{#zcl_command_arguments}}{{#first}},
  const {{asCommandFieldsType parent}} *fields
  {{/first}}{{/zcl_command_arguments}}
){
  // Create the topic
  std::string topic = "ucl/by-group/"+ std::to_string(destination_group_id) +
                      "/{{asPublicationName parent.label}}/Commands/{{label}}";

  std::string payload =
    get_json_payload_for_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_command(
    {{#zcl_command_arguments}}{{#first}}fields{{/first}}{{/zcl_command_arguments}});

  sl_log_info(LOG_TAG, "Sending group command to %s with payload %s ---", topic.c_str() , payload.c_str());

  // Publish our command, not retained
  uic_mqtt_publish(topic.c_str(),
                   payload.c_str(),
                   payload.size(),
                   false);
}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}