/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// clang-format off
{{zap_header}}
// clang-format on

/**
 * @defgroup dotdot_mqtt_hpp Internal C++ ZAP definitions
 * @brief C++ Helpers and definitions for DotDot MQTT
 *
 * @{
 */

#ifndef DOTDOT_MQTT_HPP
#define DOTDOT_MQTT_HPP

#include "dotdot_mqtt.h"
#include "dotdot_bitmap.hpp"
#include "dotdot_mqtt_helpers.hpp"

#include <set>
#include <map>
#include <string>

// clang-format off
{{#zcl_clusters}}{{#if (supportedCluster label)}}{{#unless (clusterWithoutEndpoints label)}}
/**
 * @brief Initialize {{asPublicationName label}} dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t {{dotdot_prefix}}_by_group_{{asSnakeCaseLower label}}_init();
{{/unless}}{{/if}}{{/zcl_clusters}}

{{#zcl_clusters}}{{#if (supportedCluster label)}}
{{#zcl_commands}}
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid {{parent.label}}/Commands/{{label}} messages
 *
 * @returns std::set of callbacks.
 */
std::set<{{asCommandCallback this}}_t> &get_{{asCommandCallback this}}();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/{{parent.label}}/Commands/{{label}}
 */
// clang-format off
void {{dotdot_prefix}}_on_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}(
  const char *topic,
  const char *message,
  const size_t message_length);
{{/zcl_commands}}
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * {{parent.label}}/Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<{{asWriteAttributesCallback this}}_t> & get_{{asWriteAttributesCallback this}}();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/{{label}}/Commands/WriteAttributes
 */
// clang-format off
void {{dotdot_prefix}}_on_{{asSnakeCaseLower label}}_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);

{{/if}}{{/zcl_clusters}}


// All bitmaps are defined as the cluster label for the bitmap plus the command/attribute name
{{#zcl_bitmaps}}

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> {{label}}_bitmap_data {
  {{#zcl_bitmap_items}}
{ {"{{label}}", "{{checkSpecialTypeBitmapsEnum type}}", "{{asHex mask}}", "{{asOffset mask}}"}, {
  {{#if_is_enum type}}
    {{#zcl_enums}}
      {{#if (isSubstringInString parent.label label)}}
        {{#zcl_enum_items}}
{"{{label}}", "{{value}}"}{{listComma this}}
        {{/zcl_enum_items}}
      {{/if}}
    {{/zcl_enums}}
  {{/if_is_enum}}
} }{{listComma this}}
  {{/zcl_bitmap_items}}
};
const dotdot_bitmap {{label}}("{{label}}", "{{>zcl_type type=label size=size}}", {{label}}_bitmap_data);
{{/zcl_bitmaps}}

#endif  //DOTDOT_MQTT_HPP
/** @} end dotdot_mqtt_hpp */
