/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
/**
 *
 * @defgroup dotdot_mqtt_group_commands DotDot ByGroup Listeners
 * @ingroup dotdot_mqtt
 *
 * @brief This component provides helper functions for parsing UCL by-group commands.
 *
 * @{
 */

#ifndef DOTDOT_MQTT_GROUP_COMMANDS_H
#define DOTDOT_MQTT_GROUP_COMMANDS_H

#include <stdint.h>

// Unify includes
#include "sl_status.h"
#include "uic_typedefs.h"
#include "zap-types.h"

#include "dotdot_mqtt.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus



/**
 * @brief Callback signature for by-group Basic::ResetToFactoryDefaults command.
 */
typedef void (*uic_mqtt_dotdot_by_group_basic_reset_to_factory_defaults_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Basic/reset_to_factory_defaults is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_basic_reset_to_factory_defaults_callback_set(const uic_mqtt_dotdot_by_group_basic_reset_to_factory_defaults_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_basic_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_basic_state_t,
    uic_mqtt_dotdot_basic_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/basic/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_basic_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_basic_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_power_configuration_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_power_configuration_state_t,
    uic_mqtt_dotdot_power_configuration_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/power_configuration/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_power_configuration_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_power_configuration_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_device_temperature_configuration_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_device_temperature_configuration_state_t,
    uic_mqtt_dotdot_device_temperature_configuration_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/device_temperature_configuration/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_device_temperature_configuration_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_device_temperature_configuration_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Identify::Identify command.
 */
typedef void (*uic_mqtt_dotdot_by_group_identify_identify_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_identify_command_identify_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Identify/identify is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_identify_identify_callback_set(const uic_mqtt_dotdot_by_group_identify_identify_callback_t callback);

/**
 * @brief Callback signature for by-group Identify::IdentifyQueryResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_identify_identify_query_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_identify_command_identify_query_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Identify/identify_query_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_identify_identify_query_response_callback_set(const uic_mqtt_dotdot_by_group_identify_identify_query_response_callback_t callback);

/**
 * @brief Callback signature for by-group Identify::IdentifyQuery command.
 */
typedef void (*uic_mqtt_dotdot_by_group_identify_identify_query_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Identify/identify_query is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_identify_identify_query_callback_set(const uic_mqtt_dotdot_by_group_identify_identify_query_callback_t callback);

/**
 * @brief Callback signature for by-group Identify::TriggerEffect command.
 */
typedef void (*uic_mqtt_dotdot_by_group_identify_trigger_effect_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_identify_command_trigger_effect_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Identify/trigger_effect is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_identify_trigger_effect_callback_set(const uic_mqtt_dotdot_by_group_identify_trigger_effect_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_identify_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_identify_state_t,
    uic_mqtt_dotdot_identify_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/identify/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_identify_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_identify_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Groups::AddGroup command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_add_group_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_add_group_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/add_group is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_add_group_callback_set(const uic_mqtt_dotdot_by_group_groups_add_group_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::AddGroupResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_add_group_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_add_group_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/add_group_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_add_group_response_callback_set(const uic_mqtt_dotdot_by_group_groups_add_group_response_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::ViewGroup command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_view_group_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_view_group_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/view_group is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_view_group_callback_set(const uic_mqtt_dotdot_by_group_groups_view_group_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::ViewGroupResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_view_group_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_view_group_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/view_group_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_view_group_response_callback_set(const uic_mqtt_dotdot_by_group_groups_view_group_response_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::GetGroupMembership command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_get_group_membership_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_get_group_membership_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/get_group_membership is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_get_group_membership_callback_set(const uic_mqtt_dotdot_by_group_groups_get_group_membership_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::GetGroupMembershipResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_get_group_membership_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_get_group_membership_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/get_group_membership_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_get_group_membership_response_callback_set(const uic_mqtt_dotdot_by_group_groups_get_group_membership_response_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::RemoveGroup command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_remove_group_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_remove_group_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/remove_group is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_remove_group_callback_set(const uic_mqtt_dotdot_by_group_groups_remove_group_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::RemoveGroupResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_remove_group_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_remove_group_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/remove_group_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_remove_group_response_callback_set(const uic_mqtt_dotdot_by_group_groups_remove_group_response_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::RemoveAllGroups command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_remove_all_groups_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/remove_all_groups is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_remove_all_groups_callback_set(const uic_mqtt_dotdot_by_group_groups_remove_all_groups_callback_t callback);

/**
 * @brief Callback signature for by-group Groups::AddGroupIfIdentifying command.
 */
typedef void (*uic_mqtt_dotdot_by_group_groups_add_group_if_identifying_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_groups_command_add_group_if_identifying_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Groups/add_group_if_identifying is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_groups_add_group_if_identifying_callback_set(const uic_mqtt_dotdot_by_group_groups_add_group_if_identifying_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_groups_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_groups_state_t,
    uic_mqtt_dotdot_groups_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/groups/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_groups_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_groups_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Scenes::AddScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_add_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_add_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/add_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_add_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_add_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::AddSceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_add_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_add_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/add_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_add_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_add_scene_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::ViewScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_view_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_view_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/view_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_view_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_view_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::ViewSceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_view_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_view_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/view_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_view_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_view_scene_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::RemoveScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_remove_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_remove_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/remove_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_remove_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_remove_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::RemoveSceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_remove_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_remove_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/remove_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_remove_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_remove_scene_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::RemoveAllScenes command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_remove_all_scenes_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_remove_all_scenes_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/remove_all_scenes is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_remove_all_scenes_callback_set(const uic_mqtt_dotdot_by_group_scenes_remove_all_scenes_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::RemoveAllScenesResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_remove_all_scenes_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_remove_all_scenes_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/remove_all_scenes_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_remove_all_scenes_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_remove_all_scenes_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::StoreScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_store_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_store_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/store_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_store_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_store_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::StoreSceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_store_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_store_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/store_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_store_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_store_scene_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::RecallScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_recall_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_recall_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/recall_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_recall_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_recall_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::GetSceneMembership command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_get_scene_membership_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_get_scene_membership_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/get_scene_membership is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_get_scene_membership_callback_set(const uic_mqtt_dotdot_by_group_scenes_get_scene_membership_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::GetSceneMembershipResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_get_scene_membership_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_get_scene_membership_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/get_scene_membership_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_get_scene_membership_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_get_scene_membership_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::EnhancedAddScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_enhanced_add_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_enhanced_add_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/enhanced_add_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_enhanced_add_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_enhanced_add_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::EnhancedAddSceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_enhanced_add_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_enhanced_add_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/enhanced_add_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_enhanced_add_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_enhanced_add_scene_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::EnhancedViewScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_enhanced_view_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_enhanced_view_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/enhanced_view_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_enhanced_view_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_enhanced_view_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::EnhancedViewSceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_enhanced_view_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_enhanced_view_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/enhanced_view_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_enhanced_view_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_enhanced_view_scene_response_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::CopyScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_copy_scene_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_copy_scene_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/copy_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_copy_scene_callback_set(const uic_mqtt_dotdot_by_group_scenes_copy_scene_callback_t callback);

/**
 * @brief Callback signature for by-group Scenes::CopySceneResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_scenes_copy_scene_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_scenes_command_copy_scene_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Scenes/copy_scene_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_scenes_copy_scene_response_callback_set(const uic_mqtt_dotdot_by_group_scenes_copy_scene_response_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_scenes_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_scenes_state_t,
    uic_mqtt_dotdot_scenes_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/scenes/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_scenes_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_scenes_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group OnOff::Off command.
 */
typedef void (*uic_mqtt_dotdot_by_group_on_off_off_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/OnOff/off is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_on_off_off_callback_set(const uic_mqtt_dotdot_by_group_on_off_off_callback_t callback);

/**
 * @brief Callback signature for by-group OnOff::On command.
 */
typedef void (*uic_mqtt_dotdot_by_group_on_off_on_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/OnOff/on is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_on_off_on_callback_set(const uic_mqtt_dotdot_by_group_on_off_on_callback_t callback);

/**
 * @brief Callback signature for by-group OnOff::Toggle command.
 */
typedef void (*uic_mqtt_dotdot_by_group_on_off_toggle_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/OnOff/toggle is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_on_off_toggle_callback_set(const uic_mqtt_dotdot_by_group_on_off_toggle_callback_t callback);

/**
 * @brief Callback signature for by-group OnOff::OffWithEffect command.
 */
typedef void (*uic_mqtt_dotdot_by_group_on_off_off_with_effect_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_on_off_command_off_with_effect_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/OnOff/off_with_effect is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_on_off_off_with_effect_callback_set(const uic_mqtt_dotdot_by_group_on_off_off_with_effect_callback_t callback);

/**
 * @brief Callback signature for by-group OnOff::OnWithRecallGlobalScene command.
 */
typedef void (*uic_mqtt_dotdot_by_group_on_off_on_with_recall_global_scene_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/OnOff/on_with_recall_global_scene is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_on_off_on_with_recall_global_scene_callback_set(const uic_mqtt_dotdot_by_group_on_off_on_with_recall_global_scene_callback_t callback);

/**
 * @brief Callback signature for by-group OnOff::OnWithTimedOff command.
 */
typedef void (*uic_mqtt_dotdot_by_group_on_off_on_with_timed_off_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_on_off_command_on_with_timed_off_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/OnOff/on_with_timed_off is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_on_off_on_with_timed_off_callback_set(const uic_mqtt_dotdot_by_group_on_off_on_with_timed_off_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_on_off_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_on_off_state_t,
    uic_mqtt_dotdot_on_off_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/on_off/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_on_off_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_on_off_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Level::MoveToLevel command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_move_to_level_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_move_to_level_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/move_to_level is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_move_to_level_callback_set(const uic_mqtt_dotdot_by_group_level_move_to_level_callback_t callback);

/**
 * @brief Callback signature for by-group Level::Move command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_move_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_move_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/move is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_move_callback_set(const uic_mqtt_dotdot_by_group_level_move_callback_t callback);

/**
 * @brief Callback signature for by-group Level::Step command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_step_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_step_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/step is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_step_callback_set(const uic_mqtt_dotdot_by_group_level_step_callback_t callback);

/**
 * @brief Callback signature for by-group Level::Stop command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_stop_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_stop_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/stop is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_stop_callback_set(const uic_mqtt_dotdot_by_group_level_stop_callback_t callback);

/**
 * @brief Callback signature for by-group Level::MoveToLevelWithOnOff command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_move_to_level_with_on_off_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_move_to_level_with_on_off_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/move_to_level_with_on_off is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_move_to_level_with_on_off_callback_set(const uic_mqtt_dotdot_by_group_level_move_to_level_with_on_off_callback_t callback);

/**
 * @brief Callback signature for by-group Level::MoveWithOnOff command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_move_with_on_off_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_move_with_on_off_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/move_with_on_off is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_move_with_on_off_callback_set(const uic_mqtt_dotdot_by_group_level_move_with_on_off_callback_t callback);

/**
 * @brief Callback signature for by-group Level::StepWithOnOff command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_step_with_on_off_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_step_with_on_off_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/step_with_on_off is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_step_with_on_off_callback_set(const uic_mqtt_dotdot_by_group_level_step_with_on_off_callback_t callback);

/**
 * @brief Callback signature for by-group Level::StopWithOnOff command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_stop_with_on_off_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_stop_with_on_off_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/stop_with_on_off is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_stop_with_on_off_callback_set(const uic_mqtt_dotdot_by_group_level_stop_with_on_off_callback_t callback);

/**
 * @brief Callback signature for by-group Level::MoveToClosestFrequency command.
 */
typedef void (*uic_mqtt_dotdot_by_group_level_move_to_closest_frequency_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_level_command_move_to_closest_frequency_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Level/move_to_closest_frequency is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_level_move_to_closest_frequency_callback_set(const uic_mqtt_dotdot_by_group_level_move_to_closest_frequency_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_level_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_level_state_t,
    uic_mqtt_dotdot_level_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/level/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_level_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_level_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Alarms::ResetAlarm command.
 */
typedef void (*uic_mqtt_dotdot_by_group_alarms_reset_alarm_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_alarms_command_reset_alarm_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Alarms/reset_alarm is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_alarms_reset_alarm_callback_set(const uic_mqtt_dotdot_by_group_alarms_reset_alarm_callback_t callback);

/**
 * @brief Callback signature for by-group Alarms::Alarm command.
 */
typedef void (*uic_mqtt_dotdot_by_group_alarms_alarm_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_alarms_command_alarm_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Alarms/alarm is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_alarms_alarm_callback_set(const uic_mqtt_dotdot_by_group_alarms_alarm_callback_t callback);

/**
 * @brief Callback signature for by-group Alarms::ResetAllAlarms command.
 */
typedef void (*uic_mqtt_dotdot_by_group_alarms_reset_all_alarms_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Alarms/reset_all_alarms is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_alarms_reset_all_alarms_callback_set(const uic_mqtt_dotdot_by_group_alarms_reset_all_alarms_callback_t callback);

/**
 * @brief Callback signature for by-group Alarms::GetAlarmResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_alarms_get_alarm_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_alarms_command_get_alarm_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Alarms/get_alarm_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_alarms_get_alarm_response_callback_set(const uic_mqtt_dotdot_by_group_alarms_get_alarm_response_callback_t callback);

/**
 * @brief Callback signature for by-group Alarms::GetAlarm command.
 */
typedef void (*uic_mqtt_dotdot_by_group_alarms_get_alarm_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Alarms/get_alarm is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_alarms_get_alarm_callback_set(const uic_mqtt_dotdot_by_group_alarms_get_alarm_callback_t callback);

/**
 * @brief Callback signature for by-group Alarms::ResetAlarmLog command.
 */
typedef void (*uic_mqtt_dotdot_by_group_alarms_reset_alarm_log_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Alarms/reset_alarm_log is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_alarms_reset_alarm_log_callback_set(const uic_mqtt_dotdot_by_group_alarms_reset_alarm_log_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_alarms_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_alarms_state_t,
    uic_mqtt_dotdot_alarms_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/alarms/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_alarms_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_alarms_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_time_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_time_state_t,
    uic_mqtt_dotdot_time_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/time/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_time_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_time_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group PollControl::CheckIn command.
 */
typedef void (*uic_mqtt_dotdot_by_group_poll_control_check_in_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/PollControl/check_in is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_poll_control_check_in_callback_set(const uic_mqtt_dotdot_by_group_poll_control_check_in_callback_t callback);

/**
 * @brief Callback signature for by-group PollControl::CheckInResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_poll_control_check_in_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_poll_control_command_check_in_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/PollControl/check_in_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_poll_control_check_in_response_callback_set(const uic_mqtt_dotdot_by_group_poll_control_check_in_response_callback_t callback);

/**
 * @brief Callback signature for by-group PollControl::FastPollStop command.
 */
typedef void (*uic_mqtt_dotdot_by_group_poll_control_fast_poll_stop_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/PollControl/fast_poll_stop is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_poll_control_fast_poll_stop_callback_set(const uic_mqtt_dotdot_by_group_poll_control_fast_poll_stop_callback_t callback);

/**
 * @brief Callback signature for by-group PollControl::SetLongPollInterval command.
 */
typedef void (*uic_mqtt_dotdot_by_group_poll_control_set_long_poll_interval_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_poll_control_command_set_long_poll_interval_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/PollControl/set_long_poll_interval is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_poll_control_set_long_poll_interval_callback_set(const uic_mqtt_dotdot_by_group_poll_control_set_long_poll_interval_callback_t callback);

/**
 * @brief Callback signature for by-group PollControl::SetShortPollInterval command.
 */
typedef void (*uic_mqtt_dotdot_by_group_poll_control_set_short_poll_interval_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_poll_control_command_set_short_poll_interval_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/PollControl/set_short_poll_interval is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_poll_control_set_short_poll_interval_callback_set(const uic_mqtt_dotdot_by_group_poll_control_set_short_poll_interval_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_poll_control_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_poll_control_state_t,
    uic_mqtt_dotdot_poll_control_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/poll_control/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_poll_control_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_poll_control_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_shade_configuration_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_shade_configuration_state_t,
    uic_mqtt_dotdot_shade_configuration_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/shade_configuration/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_shade_configuration_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_shade_configuration_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group DoorLock::LockDoor command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_lock_door_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_lock_door_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/lock_door is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_lock_door_callback_set(const uic_mqtt_dotdot_by_group_door_lock_lock_door_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::LockDoorResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_lock_door_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_lock_door_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/lock_door_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_lock_door_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_lock_door_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::UnlockDoor command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_unlock_door_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_unlock_door_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/unlock_door is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_unlock_door_callback_set(const uic_mqtt_dotdot_by_group_door_lock_unlock_door_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::UnlockDoorResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_unlock_door_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_unlock_door_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/unlock_door_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_unlock_door_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_unlock_door_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::Toggle command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_toggle_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_toggle_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/toggle is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_toggle_callback_set(const uic_mqtt_dotdot_by_group_door_lock_toggle_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ToggleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_toggle_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_toggle_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/toggle_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_toggle_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_toggle_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::UnlockWithTimeout command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_unlock_with_timeout_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/unlock_with_timeout is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_unlock_with_timeout_callback_set(const uic_mqtt_dotdot_by_group_door_lock_unlock_with_timeout_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::UnlockWithTimeoutResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_unlock_with_timeout_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/unlock_with_timeout_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_unlock_with_timeout_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_unlock_with_timeout_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetLogRecord command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_log_record_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_log_record_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_log_record is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_log_record_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_log_record_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetLogRecordResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_log_record_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_log_record_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_log_record_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_log_record_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_log_record_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetPINCode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_setpin_code_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_setpin_code_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/setpin_code is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_setpin_code_callback_set(const uic_mqtt_dotdot_by_group_door_lock_setpin_code_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetPINCodeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_setpin_code_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_setpin_code_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/setpin_code_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_setpin_code_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_setpin_code_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetPINCode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_getpin_code_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_getpin_code_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/getpin_code is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_getpin_code_callback_set(const uic_mqtt_dotdot_by_group_door_lock_getpin_code_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetPINCodeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_getpin_code_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_pin_code_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/getpin_code_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_getpin_code_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_getpin_code_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearPINCode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clearpin_code_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clearpin_code_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clearpin_code is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clearpin_code_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clearpin_code_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearPINCodeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clearpin_code_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clearpin_code_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clearpin_code_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clearpin_code_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clearpin_code_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearAllPINCodes command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_allpin_codes_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_allpin_codes is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_allpin_codes_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_allpin_codes_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearAllPINCodesResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_allpin_codes_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_allpin_codes_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_allpin_codes_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_allpin_codes_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_allpin_codes_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetUserStatus command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_user_status_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_user_status_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_user_status is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_user_status_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_user_status_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetUserStatusResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_user_status_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_user_status_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_user_status_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_user_status_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_user_status_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetUserStatus command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_user_status_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_user_status_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_user_status is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_user_status_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_user_status_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetUserStatusResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_user_status_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_user_status_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_user_status_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_user_status_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_user_status_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetWeekdaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_weekday_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_weekday_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_weekday_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_weekday_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetWeekdayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_weekday_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_weekday_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_weekday_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetWeekdaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_weekday_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_weekday_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_weekday_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_weekday_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetWeekdayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_weekday_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_weekday_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_weekday_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearWeekdaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_weekday_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_weekday_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_weekday_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_weekday_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearWeekdayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_weekday_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_weekday_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_weekday_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetYearDaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_year_day_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_year_day_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_year_day_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_year_day_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetYearDayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_year_day_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_year_day_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_year_day_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetYearDaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_year_day_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_year_day_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_year_day_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_year_day_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetYearDayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_year_day_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_year_day_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_year_day_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearYearDaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_year_day_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_year_day_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_year_day_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_year_day_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearYearDayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_year_day_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_year_day_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_year_day_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetHolidaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_holiday_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_holiday_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_holiday_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_holiday_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetHolidayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_holiday_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_holiday_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_holiday_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetHolidaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_holiday_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_holiday_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_holiday_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_holiday_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetHolidayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_holiday_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_holiday_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_holiday_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearHolidaySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_holiday_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_holiday_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_holiday_schedule_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_holiday_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearHolidayScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_holiday_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_holiday_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_holiday_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetUserType command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_user_type_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_user_type_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_user_type is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_user_type_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_user_type_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetUserTypeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_set_user_type_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_set_user_type_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/set_user_type_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_set_user_type_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_set_user_type_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetUserType command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_user_type_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_user_type_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_user_type is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_user_type_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_user_type_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetUserTypeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_user_type_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_get_user_type_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_user_type_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_user_type_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_user_type_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetRFIDCode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_setrfid_code_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_setrfid_code_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/setrfid_code is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_setrfid_code_callback_set(const uic_mqtt_dotdot_by_group_door_lock_setrfid_code_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::SetRFIDCodeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_setrfid_code_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_setrfid_code_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/setrfid_code_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_setrfid_code_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_setrfid_code_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetRFIDCode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_getrfid_code_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_getrfid_code_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/getrfid_code is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_getrfid_code_callback_set(const uic_mqtt_dotdot_by_group_door_lock_getrfid_code_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetRFIDCodeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_getrfid_code_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_getrfid_code_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/getrfid_code_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_getrfid_code_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_getrfid_code_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearRFIDCode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clearrfid_code_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clearrfid_code_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clearrfid_code is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clearrfid_code_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clearrfid_code_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearRFIDCodeResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clearrfid_code_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clearrfid_code_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clearrfid_code_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clearrfid_code_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clearrfid_code_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearAllRFIDCodes command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_allrfid_codes_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_allrfid_codes is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_allrfid_codes_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_allrfid_codes_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ClearAllRFIDCodesResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_clear_allrfid_codes_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_clear_allrfid_codes_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/clear_allrfid_codes_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_clear_allrfid_codes_response_callback_set(const uic_mqtt_dotdot_by_group_door_lock_clear_allrfid_codes_response_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::OperatingEventNotification command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_operating_event_notification_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_operating_event_notification_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/operating_event_notification is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_operating_event_notification_callback_set(const uic_mqtt_dotdot_by_group_door_lock_operating_event_notification_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::ProgrammingEventNotification command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_programming_event_notification_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_door_lock_command_programming_event_notification_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/programming_event_notification is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_programming_event_notification_callback_set(const uic_mqtt_dotdot_by_group_door_lock_programming_event_notification_callback_t callback);

/**
 * @brief Callback signature for by-group DoorLock::GetAllPINCodes command.
 */
typedef void (*uic_mqtt_dotdot_by_group_door_lock_get_all_pin_codes_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/DoorLock/get_all_pin_codes is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_door_lock_get_all_pin_codes_callback_set(const uic_mqtt_dotdot_by_group_door_lock_get_all_pin_codes_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_door_lock_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_door_lock_state_t,
    uic_mqtt_dotdot_door_lock_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/door_lock/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_door_lock_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_door_lock_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group WindowCovering::UpOrOpen command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_up_or_open_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/up_or_open is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_up_or_open_callback_set(const uic_mqtt_dotdot_by_group_window_covering_up_or_open_callback_t callback);

/**
 * @brief Callback signature for by-group WindowCovering::DownOrClose command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_down_or_close_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/down_or_close is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_down_or_close_callback_set(const uic_mqtt_dotdot_by_group_window_covering_down_or_close_callback_t callback);

/**
 * @brief Callback signature for by-group WindowCovering::Stop command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_stop_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/stop is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_stop_callback_set(const uic_mqtt_dotdot_by_group_window_covering_stop_callback_t callback);

/**
 * @brief Callback signature for by-group WindowCovering::GoToLiftValue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_go_to_lift_value_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_window_covering_command_go_to_lift_value_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/go_to_lift_value is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_go_to_lift_value_callback_set(const uic_mqtt_dotdot_by_group_window_covering_go_to_lift_value_callback_t callback);

/**
 * @brief Callback signature for by-group WindowCovering::GoToLiftPercentage command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_go_to_lift_percentage_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_window_covering_command_go_to_lift_percentage_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/go_to_lift_percentage is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_go_to_lift_percentage_callback_set(const uic_mqtt_dotdot_by_group_window_covering_go_to_lift_percentage_callback_t callback);

/**
 * @brief Callback signature for by-group WindowCovering::GoToTiltValue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_go_to_tilt_value_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_window_covering_command_go_to_tilt_value_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/go_to_tilt_value is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_go_to_tilt_value_callback_set(const uic_mqtt_dotdot_by_group_window_covering_go_to_tilt_value_callback_t callback);

/**
 * @brief Callback signature for by-group WindowCovering::GoToTiltPercentage command.
 */
typedef void (*uic_mqtt_dotdot_by_group_window_covering_go_to_tilt_percentage_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_window_covering_command_go_to_tilt_percentage_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/WindowCovering/go_to_tilt_percentage is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_window_covering_go_to_tilt_percentage_callback_set(const uic_mqtt_dotdot_by_group_window_covering_go_to_tilt_percentage_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_window_covering_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_window_covering_state_t,
    uic_mqtt_dotdot_window_covering_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/window_covering/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_window_covering_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_window_covering_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group BarrierControl::GoToPercent command.
 */
typedef void (*uic_mqtt_dotdot_by_group_barrier_control_go_to_percent_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_barrier_control_command_go_to_percent_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/BarrierControl/go_to_percent is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_barrier_control_go_to_percent_callback_set(const uic_mqtt_dotdot_by_group_barrier_control_go_to_percent_callback_t callback);

/**
 * @brief Callback signature for by-group BarrierControl::Stop command.
 */
typedef void (*uic_mqtt_dotdot_by_group_barrier_control_stop_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/BarrierControl/stop is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_barrier_control_stop_callback_set(const uic_mqtt_dotdot_by_group_barrier_control_stop_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_barrier_control_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_barrier_control_state_t,
    uic_mqtt_dotdot_barrier_control_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/barrier_control/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_barrier_control_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_barrier_control_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_pump_configuration_and_control_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_pump_configuration_and_control_state_t,
    uic_mqtt_dotdot_pump_configuration_and_control_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/pump_configuration_and_control/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_pump_configuration_and_control_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_pump_configuration_and_control_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Thermostat::SetpointRaiseOrLower command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_setpoint_raise_or_lower_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_thermostat_command_setpoint_raise_or_lower_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/setpoint_raise_or_lower is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_setpoint_raise_or_lower_callback_set(const uic_mqtt_dotdot_by_group_thermostat_setpoint_raise_or_lower_callback_t callback);

/**
 * @brief Callback signature for by-group Thermostat::GetWeeklyScheduleResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_get_weekly_schedule_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/get_weekly_schedule_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_get_weekly_schedule_response_callback_set(const uic_mqtt_dotdot_by_group_thermostat_get_weekly_schedule_response_callback_t callback);

/**
 * @brief Callback signature for by-group Thermostat::SetWeeklySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_set_weekly_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_thermostat_command_set_weekly_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/set_weekly_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_set_weekly_schedule_callback_set(const uic_mqtt_dotdot_by_group_thermostat_set_weekly_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group Thermostat::GetRelayStatusLogResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_get_relay_status_log_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_thermostat_command_get_relay_status_log_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/get_relay_status_log_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_get_relay_status_log_response_callback_set(const uic_mqtt_dotdot_by_group_thermostat_get_relay_status_log_response_callback_t callback);

/**
 * @brief Callback signature for by-group Thermostat::GetWeeklySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_get_weekly_schedule_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/get_weekly_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_get_weekly_schedule_callback_set(const uic_mqtt_dotdot_by_group_thermostat_get_weekly_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group Thermostat::ClearWeeklySchedule command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_clear_weekly_schedule_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/clear_weekly_schedule is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_clear_weekly_schedule_callback_set(const uic_mqtt_dotdot_by_group_thermostat_clear_weekly_schedule_callback_t callback);

/**
 * @brief Callback signature for by-group Thermostat::GetRelayStatusLog command.
 */
typedef void (*uic_mqtt_dotdot_by_group_thermostat_get_relay_status_log_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Thermostat/get_relay_status_log is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_thermostat_get_relay_status_log_callback_set(const uic_mqtt_dotdot_by_group_thermostat_get_relay_status_log_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_thermostat_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_thermostat_state_t,
    uic_mqtt_dotdot_thermostat_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/thermostat/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_thermostat_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_thermostat_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_fan_control_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_fan_control_state_t,
    uic_mqtt_dotdot_fan_control_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/fan_control/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_fan_control_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_fan_control_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_dehumidification_control_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_dehumidification_control_state_t,
    uic_mqtt_dotdot_dehumidification_control_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/dehumidification_control/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_dehumidification_control_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_dehumidification_control_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_thermostat_user_interface_configuration_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_thermostat_user_interface_configuration_state_t,
    uic_mqtt_dotdot_thermostat_user_interface_configuration_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/thermostat_user_interface_configuration/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_thermostat_user_interface_configuration_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_thermostat_user_interface_configuration_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group ColorControl::MoveToHue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_to_hue_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_to_hue_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_to_hue is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_to_hue_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_to_hue_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveHue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_hue_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_hue_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_hue is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_hue_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_hue_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::StepHue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_step_hue_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_step_hue_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/step_hue is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_step_hue_callback_set(const uic_mqtt_dotdot_by_group_color_control_step_hue_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveToSaturation command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_to_saturation_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_to_saturation_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_to_saturation is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_to_saturation_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_to_saturation_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveSaturation command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_saturation_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_saturation_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_saturation is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_saturation_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_saturation_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::StepSaturation command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_step_saturation_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_step_saturation_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/step_saturation is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_step_saturation_callback_set(const uic_mqtt_dotdot_by_group_color_control_step_saturation_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveToHueAndSaturation command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_to_hue_and_saturation_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_to_hue_and_saturation_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_to_hue_and_saturation is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_to_hue_and_saturation_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_to_hue_and_saturation_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveToColor command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_to_color_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_to_color_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_to_color is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_to_color_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_to_color_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveColor command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_color_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_color_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_color is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_color_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_color_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::StepColor command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_step_color_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_step_color_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/step_color is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_step_color_callback_set(const uic_mqtt_dotdot_by_group_color_control_step_color_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveToColorTemperature command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_to_color_temperature_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_to_color_temperature_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_to_color_temperature is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_to_color_temperature_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_to_color_temperature_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::EnhancedMoveToHue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_enhanced_move_to_hue_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_enhanced_move_to_hue_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/enhanced_move_to_hue is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_enhanced_move_to_hue_callback_set(const uic_mqtt_dotdot_by_group_color_control_enhanced_move_to_hue_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::EnhancedMoveHue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_enhanced_move_hue_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_enhanced_move_hue_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/enhanced_move_hue is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_enhanced_move_hue_callback_set(const uic_mqtt_dotdot_by_group_color_control_enhanced_move_hue_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::EnhancedStepHue command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_enhanced_step_hue_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_enhanced_step_hue_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/enhanced_step_hue is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_enhanced_step_hue_callback_set(const uic_mqtt_dotdot_by_group_color_control_enhanced_step_hue_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::EnhancedMoveToHueAndSaturation command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_enhanced_move_to_hue_and_saturation_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_enhanced_move_to_hue_and_saturation_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/enhanced_move_to_hue_and_saturation is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_enhanced_move_to_hue_and_saturation_callback_set(const uic_mqtt_dotdot_by_group_color_control_enhanced_move_to_hue_and_saturation_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::ColorLoopSet command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_color_loop_set_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_color_loop_set_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/color_loop_set is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_color_loop_set_callback_set(const uic_mqtt_dotdot_by_group_color_control_color_loop_set_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::StopMoveStep command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_stop_move_step_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_stop_move_step_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/stop_move_step is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_stop_move_step_callback_set(const uic_mqtt_dotdot_by_group_color_control_stop_move_step_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::MoveColorTemperature command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_move_color_temperature_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_move_color_temperature_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/move_color_temperature is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_move_color_temperature_callback_set(const uic_mqtt_dotdot_by_group_color_control_move_color_temperature_callback_t callback);

/**
 * @brief Callback signature for by-group ColorControl::StepColorTemperature command.
 */
typedef void (*uic_mqtt_dotdot_by_group_color_control_step_color_temperature_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_color_control_command_step_color_temperature_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ColorControl/step_color_temperature is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_color_control_step_color_temperature_callback_set(const uic_mqtt_dotdot_by_group_color_control_step_color_temperature_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_color_control_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_color_control_state_t,
    uic_mqtt_dotdot_color_control_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/color_control/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_color_control_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_color_control_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_ballast_configuration_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_ballast_configuration_state_t,
    uic_mqtt_dotdot_ballast_configuration_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/ballast_configuration/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_ballast_configuration_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_ballast_configuration_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_illuminance_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_illuminance_measurement_state_t,
    uic_mqtt_dotdot_illuminance_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/illuminance_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_illuminance_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_illuminance_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_illuminance_level_sensing_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_illuminance_level_sensing_state_t,
    uic_mqtt_dotdot_illuminance_level_sensing_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/illuminance_level_sensing/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_illuminance_level_sensing_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_illuminance_level_sensing_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_temperature_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_temperature_measurement_state_t,
    uic_mqtt_dotdot_temperature_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/temperature_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_temperature_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_temperature_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_pressure_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_pressure_measurement_state_t,
    uic_mqtt_dotdot_pressure_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/pressure_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_pressure_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_pressure_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_flow_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_flow_measurement_state_t,
    uic_mqtt_dotdot_flow_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/flow_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_flow_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_flow_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_relativity_humidity_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_relativity_humidity_state_t,
    uic_mqtt_dotdot_relativity_humidity_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/relativity_humidity/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_relativity_humidity_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_relativity_humidity_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_occupancy_sensing_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_occupancy_sensing_state_t,
    uic_mqtt_dotdot_occupancy_sensing_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/occupancy_sensing/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_occupancy_sensing_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_occupancy_sensing_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_soil_moisture_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_soil_moisture_state_t,
    uic_mqtt_dotdot_soil_moisture_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/soil_moisture/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_soil_moisture_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_soil_moisture_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_ph_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_ph_measurement_state_t,
    uic_mqtt_dotdot_ph_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/ph_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_ph_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_ph_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_electrical_conductivity_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_electrical_conductivity_measurement_state_t,
    uic_mqtt_dotdot_electrical_conductivity_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/electrical_conductivity_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_electrical_conductivity_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_electrical_conductivity_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_wind_speed_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_wind_speed_measurement_state_t,
    uic_mqtt_dotdot_wind_speed_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/wind_speed_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_wind_speed_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_wind_speed_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_carbon_monoxide_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_carbon_monoxide_state_t,
    uic_mqtt_dotdot_carbon_monoxide_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/carbon_monoxide/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_carbon_monoxide_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_carbon_monoxide_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_carbon_dioxide_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_carbon_dioxide_state_t,
    uic_mqtt_dotdot_carbon_dioxide_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/carbon_dioxide/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_carbon_dioxide_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_carbon_dioxide_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_pm25_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_pm25_state_t,
    uic_mqtt_dotdot_pm25_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/pm25/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_pm25_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_pm25_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group IASZone::ZoneEnrollResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_ias_zone_zone_enroll_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_ias_zone_command_zone_enroll_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASZone/zone_enroll_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_ias_zone_zone_enroll_response_callback_set(const uic_mqtt_dotdot_by_group_ias_zone_zone_enroll_response_callback_t callback);

/**
 * @brief Callback signature for by-group IASZone::ZoneStatusChangeNotification command.
 */
typedef void (*uic_mqtt_dotdot_by_group_ias_zone_zone_status_change_notification_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_ias_zone_command_zone_status_change_notification_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASZone/zone_status_change_notification is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_ias_zone_zone_status_change_notification_callback_set(const uic_mqtt_dotdot_by_group_ias_zone_zone_status_change_notification_callback_t callback);

/**
 * @brief Callback signature for by-group IASZone::InitiateNormalOperationMode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_ias_zone_initiate_normal_operation_mode_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASZone/initiate_normal_operation_mode is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_ias_zone_initiate_normal_operation_mode_callback_set(const uic_mqtt_dotdot_by_group_ias_zone_initiate_normal_operation_mode_callback_t callback);

/**
 * @brief Callback signature for by-group IASZone::ZoneEnrollRequest command.
 */
typedef void (*uic_mqtt_dotdot_by_group_ias_zone_zone_enroll_request_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_ias_zone_command_zone_enroll_request_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASZone/zone_enroll_request is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_ias_zone_zone_enroll_request_callback_set(const uic_mqtt_dotdot_by_group_ias_zone_zone_enroll_request_callback_t callback);

/**
 * @brief Callback signature for by-group IASZone::InitiateTestMode command.
 */
typedef void (*uic_mqtt_dotdot_by_group_ias_zone_initiate_test_mode_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_ias_zone_command_initiate_test_mode_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASZone/initiate_test_mode is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_ias_zone_initiate_test_mode_callback_set(const uic_mqtt_dotdot_by_group_ias_zone_initiate_test_mode_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_ias_zone_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_ias_zone_state_t,
    uic_mqtt_dotdot_ias_zone_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/ias_zone/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_ias_zone_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_ias_zone_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group IASWD::StartWarning command.
 */
typedef void (*uic_mqtt_dotdot_by_group_iaswd_start_warning_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_iaswd_command_start_warning_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASWD/start_warning is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_iaswd_start_warning_callback_set(const uic_mqtt_dotdot_by_group_iaswd_start_warning_callback_t callback);

/**
 * @brief Callback signature for by-group IASWD::Squawk command.
 */
typedef void (*uic_mqtt_dotdot_by_group_iaswd_squawk_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_iaswd_command_squawk_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/IASWD/squawk is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_iaswd_squawk_callback_set(const uic_mqtt_dotdot_by_group_iaswd_squawk_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_iaswd_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_iaswd_state_t,
    uic_mqtt_dotdot_iaswd_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/iaswd/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_iaswd_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_iaswd_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_metering_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_metering_state_t,
    uic_mqtt_dotdot_metering_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/metering/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_metering_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_metering_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group ElectricalMeasurement::GetProfileInfoResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_electrical_measurement_get_profile_info_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_electrical_measurement_command_get_profile_info_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ElectricalMeasurement/get_profile_info_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_electrical_measurement_get_profile_info_response_callback_set(const uic_mqtt_dotdot_by_group_electrical_measurement_get_profile_info_response_callback_t callback);

/**
 * @brief Callback signature for by-group ElectricalMeasurement::GetProfileInfo command.
 */
typedef void (*uic_mqtt_dotdot_by_group_electrical_measurement_get_profile_info_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ElectricalMeasurement/get_profile_info is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_electrical_measurement_get_profile_info_callback_set(const uic_mqtt_dotdot_by_group_electrical_measurement_get_profile_info_callback_t callback);

/**
 * @brief Callback signature for by-group ElectricalMeasurement::GetMeasurementProfileResponse command.
 */
typedef void (*uic_mqtt_dotdot_by_group_electrical_measurement_get_measurement_profile_response_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_response_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ElectricalMeasurement/get_measurement_profile_response is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_electrical_measurement_get_measurement_profile_response_callback_set(const uic_mqtt_dotdot_by_group_electrical_measurement_get_measurement_profile_response_callback_t callback);

/**
 * @brief Callback signature for by-group ElectricalMeasurement::GetMeasurementProfile command.
 */
typedef void (*uic_mqtt_dotdot_by_group_electrical_measurement_get_measurement_profile_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ElectricalMeasurement/get_measurement_profile is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_electrical_measurement_get_measurement_profile_callback_set(const uic_mqtt_dotdot_by_group_electrical_measurement_get_measurement_profile_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_electrical_measurement_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_electrical_measurement_state_t,
    uic_mqtt_dotdot_electrical_measurement_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/electrical_measurement/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_electrical_measurement_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_electrical_measurement_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_diagnostics_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_diagnostics_state_t,
    uic_mqtt_dotdot_diagnostics_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/diagnostics/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_diagnostics_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_diagnostics_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group Binding::Bind command.
 */
typedef void (*uic_mqtt_dotdot_by_group_binding_bind_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_binding_command_bind_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Binding/bind is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_binding_bind_callback_set(const uic_mqtt_dotdot_by_group_binding_bind_callback_t callback);

/**
 * @brief Callback signature for by-group Binding::Unbind command.
 */
typedef void (*uic_mqtt_dotdot_by_group_binding_unbind_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_binding_command_unbind_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Binding/unbind is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_binding_unbind_callback_set(const uic_mqtt_dotdot_by_group_binding_unbind_callback_t callback);

/**
 * @brief Callback signature for by-group Binding::BindToProtocolController command.
 */
typedef void (*uic_mqtt_dotdot_by_group_binding_bind_to_protocol_controller_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_binding_command_bind_to_protocol_controller_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Binding/bind_to_protocol_controller is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_binding_bind_to_protocol_controller_callback_set(const uic_mqtt_dotdot_by_group_binding_bind_to_protocol_controller_callback_t callback);

/**
 * @brief Callback signature for by-group Binding::UnbindFromProtocolController command.
 */
typedef void (*uic_mqtt_dotdot_by_group_binding_unbind_from_protocol_controller_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_binding_command_unbind_from_protocol_controller_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/Binding/unbind_from_protocol_controller is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_binding_unbind_from_protocol_controller_callback_set(const uic_mqtt_dotdot_by_group_binding_unbind_from_protocol_controller_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_binding_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_binding_state_t,
    uic_mqtt_dotdot_binding_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/binding/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_binding_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_binding_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_name_and_location_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_name_and_location_state_t,
    uic_mqtt_dotdot_name_and_location_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/name_and_location/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_name_and_location_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_name_and_location_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group ConfigurationParameters::DiscoverParameter command.
 */
typedef void (*uic_mqtt_dotdot_by_group_configuration_parameters_discover_parameter_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ConfigurationParameters/discover_parameter is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_configuration_parameters_discover_parameter_callback_set(const uic_mqtt_dotdot_by_group_configuration_parameters_discover_parameter_callback_t callback);

/**
 * @brief Callback signature for by-group ConfigurationParameters::DefaultResetAllParameters command.
 */
typedef void (*uic_mqtt_dotdot_by_group_configuration_parameters_default_reset_all_parameters_callback_t)(
    const dotdot_group_id_t group_id
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ConfigurationParameters/default_reset_all_parameters is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_configuration_parameters_default_reset_all_parameters_callback_set(const uic_mqtt_dotdot_by_group_configuration_parameters_default_reset_all_parameters_callback_t callback);

/**
 * @brief Callback signature for by-group ConfigurationParameters::SetParameter command.
 */
typedef void (*uic_mqtt_dotdot_by_group_configuration_parameters_set_parameter_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_configuration_parameters_command_set_parameter_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ConfigurationParameters/set_parameter is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_configuration_parameters_set_parameter_callback_set(const uic_mqtt_dotdot_by_group_configuration_parameters_set_parameter_callback_t callback);

/**
 * @brief Callback signature for by-group ConfigurationParameters::DiscoverParameterRange command.
 */
typedef void (*uic_mqtt_dotdot_by_group_configuration_parameters_discover_parameter_range_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_range_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/ConfigurationParameters/discover_parameter_range is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_configuration_parameters_discover_parameter_range_callback_set(const uic_mqtt_dotdot_by_group_configuration_parameters_discover_parameter_range_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_configuration_parameters_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_configuration_parameters_state_t,
    uic_mqtt_dotdot_configuration_parameters_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/configuration_parameters/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_configuration_parameters_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_configuration_parameters_write_attributes_callback_t callback
);



/**
 * @brief Callback signature for by-group AoXLocator::IQReport command.
 */
typedef void (*uic_mqtt_dotdot_by_group_aox_locator_iq_report_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_aox_locator_command_iq_report_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/AoXLocator/iq_report is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_aox_locator_iq_report_callback_set(const uic_mqtt_dotdot_by_group_aox_locator_iq_report_callback_t callback);

/**
 * @brief Callback signature for by-group AoXLocator::AngleReport command.
 */
typedef void (*uic_mqtt_dotdot_by_group_aox_locator_angle_report_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_aox_locator_command_angle_report_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/AoXLocator/angle_report is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_aox_locator_angle_report_callback_set(const uic_mqtt_dotdot_by_group_aox_locator_angle_report_callback_t callback);

/**
 * @brief Callback signature for by-group AoXLocator::AngleCorrection command.
 */
typedef void (*uic_mqtt_dotdot_by_group_aox_locator_angle_correction_callback_t)(
    const dotdot_group_id_t group_id,
    const uic_mqtt_dotdot_aox_locator_command_angle_correction_fields_t *fields
);

/**
 * Setup handler to be called when a
 * ucl/by-group/+/AoXLocator/angle_correction is received.
 * Setting this callback will overwrite the previous set callback.
 *
 */
void uic_mqtt_dotdot_by_group_aox_locator_angle_correction_callback_set(const uic_mqtt_dotdot_by_group_aox_locator_angle_correction_callback_t callback);

typedef void (*uic_mqtt_dotdot_by_group_aox_locator_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_aox_locator_state_t,
    uic_mqtt_dotdot_aox_locator_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/aox_locator/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_aox_locator_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_aox_locator_write_attributes_callback_t callback
);



typedef void (*uic_mqtt_dotdot_by_group_aox_position_estimation_write_attributes_callback_t)(
    const dotdot_group_id_t group_id,
    uic_mqtt_dotdot_aox_position_estimation_state_t,
    uic_mqtt_dotdot_aox_position_estimation_updated_state_t
);

/**
 * Setup a callback for WriteAttribute to be called when a
 * ucl/by-group/+/aox_position_estimation/Commands/WriteAttributes is received.
 * Setting this callback will overwrite any previously set callback.
 */
void uic_mqtt_dotdot_by_group_aox_position_estimation_write_attributes_callback_set(
  const uic_mqtt_dotdot_by_group_aox_position_estimation_write_attributes_callback_t callback
);



#ifdef __cplusplus
}
#endif // __cplusplus

#endif // DOTDOT_MQTT_GROUP_COMMANDS_H
/** @} end dotdot_mqtt_group_commands */
