/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

/**
 * @defgroup dotdot_mqtt_supported_generated_commands Dotdot MQTT Supported Generated commands
 * @ingroup dotdot_mqtt
 * @brief This module allows to issue advertise a list of
 * SupportedGeneratedCommands for a given UNID / Endpoint using UCL/MQTT
 *
 * @{
 */

#ifndef DOTDOT_MQTT_SUPPORTED_GENERATED_COMMANDS_H
#define DOTDOT_MQTT_SUPPORTED_GENERATED_COMMANDS_H

// Type definitions
#include <stdbool.h>
#include "uic_typedefs.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


/**
 * @brief Struct containing the list of commands for Basic
 */
typedef struct _uic_mqtt_dotdot_basic_supported_commands_ {
  bool reset_to_factory_defaults;
  bool write_attributes;
} uic_mqtt_dotdot_basic_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Basic cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Basic/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_basic_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_basic_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for PowerConfiguration
 */
typedef struct _uic_mqtt_dotdot_power_configuration_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_power_configuration_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the PowerConfiguration cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/PowerConfiguration/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_power_configuration_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_power_configuration_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for DeviceTemperatureConfiguration
 */
typedef struct _uic_mqtt_dotdot_device_temperature_configuration_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_device_temperature_configuration_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the DeviceTemperatureConfiguration cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/DeviceTemperatureConfiguration/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_device_temperature_configuration_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_device_temperature_configuration_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Identify
 */
typedef struct _uic_mqtt_dotdot_identify_supported_commands_ {
  bool identify;
  bool identify_query_response;
  bool identify_query;
  bool trigger_effect;
  bool write_attributes;
} uic_mqtt_dotdot_identify_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Identify cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Identify/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_identify_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_identify_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Groups
 */
typedef struct _uic_mqtt_dotdot_groups_supported_commands_ {
  bool add_group;
  bool add_group_response;
  bool view_group;
  bool view_group_response;
  bool get_group_membership;
  bool get_group_membership_response;
  bool remove_group;
  bool remove_group_response;
  bool remove_all_groups;
  bool add_group_if_identifying;
  bool write_attributes;
} uic_mqtt_dotdot_groups_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Groups cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Groups/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_groups_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_groups_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Scenes
 */
typedef struct _uic_mqtt_dotdot_scenes_supported_commands_ {
  bool add_scene;
  bool add_scene_response;
  bool view_scene;
  bool view_scene_response;
  bool remove_scene;
  bool remove_scene_response;
  bool remove_all_scenes;
  bool remove_all_scenes_response;
  bool store_scene;
  bool store_scene_response;
  bool recall_scene;
  bool get_scene_membership;
  bool get_scene_membership_response;
  bool enhanced_add_scene;
  bool enhanced_add_scene_response;
  bool enhanced_view_scene;
  bool enhanced_view_scene_response;
  bool copy_scene;
  bool copy_scene_response;
  bool write_attributes;
} uic_mqtt_dotdot_scenes_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Scenes cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Scenes/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_scenes_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_scenes_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for OnOff
 */
typedef struct _uic_mqtt_dotdot_on_off_supported_commands_ {
  bool off;
  bool on;
  bool toggle;
  bool off_with_effect;
  bool on_with_recall_global_scene;
  bool on_with_timed_off;
  bool write_attributes;
} uic_mqtt_dotdot_on_off_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the OnOff cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/OnOff/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_on_off_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_on_off_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Level
 */
typedef struct _uic_mqtt_dotdot_level_supported_commands_ {
  bool move_to_level;
  bool move;
  bool step;
  bool stop;
  bool move_to_level_with_on_off;
  bool move_with_on_off;
  bool step_with_on_off;
  bool stop_with_on_off;
  bool move_to_closest_frequency;
  bool write_attributes;
} uic_mqtt_dotdot_level_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Level cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Level/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_level_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_level_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Alarms
 */
typedef struct _uic_mqtt_dotdot_alarms_supported_commands_ {
  bool reset_alarm;
  bool alarm;
  bool reset_all_alarms;
  bool get_alarm_response;
  bool get_alarm;
  bool reset_alarm_log;
  bool write_attributes;
} uic_mqtt_dotdot_alarms_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Alarms cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Alarms/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_alarms_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_alarms_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Time
 */
typedef struct _uic_mqtt_dotdot_time_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_time_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Time cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Time/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_time_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_time_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for PollControl
 */
typedef struct _uic_mqtt_dotdot_poll_control_supported_commands_ {
  bool check_in;
  bool check_in_response;
  bool fast_poll_stop;
  bool set_long_poll_interval;
  bool set_short_poll_interval;
  bool write_attributes;
} uic_mqtt_dotdot_poll_control_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the PollControl cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/PollControl/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_poll_control_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_poll_control_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ShadeConfiguration
 */
typedef struct _uic_mqtt_dotdot_shade_configuration_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_shade_configuration_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ShadeConfiguration cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/ShadeConfiguration/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_shade_configuration_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_shade_configuration_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for DoorLock
 */
typedef struct _uic_mqtt_dotdot_door_lock_supported_commands_ {
  bool lock_door;
  bool lock_door_response;
  bool unlock_door;
  bool unlock_door_response;
  bool toggle;
  bool toggle_response;
  bool unlock_with_timeout;
  bool unlock_with_timeout_response;
  bool get_log_record;
  bool get_log_record_response;
  bool setpin_code;
  bool setpin_code_response;
  bool getpin_code;
  bool getpin_code_response;
  bool clearpin_code;
  bool clearpin_code_response;
  bool clear_allpin_codes;
  bool clear_allpin_codes_response;
  bool set_user_status;
  bool set_user_status_response;
  bool get_user_status;
  bool get_user_status_response;
  bool set_weekday_schedule;
  bool set_weekday_schedule_response;
  bool get_weekday_schedule;
  bool get_weekday_schedule_response;
  bool clear_weekday_schedule;
  bool clear_weekday_schedule_response;
  bool set_year_day_schedule;
  bool set_year_day_schedule_response;
  bool get_year_day_schedule;
  bool get_year_day_schedule_response;
  bool clear_year_day_schedule;
  bool clear_year_day_schedule_response;
  bool set_holiday_schedule;
  bool set_holiday_schedule_response;
  bool get_holiday_schedule;
  bool get_holiday_schedule_response;
  bool clear_holiday_schedule;
  bool clear_holiday_schedule_response;
  bool set_user_type;
  bool set_user_type_response;
  bool get_user_type;
  bool get_user_type_response;
  bool setrfid_code;
  bool setrfid_code_response;
  bool getrfid_code;
  bool getrfid_code_response;
  bool clearrfid_code;
  bool clearrfid_code_response;
  bool clear_allrfid_codes;
  bool clear_allrfid_codes_response;
  bool operating_event_notification;
  bool programming_event_notification;
  bool get_allpin_codes;
  bool write_attributes;
} uic_mqtt_dotdot_door_lock_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the DoorLock cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/DoorLock/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_door_lock_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_door_lock_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for WindowCovering
 */
typedef struct _uic_mqtt_dotdot_window_covering_supported_commands_ {
  bool up_or_open;
  bool down_or_close;
  bool stop;
  bool go_to_lift_value;
  bool go_to_lift_percentage;
  bool go_to_tilt_value;
  bool go_to_tilt_percentage;
  bool write_attributes;
} uic_mqtt_dotdot_window_covering_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the WindowCovering cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/WindowCovering/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_window_covering_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_window_covering_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for BarrierControl
 */
typedef struct _uic_mqtt_dotdot_barrier_control_supported_commands_ {
  bool go_to_percent;
  bool stop;
  bool write_attributes;
} uic_mqtt_dotdot_barrier_control_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the BarrierControl cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/BarrierControl/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_barrier_control_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_barrier_control_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for PumpConfigurationAndControl
 */
typedef struct _uic_mqtt_dotdot_pump_configuration_and_control_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_pump_configuration_and_control_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the PumpConfigurationAndControl cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/PumpConfigurationAndControl/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_pump_configuration_and_control_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_pump_configuration_and_control_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Thermostat
 */
typedef struct _uic_mqtt_dotdot_thermostat_supported_commands_ {
  bool setpoint_raise_or_lower;
  bool get_weekly_schedule_response;
  bool set_weekly_schedule;
  bool get_relay_status_log_response;
  bool get_weekly_schedule;
  bool clear_weekly_schedule;
  bool get_relay_status_log;
  bool write_attributes;
} uic_mqtt_dotdot_thermostat_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Thermostat cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Thermostat/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_thermostat_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_thermostat_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for FanControl
 */
typedef struct _uic_mqtt_dotdot_fan_control_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_fan_control_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the FanControl cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/FanControl/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_fan_control_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_fan_control_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for DehumidificationControl
 */
typedef struct _uic_mqtt_dotdot_dehumidification_control_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_dehumidification_control_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the DehumidificationControl cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/DehumidificationControl/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_dehumidification_control_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_dehumidification_control_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ThermostatUserInterfaceConfiguration
 */
typedef struct _uic_mqtt_dotdot_thermostat_user_interface_configuration_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_thermostat_user_interface_configuration_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ThermostatUserInterfaceConfiguration cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/ThermostatUserInterfaceConfiguration/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_thermostat_user_interface_configuration_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ColorControl
 */
typedef struct _uic_mqtt_dotdot_color_control_supported_commands_ {
  bool move_to_hue;
  bool move_hue;
  bool step_hue;
  bool move_to_saturation;
  bool move_saturation;
  bool step_saturation;
  bool move_to_hue_and_saturation;
  bool move_to_color;
  bool move_color;
  bool step_color;
  bool move_to_color_temperature;
  bool enhanced_move_to_hue;
  bool enhanced_move_hue;
  bool enhanced_step_hue;
  bool enhanced_move_to_hue_and_saturation;
  bool color_loop_set;
  bool stop_move_step;
  bool move_color_temperature;
  bool step_color_temperature;
  bool write_attributes;
} uic_mqtt_dotdot_color_control_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ColorControl cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/ColorControl/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_color_control_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_color_control_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for BallastConfiguration
 */
typedef struct _uic_mqtt_dotdot_ballast_configuration_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_ballast_configuration_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the BallastConfiguration cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/BallastConfiguration/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_ballast_configuration_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_ballast_configuration_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for IlluminanceMeasurement
 */
typedef struct _uic_mqtt_dotdot_illuminance_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_illuminance_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the IlluminanceMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/IlluminanceMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_illuminance_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_illuminance_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for IlluminanceLevelSensing
 */
typedef struct _uic_mqtt_dotdot_illuminance_level_sensing_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_illuminance_level_sensing_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the IlluminanceLevelSensing cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/IlluminanceLevelSensing/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_illuminance_level_sensing_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_illuminance_level_sensing_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for TemperatureMeasurement
 */
typedef struct _uic_mqtt_dotdot_temperature_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_temperature_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the TemperatureMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/TemperatureMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_temperature_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_temperature_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for PressureMeasurement
 */
typedef struct _uic_mqtt_dotdot_pressure_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_pressure_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the PressureMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/PressureMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_pressure_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_pressure_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for FlowMeasurement
 */
typedef struct _uic_mqtt_dotdot_flow_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_flow_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the FlowMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/FlowMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_flow_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_flow_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for RelativityHumidity
 */
typedef struct _uic_mqtt_dotdot_relativity_humidity_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_relativity_humidity_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the RelativityHumidity cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/RelativityHumidity/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_relativity_humidity_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_relativity_humidity_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for OccupancySensing
 */
typedef struct _uic_mqtt_dotdot_occupancy_sensing_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_occupancy_sensing_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the OccupancySensing cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/OccupancySensing/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_occupancy_sensing_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_occupancy_sensing_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for SoilMoisture
 */
typedef struct _uic_mqtt_dotdot_soil_moisture_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_soil_moisture_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the SoilMoisture cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/SoilMoisture/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_soil_moisture_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_soil_moisture_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for PhMeasurement
 */
typedef struct _uic_mqtt_dotdot_ph_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_ph_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the PhMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/PhMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_ph_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_ph_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ElectricalConductivityMeasurement
 */
typedef struct _uic_mqtt_dotdot_electrical_conductivity_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_electrical_conductivity_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ElectricalConductivityMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/ElectricalConductivityMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_electrical_conductivity_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for WindSpeedMeasurement
 */
typedef struct _uic_mqtt_dotdot_wind_speed_measurement_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_wind_speed_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the WindSpeedMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/WindSpeedMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_wind_speed_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_wind_speed_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for CarbonMonoxide
 */
typedef struct _uic_mqtt_dotdot_carbon_monoxide_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_carbon_monoxide_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the CarbonMonoxide cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/CarbonMonoxide/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_carbon_monoxide_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_carbon_monoxide_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for CarbonDioxide
 */
typedef struct _uic_mqtt_dotdot_carbon_dioxide_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_carbon_dioxide_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the CarbonDioxide cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/CarbonDioxide/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_carbon_dioxide_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_carbon_dioxide_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for PM25
 */
typedef struct _uic_mqtt_dotdot_pm25_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_pm25_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the PM25 cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/PM25/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_pm25_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_pm25_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for IASZone
 */
typedef struct _uic_mqtt_dotdot_ias_zone_supported_commands_ {
  bool zone_enroll_response;
  bool zone_status_change_notification;
  bool initiate_normal_operation_mode;
  bool zone_enroll_request;
  bool initiate_test_mode;
  bool write_attributes;
} uic_mqtt_dotdot_ias_zone_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the IASZone cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/IASZone/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_ias_zone_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_ias_zone_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for IASWD
 */
typedef struct _uic_mqtt_dotdot_iaswd_supported_commands_ {
  bool start_warning;
  bool squawk;
  bool write_attributes;
} uic_mqtt_dotdot_iaswd_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the IASWD cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/IASWD/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_iaswd_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_iaswd_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Metering
 */
typedef struct _uic_mqtt_dotdot_metering_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_metering_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Metering cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Metering/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_metering_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_metering_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ElectricalMeasurement
 */
typedef struct _uic_mqtt_dotdot_electrical_measurement_supported_commands_ {
  bool get_profile_info_response;
  bool get_profile_info;
  bool get_measurement_profile_response;
  bool get_measurement_profile;
  bool write_attributes;
} uic_mqtt_dotdot_electrical_measurement_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ElectricalMeasurement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/ElectricalMeasurement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_electrical_measurement_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_electrical_measurement_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Diagnostics
 */
typedef struct _uic_mqtt_dotdot_diagnostics_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_diagnostics_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Diagnostics cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Diagnostics/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_diagnostics_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_diagnostics_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ProtocolController-RFTelemetry
 */
typedef struct _uic_mqtt_dotdot_protocol_controller_rf_telemetry_supported_commands_ {
  bool tx_report;
  bool write_attributes;
} uic_mqtt_dotdot_protocol_controller_rf_telemetry_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ProtocolController-RFTelemetry cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/ProtocolController/RFTelemetry/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const uic_mqtt_dotdot_protocol_controller_rf_telemetry_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for State
 */
typedef struct _uic_mqtt_dotdot_state_supported_commands_ {
  bool remove;
  bool remove_offline;
  bool discover_neighbors;
  bool interview;
  bool discover_security;
  bool write_attributes;
} uic_mqtt_dotdot_state_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the State cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/State/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_state_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const uic_mqtt_dotdot_state_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for Binding
 */
typedef struct _uic_mqtt_dotdot_binding_supported_commands_ {
  bool bind;
  bool unbind;
  bool bind_to_protocol_controller;
  bool unbind_from_protocol_controller;
  bool write_attributes;
} uic_mqtt_dotdot_binding_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the Binding cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/Binding/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_binding_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_binding_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for SystemMetrics
 */
typedef struct _uic_mqtt_dotdot_system_metrics_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_system_metrics_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the SystemMetrics cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/SystemMetrics/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_system_metrics_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const uic_mqtt_dotdot_system_metrics_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ApplicationMonitoring
 */
typedef struct _uic_mqtt_dotdot_application_monitoring_supported_commands_ {
  bool log_entry;
  bool write_attributes;
} uic_mqtt_dotdot_application_monitoring_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ApplicationMonitoring cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/ApplicationMonitoring/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_application_monitoring_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const uic_mqtt_dotdot_application_monitoring_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for NameAndLocation
 */
typedef struct _uic_mqtt_dotdot_name_and_location_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_name_and_location_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the NameAndLocation cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/NameAndLocation/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_name_and_location_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_name_and_location_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ConfigurationParameters
 */
typedef struct _uic_mqtt_dotdot_configuration_parameters_supported_commands_ {
  bool discover_parameter;
  bool default_reset_all_parameters;
  bool set_parameter;
  bool discover_parameter_range;
  bool write_attributes;
} uic_mqtt_dotdot_configuration_parameters_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ConfigurationParameters cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/ConfigurationParameters/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_configuration_parameters_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_configuration_parameters_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for AoXLocator
 */
typedef struct _uic_mqtt_dotdot_aox_locator_supported_commands_ {
  bool iq_report;
  bool angle_report;
  bool angle_correction;
  bool write_attributes;
} uic_mqtt_dotdot_aox_locator_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the AoXLocator cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/AoXLocator/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_aox_locator_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_aox_locator_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for AoXPositionEstimation
 */
typedef struct _uic_mqtt_dotdot_aox_position_estimation_supported_commands_ {
  bool write_attributes;
} uic_mqtt_dotdot_aox_position_estimation_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the AoXPositionEstimation cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/epID/AoXPositionEstimation/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param endpoint  The Endpoint ID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_aox_position_estimation_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const dotdot_endpoint_id_t endpoint,
  const uic_mqtt_dotdot_aox_position_estimation_supported_commands_t *command_list
);


/**
 * @brief Struct containing the list of commands for ProtocolController-NetworkManagement
 */
typedef struct _uic_mqtt_dotdot_protocol_controller_network_management_supported_commands_ {
  bool write;
  bool write_attributes;
} uic_mqtt_dotdot_protocol_controller_network_management_supported_commands_t;

/**
 * @brief Sends/Publishes a the SupportedGenerated commands for
 * the ProtocolController-NetworkManagement cluster for a UNID/Endpoint
 *
 * Publication will be made at the following topic
 * ucl/by-unid/UNID/ProtocolController/NetworkManagement/SupportedGeneratedCommands
 *
 * @param unid      The UNID of the node on behalf of which the advertisment is made
 * 
 * @param command_list      Struct pointer with the fields value indicating if
 *                          individual commands can be generated.
 */
void uic_mqtt_dotdot_protocol_controller_network_management_publish_supported_generated_commands(
  const dotdot_unid_t unid,
  const uic_mqtt_dotdot_protocol_controller_network_management_supported_commands_t *command_list
);



#ifdef __cplusplus
}
#endif // __cplusplus

#endif // DOTDOT_MQTT_SUPPORTED_GENERATED_COMMANDS_H
/** @} end dotdot_mqtt_supported_generated_commands */