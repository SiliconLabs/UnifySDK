/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/
// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

/**
 * @defgroup dotdot_mqtt_helpers DotDot MQTT Helpers
 * @ingroup dotdot_mqtt
 * @brief Various helper functions C interface for \ref dotdot_mqtt
 *
 * @{
 */

#ifndef DOTDOT_MQTT_HELPERS_H
#define DOTDOT_MQTT_HELPERS_H

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#define AOX_LOCATOR_ANTENNA_MODE_ENUM_NAME_AVAILABLE 1

/** Get aox_locator_antenna_mode string representation from enum. */
char *aox_locator_antenna_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get aox_locator_antenna_mode enum representation from string. */
uint32_t aox_locator_antenna_mode_get_enum_value_number_c(const char *str);
#define AOX_LOCATOR_AOX_MODE_ENUM_NAME_AVAILABLE 1

/** Get aox_locator_aox_mode string representation from enum. */
char *aox_locator_aox_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get aox_locator_aox_mode enum representation from string. */
uint32_t aox_locator_aox_mode_get_enum_value_number_c(const char *str);
#define AOX_LOCATOR_CTE_MODE_ENUM_NAME_AVAILABLE 1

/** Get aox_locator_cte_mode string representation from enum. */
char *aox_locator_cte_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get aox_locator_cte_mode enum representation from string. */
uint32_t aox_locator_cte_mode_get_enum_value_number_c(const char *str);
#define AOX_LOCATOR_REPORTING_MODE_ENUM_NAME_AVAILABLE 1

/** Get aox_locator_reporting_mode string representation from enum. */
char *aox_locator_reporting_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get aox_locator_reporting_mode enum representation from string. */
uint32_t aox_locator_reporting_mode_get_enum_value_number_c(const char *str);
#define ARM_ARM_MODE_ENUM_NAME_AVAILABLE 1

/** Get arm_arm_mode string representation from enum. */
char *arm_arm_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get arm_arm_mode enum representation from string. */
uint32_t arm_arm_mode_get_enum_value_number_c(const char *str);
#define ARM_RESPONSE_ARM_NOTIFICATION_ENUM_NAME_AVAILABLE 1

/** Get arm_response_arm_notification string representation from enum. */
char *arm_response_arm_notification_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get arm_response_arm_notification enum representation from string. */
uint32_t arm_response_arm_notification_get_enum_value_number_c(const char *str);
#define BARRIER_CONTROL_MOVING_STATE_ENUM_NAME_AVAILABLE 1

/** Get barrier_control_moving_state string representation from enum. */
char *barrier_control_moving_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get barrier_control_moving_state enum representation from string. */
uint32_t barrier_control_moving_state_get_enum_value_number_c(const char *str);
#define BASIC_GENERIC_DEVICE_CLASS_ENUM_NAME_AVAILABLE 1

/** Get basic_generic_device_class string representation from enum. */
char *basic_generic_device_class_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get basic_generic_device_class enum representation from string. */
uint32_t basic_generic_device_class_get_enum_value_number_c(const char *str);
#define BASIC_GENERIC_DEVICE_TYPE_ENUM_NAME_AVAILABLE 1

/** Get basic_generic_device_type string representation from enum. */
char *basic_generic_device_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get basic_generic_device_type enum representation from string. */
uint32_t basic_generic_device_type_get_enum_value_number_c(const char *str);
#define BASIC_PHYSICAL_ENVIRONMENT_ENUM_NAME_AVAILABLE 1

/** Get basic_physical_environment string representation from enum. */
char *basic_physical_environment_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get basic_physical_environment enum representation from string. */
uint32_t basic_physical_environment_get_enum_value_number_c(const char *str);
#define BASIC_POWER_SOURCE_ENUM_NAME_AVAILABLE 1

/** Get basic_power_source string representation from enum. */
char *basic_power_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get basic_power_source enum representation from string. */
uint32_t basic_power_source_get_enum_value_number_c(const char *str);
#define BATTERY_SIZE_ENUM_NAME_AVAILABLE 1

/** Get battery_size string representation from enum. */
char *battery_size_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get battery_size enum representation from string. */
uint32_t battery_size_get_enum_value_number_c(const char *str);
#define BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_ENUM_NAME_AVAILABLE 1

/** Get bypass_response_zone_id_bypass_result string representation from enum. */
char *bypass_response_zone_id_bypass_result_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get bypass_response_zone_id_bypass_result enum representation from string. */
uint32_t bypass_response_zone_id_bypass_result_get_enum_value_number_c(const char *str);
#define CC_COLOR_LOOP_DIRECTION_ENUM_NAME_AVAILABLE 1

/** Get cc_color_loop_direction string representation from enum. */
char *cc_color_loop_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get cc_color_loop_direction enum representation from string. */
uint32_t cc_color_loop_direction_get_enum_value_number_c(const char *str);
#define CC_DIRECTION_ENUM_NAME_AVAILABLE 1

/** Get cc_direction string representation from enum. */
char *cc_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get cc_direction enum representation from string. */
uint32_t cc_direction_get_enum_value_number_c(const char *str);
#define CC_MOVE_MODE_ENUM_NAME_AVAILABLE 1

/** Get cc_move_mode string representation from enum. */
char *cc_move_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get cc_move_mode enum representation from string. */
uint32_t cc_move_mode_get_enum_value_number_c(const char *str);
#define CC_STEP_MODE_ENUM_NAME_AVAILABLE 1

/** Get cc_step_mode string representation from enum. */
char *cc_step_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get cc_step_mode enum representation from string. */
uint32_t cc_step_mode_get_enum_value_number_c(const char *str);
#define COLOR_CONTROL_COLOR_LOOP_ACTIVE_ENUM_NAME_AVAILABLE 1

/** Get color_control_color_loop_active string representation from enum. */
char *color_control_color_loop_active_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get color_control_color_loop_active enum representation from string. */
uint32_t color_control_color_loop_active_get_enum_value_number_c(const char *str);
#define COLOR_CONTROL_COLOR_MODE_ENUM_NAME_AVAILABLE 1

/** Get color_control_color_mode string representation from enum. */
char *color_control_color_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get color_control_color_mode enum representation from string. */
uint32_t color_control_color_mode_get_enum_value_number_c(const char *str);
#define COLOR_CONTROL_DRIFT_COMPENSATION_ENUM_NAME_AVAILABLE 1

/** Get color_control_drift_compensation string representation from enum. */
char *color_control_drift_compensation_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get color_control_drift_compensation enum representation from string. */
uint32_t color_control_drift_compensation_get_enum_value_number_c(const char *str);
#define COLOR_CONTROL_ENHANCED_COLOR_MODE_ENUM_NAME_AVAILABLE 1

/** Get color_control_enhanced_color_mode string representation from enum. */
char *color_control_enhanced_color_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get color_control_enhanced_color_mode enum representation from string. */
uint32_t color_control_enhanced_color_mode_get_enum_value_number_c(const char *str);
#define COLOR_LOOP_SET_ACTION_ENUM_NAME_AVAILABLE 1

/** Get color_loop_set_action string representation from enum. */
char *color_loop_set_action_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get color_loop_set_action enum representation from string. */
uint32_t color_loop_set_action_get_enum_value_number_c(const char *str);
#define COMMISSIONING_NETWORK_KEY_TYPE_ENUM_NAME_AVAILABLE 1

/** Get commissioning_network_key_type string representation from enum. */
char *commissioning_network_key_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get commissioning_network_key_type enum representation from string. */
uint32_t commissioning_network_key_type_get_enum_value_number_c(const char *str);
#define COMMISSIONING_PROTOCOL_VERSION_ENUM_NAME_AVAILABLE 1

/** Get commissioning_protocol_version string representation from enum. */
char *commissioning_protocol_version_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get commissioning_protocol_version enum representation from string. */
uint32_t commissioning_protocol_version_get_enum_value_number_c(const char *str);
#define COMMISSIONING_STACK_PROFILE_ENUM_NAME_AVAILABLE 1

/** Get commissioning_stack_profile string representation from enum. */
char *commissioning_stack_profile_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get commissioning_stack_profile enum representation from string. */
uint32_t commissioning_stack_profile_get_enum_value_number_c(const char *str);
#define COMMISSIONING_STARTUP_CONTROL_ENUM_NAME_AVAILABLE 1

/** Get commissioning_startup_control string representation from enum. */
char *commissioning_startup_control_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get commissioning_startup_control enum representation from string. */
uint32_t commissioning_startup_control_get_enum_value_number_c(const char *str);
#define CREDENTIAL_RULE_ENUM_ENUM_NAME_AVAILABLE 1

/** Get credential_rule_enum string representation from enum. */
char *credential_rule_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get credential_rule_enum enum representation from string. */
uint32_t credential_rule_enum_get_enum_value_number_c(const char *str);
#define CREDENTIAL_TYPE_ENUM_ENUM_NAME_AVAILABLE 1

/** Get credential_type_enum string representation from enum. */
char *credential_type_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get credential_type_enum enum representation from string. */
uint32_t credential_type_enum_get_enum_value_number_c(const char *str);
#define DATA_OPERATION_TYPE_ENUM_ENUM_NAME_AVAILABLE 1

/** Get data_operation_type_enum string representation from enum. */
char *data_operation_type_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get data_operation_type_enum enum representation from string. */
uint32_t data_operation_type_enum_get_enum_value_number_c(const char *str);
#define DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT_ENUM_NAME_AVAILABLE 1

/** Get dehumidification_control_dehumidification_lockout string representation from enum. */
char *dehumidification_control_dehumidification_lockout_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get dehumidification_control_dehumidification_lockout enum representation from string. */
uint32_t dehumidification_control_dehumidification_lockout_get_enum_value_number_c(const char *str);
#define DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY_ENUM_NAME_AVAILABLE 1

/** Get dehumidification_control_relative_humidity_display string representation from enum. */
char *dehumidification_control_relative_humidity_display_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get dehumidification_control_relative_humidity_display enum representation from string. */
uint32_t dehumidification_control_relative_humidity_display_get_enum_value_number_c(const char *str);
#define DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE_ENUM_NAME_AVAILABLE 1

/** Get dehumidification_control_relative_humidity_mode string representation from enum. */
char *dehumidification_control_relative_humidity_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get dehumidification_control_relative_humidity_mode enum representation from string. */
uint32_t dehumidification_control_relative_humidity_mode_get_enum_value_number_c(const char *str);
#define DEV_TYPE_ID_ENUM_NAME_AVAILABLE 1

/** Get dev_type_id string representation from enum. */
char *dev_type_id_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get dev_type_id enum representation from string. */
uint32_t dev_type_id_get_enum_value_number_c(const char *str);
#define DOOR_LOCK_DOOR_STATE_ENUM_NAME_AVAILABLE 1

/** Get door_lock_door_state string representation from enum. */
char *door_lock_door_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get door_lock_door_state enum representation from string. */
uint32_t door_lock_door_state_get_enum_value_number_c(const char *str);
#define DOOR_LOCK_LED_SETTINGS_ENUM_NAME_AVAILABLE 1

/** Get door_lock_led_settings string representation from enum. */
char *door_lock_led_settings_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get door_lock_led_settings enum representation from string. */
uint32_t door_lock_led_settings_get_enum_value_number_c(const char *str);
#define DOOR_LOCK_LOCK_STATE_ENUM_NAME_AVAILABLE 1

/** Get door_lock_lock_state string representation from enum. */
char *door_lock_lock_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get door_lock_lock_state enum representation from string. */
uint32_t door_lock_lock_state_get_enum_value_number_c(const char *str);
#define DOOR_LOCK_LOCK_TYPE_ENUM_NAME_AVAILABLE 1

/** Get door_lock_lock_type string representation from enum. */
char *door_lock_lock_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get door_lock_lock_type enum representation from string. */
uint32_t door_lock_lock_type_get_enum_value_number_c(const char *str);
#define DOOR_LOCK_SECURITY_LEVEL_ENUM_NAME_AVAILABLE 1

/** Get door_lock_security_level string representation from enum. */
char *door_lock_security_level_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get door_lock_security_level enum representation from string. */
uint32_t door_lock_security_level_get_enum_value_number_c(const char *str);
#define DOOR_LOCK_SOUND_VOLUME_ENUM_NAME_AVAILABLE 1

/** Get door_lock_sound_volume string representation from enum. */
char *door_lock_sound_volume_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get door_lock_sound_volume enum representation from string. */
uint32_t door_lock_sound_volume_get_enum_value_number_c(const char *str);
#define DRLK_OPER_EVENT_SOURCE_ENUM_NAME_AVAILABLE 1

/** Get drlk_oper_event_source string representation from enum. */
char *drlk_oper_event_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_oper_event_source enum representation from string. */
uint32_t drlk_oper_event_source_get_enum_value_number_c(const char *str);
#define DRLK_OPER_MODE_ENUM_NAME_AVAILABLE 1

/** Get drlk_oper_mode string representation from enum. */
char *drlk_oper_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_oper_mode enum representation from string. */
uint32_t drlk_oper_mode_get_enum_value_number_c(const char *str);
#define DRLK_PASS_FAIL_STATUS_ENUM_NAME_AVAILABLE 1

/** Get drlk_pass_fail_status string representation from enum. */
char *drlk_pass_fail_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_pass_fail_status enum representation from string. */
uint32_t drlk_pass_fail_status_get_enum_value_number_c(const char *str);
#define DRLK_SET_CODE_STATUS_ENUM_NAME_AVAILABLE 1

/** Get drlk_set_code_status string representation from enum. */
char *drlk_set_code_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_set_code_status enum representation from string. */
uint32_t drlk_set_code_status_get_enum_value_number_c(const char *str);
#define DRLK_SETTABLE_USER_STATUS_ENUM_NAME_AVAILABLE 1

/** Get drlk_settable_user_status string representation from enum. */
char *drlk_settable_user_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_settable_user_status enum representation from string. */
uint32_t drlk_settable_user_status_get_enum_value_number_c(const char *str);
#define DRLK_USER_STATUS_ENUM_NAME_AVAILABLE 1

/** Get drlk_user_status string representation from enum. */
char *drlk_user_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_user_status enum representation from string. */
uint32_t drlk_user_status_get_enum_value_number_c(const char *str);
#define DRLK_USER_TYPE_ENUM_NAME_AVAILABLE 1

/** Get drlk_user_type string representation from enum. */
char *drlk_user_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get drlk_user_type enum representation from string. */
uint32_t drlk_user_type_get_enum_value_number_c(const char *str);
#define FAN_CONTROL_FAN_MODE_ENUM_NAME_AVAILABLE 1

/** Get fan_control_fan_mode string representation from enum. */
char *fan_control_fan_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get fan_control_fan_mode enum representation from string. */
uint32_t fan_control_fan_mode_get_enum_value_number_c(const char *str);
#define FAN_CONTROL_FAN_MODE_SEQUENCE_ENUM_NAME_AVAILABLE 1

/** Get fan_control_fan_mode_sequence string representation from enum. */
char *fan_control_fan_mode_sequence_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get fan_control_fan_mode_sequence enum representation from string. */
uint32_t fan_control_fan_mode_sequence_get_enum_value_number_c(const char *str);
#define GET_LOG_RECORD_RESPONSE_EVENT_TYPE_ENUM_NAME_AVAILABLE 1

/** Get get_log_record_response_event_type string representation from enum. */
char *get_log_record_response_event_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get get_log_record_response_event_type enum representation from string. */
uint32_t get_log_record_response_event_type_get_enum_value_number_c(const char *str);
#define GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_ENUM_NAME_AVAILABLE 1

/** Get get_measurement_profile_response_status string representation from enum. */
char *get_measurement_profile_response_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get get_measurement_profile_response_status enum representation from string. */
uint32_t get_measurement_profile_response_status_get_enum_value_number_c(const char *str);
#define HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE_ENUM_NAME_AVAILABLE 1

/** Get hvac_system_type_configuration_cooling_system_stage string representation from enum. */
char *hvac_system_type_configuration_cooling_system_stage_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get hvac_system_type_configuration_cooling_system_stage enum representation from string. */
uint32_t hvac_system_type_configuration_cooling_system_stage_get_enum_value_number_c(const char *str);
#define HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_FUEL_SOURCE_ENUM_NAME_AVAILABLE 1

/** Get hvac_system_type_configuration_heating_fuel_source string representation from enum. */
char *hvac_system_type_configuration_heating_fuel_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get hvac_system_type_configuration_heating_fuel_source enum representation from string. */
uint32_t hvac_system_type_configuration_heating_fuel_source_get_enum_value_number_c(const char *str);
#define HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE_ENUM_NAME_AVAILABLE 1

/** Get hvac_system_type_configuration_heating_system_stage string representation from enum. */
char *hvac_system_type_configuration_heating_system_stage_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get hvac_system_type_configuration_heating_system_stage enum representation from string. */
uint32_t hvac_system_type_configuration_heating_system_stage_get_enum_value_number_c(const char *str);
#define HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_TYPE_ENUM_NAME_AVAILABLE 1

/** Get hvac_system_type_configuration_heating_system_type string representation from enum. */
char *hvac_system_type_configuration_heating_system_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get hvac_system_type_configuration_heating_system_type enum representation from string. */
uint32_t hvac_system_type_configuration_heating_system_type_get_enum_value_number_c(const char *str);
#define IAS_ZONE_ZONE_STATE_ENUM_NAME_AVAILABLE 1

/** Get ias_zone_zone_state string representation from enum. */
char *ias_zone_zone_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get ias_zone_zone_state enum representation from string. */
uint32_t ias_zone_zone_state_get_enum_value_number_c(const char *str);
#define IAS_ZONE_TYPE_ENUM_NAME_AVAILABLE 1

/** Get ias_zone_type string representation from enum. */
char *ias_zone_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get ias_zone_type enum representation from string. */
uint32_t ias_zone_type_get_enum_value_number_c(const char *str);
#define IASAC_PANEL_STATUS_ENUM_NAME_AVAILABLE 1

/** Get iasac_panel_status string representation from enum. */
char *iasac_panel_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get iasac_panel_status enum representation from string. */
uint32_t iasac_panel_status_get_enum_value_number_c(const char *str);
#define IASACE_ALARM_STATUS_ENUM_NAME_AVAILABLE 1

/** Get iasace_alarm_status string representation from enum. */
char *iasace_alarm_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get iasace_alarm_status enum representation from string. */
uint32_t iasace_alarm_status_get_enum_value_number_c(const char *str);
#define IASACE_AUDIBLE_NOTIFICATION_ENUM_NAME_AVAILABLE 1

/** Get iasace_audible_notification string representation from enum. */
char *iasace_audible_notification_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get iasace_audible_notification enum representation from string. */
uint32_t iasace_audible_notification_get_enum_value_number_c(const char *str);
#define IASWD_LEVEL_ENUM_NAME_AVAILABLE 1

/** Get iaswd_level string representation from enum. */
char *iaswd_level_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get iaswd_level enum representation from string. */
uint32_t iaswd_level_get_enum_value_number_c(const char *str);
#define ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ENUM_NAME_AVAILABLE 1

/** Get illuminance_level_sensing_level_status string representation from enum. */
char *illuminance_level_sensing_level_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get illuminance_level_sensing_level_status enum representation from string. */
uint32_t illuminance_level_sensing_level_status_get_enum_value_number_c(const char *str);
#define ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE 1

/** Get illuminance_level_sensing_light_sensor_type string representation from enum. */
char *illuminance_level_sensing_light_sensor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get illuminance_level_sensing_light_sensor_type enum representation from string. */
uint32_t illuminance_level_sensing_light_sensor_type_get_enum_value_number_c(const char *str);
#define ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE 1

/** Get illuminance_measurement_light_sensor_type string representation from enum. */
char *illuminance_measurement_light_sensor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get illuminance_measurement_light_sensor_type enum representation from string. */
uint32_t illuminance_measurement_light_sensor_type_get_enum_value_number_c(const char *str);
#define IMAGE_NOTIFY_PAYLOAD_TYPE_ENUM_NAME_AVAILABLE 1

/** Get image_notify_payload_type string representation from enum. */
char *image_notify_payload_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get image_notify_payload_type enum representation from string. */
uint32_t image_notify_payload_type_get_enum_value_number_c(const char *str);
#define LOGGING_LEVEL_ENUM_ENUM_NAME_AVAILABLE 1

/** Get logging_level_enum string representation from enum. */
char *logging_level_enum_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get logging_level_enum enum representation from string. */
uint32_t logging_level_enum_get_enum_value_number_c(const char *str);
#define METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE 1

/** Get metering_energy_carrier_unit_of_measure string representation from enum. */
char *metering_energy_carrier_unit_of_measure_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get metering_energy_carrier_unit_of_measure enum representation from string. */
uint32_t metering_energy_carrier_unit_of_measure_get_enum_value_number_c(const char *str);
#define METERING_METERING_DEVICE_TYPE_ENUM_NAME_AVAILABLE 1

/** Get metering_metering_device_type string representation from enum. */
char *metering_metering_device_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get metering_metering_device_type enum representation from string. */
uint32_t metering_metering_device_type_get_enum_value_number_c(const char *str);
#define METERING_SUPPLY_STATUS_ENUM_NAME_AVAILABLE 1

/** Get metering_supply_status string representation from enum. */
char *metering_supply_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get metering_supply_status enum representation from string. */
uint32_t metering_supply_status_get_enum_value_number_c(const char *str);
#define METERING_TEMPERATURE_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE 1

/** Get metering_temperature_unit_of_measure string representation from enum. */
char *metering_temperature_unit_of_measure_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get metering_temperature_unit_of_measure enum representation from string. */
uint32_t metering_temperature_unit_of_measure_get_enum_value_number_c(const char *str);
#define METERING_UNITOF_MEASURE_ENUM_NAME_AVAILABLE 1

/** Get metering_unitof_measure string representation from enum. */
char *metering_unitof_measure_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get metering_unitof_measure enum representation from string. */
uint32_t metering_unitof_measure_get_enum_value_number_c(const char *str);
#define MODE_TYPE_ENUM_NAME_AVAILABLE 1

/** Get mode_type string representation from enum. */
char *mode_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get mode_type enum representation from string. */
uint32_t mode_type_get_enum_value_number_c(const char *str);
#define MOVE_STEP_MODE_ENUM_NAME_AVAILABLE 1

/** Get move_step_mode string representation from enum. */
char *move_step_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get move_step_mode enum representation from string. */
uint32_t move_step_mode_get_enum_value_number_c(const char *str);
#define NM_STATE_ENUM_NAME_AVAILABLE 1

/** Get nm_state string representation from enum. */
char *nm_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get nm_state enum representation from string. */
uint32_t nm_state_get_enum_value_number_c(const char *str);
#define NODE_STATE_NETWORK_STATUS_ENUM_NAME_AVAILABLE 1

/** Get node_state_network_status string representation from enum. */
char *node_state_network_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get node_state_network_status enum representation from string. */
uint32_t node_state_network_status_get_enum_value_number_c(const char *str);
#define NODE_STATE_SECURITY_ENUM_NAME_AVAILABLE 1

/** Get node_state_security string representation from enum. */
char *node_state_security_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get node_state_security enum representation from string. */
uint32_t node_state_security_get_enum_value_number_c(const char *str);
#define OTA_DEVICE_SPECIFIC_IMAGE_TYPE_ENUM_NAME_AVAILABLE 1

/** Get ota_device_specific_image_type string representation from enum. */
char *ota_device_specific_image_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get ota_device_specific_image_type enum representation from string. */
uint32_t ota_device_specific_image_type_get_enum_value_number_c(const char *str);
#define OTA_UPGRADE_IMAGE_UPGRADE_STATUS_ENUM_NAME_AVAILABLE 1

/** Get ota_upgrade_image_upgrade_status string representation from enum. */
char *ota_upgrade_image_upgrade_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get ota_upgrade_image_upgrade_status enum representation from string. */
uint32_t ota_upgrade_image_upgrade_status_get_enum_value_number_c(const char *str);
#define OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY_ENUM_NAME_AVAILABLE 1

/** Get ota_upgrade_upgrade_activation_policy string representation from enum. */
char *ota_upgrade_upgrade_activation_policy_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get ota_upgrade_upgrade_activation_policy enum representation from string. */
uint32_t ota_upgrade_upgrade_activation_policy_get_enum_value_number_c(const char *str);
#define OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY_ENUM_NAME_AVAILABLE 1

/** Get ota_upgrade_upgrade_timeout_policy string representation from enum. */
char *ota_upgrade_upgrade_timeout_policy_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get ota_upgrade_upgrade_timeout_policy enum representation from string. */
uint32_t ota_upgrade_upgrade_timeout_policy_get_enum_value_number_c(const char *str);
#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_ENUM_NAME_AVAILABLE 1

/** Get occupancy_sensing_occupancy_sensor_type string representation from enum. */
char *occupancy_sensing_occupancy_sensor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get occupancy_sensing_occupancy_sensor_type enum representation from string. */
uint32_t occupancy_sensing_occupancy_sensor_type_get_enum_value_number_c(const char *str);
#define OFF_WITH_EFFECT_EFFECT_IDENTIFIER_ENUM_NAME_AVAILABLE 1

/** Get off_with_effect_effect_identifier string representation from enum. */
char *off_with_effect_effect_identifier_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get off_with_effect_effect_identifier enum representation from string. */
uint32_t off_with_effect_effect_identifier_get_enum_value_number_c(const char *str);
#define ON_OFF_START_UP_ON_OFF_ENUM_NAME_AVAILABLE 1

/** Get on_off_start_up_on_off string representation from enum. */
char *on_off_start_up_on_off_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get on_off_start_up_on_off enum representation from string. */
uint32_t on_off_start_up_on_off_get_enum_value_number_c(const char *str);
#define OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_ENUM_NAME_AVAILABLE 1

/** Get operating_event_notification_operation_event_code string representation from enum. */
char *operating_event_notification_operation_event_code_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get operating_event_notification_operation_event_code enum representation from string. */
uint32_t operating_event_notification_operation_event_code_get_enum_value_number_c(const char *str);
#define OPTIONS_STARTUP_MODE_ENUM_NAME_AVAILABLE 1

/** Get options_startup_mode string representation from enum. */
char *options_startup_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get options_startup_mode enum representation from string. */
uint32_t options_startup_mode_get_enum_value_number_c(const char *str);
#define PROFILE_INTERVAL_PERIOD_ENUM_NAME_AVAILABLE 1

/** Get profile_interval_period string representation from enum. */
char *profile_interval_period_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get profile_interval_period enum representation from string. */
uint32_t profile_interval_period_get_enum_value_number_c(const char *str);
#define PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_ENUM_NAME_AVAILABLE 1

/** Get programming_event_notification_program_event_code string representation from enum. */
char *programming_event_notification_program_event_code_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get programming_event_notification_program_event_code enum representation from string. */
uint32_t programming_event_notification_program_event_code_get_enum_value_number_c(const char *str);
#define PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_SOURCE_ENUM_NAME_AVAILABLE 1

/** Get programming_event_notification_program_event_source string representation from enum. */
char *programming_event_notification_program_event_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get programming_event_notification_program_event_source enum representation from string. */
uint32_t programming_event_notification_program_event_source_get_enum_value_number_c(const char *str);
#define PUMP_CONTROL_MODE_ENUM_NAME_AVAILABLE 1

/** Get pump_control_mode string representation from enum. */
char *pump_control_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get pump_control_mode enum representation from string. */
uint32_t pump_control_mode_get_enum_value_number_c(const char *str);
#define PUMP_OPERATION_MODE_ENUM_NAME_AVAILABLE 1

/** Get pump_operation_mode string representation from enum. */
char *pump_operation_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get pump_operation_mode enum representation from string. */
uint32_t pump_operation_mode_get_enum_value_number_c(const char *str);
#define SHDCFG_DIRECTION_ENUM_NAME_AVAILABLE 1

/** Get shdcfg_direction string representation from enum. */
char *shdcfg_direction_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get shdcfg_direction enum representation from string. */
uint32_t shdcfg_direction_get_enum_value_number_c(const char *str);
#define SCALE_TYPE_ENUM_NAME_AVAILABLE 1

/** Get scale_type string representation from enum. */
char *scale_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get scale_type enum representation from string. */
uint32_t scale_type_get_enum_value_number_c(const char *str);
#define SETPOINT_RAISE_OR_LOWER_MODE_ENUM_NAME_AVAILABLE 1

/** Get setpoint_raise_or_lower_mode string representation from enum. */
char *setpoint_raise_or_lower_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get setpoint_raise_or_lower_mode enum representation from string. */
uint32_t setpoint_raise_or_lower_mode_get_enum_value_number_c(const char *str);
#define SETPOINT_TYPE_ENUM_NAME_AVAILABLE 1

/** Get setpoint_type string representation from enum. */
char *setpoint_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get setpoint_type enum representation from string. */
uint32_t setpoint_type_get_enum_value_number_c(const char *str);
#define SHADE_CONFIGURATION_MODE_ENUM_NAME_AVAILABLE 1

/** Get shade_configuration_mode string representation from enum. */
char *shade_configuration_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get shade_configuration_mode enum representation from string. */
uint32_t shade_configuration_mode_get_enum_value_number_c(const char *str);
#define SIREN_CONFIGURATION_STROBE_ENUM_NAME_AVAILABLE 1

/** Get siren_configuration_strobe string representation from enum. */
char *siren_configuration_strobe_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get siren_configuration_strobe enum representation from string. */
uint32_t siren_configuration_strobe_get_enum_value_number_c(const char *str);
#define SIREN_CONFIGURATION_WARNING_MODE_ENUM_NAME_AVAILABLE 1

/** Get siren_configuration_warning_mode string representation from enum. */
char *siren_configuration_warning_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get siren_configuration_warning_mode enum representation from string. */
uint32_t siren_configuration_warning_mode_get_enum_value_number_c(const char *str);
#define SQUAWK_CONFIGURATION_SQUAWK_MODE_ENUM_NAME_AVAILABLE 1

/** Get squawk_configuration_squawk_mode string representation from enum. */
char *squawk_configuration_squawk_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get squawk_configuration_squawk_mode enum representation from string. */
uint32_t squawk_configuration_squawk_mode_get_enum_value_number_c(const char *str);
#define THERMOSTAT_AC_CAPACITY_FORMAT_ENUM_NAME_AVAILABLE 1

/** Get thermostat_ac_capacity_format string representation from enum. */
char *thermostat_ac_capacity_format_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_ac_capacity_format enum representation from string. */
uint32_t thermostat_ac_capacity_format_get_enum_value_number_c(const char *str);
#define THERMOSTAT_AC_COMPRESSOR_TYPE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_ac_compressor_type string representation from enum. */
char *thermostat_ac_compressor_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_ac_compressor_type enum representation from string. */
uint32_t thermostat_ac_compressor_type_get_enum_value_number_c(const char *str);
#define THERMOSTAT_AC_LOUVER_POSITION_ENUM_NAME_AVAILABLE 1

/** Get thermostat_ac_louver_position string representation from enum. */
char *thermostat_ac_louver_position_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_ac_louver_position enum representation from string. */
uint32_t thermostat_ac_louver_position_get_enum_value_number_c(const char *str);
#define THERMOSTAT_AC_REFRIGERANT_TYPE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_ac_refrigerant_type string representation from enum. */
char *thermostat_ac_refrigerant_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_ac_refrigerant_type enum representation from string. */
uint32_t thermostat_ac_refrigerant_type_get_enum_value_number_c(const char *str);
#define THERMOSTAT_AC_TYPE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_ac_type string representation from enum. */
char *thermostat_ac_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_ac_type enum representation from string. */
uint32_t thermostat_ac_type_get_enum_value_number_c(const char *str);
#define THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_ENUM_NAME_AVAILABLE 1

/** Get thermostat_control_sequence_of_operation string representation from enum. */
char *thermostat_control_sequence_of_operation_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_control_sequence_of_operation enum representation from string. */
uint32_t thermostat_control_sequence_of_operation_get_enum_value_number_c(const char *str);
#define THERMOSTAT_PROGRAMMING_OPERATION_MODE_PROGRAMMING_MODE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_programming_operation_mode_programming_mode string representation from enum. */
char *thermostat_programming_operation_mode_programming_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_programming_operation_mode_programming_mode enum representation from string. */
uint32_t thermostat_programming_operation_mode_programming_mode_get_enum_value_number_c(const char *str);
#define THERMOSTAT_SETPOINT_CHANGE_SOURCE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_setpoint_change_source string representation from enum. */
char *thermostat_setpoint_change_source_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_setpoint_change_source enum representation from string. */
uint32_t thermostat_setpoint_change_source_get_enum_value_number_c(const char *str);
#define THERMOSTAT_START_OF_WEEK_ENUM_NAME_AVAILABLE 1

/** Get thermostat_start_of_week string representation from enum. */
char *thermostat_start_of_week_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_start_of_week enum representation from string. */
uint32_t thermostat_start_of_week_get_enum_value_number_c(const char *str);
#define THERMOSTAT_SYSTEM_MODE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_system_mode string representation from enum. */
char *thermostat_system_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_system_mode enum representation from string. */
uint32_t thermostat_system_mode_get_enum_value_number_c(const char *str);
#define THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_ENUM_NAME_AVAILABLE 1

/** Get thermostat_temperature_setpoint_hold string representation from enum. */
char *thermostat_temperature_setpoint_hold_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_temperature_setpoint_hold enum representation from string. */
uint32_t thermostat_temperature_setpoint_hold_get_enum_value_number_c(const char *str);
#define THERMOSTAT_THERMOSTAT_RUNNING_MODE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_thermostat_running_mode string representation from enum. */
char *thermostat_thermostat_running_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_thermostat_running_mode enum representation from string. */
uint32_t thermostat_thermostat_running_mode_get_enum_value_number_c(const char *str);
#define THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_ENUM_NAME_AVAILABLE 1

/** Get thermostat_user_interface_configuration_keypad_lockout string representation from enum. */
char *thermostat_user_interface_configuration_keypad_lockout_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_user_interface_configuration_keypad_lockout enum representation from string. */
uint32_t thermostat_user_interface_configuration_keypad_lockout_get_enum_value_number_c(const char *str);
#define THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY_ENUM_NAME_AVAILABLE 1

/** Get thermostat_user_interface_configuration_schedule_programming_visibility string representation from enum. */
char *thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_user_interface_configuration_schedule_programming_visibility enum representation from string. */
uint32_t thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_number_c(const char *str);
#define THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE_ENUM_NAME_AVAILABLE 1

/** Get thermostat_user_interface_configuration_temperature_display_mode string representation from enum. */
char *thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get thermostat_user_interface_configuration_temperature_display_mode enum representation from string. */
uint32_t thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_number_c(const char *str);
#define TRIGGER_EFFECT_EFFECT_IDENTIFIER_ENUM_NAME_AVAILABLE 1

/** Get trigger_effect_effect_identifier string representation from enum. */
char *trigger_effect_effect_identifier_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get trigger_effect_effect_identifier enum representation from string. */
uint32_t trigger_effect_effect_identifier_get_enum_value_number_c(const char *str);
#define TRIGGER_EFFECT_EFFECT_VARIANT_ENUM_NAME_AVAILABLE 1

/** Get trigger_effect_effect_variant string representation from enum. */
char *trigger_effect_effect_variant_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get trigger_effect_effect_variant enum representation from string. */
uint32_t trigger_effect_effect_variant_get_enum_value_number_c(const char *str);
#define TX_REPORT_TRANSMISSION_SPEED_ENUM_NAME_AVAILABLE 1

/** Get tx_report_transmission_speed string representation from enum. */
char *tx_report_transmission_speed_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get tx_report_transmission_speed enum representation from string. */
uint32_t tx_report_transmission_speed_get_enum_value_number_c(const char *str);
#define UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_ENUM_NAME_AVAILABLE 1

/** Get unify_humidity_control_current_state string representation from enum. */
char *unify_humidity_control_current_state_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get unify_humidity_control_current_state enum representation from string. */
uint32_t unify_humidity_control_current_state_get_enum_value_number_c(const char *str);
#define WINDOW_COVERING_WINDOW_COVERING_TYPE_ENUM_NAME_AVAILABLE 1

/** Get window_covering_window_covering_type string representation from enum. */
char *window_covering_window_covering_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get window_covering_window_covering_type enum representation from string. */
uint32_t window_covering_window_covering_type_get_enum_value_number_c(const char *str);
#define ZONE_ENROLL_RESPONSE_ENROLL_RESPONSE_CODE_ENUM_NAME_AVAILABLE 1

/** Get zone_enroll_response_enroll_response_code string representation from enum. */
char *zone_enroll_response_enroll_response_code_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get zone_enroll_response_enroll_response_code enum representation from string. */
uint32_t zone_enroll_response_enroll_response_code_get_enum_value_number_c(const char *str);
#define ATTRIBUTE_REPORTING_STATUS_ENUM_NAME_AVAILABLE 1

/** Get attribute_reporting_status string representation from enum. */
char *attribute_reporting_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get attribute_reporting_status enum representation from string. */
uint32_t attribute_reporting_status_get_enum_value_number_c(const char *str);
#define ZCL_STATUS_ENUM_NAME_AVAILABLE 1

/** Get zcl_status string representation from enum. */
char *zcl_status_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get zcl_status enum representation from string. */
uint32_t zcl_status_get_enum_value_number_c(const char *str);
#define ZCL_TYPE_ENUM_NAME_AVAILABLE 1

/** Get zcl_type string representation from enum. */
char *zcl_type_get_enum_value_name_c(
  uint32_t value, char *result, size_t max_result_size);
/** Get zcl_type enum representation from string. */
uint32_t zcl_type_get_enum_value_number_c(const char *str);

/**
 * @brief Get UNID from MQTT topic.
 *
 * @param topic Topic string
 * @param result String to contain result
 * @param max_result_size sizeof result
 * @return UNID or NULL if unable to parse UNID from topic.
 */
char * unid_from_mqtt_topic_c(const char *topic, char *result, size_t max_result_size);

#ifdef __cplusplus
}
#endif // __cplusplus


#endif  //DOTDOT_MQTT_HELPERS_H
/** @} end dotdot_mqtt_helpers */
