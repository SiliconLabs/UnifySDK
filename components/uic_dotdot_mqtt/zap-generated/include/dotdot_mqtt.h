/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
/**
 *
 * @file dotdot_mqtt.h
 * @defgroup dotdot_mqtt DotDot Serializer
 * @ingroup unify_components
 *
 * @brief This component provides helper functions for parsing and generates Unify
 * json payloads sent over MQTT.
 *
 * @startuml
   participant "MQTT" as mqtt
   participant "DotDot MQTT" as dotdot
   participant "OnOff Mapper" as onoff

   note over mqtt, onoff
   In this example only OnOff mappers are shown.
   But there should exist mappers for all supported ZCL Clusters.
   In addition only a selection of the supported commands for each of these mappers are shown here.
   end note
   === Initialization ==
   onoff    -> dotdot: uic_mqtt_dotdot_on_off_on_callback_set(on_cb)
   onoff    -> dotdot: uic_mqtt_dotdot_on_off_off_callback_set(off_cb)
   onoff    -> dotdot: uic_mqtt_dotdot_set_on_off_write_attributes_callback(on_att_cb)

   note over dotdot: uic_mqtt_dotdot_init() is called

   dotdot -> mqtt:     uic_mqtt_subscribe("ucl/by-unid/+/+/OnOff/Commands/On", ...);
   dotdot -> mqtt:     uic_mqtt_subscribe("ucl/by-unid/+/+/OnOff/Commands/Off", ...);
   dotdot -> mqtt:     uic_mqtt_subscribe("ucl/by-unid/+/+/OnOff/Commands/WriteAttributes", ...)
   ... ...
   note over onoff: An end device is added
   onoff -> dotdot:    uic_mqtt_dotdot_publish_supported_commands(unid, endpoint)
   dotdot -> onoff:    on_cb(unid, endpoint, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK)
   dotdot -> onoff:    off_cb(unid, endpoint, UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK)

   note over dotdot, onoff
   When uic_mqtt_dotdot_publish_supported_commands is called,
   DotDot MQTT calls all registered OnOff command callback functions
   with UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
   When the Command is supported by the unid/endpoint
   SL_STATUS_OK shall be returned, otherwise SL_STATUS_NOT_AVAILABLE.

   In this example both callbacks returns SL_STATUS_OK
   end note

   dotdot -> mqtt:     uic_mqtt_publish("ucl/by-unid/<unid>/ep<x>/OnOff/SupportedCommands", "[\"On\", \"Off\"]")
   ... ...
   note over mqtt: IoT Service has published an OnOff/Commands/Off
   mqtt -> dotdot:     uic_mqtt_dotdot_on_on_off_off(topic, message)
   dotdot -> onoff:    on_cb(unid, endpoint, UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL)

   @enduml
 * @{
 */

#ifndef DOTDOT_MQTT_H
#define DOTDOT_MQTT_H

#include <stdint.h>
#include <stdbool.h>

#include "sl_status.h"
#include "uic_typedefs.h"
#include "zap-types.h"
#include "uic_mqtt.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/** @brief Attribute publish type */
typedef enum {
  /** Publish Desired */
  UCL_MQTT_PUBLISH_TYPE_DESIRED   = 0x01,
  /** Publish Reported */
  UCL_MQTT_PUBLISH_TYPE_REPORTED  = 0x02,
  /** Publish all types (Desired and Reported) */
  UCL_MQTT_PUBLISH_TYPE_ALL       = 0xFF
} uic_mqtt_dotdot_attribute_publish_type_t;

/** @brief Callback type, used in uic_mqtt_dotdot callback functions */
typedef enum {
  /** Normal callback type */
  UIC_MQTT_DOTDOT_CALLBACK_TYPE_NORMAL,
  /** Support check type, check if the callback is supported by unid/endpoint */
  UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK,
} uic_mqtt_dotdot_callback_call_type_t;

// Initialize all dotdot available clusters
sl_status_t uic_mqtt_dotdot_init();

// Callback types used by the basic cluster
typedef sl_status_t (*uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  uint8_t zcl_version;
  uint8_t application_version;
  uint8_t stack_version;
  uint8_t hw_version;
  const char* manufacturer_name;
  const char* model_identifier;
  const char* date_code;
  uint8_t power_source;
  uint8_t generic_device_class;
  uint8_t generic_device_type;
  const char* product_code;
  const char* producturl;
  const char* manufacturer_version_details;
  const char* serial_number;
  const char* product_label;
  const char* location_description;
  uint8_t physical_environment;
  bool device_enabled;
  uint8_t alarm_mask;
  uint8_t disable_local_config;
  const char* sw_buildid;
} uic_mqtt_dotdot_basic_state_t;

typedef struct {
  bool zcl_version;
  bool application_version;
  bool stack_version;
  bool hw_version;
  bool manufacturer_name;
  bool model_identifier;
  bool date_code;
  bool power_source;
  bool generic_device_class;
  bool generic_device_type;
  bool product_code;
  bool producturl;
  bool manufacturer_version_details;
  bool serial_number;
  bool product_label;
  bool location_description;
  bool physical_environment;
  bool device_enabled;
  bool alarm_mask;
  bool disable_local_config;
  bool sw_buildid;
} uic_mqtt_dotdot_basic_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_basic_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_basic_state_t,
    uic_mqtt_dotdot_basic_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_basic_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_basic_updated_state_t
);



/**
 * @brief Setup callback to be called when a
 * Basic/Commands/reset_to_factory_defaults is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_set(const uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Basic/Commands/reset_to_factory_defaults is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_unset(const uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Basic/Commands/reset_to_factory_defaults is received.
 */
void uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Basic/GeneratedCommands/reset_to_factory_defaults is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_basic_generated_reset_to_factory_defaults_callback_set(const uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Basic/GeneratedCommands/reset_to_factory_defaults is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_basic_generated_reset_to_factory_defaults_callback_unset(const uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Basic/GeneratedCommands/reset_to_factory_defaults is received.
 */
void uic_mqtt_dotdot_basic_generated_reset_to_factory_defaults_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/basic/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_basic_write_attributes_callback(
  const uic_mqtt_dotdot_basic_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/basic/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_basic_write_attributes_callback(
  const uic_mqtt_dotdot_basic_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/basic/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_basic_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/basic/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_basic_force_read_attributes_callback(
  const uic_mqtt_dotdot_basic_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/basic/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_basic_force_read_attributes_callback(
  const uic_mqtt_dotdot_basic_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/basic/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_basic_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Basic/Attributes/ZCLVersion
 *
 * @param base_topic    topic prefix to publish, /zcl_version
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_zcl_version_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ZCLVersion
 *
 * @param base_topic    topic prefix to publish, /zcl_version
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_zcl_version_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ApplicationVersion
 *
 * @param base_topic    topic prefix to publish, /application_version
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_application_version_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ApplicationVersion
 *
 * @param base_topic    topic prefix to publish, /application_version
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_application_version_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/StackVersion
 *
 * @param base_topic    topic prefix to publish, /stack_version
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_stack_version_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/StackVersion
 *
 * @param base_topic    topic prefix to publish, /stack_version
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_stack_version_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/HWVersion
 *
 * @param base_topic    topic prefix to publish, /hw_version
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_hw_version_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/HWVersion
 *
 * @param base_topic    topic prefix to publish, /hw_version
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_hw_version_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ManufacturerName
 *
 * @param base_topic    topic prefix to publish, /manufacturer_name
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_manufacturer_name_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ManufacturerName
 *
 * @param base_topic    topic prefix to publish, /manufacturer_name
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_manufacturer_name_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ModelIdentifier
 *
 * @param base_topic    topic prefix to publish, /model_identifier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_model_identifier_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ModelIdentifier
 *
 * @param base_topic    topic prefix to publish, /model_identifier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_model_identifier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/DateCode
 *
 * @param base_topic    topic prefix to publish, /date_code
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_date_code_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/DateCode
 *
 * @param base_topic    topic prefix to publish, /date_code
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_date_code_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/PowerSource
 *
 * @param base_topic    topic prefix to publish, /power_source
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_power_source_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/PowerSource
 *
 * @param base_topic    topic prefix to publish, /power_source
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_power_source_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/GenericDevice-Class
 *
 * @param base_topic    topic prefix to publish, /generic_device_class
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_generic_device_class_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/GenericDevice-Class
 *
 * @param base_topic    topic prefix to publish, /generic_device_class
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_generic_device_class_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/GenericDevice-Type
 *
 * @param base_topic    topic prefix to publish, /generic_device_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_generic_device_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/GenericDevice-Type
 *
 * @param base_topic    topic prefix to publish, /generic_device_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_generic_device_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ProductCode
 *
 * @param base_topic    topic prefix to publish, /product_code
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_product_code_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ProductCode
 *
 * @param base_topic    topic prefix to publish, /product_code
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_product_code_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ProductURL
 *
 * @param base_topic    topic prefix to publish, /producturl
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_producturl_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ProductURL
 *
 * @param base_topic    topic prefix to publish, /producturl
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_producturl_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ManufacturerVersionDetails
 *
 * @param base_topic    topic prefix to publish, /manufacturer_version_details
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_manufacturer_version_details_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ManufacturerVersionDetails
 *
 * @param base_topic    topic prefix to publish, /manufacturer_version_details
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_manufacturer_version_details_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/SerialNumber
 *
 * @param base_topic    topic prefix to publish, /serial_number
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_serial_number_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/SerialNumber
 *
 * @param base_topic    topic prefix to publish, /serial_number
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_serial_number_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/ProductLabel
 *
 * @param base_topic    topic prefix to publish, /product_label
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_product_label_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/ProductLabel
 *
 * @param base_topic    topic prefix to publish, /product_label
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_product_label_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/LocationDescription
 *
 * @param base_topic    topic prefix to publish, /location_description
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_location_description_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/LocationDescription
 *
 * @param base_topic    topic prefix to publish, /location_description
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_location_description_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/PhysicalEnvironment
 *
 * @param base_topic    topic prefix to publish, /physical_environment
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_physical_environment_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/PhysicalEnvironment
 *
 * @param base_topic    topic prefix to publish, /physical_environment
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_physical_environment_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/DeviceEnabled
 *
 * @param base_topic    topic prefix to publish, /device_enabled
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_device_enabled_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/DeviceEnabled
 *
 * @param base_topic    topic prefix to publish, /device_enabled
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_device_enabled_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/DisableLocalConfig
 *
 * @param base_topic    topic prefix to publish, /disable_local_config
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_disable_local_config_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/DisableLocalConfig
 *
 * @param base_topic    topic prefix to publish, /disable_local_config
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_disable_local_config_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Basic/Attributes/SWBuildID
 *
 * @param base_topic    topic prefix to publish, /sw_buildid
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_sw_buildid_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Basic/Attributes/SWBuildID
 *
 * @param base_topic    topic prefix to publish, /sw_buildid
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_basic_sw_buildid_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Basic/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Basic/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_basic_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Basic/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Basic/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_basic_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Basic Cluster
 *
 * This function will iterate over all Commands in the Basic Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_basic_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Basic Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_basic_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the power_configuration cluster

typedef struct {
  uint16_t mains_voltage;
  uint8_t mains_frequency;
  uint8_t mains_alarm_mask;
  uint16_t mains_voltage_min_threshold;
  uint16_t mains_voltage_max_threshold;
  uint16_t mains_voltage_dwell_trip_point;
  uint8_t battery_voltage;
  uint8_t battery_percentage_remaining;
  const char* battery_manufacturer;
  uint8_t battery_size;
  uint16_t batterya_hr_rating;
  uint8_t battery_quantity;
  uint8_t battery_rated_voltage;
  uint8_t battery_alarm_mask;
  uint8_t battery_voltage_min_threshold;
  uint8_t battery_voltage_threshold1;
  uint8_t battery_voltage_threshold2;
  uint8_t battery_voltage_threshold3;
  uint8_t battery_percentage_min_threshold;
  uint8_t battery_percentage_threshold1;
  uint8_t battery_percentage_threshold2;
  uint8_t battery_percentage_threshold3;
  uint32_t battery_alarm_state;
  uint8_t battery2_voltage;
  uint8_t battery2_percentage_remaining;
  const char* battery2_manufacturer;
  uint8_t battery2_size;
  uint16_t battery2a_hr_rating;
  uint8_t battery2_quantity;
  uint8_t battery2_rated_voltage;
  uint8_t battery2_alarm_mask;
  uint8_t battery2_voltage_min_threshold;
  uint8_t battery2_voltage_threshold1;
  uint8_t battery2_voltage_threshold2;
  uint8_t battery2_voltage_threshold3;
  uint8_t battery2_percentage_min_threshold;
  uint8_t battery2_percentage_threshold1;
  uint8_t battery2_percentage_threshold2;
  uint8_t battery2_percentage_threshold3;
  uint32_t battery2_alarm_state;
  uint8_t battery3_voltage;
  uint8_t battery3_percentage_remaining;
  const char* battery3_manufacturer;
  uint8_t battery3_size;
  uint16_t battery3a_hr_rating;
  uint8_t battery3_quantity;
  uint8_t battery3_rated_voltage;
  uint8_t battery3_alarm_mask;
  uint8_t battery3_voltage_min_threshold;
  uint8_t battery3_voltage_threshold1;
  uint8_t battery3_voltage_threshold2;
  uint8_t battery3_voltage_threshold3;
  uint8_t battery3_percentage_min_threshold;
  uint8_t battery3_percentage_threshold1;
  uint8_t battery3_percentage_threshold2;
  uint8_t battery3_percentage_threshold3;
  uint32_t battery3_alarm_state;
} uic_mqtt_dotdot_power_configuration_state_t;

typedef struct {
  bool mains_voltage;
  bool mains_frequency;
  bool mains_alarm_mask;
  bool mains_voltage_min_threshold;
  bool mains_voltage_max_threshold;
  bool mains_voltage_dwell_trip_point;
  bool battery_voltage;
  bool battery_percentage_remaining;
  bool battery_manufacturer;
  bool battery_size;
  bool batterya_hr_rating;
  bool battery_quantity;
  bool battery_rated_voltage;
  bool battery_alarm_mask;
  bool battery_voltage_min_threshold;
  bool battery_voltage_threshold1;
  bool battery_voltage_threshold2;
  bool battery_voltage_threshold3;
  bool battery_percentage_min_threshold;
  bool battery_percentage_threshold1;
  bool battery_percentage_threshold2;
  bool battery_percentage_threshold3;
  bool battery_alarm_state;
  bool battery2_voltage;
  bool battery2_percentage_remaining;
  bool battery2_manufacturer;
  bool battery2_size;
  bool battery2a_hr_rating;
  bool battery2_quantity;
  bool battery2_rated_voltage;
  bool battery2_alarm_mask;
  bool battery2_voltage_min_threshold;
  bool battery2_voltage_threshold1;
  bool battery2_voltage_threshold2;
  bool battery2_voltage_threshold3;
  bool battery2_percentage_min_threshold;
  bool battery2_percentage_threshold1;
  bool battery2_percentage_threshold2;
  bool battery2_percentage_threshold3;
  bool battery2_alarm_state;
  bool battery3_voltage;
  bool battery3_percentage_remaining;
  bool battery3_manufacturer;
  bool battery3_size;
  bool battery3a_hr_rating;
  bool battery3_quantity;
  bool battery3_rated_voltage;
  bool battery3_alarm_mask;
  bool battery3_voltage_min_threshold;
  bool battery3_voltage_threshold1;
  bool battery3_voltage_threshold2;
  bool battery3_voltage_threshold3;
  bool battery3_percentage_min_threshold;
  bool battery3_percentage_threshold1;
  bool battery3_percentage_threshold2;
  bool battery3_percentage_threshold3;
  bool battery3_alarm_state;
} uic_mqtt_dotdot_power_configuration_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_power_configuration_state_t,
    uic_mqtt_dotdot_power_configuration_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_power_configuration_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/power_configuration/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_power_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_power_configuration_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/power_configuration/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_power_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_power_configuration_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/power_configuration/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_power_configuration_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/power_configuration/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_power_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_power_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/power_configuration/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_power_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_power_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/power_configuration/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_power_configuration_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/MainsVoltage
 *
 * @param base_topic    topic prefix to publish, /mains_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/MainsVoltage
 *
 * @param base_topic    topic prefix to publish, /mains_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/MainsFrequency
 *
 * @param base_topic    topic prefix to publish, /mains_frequency
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_frequency_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/MainsFrequency
 *
 * @param base_topic    topic prefix to publish, /mains_frequency
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_frequency_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/MainsAlarmMask
 *
 * @param base_topic    topic prefix to publish, /mains_alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/MainsAlarmMask
 *
 * @param base_topic    topic prefix to publish, /mains_alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/MainsVoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /mains_voltage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/MainsVoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /mains_voltage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/MainsVoltageMaxThreshold
 *
 * @param base_topic    topic prefix to publish, /mains_voltage_max_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/MainsVoltageMaxThreshold
 *
 * @param base_topic    topic prefix to publish, /mains_voltage_max_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_max_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/MainsVoltageDwellTripPoint
 *
 * @param base_topic    topic prefix to publish, /mains_voltage_dwell_trip_point
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/MainsVoltageDwellTripPoint
 *
 * @param base_topic    topic prefix to publish, /mains_voltage_dwell_trip_point
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_mains_voltage_dwell_trip_point_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryVoltage
 *
 * @param base_topic    topic prefix to publish, /battery_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryVoltage
 *
 * @param base_topic    topic prefix to publish, /battery_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryPercentageRemaining
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_remaining
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryPercentageRemaining
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_remaining
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_remaining_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryManufacturer
 *
 * @param base_topic    topic prefix to publish, /battery_manufacturer
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_manufacturer_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryManufacturer
 *
 * @param base_topic    topic prefix to publish, /battery_manufacturer
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_manufacturer_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatterySize
 *
 * @param base_topic    topic prefix to publish, /battery_size
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_size_publish(
  const char *base_topic,
  BatterySize value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatterySize
 *
 * @param base_topic    topic prefix to publish, /battery_size
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_size_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryAHrRating
 *
 * @param base_topic    topic prefix to publish, /batterya_hr_rating
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_batterya_hr_rating_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryAHrRating
 *
 * @param base_topic    topic prefix to publish, /batterya_hr_rating
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_batterya_hr_rating_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryQuantity
 *
 * @param base_topic    topic prefix to publish, /battery_quantity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_quantity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryQuantity
 *
 * @param base_topic    topic prefix to publish, /battery_quantity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_quantity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryRatedVoltage
 *
 * @param base_topic    topic prefix to publish, /battery_rated_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_rated_voltage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryRatedVoltage
 *
 * @param base_topic    topic prefix to publish, /battery_rated_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_rated_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryAlarmMask
 *
 * @param base_topic    topic prefix to publish, /battery_alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryAlarmMask
 *
 * @param base_topic    topic prefix to publish, /battery_alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryVoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryVoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryVoltageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_threshold1
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryVoltageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_threshold1
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold1_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryVoltageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_threshold2
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryVoltageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_threshold2
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold2_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryVoltageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_threshold3
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryVoltageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery_voltage_threshold3
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_voltage_threshold3_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryPercentageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryPercentageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryPercentageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_threshold1
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryPercentageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_threshold1
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold1_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryPercentageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_threshold2
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryPercentageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_threshold2
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold2_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryPercentageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_threshold3
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryPercentageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery_percentage_threshold3
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_percentage_threshold3_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/BatteryAlarmState
 *
 * @param base_topic    topic prefix to publish, /battery_alarm_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_state_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/BatteryAlarmState
 *
 * @param base_topic    topic prefix to publish, /battery_alarm_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery_alarm_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2Voltage
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2Voltage
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2PercentageRemaining
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_remaining
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2PercentageRemaining
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_remaining
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_remaining_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2Manufacturer
 *
 * @param base_topic    topic prefix to publish, /battery2_manufacturer
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_manufacturer_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2Manufacturer
 *
 * @param base_topic    topic prefix to publish, /battery2_manufacturer
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_manufacturer_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2Size
 *
 * @param base_topic    topic prefix to publish, /battery2_size
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_size_publish(
  const char *base_topic,
  BatterySize value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2Size
 *
 * @param base_topic    topic prefix to publish, /battery2_size
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_size_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2AHrRating
 *
 * @param base_topic    topic prefix to publish, /battery2a_hr_rating
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2AHrRating
 *
 * @param base_topic    topic prefix to publish, /battery2a_hr_rating
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2a_hr_rating_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2Quantity
 *
 * @param base_topic    topic prefix to publish, /battery2_quantity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_quantity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2Quantity
 *
 * @param base_topic    topic prefix to publish, /battery2_quantity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_quantity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2RatedVoltage
 *
 * @param base_topic    topic prefix to publish, /battery2_rated_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2RatedVoltage
 *
 * @param base_topic    topic prefix to publish, /battery2_rated_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_rated_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2AlarmMask
 *
 * @param base_topic    topic prefix to publish, /battery2_alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2AlarmMask
 *
 * @param base_topic    topic prefix to publish, /battery2_alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2VoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2VoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2VoltageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_threshold1
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2VoltageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_threshold1
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold1_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2VoltageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_threshold2
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2VoltageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_threshold2
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold2_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2VoltageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_threshold3
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2VoltageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery2_voltage_threshold3
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_voltage_threshold3_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2PercentageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2PercentageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2PercentageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_threshold1
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2PercentageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_threshold1
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold1_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2PercentageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_threshold2
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2PercentageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_threshold2
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold2_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2PercentageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_threshold3
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2PercentageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery2_percentage_threshold3
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_percentage_threshold3_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery2AlarmState
 *
 * @param base_topic    topic prefix to publish, /battery2_alarm_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_state_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery2AlarmState
 *
 * @param base_topic    topic prefix to publish, /battery2_alarm_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery2_alarm_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3Voltage
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3Voltage
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3PercentageRemaining
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_remaining
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3PercentageRemaining
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_remaining
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_remaining_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3Manufacturer
 *
 * @param base_topic    topic prefix to publish, /battery3_manufacturer
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_manufacturer_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3Manufacturer
 *
 * @param base_topic    topic prefix to publish, /battery3_manufacturer
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_manufacturer_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3Size
 *
 * @param base_topic    topic prefix to publish, /battery3_size
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_size_publish(
  const char *base_topic,
  BatterySize value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3Size
 *
 * @param base_topic    topic prefix to publish, /battery3_size
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_size_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3AHrRating
 *
 * @param base_topic    topic prefix to publish, /battery3a_hr_rating
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3AHrRating
 *
 * @param base_topic    topic prefix to publish, /battery3a_hr_rating
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3a_hr_rating_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3Quantity
 *
 * @param base_topic    topic prefix to publish, /battery3_quantity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_quantity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3Quantity
 *
 * @param base_topic    topic prefix to publish, /battery3_quantity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_quantity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3RatedVoltage
 *
 * @param base_topic    topic prefix to publish, /battery3_rated_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3RatedVoltage
 *
 * @param base_topic    topic prefix to publish, /battery3_rated_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_rated_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3AlarmMask
 *
 * @param base_topic    topic prefix to publish, /battery3_alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3AlarmMask
 *
 * @param base_topic    topic prefix to publish, /battery3_alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3VoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3VoltageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3VoltageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_threshold1
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3VoltageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_threshold1
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold1_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3VoltageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_threshold2
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3VoltageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_threshold2
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold2_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3VoltageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_threshold3
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3VoltageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery3_voltage_threshold3
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_voltage_threshold3_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3PercentageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_min_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3PercentageMinThreshold
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_min_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_min_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3PercentageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_threshold1
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3PercentageThreshold1
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_threshold1
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold1_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3PercentageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_threshold2
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3PercentageThreshold2
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_threshold2
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold2_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3PercentageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_threshold3
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3PercentageThreshold3
 *
 * @param base_topic    topic prefix to publish, /battery3_percentage_threshold3
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_percentage_threshold3_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PowerConfiguration/Attributes/Battery3AlarmState
 *
 * @param base_topic    topic prefix to publish, /battery3_alarm_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_alarm_state_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PowerConfiguration/Attributes/Battery3AlarmState
 *
 * @param base_topic    topic prefix to publish, /battery3_alarm_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_power_configuration_battery3_alarm_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the PowerConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PowerConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_power_configuration_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to PowerConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PowerConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_power_configuration_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the PowerConfiguration Cluster
 *
 * This function will iterate over all Commands in the PowerConfiguration Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_power_configuration_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the PowerConfiguration Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_power_configuration_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the device_temperature_configuration cluster

typedef struct {
  int16_t current_temperature;
  int16_t min_temp_experienced;
  int16_t max_temp_experienced;
  uint16_t over_temp_total_dwell;
  uint8_t device_temp_alarm_mask;
  int16_t low_temp_threshold;
  int16_t high_temp_threshold;
  uint32_t low_temp_dwell_trip_point;
  uint32_t high_temp_dwell_trip_point;
} uic_mqtt_dotdot_device_temperature_configuration_state_t;

typedef struct {
  bool current_temperature;
  bool min_temp_experienced;
  bool max_temp_experienced;
  bool over_temp_total_dwell;
  bool device_temp_alarm_mask;
  bool low_temp_threshold;
  bool high_temp_threshold;
  bool low_temp_dwell_trip_point;
  bool high_temp_dwell_trip_point;
} uic_mqtt_dotdot_device_temperature_configuration_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_device_temperature_configuration_state_t,
    uic_mqtt_dotdot_device_temperature_configuration_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_device_temperature_configuration_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/device_temperature_configuration/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_device_temperature_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_device_temperature_configuration_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/device_temperature_configuration/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_device_temperature_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_device_temperature_configuration_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/device_temperature_configuration/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_device_temperature_configuration_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/device_temperature_configuration/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_device_temperature_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_device_temperature_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/device_temperature_configuration/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_device_temperature_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_device_temperature_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/device_temperature_configuration/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_device_temperature_configuration_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/CurrentTemperature
 *
 * @param base_topic    topic prefix to publish, /current_temperature
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_current_temperature_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/CurrentTemperature
 *
 * @param base_topic    topic prefix to publish, /current_temperature
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_current_temperature_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/MinTempExperienced
 *
 * @param base_topic    topic prefix to publish, /min_temp_experienced
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_min_temp_experienced_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/MinTempExperienced
 *
 * @param base_topic    topic prefix to publish, /min_temp_experienced
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_min_temp_experienced_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/MaxTempExperienced
 *
 * @param base_topic    topic prefix to publish, /max_temp_experienced
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_max_temp_experienced_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/MaxTempExperienced
 *
 * @param base_topic    topic prefix to publish, /max_temp_experienced
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_max_temp_experienced_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/OverTempTotalDwell
 *
 * @param base_topic    topic prefix to publish, /over_temp_total_dwell
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/OverTempTotalDwell
 *
 * @param base_topic    topic prefix to publish, /over_temp_total_dwell
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_over_temp_total_dwell_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/DeviceTempAlarmMask
 *
 * @param base_topic    topic prefix to publish, /device_temp_alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_device_temp_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/DeviceTempAlarmMask
 *
 * @param base_topic    topic prefix to publish, /device_temp_alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_device_temp_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/LowTempThreshold
 *
 * @param base_topic    topic prefix to publish, /low_temp_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_threshold_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/LowTempThreshold
 *
 * @param base_topic    topic prefix to publish, /low_temp_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/HighTempThreshold
 *
 * @param base_topic    topic prefix to publish, /high_temp_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_threshold_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/HighTempThreshold
 *
 * @param base_topic    topic prefix to publish, /high_temp_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/LowTempDwellTripPoint
 *
 * @param base_topic    topic prefix to publish, /low_temp_dwell_trip_point
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/LowTempDwellTripPoint
 *
 * @param base_topic    topic prefix to publish, /low_temp_dwell_trip_point
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_low_temp_dwell_trip_point_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DeviceTemperatureConfiguration/Attributes/HighTempDwellTripPoint
 *
 * @param base_topic    topic prefix to publish, /high_temp_dwell_trip_point
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DeviceTemperatureConfiguration/Attributes/HighTempDwellTripPoint
 *
 * @param base_topic    topic prefix to publish, /high_temp_dwell_trip_point
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_high_temp_dwell_trip_point_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the DeviceTemperatureConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /DeviceTemperatureConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_device_temperature_configuration_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to DeviceTemperatureConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /DeviceTemperatureConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_device_temperature_configuration_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the DeviceTemperatureConfiguration Cluster
 *
 * This function will iterate over all Commands in the DeviceTemperatureConfiguration Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_device_temperature_configuration_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the DeviceTemperatureConfiguration Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_device_temperature_configuration_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the identify cluster
typedef sl_status_t (*uic_mqtt_dotdot_identify_identify_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t identify_time

);
typedef sl_status_t (*uic_mqtt_dotdot_identify_identify_query_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t timeout

);
typedef sl_status_t (*uic_mqtt_dotdot_identify_identify_query_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_identify_trigger_effect_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    TriggerEffectEffectIdentifier effect_identifier,

    TriggerEffectEffectVariant effect_variant

);

typedef struct {
  uint16_t identify_time;
} uic_mqtt_dotdot_identify_state_t;

typedef struct {
  bool identify_time;
} uic_mqtt_dotdot_identify_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_identify_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_identify_state_t,
    uic_mqtt_dotdot_identify_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_identify_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_identify_updated_state_t
);


/**
 * @brief Command fields for Identify/Identify
 */
typedef struct {
  uint16_t identify_time;
} uic_mqtt_dotdot_identify_command_identify_fields_t;

/**
 * @brief Command fields for Identify/IdentifyQueryResponse
 */
typedef struct {
  uint16_t timeout;
} uic_mqtt_dotdot_identify_command_identify_query_response_fields_t;

/**
 * @brief Command fields for Identify/TriggerEffect
 */
typedef struct {
  TriggerEffectEffectIdentifier effect_identifier;

  TriggerEffectEffectVariant effect_variant;
} uic_mqtt_dotdot_identify_command_trigger_effect_fields_t;


/**
 * @brief Setup callback to be called when a
 * Identify/Commands/identify is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_identify_callback_set(const uic_mqtt_dotdot_identify_identify_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Identify/Commands/identify is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_identify_callback_unset(const uic_mqtt_dotdot_identify_identify_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Identify/Commands/identify is received.
 */
void uic_mqtt_dotdot_identify_identify_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Identify/GeneratedCommands/identify is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_generated_identify_callback_set(const uic_mqtt_dotdot_identify_identify_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Identify/GeneratedCommands/identify is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_generated_identify_callback_unset(const uic_mqtt_dotdot_identify_identify_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Identify/GeneratedCommands/identify is received.
 */
void uic_mqtt_dotdot_identify_generated_identify_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Identify/Commands/identify_query_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_identify_query_response_callback_set(const uic_mqtt_dotdot_identify_identify_query_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Identify/Commands/identify_query_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_identify_query_response_callback_unset(const uic_mqtt_dotdot_identify_identify_query_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Identify/Commands/identify_query_response is received.
 */
void uic_mqtt_dotdot_identify_identify_query_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Identify/GeneratedCommands/identify_query_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_generated_identify_query_response_callback_set(const uic_mqtt_dotdot_identify_identify_query_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Identify/GeneratedCommands/identify_query_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_generated_identify_query_response_callback_unset(const uic_mqtt_dotdot_identify_identify_query_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Identify/GeneratedCommands/identify_query_response is received.
 */
void uic_mqtt_dotdot_identify_generated_identify_query_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Identify/Commands/identify_query is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_identify_query_callback_set(const uic_mqtt_dotdot_identify_identify_query_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Identify/Commands/identify_query is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_identify_query_callback_unset(const uic_mqtt_dotdot_identify_identify_query_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Identify/Commands/identify_query is received.
 */
void uic_mqtt_dotdot_identify_identify_query_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Identify/GeneratedCommands/identify_query is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_generated_identify_query_callback_set(const uic_mqtt_dotdot_identify_identify_query_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Identify/GeneratedCommands/identify_query is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_generated_identify_query_callback_unset(const uic_mqtt_dotdot_identify_identify_query_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Identify/GeneratedCommands/identify_query is received.
 */
void uic_mqtt_dotdot_identify_generated_identify_query_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Identify/Commands/trigger_effect is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_trigger_effect_callback_set(const uic_mqtt_dotdot_identify_trigger_effect_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Identify/Commands/trigger_effect is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_trigger_effect_callback_unset(const uic_mqtt_dotdot_identify_trigger_effect_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Identify/Commands/trigger_effect is received.
 */
void uic_mqtt_dotdot_identify_trigger_effect_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Identify/GeneratedCommands/trigger_effect is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_identify_generated_trigger_effect_callback_set(const uic_mqtt_dotdot_identify_trigger_effect_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Identify/GeneratedCommands/trigger_effect is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_identify_generated_trigger_effect_callback_unset(const uic_mqtt_dotdot_identify_trigger_effect_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Identify/GeneratedCommands/trigger_effect is received.
 */
void uic_mqtt_dotdot_identify_generated_trigger_effect_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/identify/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_identify_write_attributes_callback(
  const uic_mqtt_dotdot_identify_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/identify/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_identify_write_attributes_callback(
  const uic_mqtt_dotdot_identify_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/identify/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_identify_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/identify/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_identify_force_read_attributes_callback(
  const uic_mqtt_dotdot_identify_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/identify/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_identify_force_read_attributes_callback(
  const uic_mqtt_dotdot_identify_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/identify/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_identify_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Identify/Attributes/IdentifyTime
 *
 * @param base_topic    topic prefix to publish, /identify_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_identify_identify_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Identify/Attributes/IdentifyTime
 *
 * @param base_topic    topic prefix to publish, /identify_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_identify_identify_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Identify/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Identify/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_identify_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Identify/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Identify/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_identify_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Identify Cluster
 *
 * This function will iterate over all Commands in the Identify Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_identify_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Identify Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_identify_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the groups cluster
typedef sl_status_t (*uic_mqtt_dotdot_groups_add_group_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t group_id,

    const char* group_name

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_add_group_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t status,

    uint16_t group_id

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_view_group_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t group_id

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_view_group_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t status,

    uint16_t group_id,

    const char* group_name

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_get_group_membership_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t group_list_count,
    const uint16_t *group_list

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_get_group_membership_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t capacity,

    uint8_t group_list_count,
    const uint16_t *group_list

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_group_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t group_id

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_group_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t status,

    uint16_t group_id

);
typedef sl_status_t (*uic_mqtt_dotdot_groups_remove_all_groups_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t group_id,

    const char* group_name

);

typedef struct {
  uint8_t name_support;
} uic_mqtt_dotdot_groups_state_t;

typedef struct {
  bool name_support;
} uic_mqtt_dotdot_groups_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_groups_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_groups_state_t,
    uic_mqtt_dotdot_groups_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_groups_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_groups_updated_state_t
);


/**
 * @brief Command fields for Groups/AddGroup
 */
typedef struct {
  uint16_t group_id;

  const char* group_name;
} uic_mqtt_dotdot_groups_command_add_group_fields_t;

/**
 * @brief Command fields for Groups/AddGroupResponse
 */
typedef struct {
  uint8_t status;

  uint16_t group_id;
} uic_mqtt_dotdot_groups_command_add_group_response_fields_t;

/**
 * @brief Command fields for Groups/ViewGroup
 */
typedef struct {
  uint16_t group_id;
} uic_mqtt_dotdot_groups_command_view_group_fields_t;

/**
 * @brief Command fields for Groups/ViewGroupResponse
 */
typedef struct {
  uint8_t status;

  uint16_t group_id;

  const char* group_name;
} uic_mqtt_dotdot_groups_command_view_group_response_fields_t;

/**
 * @brief Command fields for Groups/GetGroupMembership
 */
typedef struct {
  uint8_t group_list_count;
  const uint16_t *group_list;
} uic_mqtt_dotdot_groups_command_get_group_membership_fields_t;

/**
 * @brief Command fields for Groups/GetGroupMembershipResponse
 */
typedef struct {
  uint8_t capacity;

  uint8_t group_list_count;
  const uint16_t *group_list;
} uic_mqtt_dotdot_groups_command_get_group_membership_response_fields_t;

/**
 * @brief Command fields for Groups/RemoveGroup
 */
typedef struct {
  uint16_t group_id;
} uic_mqtt_dotdot_groups_command_remove_group_fields_t;

/**
 * @brief Command fields for Groups/RemoveGroupResponse
 */
typedef struct {
  uint8_t status;

  uint16_t group_id;
} uic_mqtt_dotdot_groups_command_remove_group_response_fields_t;

/**
 * @brief Command fields for Groups/AddGroupIfIdentifying
 */
typedef struct {
  uint16_t group_id;

  const char* group_name;
} uic_mqtt_dotdot_groups_command_add_group_if_identifying_fields_t;


/**
 * @brief Setup callback to be called when a
 * Groups/Commands/add_group is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_add_group_callback_set(const uic_mqtt_dotdot_groups_add_group_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/add_group is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_add_group_callback_unset(const uic_mqtt_dotdot_groups_add_group_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/add_group is received.
 */
void uic_mqtt_dotdot_groups_add_group_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/add_group is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_add_group_callback_set(const uic_mqtt_dotdot_groups_add_group_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/add_group is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_add_group_callback_unset(const uic_mqtt_dotdot_groups_add_group_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/add_group is received.
 */
void uic_mqtt_dotdot_groups_generated_add_group_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/add_group_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_add_group_response_callback_set(const uic_mqtt_dotdot_groups_add_group_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/add_group_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_add_group_response_callback_unset(const uic_mqtt_dotdot_groups_add_group_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/add_group_response is received.
 */
void uic_mqtt_dotdot_groups_add_group_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/add_group_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_add_group_response_callback_set(const uic_mqtt_dotdot_groups_add_group_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/add_group_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_add_group_response_callback_unset(const uic_mqtt_dotdot_groups_add_group_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/add_group_response is received.
 */
void uic_mqtt_dotdot_groups_generated_add_group_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/view_group is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_view_group_callback_set(const uic_mqtt_dotdot_groups_view_group_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/view_group is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_view_group_callback_unset(const uic_mqtt_dotdot_groups_view_group_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/view_group is received.
 */
void uic_mqtt_dotdot_groups_view_group_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/view_group is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_view_group_callback_set(const uic_mqtt_dotdot_groups_view_group_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/view_group is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_view_group_callback_unset(const uic_mqtt_dotdot_groups_view_group_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/view_group is received.
 */
void uic_mqtt_dotdot_groups_generated_view_group_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/view_group_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_view_group_response_callback_set(const uic_mqtt_dotdot_groups_view_group_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/view_group_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_view_group_response_callback_unset(const uic_mqtt_dotdot_groups_view_group_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/view_group_response is received.
 */
void uic_mqtt_dotdot_groups_view_group_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/view_group_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_view_group_response_callback_set(const uic_mqtt_dotdot_groups_view_group_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/view_group_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_view_group_response_callback_unset(const uic_mqtt_dotdot_groups_view_group_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/view_group_response is received.
 */
void uic_mqtt_dotdot_groups_generated_view_group_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/get_group_membership is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_get_group_membership_callback_set(const uic_mqtt_dotdot_groups_get_group_membership_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/get_group_membership is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_get_group_membership_callback_unset(const uic_mqtt_dotdot_groups_get_group_membership_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/get_group_membership is received.
 */
void uic_mqtt_dotdot_groups_get_group_membership_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/get_group_membership is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_get_group_membership_callback_set(const uic_mqtt_dotdot_groups_get_group_membership_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/get_group_membership is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_get_group_membership_callback_unset(const uic_mqtt_dotdot_groups_get_group_membership_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/get_group_membership is received.
 */
void uic_mqtt_dotdot_groups_generated_get_group_membership_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/get_group_membership_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_get_group_membership_response_callback_set(const uic_mqtt_dotdot_groups_get_group_membership_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/get_group_membership_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_get_group_membership_response_callback_unset(const uic_mqtt_dotdot_groups_get_group_membership_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/get_group_membership_response is received.
 */
void uic_mqtt_dotdot_groups_get_group_membership_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/get_group_membership_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_get_group_membership_response_callback_set(const uic_mqtt_dotdot_groups_get_group_membership_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/get_group_membership_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_get_group_membership_response_callback_unset(const uic_mqtt_dotdot_groups_get_group_membership_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/get_group_membership_response is received.
 */
void uic_mqtt_dotdot_groups_generated_get_group_membership_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/remove_group is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_remove_group_callback_set(const uic_mqtt_dotdot_groups_remove_group_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/remove_group is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_remove_group_callback_unset(const uic_mqtt_dotdot_groups_remove_group_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/remove_group is received.
 */
void uic_mqtt_dotdot_groups_remove_group_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/remove_group is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_remove_group_callback_set(const uic_mqtt_dotdot_groups_remove_group_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/remove_group is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_remove_group_callback_unset(const uic_mqtt_dotdot_groups_remove_group_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/remove_group is received.
 */
void uic_mqtt_dotdot_groups_generated_remove_group_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/remove_group_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_remove_group_response_callback_set(const uic_mqtt_dotdot_groups_remove_group_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/remove_group_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_remove_group_response_callback_unset(const uic_mqtt_dotdot_groups_remove_group_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/remove_group_response is received.
 */
void uic_mqtt_dotdot_groups_remove_group_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/remove_group_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_remove_group_response_callback_set(const uic_mqtt_dotdot_groups_remove_group_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/remove_group_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_remove_group_response_callback_unset(const uic_mqtt_dotdot_groups_remove_group_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/remove_group_response is received.
 */
void uic_mqtt_dotdot_groups_generated_remove_group_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/remove_all_groups is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_remove_all_groups_callback_set(const uic_mqtt_dotdot_groups_remove_all_groups_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/remove_all_groups is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_remove_all_groups_callback_unset(const uic_mqtt_dotdot_groups_remove_all_groups_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/remove_all_groups is received.
 */
void uic_mqtt_dotdot_groups_remove_all_groups_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/remove_all_groups is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_remove_all_groups_callback_set(const uic_mqtt_dotdot_groups_remove_all_groups_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/remove_all_groups is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_remove_all_groups_callback_unset(const uic_mqtt_dotdot_groups_remove_all_groups_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/remove_all_groups is received.
 */
void uic_mqtt_dotdot_groups_generated_remove_all_groups_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Groups/Commands/add_group_if_identifying is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_add_group_if_identifying_callback_set(const uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Groups/Commands/add_group_if_identifying is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_add_group_if_identifying_callback_unset(const uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Groups/Commands/add_group_if_identifying is received.
 */
void uic_mqtt_dotdot_groups_add_group_if_identifying_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Groups/GeneratedCommands/add_group_if_identifying is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_groups_generated_add_group_if_identifying_callback_set(const uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Groups/GeneratedCommands/add_group_if_identifying is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_groups_generated_add_group_if_identifying_callback_unset(const uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Groups/GeneratedCommands/add_group_if_identifying is received.
 */
void uic_mqtt_dotdot_groups_generated_add_group_if_identifying_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/groups/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_groups_write_attributes_callback(
  const uic_mqtt_dotdot_groups_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/groups/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_groups_write_attributes_callback(
  const uic_mqtt_dotdot_groups_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/groups/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_groups_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/groups/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_groups_force_read_attributes_callback(
  const uic_mqtt_dotdot_groups_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/groups/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_groups_force_read_attributes_callback(
  const uic_mqtt_dotdot_groups_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/groups/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_groups_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Groups/Attributes/NameSupport
 *
 * @param base_topic    topic prefix to publish, /name_support
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_groups_name_support_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Groups/Attributes/NameSupport
 *
 * @param base_topic    topic prefix to publish, /name_support
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_groups_name_support_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Groups/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Groups/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_groups_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Groups/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Groups/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_groups_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Groups Cluster
 *
 * This function will iterate over all Commands in the Groups Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_groups_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Groups Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_groups_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the scenes cluster
typedef sl_status_t (*uic_mqtt_dotdot_scenes_add_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid,

    uint16_t transition_time,

    SSceneName scene_name,

    uint8_t extension_field_sets_count,
    const SExtensionFieldSetList *extension_field_sets,

    uint8_t transition_time100ms

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_add_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_view_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_view_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid,

    uint8_t sceneid,

    uint16_t transition_time,

    SSceneName scene_name,

    uint8_t extension_field_sets_count,
    const SExtensionFieldSetList *extension_field_sets

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_store_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_store_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_recall_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid,

    uint16_t transition_time

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_get_scene_membership_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    uint8_t capacity,

    SGroupId groupid,

    uint8_t scene_list_count,
    const uint8_t *scene_list

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid,

    uint16_t transition_time,

    SSceneName scene_name,

    uint8_t extension_field_sets_count,
    const SExtensionFieldSetList *extension_field_sets

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SGroupId groupid,

    uint8_t sceneid

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId groupid,

    uint8_t sceneid,

    uint16_t transition_time,

    SSceneName scene_name,

    uint8_t extension_field_sets_count,
    const SExtensionFieldSetList *extension_field_sets

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_copy_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t mode,

    SGroupId group_identifier_from,

    uint8_t scene_identifier_from,

    SGroupId group_identifier_to,

    uint8_t scene_identifier_to

);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_copy_scene_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    SGroupId group_identifier_from,

    uint8_t scene_identifier_from

);

typedef struct {
  uint8_t scene_count;
  uint8_t current_scene;
  SGroupId current_group;
  bool scene_valid;
  uint8_t name_support;
  EUI64 last_configured_by;
  size_t scene_table_count;
  const SSceneTable* scene_table;
} uic_mqtt_dotdot_scenes_state_t;

typedef struct {
  bool scene_count;
  bool current_scene;
  bool current_group;
  bool scene_valid;
  bool name_support;
  bool last_configured_by;
  bool scene_table;
} uic_mqtt_dotdot_scenes_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_scenes_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_scenes_state_t,
    uic_mqtt_dotdot_scenes_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_scenes_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_scenes_updated_state_t
);


/**
 * @brief Command fields for Scenes/AddScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;

  uint16_t transition_time;

  SSceneName scene_name;

  uint8_t extension_field_sets_count;
  const SExtensionFieldSetList *extension_field_sets;

  uint8_t transition_time100ms;
} uic_mqtt_dotdot_scenes_command_add_scene_fields_t;

/**
 * @brief Command fields for Scenes/AddSceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_add_scene_response_fields_t;

/**
 * @brief Command fields for Scenes/ViewScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_view_scene_fields_t;

/**
 * @brief Command fields for Scenes/ViewSceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;

  uint8_t sceneid;

  uint16_t transition_time;

  SSceneName scene_name;

  uint8_t extension_field_sets_count;
  const SExtensionFieldSetList *extension_field_sets;
} uic_mqtt_dotdot_scenes_command_view_scene_response_fields_t;

/**
 * @brief Command fields for Scenes/RemoveScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_remove_scene_fields_t;

/**
 * @brief Command fields for Scenes/RemoveSceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_remove_scene_response_fields_t;

/**
 * @brief Command fields for Scenes/RemoveAllScenes
 */
typedef struct {
  SGroupId groupid;
} uic_mqtt_dotdot_scenes_command_remove_all_scenes_fields_t;

/**
 * @brief Command fields for Scenes/RemoveAllScenesResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;
} uic_mqtt_dotdot_scenes_command_remove_all_scenes_response_fields_t;

/**
 * @brief Command fields for Scenes/StoreScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_store_scene_fields_t;

/**
 * @brief Command fields for Scenes/StoreSceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_store_scene_response_fields_t;

/**
 * @brief Command fields for Scenes/RecallScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;

  uint16_t transition_time;
} uic_mqtt_dotdot_scenes_command_recall_scene_fields_t;

/**
 * @brief Command fields for Scenes/GetSceneMembership
 */
typedef struct {
  SGroupId groupid;
} uic_mqtt_dotdot_scenes_command_get_scene_membership_fields_t;

/**
 * @brief Command fields for Scenes/GetSceneMembershipResponse
 */
typedef struct {
  zclStatus status;

  uint8_t capacity;

  SGroupId groupid;

  uint8_t scene_list_count;
  const uint8_t *scene_list;
} uic_mqtt_dotdot_scenes_command_get_scene_membership_response_fields_t;

/**
 * @brief Command fields for Scenes/EnhancedAddScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;

  uint16_t transition_time;

  SSceneName scene_name;

  uint8_t extension_field_sets_count;
  const SExtensionFieldSetList *extension_field_sets;
} uic_mqtt_dotdot_scenes_command_enhanced_add_scene_fields_t;

/**
 * @brief Command fields for Scenes/EnhancedAddSceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_enhanced_add_scene_response_fields_t;

/**
 * @brief Command fields for Scenes/EnhancedViewScene
 */
typedef struct {
  SGroupId groupid;

  uint8_t sceneid;
} uic_mqtt_dotdot_scenes_command_enhanced_view_scene_fields_t;

/**
 * @brief Command fields for Scenes/EnhancedViewSceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId groupid;

  uint8_t sceneid;

  uint16_t transition_time;

  SSceneName scene_name;

  uint8_t extension_field_sets_count;
  const SExtensionFieldSetList *extension_field_sets;
} uic_mqtt_dotdot_scenes_command_enhanced_view_scene_response_fields_t;

/**
 * @brief Command fields for Scenes/CopyScene
 */
typedef struct {
  uint8_t mode;

  SGroupId group_identifier_from;

  uint8_t scene_identifier_from;

  SGroupId group_identifier_to;

  uint8_t scene_identifier_to;
} uic_mqtt_dotdot_scenes_command_copy_scene_fields_t;

/**
 * @brief Command fields for Scenes/CopySceneResponse
 */
typedef struct {
  zclStatus status;

  SGroupId group_identifier_from;

  uint8_t scene_identifier_from;
} uic_mqtt_dotdot_scenes_command_copy_scene_response_fields_t;


/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/add_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_add_scene_callback_set(const uic_mqtt_dotdot_scenes_add_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/add_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_add_scene_callback_unset(const uic_mqtt_dotdot_scenes_add_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/add_scene is received.
 */
void uic_mqtt_dotdot_scenes_add_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/add_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_add_scene_callback_set(const uic_mqtt_dotdot_scenes_add_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/add_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_add_scene_callback_unset(const uic_mqtt_dotdot_scenes_add_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/add_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_add_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/add_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_add_scene_response_callback_set(const uic_mqtt_dotdot_scenes_add_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/add_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_add_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_add_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/add_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_add_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/add_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_add_scene_response_callback_set(const uic_mqtt_dotdot_scenes_add_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/add_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_add_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_add_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/add_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_add_scene_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/view_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_view_scene_callback_set(const uic_mqtt_dotdot_scenes_view_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/view_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_view_scene_callback_unset(const uic_mqtt_dotdot_scenes_view_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/view_scene is received.
 */
void uic_mqtt_dotdot_scenes_view_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/view_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_view_scene_callback_set(const uic_mqtt_dotdot_scenes_view_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/view_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_view_scene_callback_unset(const uic_mqtt_dotdot_scenes_view_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/view_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_view_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/view_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_view_scene_response_callback_set(const uic_mqtt_dotdot_scenes_view_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/view_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_view_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_view_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/view_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_view_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/view_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_view_scene_response_callback_set(const uic_mqtt_dotdot_scenes_view_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/view_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_view_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_view_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/view_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_view_scene_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/remove_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_scene_callback_set(const uic_mqtt_dotdot_scenes_remove_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/remove_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_scene_callback_unset(const uic_mqtt_dotdot_scenes_remove_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/remove_scene is received.
 */
void uic_mqtt_dotdot_scenes_remove_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/remove_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_scene_callback_set(const uic_mqtt_dotdot_scenes_remove_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/remove_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_scene_callback_unset(const uic_mqtt_dotdot_scenes_remove_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/remove_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_remove_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/remove_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_scene_response_callback_set(const uic_mqtt_dotdot_scenes_remove_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/remove_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_remove_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/remove_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_remove_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/remove_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_scene_response_callback_set(const uic_mqtt_dotdot_scenes_remove_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/remove_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_remove_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/remove_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_remove_scene_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/remove_all_scenes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_all_scenes_callback_set(const uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/remove_all_scenes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_all_scenes_callback_unset(const uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/remove_all_scenes is received.
 */
void uic_mqtt_dotdot_scenes_remove_all_scenes_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/remove_all_scenes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_all_scenes_callback_set(const uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/remove_all_scenes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_all_scenes_callback_unset(const uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/remove_all_scenes is received.
 */
void uic_mqtt_dotdot_scenes_generated_remove_all_scenes_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/remove_all_scenes_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_set(const uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/remove_all_scenes_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_unset(const uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/remove_all_scenes_response is received.
 */
void uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/remove_all_scenes_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_all_scenes_response_callback_set(const uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/remove_all_scenes_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_remove_all_scenes_response_callback_unset(const uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/remove_all_scenes_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_remove_all_scenes_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/store_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_store_scene_callback_set(const uic_mqtt_dotdot_scenes_store_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/store_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_store_scene_callback_unset(const uic_mqtt_dotdot_scenes_store_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/store_scene is received.
 */
void uic_mqtt_dotdot_scenes_store_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/store_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_store_scene_callback_set(const uic_mqtt_dotdot_scenes_store_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/store_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_store_scene_callback_unset(const uic_mqtt_dotdot_scenes_store_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/store_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_store_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/store_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_store_scene_response_callback_set(const uic_mqtt_dotdot_scenes_store_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/store_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_store_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_store_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/store_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_store_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/store_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_store_scene_response_callback_set(const uic_mqtt_dotdot_scenes_store_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/store_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_store_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_store_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/store_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_store_scene_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/recall_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_recall_scene_callback_set(const uic_mqtt_dotdot_scenes_recall_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/recall_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_recall_scene_callback_unset(const uic_mqtt_dotdot_scenes_recall_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/recall_scene is received.
 */
void uic_mqtt_dotdot_scenes_recall_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/recall_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_recall_scene_callback_set(const uic_mqtt_dotdot_scenes_recall_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/recall_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_recall_scene_callback_unset(const uic_mqtt_dotdot_scenes_recall_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/recall_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_recall_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/get_scene_membership is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_get_scene_membership_callback_set(const uic_mqtt_dotdot_scenes_get_scene_membership_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/get_scene_membership is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_get_scene_membership_callback_unset(const uic_mqtt_dotdot_scenes_get_scene_membership_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/get_scene_membership is received.
 */
void uic_mqtt_dotdot_scenes_get_scene_membership_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/get_scene_membership is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_get_scene_membership_callback_set(const uic_mqtt_dotdot_scenes_get_scene_membership_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/get_scene_membership is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_get_scene_membership_callback_unset(const uic_mqtt_dotdot_scenes_get_scene_membership_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/get_scene_membership is received.
 */
void uic_mqtt_dotdot_scenes_generated_get_scene_membership_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/get_scene_membership_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_set(const uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/get_scene_membership_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_unset(const uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/get_scene_membership_response is received.
 */
void uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/get_scene_membership_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_get_scene_membership_response_callback_set(const uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/get_scene_membership_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_get_scene_membership_response_callback_unset(const uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/get_scene_membership_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_get_scene_membership_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/enhanced_add_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_set(const uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/enhanced_add_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/enhanced_add_scene is received.
 */
void uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_add_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_add_scene_callback_set(const uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_add_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_add_scene_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/enhanced_add_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_add_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/enhanced_add_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_set(const uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/enhanced_add_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/enhanced_add_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_add_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_add_scene_response_callback_set(const uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_add_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_add_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/enhanced_add_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_add_scene_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/enhanced_view_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_set(const uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/enhanced_view_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/enhanced_view_scene is received.
 */
void uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_view_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_view_scene_callback_set(const uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_view_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_view_scene_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/enhanced_view_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_view_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/enhanced_view_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_set(const uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/enhanced_view_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/enhanced_view_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_view_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_view_scene_response_callback_set(const uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/enhanced_view_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_view_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/enhanced_view_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_enhanced_view_scene_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/copy_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_copy_scene_callback_set(const uic_mqtt_dotdot_scenes_copy_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/copy_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_copy_scene_callback_unset(const uic_mqtt_dotdot_scenes_copy_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/copy_scene is received.
 */
void uic_mqtt_dotdot_scenes_copy_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/copy_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_copy_scene_callback_set(const uic_mqtt_dotdot_scenes_copy_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/copy_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_copy_scene_callback_unset(const uic_mqtt_dotdot_scenes_copy_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/copy_scene is received.
 */
void uic_mqtt_dotdot_scenes_generated_copy_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Scenes/Commands/copy_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_copy_scene_response_callback_set(const uic_mqtt_dotdot_scenes_copy_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Scenes/Commands/copy_scene_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_copy_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_copy_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Scenes/Commands/copy_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_copy_scene_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Scenes/GeneratedCommands/copy_scene_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_copy_scene_response_callback_set(const uic_mqtt_dotdot_scenes_copy_scene_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Scenes/GeneratedCommands/copy_scene_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_scenes_generated_copy_scene_response_callback_unset(const uic_mqtt_dotdot_scenes_copy_scene_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Scenes/GeneratedCommands/copy_scene_response is received.
 */
void uic_mqtt_dotdot_scenes_generated_copy_scene_response_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/scenes/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_scenes_write_attributes_callback(
  const uic_mqtt_dotdot_scenes_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/scenes/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_scenes_write_attributes_callback(
  const uic_mqtt_dotdot_scenes_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/scenes/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_scenes_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/scenes/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_scenes_force_read_attributes_callback(
  const uic_mqtt_dotdot_scenes_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/scenes/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_scenes_force_read_attributes_callback(
  const uic_mqtt_dotdot_scenes_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/scenes/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_scenes_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Scenes/Attributes/SceneCount
 *
 * @param base_topic    topic prefix to publish, /scene_count
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_scene_count_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/SceneCount
 *
 * @param base_topic    topic prefix to publish, /scene_count
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_scene_count_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Scenes/Attributes/CurrentScene
 *
 * @param base_topic    topic prefix to publish, /current_scene
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_current_scene_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/CurrentScene
 *
 * @param base_topic    topic prefix to publish, /current_scene
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_current_scene_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Scenes/Attributes/CurrentGroup
 *
 * @param base_topic    topic prefix to publish, /current_group
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_current_group_publish(
  const char *base_topic,
  SGroupId value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/CurrentGroup
 *
 * @param base_topic    topic prefix to publish, /current_group
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_current_group_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Scenes/Attributes/SceneValid
 *
 * @param base_topic    topic prefix to publish, /scene_valid
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_scene_valid_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/SceneValid
 *
 * @param base_topic    topic prefix to publish, /scene_valid
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_scene_valid_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Scenes/Attributes/NameSupport
 *
 * @param base_topic    topic prefix to publish, /name_support
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_name_support_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/NameSupport
 *
 * @param base_topic    topic prefix to publish, /name_support
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_name_support_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Scenes/Attributes/LastConfiguredBy
 *
 * @param base_topic    topic prefix to publish, /last_configured_by
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_last_configured_by_publish(
  const char *base_topic,
  EUI64 value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/LastConfiguredBy
 *
 * @param base_topic    topic prefix to publish, /last_configured_by
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_last_configured_by_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Scenes/Attributes/SceneTable
 *
 * @param base_topic    topic prefix to publish, /scene_table
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_scene_table_publish(
  const char *base_topic,
  size_t value_count,
  const SSceneTable* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Scenes/Attributes/SceneTable
 *
 * @param base_topic    topic prefix to publish, /scene_table
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_scenes_scene_table_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Scenes/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Scenes/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_scenes_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Scenes/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Scenes/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_scenes_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Scenes Cluster
 *
 * This function will iterate over all Commands in the Scenes Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_scenes_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Scenes Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_scenes_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the on_off cluster
typedef sl_status_t (*uic_mqtt_dotdot_on_off_off_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_on_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_toggle_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_off_with_effect_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    OffWithEffectEffectIdentifier effect_identifier,

    uint8_t effect_variant

);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t on_off_control,

    uint16_t on_time,

    uint16_t off_wait_time

);

typedef struct {
  bool on_off;
  bool global_scene_control;
  uint16_t on_time;
  uint16_t off_wait_time;
  uint8_t start_up_on_off;
} uic_mqtt_dotdot_on_off_state_t;

typedef struct {
  bool on_off;
  bool global_scene_control;
  bool on_time;
  bool off_wait_time;
  bool start_up_on_off;
} uic_mqtt_dotdot_on_off_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_on_off_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_on_off_state_t,
    uic_mqtt_dotdot_on_off_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_on_off_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_on_off_updated_state_t
);


/**
 * @brief Command fields for OnOff/OffWithEffect
 */
typedef struct {
  OffWithEffectEffectIdentifier effect_identifier;

  uint8_t effect_variant;
} uic_mqtt_dotdot_on_off_command_off_with_effect_fields_t;

/**
 * @brief Command fields for OnOff/OnWithTimedOff
 */
typedef struct {
  uint8_t on_off_control;

  uint16_t on_time;

  uint16_t off_wait_time;
} uic_mqtt_dotdot_on_off_command_on_with_timed_off_fields_t;


/**
 * @brief Setup callback to be called when a
 * OnOff/Commands/off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_off_callback_set(const uic_mqtt_dotdot_on_off_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * OnOff/Commands/off is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_off_callback_unset(const uic_mqtt_dotdot_on_off_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * OnOff/Commands/off is received.
 */
void uic_mqtt_dotdot_on_off_off_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/OnOff/GeneratedCommands/off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_off_callback_set(const uic_mqtt_dotdot_on_off_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/OnOff/GeneratedCommands/off is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_off_callback_unset(const uic_mqtt_dotdot_on_off_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/OnOff/GeneratedCommands/off is received.
 */
void uic_mqtt_dotdot_on_off_generated_off_callback_clear();
/**
 * @brief Setup callback to be called when a
 * OnOff/Commands/on is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_on_callback_set(const uic_mqtt_dotdot_on_off_on_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * OnOff/Commands/on is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_on_callback_unset(const uic_mqtt_dotdot_on_off_on_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * OnOff/Commands/on is received.
 */
void uic_mqtt_dotdot_on_off_on_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/OnOff/GeneratedCommands/on is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_on_callback_set(const uic_mqtt_dotdot_on_off_on_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/OnOff/GeneratedCommands/on is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_on_callback_unset(const uic_mqtt_dotdot_on_off_on_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/OnOff/GeneratedCommands/on is received.
 */
void uic_mqtt_dotdot_on_off_generated_on_callback_clear();
/**
 * @brief Setup callback to be called when a
 * OnOff/Commands/toggle is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_toggle_callback_set(const uic_mqtt_dotdot_on_off_toggle_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * OnOff/Commands/toggle is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_toggle_callback_unset(const uic_mqtt_dotdot_on_off_toggle_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * OnOff/Commands/toggle is received.
 */
void uic_mqtt_dotdot_on_off_toggle_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/OnOff/GeneratedCommands/toggle is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_toggle_callback_set(const uic_mqtt_dotdot_on_off_toggle_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/OnOff/GeneratedCommands/toggle is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_toggle_callback_unset(const uic_mqtt_dotdot_on_off_toggle_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/OnOff/GeneratedCommands/toggle is received.
 */
void uic_mqtt_dotdot_on_off_generated_toggle_callback_clear();
/**
 * @brief Setup callback to be called when a
 * OnOff/Commands/off_with_effect is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_off_with_effect_callback_set(const uic_mqtt_dotdot_on_off_off_with_effect_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * OnOff/Commands/off_with_effect is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_off_with_effect_callback_unset(const uic_mqtt_dotdot_on_off_off_with_effect_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * OnOff/Commands/off_with_effect is received.
 */
void uic_mqtt_dotdot_on_off_off_with_effect_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/OnOff/GeneratedCommands/off_with_effect is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_off_with_effect_callback_set(const uic_mqtt_dotdot_on_off_off_with_effect_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/OnOff/GeneratedCommands/off_with_effect is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_off_with_effect_callback_unset(const uic_mqtt_dotdot_on_off_off_with_effect_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/OnOff/GeneratedCommands/off_with_effect is received.
 */
void uic_mqtt_dotdot_on_off_generated_off_with_effect_callback_clear();
/**
 * @brief Setup callback to be called when a
 * OnOff/Commands/on_with_recall_global_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_set(const uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * OnOff/Commands/on_with_recall_global_scene is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_unset(const uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * OnOff/Commands/on_with_recall_global_scene is received.
 */
void uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/OnOff/GeneratedCommands/on_with_recall_global_scene is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_on_with_recall_global_scene_callback_set(const uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/OnOff/GeneratedCommands/on_with_recall_global_scene is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_on_with_recall_global_scene_callback_unset(const uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/OnOff/GeneratedCommands/on_with_recall_global_scene is received.
 */
void uic_mqtt_dotdot_on_off_generated_on_with_recall_global_scene_callback_clear();
/**
 * @brief Setup callback to be called when a
 * OnOff/Commands/on_with_timed_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_on_with_timed_off_callback_set(const uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * OnOff/Commands/on_with_timed_off is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_on_with_timed_off_callback_unset(const uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * OnOff/Commands/on_with_timed_off is received.
 */
void uic_mqtt_dotdot_on_off_on_with_timed_off_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/OnOff/GeneratedCommands/on_with_timed_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_on_with_timed_off_callback_set(const uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/OnOff/GeneratedCommands/on_with_timed_off is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_on_off_generated_on_with_timed_off_callback_unset(const uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/OnOff/GeneratedCommands/on_with_timed_off is received.
 */
void uic_mqtt_dotdot_on_off_generated_on_with_timed_off_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/on_off/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_on_off_write_attributes_callback(
  const uic_mqtt_dotdot_on_off_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/on_off/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_on_off_write_attributes_callback(
  const uic_mqtt_dotdot_on_off_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/on_off/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_on_off_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/on_off/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_on_off_force_read_attributes_callback(
  const uic_mqtt_dotdot_on_off_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/on_off/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_on_off_force_read_attributes_callback(
  const uic_mqtt_dotdot_on_off_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/on_off/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_on_off_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; OnOff/Attributes/OnOff
 *
 * @param base_topic    topic prefix to publish, /on_off
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_on_off_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OnOff/Attributes/OnOff
 *
 * @param base_topic    topic prefix to publish, /on_off
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_on_off_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OnOff/Attributes/GlobalSceneControl
 *
 * @param base_topic    topic prefix to publish, /global_scene_control
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_global_scene_control_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OnOff/Attributes/GlobalSceneControl
 *
 * @param base_topic    topic prefix to publish, /global_scene_control
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_global_scene_control_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OnOff/Attributes/OnTime
 *
 * @param base_topic    topic prefix to publish, /on_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_on_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OnOff/Attributes/OnTime
 *
 * @param base_topic    topic prefix to publish, /on_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_on_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OnOff/Attributes/OffWaitTime
 *
 * @param base_topic    topic prefix to publish, /off_wait_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_off_wait_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OnOff/Attributes/OffWaitTime
 *
 * @param base_topic    topic prefix to publish, /off_wait_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_off_wait_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OnOff/Attributes/StartUpOnOff
 *
 * @param base_topic    topic prefix to publish, /start_up_on_off
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_start_up_on_off_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OnOff/Attributes/StartUpOnOff
 *
 * @param base_topic    topic prefix to publish, /start_up_on_off
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_on_off_start_up_on_off_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the OnOff/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /OnOff/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_on_off_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to OnOff/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /OnOff/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_on_off_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the OnOff Cluster
 *
 * This function will iterate over all Commands in the OnOff Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_on_off_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the OnOff Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_on_off_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the level cluster
typedef sl_status_t (*uic_mqtt_dotdot_level_move_to_level_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t level,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_move_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    MoveStepMode move_mode,

    uint8_t rate,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_step_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    MoveStepMode step_mode,

    uint8_t step_size,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_stop_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t level,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_move_with_on_off_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    MoveStepMode move_mode,

    uint8_t rate,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_step_with_on_off_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    MoveStepMode step_mode,

    uint8_t step_size,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_stop_with_on_off_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t frequency

);

typedef struct {
  uint8_t current_level;
  uint16_t remaining_time;
  uint8_t min_level;
  uint8_t max_level;
  uint16_t current_frequency;
  uint16_t min_frequency;
  uint16_t max_frequency;
  uint8_t options;
  uint16_t on_off_transition_time;
  uint8_t on_level;
  uint16_t on_transition_time;
  uint16_t off_transition_time;
  uint16_t default_move_rate;
  uint8_t start_up_current_level;
} uic_mqtt_dotdot_level_state_t;

typedef struct {
  bool current_level;
  bool remaining_time;
  bool min_level;
  bool max_level;
  bool current_frequency;
  bool min_frequency;
  bool max_frequency;
  bool options;
  bool on_off_transition_time;
  bool on_level;
  bool on_transition_time;
  bool off_transition_time;
  bool default_move_rate;
  bool start_up_current_level;
} uic_mqtt_dotdot_level_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_level_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_level_state_t,
    uic_mqtt_dotdot_level_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_level_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_level_updated_state_t
);


/**
 * @brief Command fields for Level/MoveToLevel
 */
typedef struct {
  uint8_t level;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_move_to_level_fields_t;

/**
 * @brief Command fields for Level/Move
 */
typedef struct {
  MoveStepMode move_mode;

  uint8_t rate;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_move_fields_t;

/**
 * @brief Command fields for Level/Step
 */
typedef struct {
  MoveStepMode step_mode;

  uint8_t step_size;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_step_fields_t;

/**
 * @brief Command fields for Level/Stop
 */
typedef struct {
  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_stop_fields_t;

/**
 * @brief Command fields for Level/MoveToLevelWithOnOff
 */
typedef struct {
  uint8_t level;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_move_to_level_with_on_off_fields_t;

/**
 * @brief Command fields for Level/MoveWithOnOff
 */
typedef struct {
  MoveStepMode move_mode;

  uint8_t rate;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_move_with_on_off_fields_t;

/**
 * @brief Command fields for Level/StepWithOnOff
 */
typedef struct {
  MoveStepMode step_mode;

  uint8_t step_size;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_step_with_on_off_fields_t;

/**
 * @brief Command fields for Level/StopWithOnOff
 */
typedef struct {
  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_level_command_stop_with_on_off_fields_t;

/**
 * @brief Command fields for Level/MoveToClosestFrequency
 */
typedef struct {
  uint16_t frequency;
} uic_mqtt_dotdot_level_command_move_to_closest_frequency_fields_t;


/**
 * @brief Setup callback to be called when a
 * Level/Commands/move_to_level is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_move_to_level_callback_set(const uic_mqtt_dotdot_level_move_to_level_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/move_to_level is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_move_to_level_callback_unset(const uic_mqtt_dotdot_level_move_to_level_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/move_to_level is received.
 */
void uic_mqtt_dotdot_level_move_to_level_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/move_to_level is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_to_level_callback_set(const uic_mqtt_dotdot_level_move_to_level_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/move_to_level is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_to_level_callback_unset(const uic_mqtt_dotdot_level_move_to_level_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/move_to_level is received.
 */
void uic_mqtt_dotdot_level_generated_move_to_level_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/move is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_move_callback_set(const uic_mqtt_dotdot_level_move_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/move is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_move_callback_unset(const uic_mqtt_dotdot_level_move_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/move is received.
 */
void uic_mqtt_dotdot_level_move_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/move is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_callback_set(const uic_mqtt_dotdot_level_move_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/move is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_callback_unset(const uic_mqtt_dotdot_level_move_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/move is received.
 */
void uic_mqtt_dotdot_level_generated_move_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/step is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_step_callback_set(const uic_mqtt_dotdot_level_step_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/step is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_step_callback_unset(const uic_mqtt_dotdot_level_step_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/step is received.
 */
void uic_mqtt_dotdot_level_step_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/step is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_step_callback_set(const uic_mqtt_dotdot_level_step_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/step is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_step_callback_unset(const uic_mqtt_dotdot_level_step_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/step is received.
 */
void uic_mqtt_dotdot_level_generated_step_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_stop_callback_set(const uic_mqtt_dotdot_level_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/stop is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_stop_callback_unset(const uic_mqtt_dotdot_level_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/stop is received.
 */
void uic_mqtt_dotdot_level_stop_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_stop_callback_set(const uic_mqtt_dotdot_level_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/stop is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_stop_callback_unset(const uic_mqtt_dotdot_level_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/stop is received.
 */
void uic_mqtt_dotdot_level_generated_stop_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/move_to_level_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_set(const uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/move_to_level_with_on_off is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_unset(const uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/move_to_level_with_on_off is received.
 */
void uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/move_to_level_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_to_level_with_on_off_callback_set(const uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/move_to_level_with_on_off is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_to_level_with_on_off_callback_unset(const uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/move_to_level_with_on_off is received.
 */
void uic_mqtt_dotdot_level_generated_move_to_level_with_on_off_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/move_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_move_with_on_off_callback_set(const uic_mqtt_dotdot_level_move_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/move_with_on_off is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_move_with_on_off_callback_unset(const uic_mqtt_dotdot_level_move_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/move_with_on_off is received.
 */
void uic_mqtt_dotdot_level_move_with_on_off_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/move_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_with_on_off_callback_set(const uic_mqtt_dotdot_level_move_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/move_with_on_off is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_with_on_off_callback_unset(const uic_mqtt_dotdot_level_move_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/move_with_on_off is received.
 */
void uic_mqtt_dotdot_level_generated_move_with_on_off_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/step_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_step_with_on_off_callback_set(const uic_mqtt_dotdot_level_step_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/step_with_on_off is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_step_with_on_off_callback_unset(const uic_mqtt_dotdot_level_step_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/step_with_on_off is received.
 */
void uic_mqtt_dotdot_level_step_with_on_off_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/step_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_step_with_on_off_callback_set(const uic_mqtt_dotdot_level_step_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/step_with_on_off is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_step_with_on_off_callback_unset(const uic_mqtt_dotdot_level_step_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/step_with_on_off is received.
 */
void uic_mqtt_dotdot_level_generated_step_with_on_off_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/stop_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_stop_with_on_off_callback_set(const uic_mqtt_dotdot_level_stop_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/stop_with_on_off is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_stop_with_on_off_callback_unset(const uic_mqtt_dotdot_level_stop_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/stop_with_on_off is received.
 */
void uic_mqtt_dotdot_level_stop_with_on_off_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/stop_with_on_off is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_stop_with_on_off_callback_set(const uic_mqtt_dotdot_level_stop_with_on_off_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/stop_with_on_off is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_stop_with_on_off_callback_unset(const uic_mqtt_dotdot_level_stop_with_on_off_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/stop_with_on_off is received.
 */
void uic_mqtt_dotdot_level_generated_stop_with_on_off_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Level/Commands/move_to_closest_frequency is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_move_to_closest_frequency_callback_set(const uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Level/Commands/move_to_closest_frequency is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_move_to_closest_frequency_callback_unset(const uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Level/Commands/move_to_closest_frequency is received.
 */
void uic_mqtt_dotdot_level_move_to_closest_frequency_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Level/GeneratedCommands/move_to_closest_frequency is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_to_closest_frequency_callback_set(const uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Level/GeneratedCommands/move_to_closest_frequency is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_level_generated_move_to_closest_frequency_callback_unset(const uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Level/GeneratedCommands/move_to_closest_frequency is received.
 */
void uic_mqtt_dotdot_level_generated_move_to_closest_frequency_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/level/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_level_write_attributes_callback(
  const uic_mqtt_dotdot_level_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/level/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_level_write_attributes_callback(
  const uic_mqtt_dotdot_level_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/level/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_level_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/level/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_level_force_read_attributes_callback(
  const uic_mqtt_dotdot_level_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/level/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_level_force_read_attributes_callback(
  const uic_mqtt_dotdot_level_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/level/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_level_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Level/Attributes/CurrentLevel
 *
 * @param base_topic    topic prefix to publish, /current_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_current_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/CurrentLevel
 *
 * @param base_topic    topic prefix to publish, /current_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_current_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/RemainingTime
 *
 * @param base_topic    topic prefix to publish, /remaining_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_remaining_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/RemainingTime
 *
 * @param base_topic    topic prefix to publish, /remaining_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_remaining_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/MinLevel
 *
 * @param base_topic    topic prefix to publish, /min_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_min_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/MinLevel
 *
 * @param base_topic    topic prefix to publish, /min_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_min_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/MaxLevel
 *
 * @param base_topic    topic prefix to publish, /max_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_max_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/MaxLevel
 *
 * @param base_topic    topic prefix to publish, /max_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_max_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/CurrentFrequency
 *
 * @param base_topic    topic prefix to publish, /current_frequency
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_current_frequency_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/CurrentFrequency
 *
 * @param base_topic    topic prefix to publish, /current_frequency
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_current_frequency_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/MinFrequency
 *
 * @param base_topic    topic prefix to publish, /min_frequency
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_min_frequency_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/MinFrequency
 *
 * @param base_topic    topic prefix to publish, /min_frequency
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_min_frequency_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/MaxFrequency
 *
 * @param base_topic    topic prefix to publish, /max_frequency
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_max_frequency_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/MaxFrequency
 *
 * @param base_topic    topic prefix to publish, /max_frequency
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_max_frequency_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/Options
 *
 * @param base_topic    topic prefix to publish, /options
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_options_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/Options
 *
 * @param base_topic    topic prefix to publish, /options
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_options_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/OnOffTransitionTime
 *
 * @param base_topic    topic prefix to publish, /on_off_transition_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_on_off_transition_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/OnOffTransitionTime
 *
 * @param base_topic    topic prefix to publish, /on_off_transition_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_on_off_transition_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/OnLevel
 *
 * @param base_topic    topic prefix to publish, /on_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_on_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/OnLevel
 *
 * @param base_topic    topic prefix to publish, /on_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_on_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/OnTransitionTime
 *
 * @param base_topic    topic prefix to publish, /on_transition_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_on_transition_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/OnTransitionTime
 *
 * @param base_topic    topic prefix to publish, /on_transition_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_on_transition_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/OffTransitionTime
 *
 * @param base_topic    topic prefix to publish, /off_transition_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_off_transition_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/OffTransitionTime
 *
 * @param base_topic    topic prefix to publish, /off_transition_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_off_transition_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/DefaultMoveRate
 *
 * @param base_topic    topic prefix to publish, /default_move_rate
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_default_move_rate_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/DefaultMoveRate
 *
 * @param base_topic    topic prefix to publish, /default_move_rate
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_default_move_rate_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Level/Attributes/StartUpCurrentLevel
 *
 * @param base_topic    topic prefix to publish, /start_up_current_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_start_up_current_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Level/Attributes/StartUpCurrentLevel
 *
 * @param base_topic    topic prefix to publish, /start_up_current_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_level_start_up_current_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Level/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Level/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_level_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Level/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Level/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_level_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Level Cluster
 *
 * This function will iterate over all Commands in the Level Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_level_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Level Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_level_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the alarms cluster
typedef sl_status_t (*uic_mqtt_dotdot_alarms_reset_alarm_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t alarm_code,

    clusterId cluster_identifier

);
typedef sl_status_t (*uic_mqtt_dotdot_alarms_alarm_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t alarm_code,

    clusterId cluster_identifier

);
typedef sl_status_t (*uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_alarms_get_alarm_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status,

    uint8_t alarm_code,

    clusterId cluster_identifier,

    uint32_t time_stamp

);
typedef sl_status_t (*uic_mqtt_dotdot_alarms_get_alarm_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  uint16_t alarm_count;
} uic_mqtt_dotdot_alarms_state_t;

typedef struct {
  bool alarm_count;
} uic_mqtt_dotdot_alarms_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_alarms_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_alarms_state_t,
    uic_mqtt_dotdot_alarms_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_alarms_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_alarms_updated_state_t
);


/**
 * @brief Command fields for Alarms/ResetAlarm
 */
typedef struct {
  uint8_t alarm_code;

  clusterId cluster_identifier;
} uic_mqtt_dotdot_alarms_command_reset_alarm_fields_t;

/**
 * @brief Command fields for Alarms/Alarm
 */
typedef struct {
  uint8_t alarm_code;

  clusterId cluster_identifier;
} uic_mqtt_dotdot_alarms_command_alarm_fields_t;

/**
 * @brief Command fields for Alarms/GetAlarmResponse
 */
typedef struct {
  zclStatus status;

  uint8_t alarm_code;

  clusterId cluster_identifier;

  uint32_t time_stamp;
} uic_mqtt_dotdot_alarms_command_get_alarm_response_fields_t;


/**
 * @brief Setup callback to be called when a
 * Alarms/Commands/reset_alarm is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_reset_alarm_callback_set(const uic_mqtt_dotdot_alarms_reset_alarm_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Alarms/Commands/reset_alarm is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_reset_alarm_callback_unset(const uic_mqtt_dotdot_alarms_reset_alarm_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Alarms/Commands/reset_alarm is received.
 */
void uic_mqtt_dotdot_alarms_reset_alarm_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Alarms/GeneratedCommands/reset_alarm is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_reset_alarm_callback_set(const uic_mqtt_dotdot_alarms_reset_alarm_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Alarms/GeneratedCommands/reset_alarm is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_reset_alarm_callback_unset(const uic_mqtt_dotdot_alarms_reset_alarm_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Alarms/GeneratedCommands/reset_alarm is received.
 */
void uic_mqtt_dotdot_alarms_generated_reset_alarm_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Alarms/Commands/alarm is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_alarm_callback_set(const uic_mqtt_dotdot_alarms_alarm_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Alarms/Commands/alarm is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_alarm_callback_unset(const uic_mqtt_dotdot_alarms_alarm_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Alarms/Commands/alarm is received.
 */
void uic_mqtt_dotdot_alarms_alarm_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Alarms/GeneratedCommands/alarm is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_alarm_callback_set(const uic_mqtt_dotdot_alarms_alarm_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Alarms/GeneratedCommands/alarm is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_alarm_callback_unset(const uic_mqtt_dotdot_alarms_alarm_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Alarms/GeneratedCommands/alarm is received.
 */
void uic_mqtt_dotdot_alarms_generated_alarm_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Alarms/Commands/reset_all_alarms is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_reset_all_alarms_callback_set(const uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Alarms/Commands/reset_all_alarms is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_reset_all_alarms_callback_unset(const uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Alarms/Commands/reset_all_alarms is received.
 */
void uic_mqtt_dotdot_alarms_reset_all_alarms_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Alarms/GeneratedCommands/reset_all_alarms is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_reset_all_alarms_callback_set(const uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Alarms/GeneratedCommands/reset_all_alarms is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_reset_all_alarms_callback_unset(const uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Alarms/GeneratedCommands/reset_all_alarms is received.
 */
void uic_mqtt_dotdot_alarms_generated_reset_all_alarms_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Alarms/Commands/get_alarm_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_get_alarm_response_callback_set(const uic_mqtt_dotdot_alarms_get_alarm_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Alarms/Commands/get_alarm_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_get_alarm_response_callback_unset(const uic_mqtt_dotdot_alarms_get_alarm_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Alarms/Commands/get_alarm_response is received.
 */
void uic_mqtt_dotdot_alarms_get_alarm_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Alarms/GeneratedCommands/get_alarm_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_get_alarm_response_callback_set(const uic_mqtt_dotdot_alarms_get_alarm_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Alarms/GeneratedCommands/get_alarm_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_get_alarm_response_callback_unset(const uic_mqtt_dotdot_alarms_get_alarm_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Alarms/GeneratedCommands/get_alarm_response is received.
 */
void uic_mqtt_dotdot_alarms_generated_get_alarm_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Alarms/Commands/get_alarm is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_get_alarm_callback_set(const uic_mqtt_dotdot_alarms_get_alarm_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Alarms/Commands/get_alarm is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_get_alarm_callback_unset(const uic_mqtt_dotdot_alarms_get_alarm_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Alarms/Commands/get_alarm is received.
 */
void uic_mqtt_dotdot_alarms_get_alarm_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Alarms/GeneratedCommands/get_alarm is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_get_alarm_callback_set(const uic_mqtt_dotdot_alarms_get_alarm_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Alarms/GeneratedCommands/get_alarm is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_get_alarm_callback_unset(const uic_mqtt_dotdot_alarms_get_alarm_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Alarms/GeneratedCommands/get_alarm is received.
 */
void uic_mqtt_dotdot_alarms_generated_get_alarm_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Alarms/Commands/reset_alarm_log is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_reset_alarm_log_callback_set(const uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Alarms/Commands/reset_alarm_log is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_reset_alarm_log_callback_unset(const uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Alarms/Commands/reset_alarm_log is received.
 */
void uic_mqtt_dotdot_alarms_reset_alarm_log_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Alarms/GeneratedCommands/reset_alarm_log is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_reset_alarm_log_callback_set(const uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Alarms/GeneratedCommands/reset_alarm_log is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_alarms_generated_reset_alarm_log_callback_unset(const uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Alarms/GeneratedCommands/reset_alarm_log is received.
 */
void uic_mqtt_dotdot_alarms_generated_reset_alarm_log_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/alarms/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_alarms_write_attributes_callback(
  const uic_mqtt_dotdot_alarms_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/alarms/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_alarms_write_attributes_callback(
  const uic_mqtt_dotdot_alarms_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/alarms/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_alarms_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/alarms/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_alarms_force_read_attributes_callback(
  const uic_mqtt_dotdot_alarms_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/alarms/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_alarms_force_read_attributes_callback(
  const uic_mqtt_dotdot_alarms_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/alarms/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_alarms_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Alarms/Attributes/AlarmCount
 *
 * @param base_topic    topic prefix to publish, /alarm_count
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_alarms_alarm_count_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Alarms/Attributes/AlarmCount
 *
 * @param base_topic    topic prefix to publish, /alarm_count
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_alarms_alarm_count_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Alarms/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Alarms/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_alarms_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Alarms/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Alarms/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_alarms_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Alarms Cluster
 *
 * This function will iterate over all Commands in the Alarms Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_alarms_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Alarms Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_alarms_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the time cluster

typedef struct {
  UTC time;
  uint8_t time_status;
  int32_t time_zone;
  uint32_t dst_start;
  uint32_t dst_end;
  int32_t dst_shift;
  uint32_t standard_time;
  uint32_t local_time;
  UTC last_set_time;
  UTC valid_until_time;
} uic_mqtt_dotdot_time_state_t;

typedef struct {
  bool time;
  bool time_status;
  bool time_zone;
  bool dst_start;
  bool dst_end;
  bool dst_shift;
  bool standard_time;
  bool local_time;
  bool last_set_time;
  bool valid_until_time;
} uic_mqtt_dotdot_time_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_time_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_time_state_t,
    uic_mqtt_dotdot_time_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_time_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_time_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/time/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_time_write_attributes_callback(
  const uic_mqtt_dotdot_time_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/time/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_time_write_attributes_callback(
  const uic_mqtt_dotdot_time_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/time/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_time_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/time/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_time_force_read_attributes_callback(
  const uic_mqtt_dotdot_time_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/time/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_time_force_read_attributes_callback(
  const uic_mqtt_dotdot_time_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/time/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_time_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Time/Attributes/Time
 *
 * @param base_topic    topic prefix to publish, /time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_time_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/Time
 *
 * @param base_topic    topic prefix to publish, /time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/TimeStatus
 *
 * @param base_topic    topic prefix to publish, /time_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_time_status_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/TimeStatus
 *
 * @param base_topic    topic prefix to publish, /time_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_time_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/TimeZone
 *
 * @param base_topic    topic prefix to publish, /time_zone
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_time_zone_publish(
  const char *base_topic,
  int32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/TimeZone
 *
 * @param base_topic    topic prefix to publish, /time_zone
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_time_zone_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/DstStart
 *
 * @param base_topic    topic prefix to publish, /dst_start
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_dst_start_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/DstStart
 *
 * @param base_topic    topic prefix to publish, /dst_start
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_dst_start_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/DstEnd
 *
 * @param base_topic    topic prefix to publish, /dst_end
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_dst_end_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/DstEnd
 *
 * @param base_topic    topic prefix to publish, /dst_end
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_dst_end_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/DstShift
 *
 * @param base_topic    topic prefix to publish, /dst_shift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_dst_shift_publish(
  const char *base_topic,
  int32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/DstShift
 *
 * @param base_topic    topic prefix to publish, /dst_shift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_dst_shift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/StandardTime
 *
 * @param base_topic    topic prefix to publish, /standard_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_standard_time_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/StandardTime
 *
 * @param base_topic    topic prefix to publish, /standard_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_standard_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/LocalTime
 *
 * @param base_topic    topic prefix to publish, /local_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_local_time_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/LocalTime
 *
 * @param base_topic    topic prefix to publish, /local_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_local_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/LastSetTime
 *
 * @param base_topic    topic prefix to publish, /last_set_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_last_set_time_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/LastSetTime
 *
 * @param base_topic    topic prefix to publish, /last_set_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_last_set_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Time/Attributes/ValidUntilTime
 *
 * @param base_topic    topic prefix to publish, /valid_until_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_valid_until_time_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Time/Attributes/ValidUntilTime
 *
 * @param base_topic    topic prefix to publish, /valid_until_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_time_valid_until_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Time/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Time/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_time_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Time/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Time/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_time_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Time Cluster
 *
 * This function will iterate over all Commands in the Time Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_time_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Time Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_time_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the poll_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_check_in_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_check_in_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    bool start_fast_polling,

    uint16_t fast_poll_timeout

);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint32_t new_long_poll_interval

);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t new_short_poll_interval

);

typedef struct {
  uint32_t check_in_interval;
  uint32_t long_poll_interval;
  uint16_t short_poll_interval;
  uint16_t fast_poll_timeout;
  uint32_t check_in_interval_min;
  uint32_t long_poll_interval_min;
  uint16_t fast_poll_timeout_max;
} uic_mqtt_dotdot_poll_control_state_t;

typedef struct {
  bool check_in_interval;
  bool long_poll_interval;
  bool short_poll_interval;
  bool fast_poll_timeout;
  bool check_in_interval_min;
  bool long_poll_interval_min;
  bool fast_poll_timeout_max;
} uic_mqtt_dotdot_poll_control_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_poll_control_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_poll_control_state_t,
    uic_mqtt_dotdot_poll_control_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_poll_control_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_poll_control_updated_state_t
);


/**
 * @brief Command fields for PollControl/CheckInResponse
 */
typedef struct {
  bool start_fast_polling;

  uint16_t fast_poll_timeout;
} uic_mqtt_dotdot_poll_control_command_check_in_response_fields_t;

/**
 * @brief Command fields for PollControl/SetLongPollInterval
 */
typedef struct {
  uint32_t new_long_poll_interval;
} uic_mqtt_dotdot_poll_control_command_set_long_poll_interval_fields_t;

/**
 * @brief Command fields for PollControl/SetShortPollInterval
 */
typedef struct {
  uint16_t new_short_poll_interval;
} uic_mqtt_dotdot_poll_control_command_set_short_poll_interval_fields_t;


/**
 * @brief Setup callback to be called when a
 * PollControl/Commands/check_in is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_check_in_callback_set(const uic_mqtt_dotdot_poll_control_check_in_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * PollControl/Commands/check_in is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_check_in_callback_unset(const uic_mqtt_dotdot_poll_control_check_in_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * PollControl/Commands/check_in is received.
 */
void uic_mqtt_dotdot_poll_control_check_in_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/PollControl/GeneratedCommands/check_in is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_check_in_callback_set(const uic_mqtt_dotdot_poll_control_check_in_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/PollControl/GeneratedCommands/check_in is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_check_in_callback_unset(const uic_mqtt_dotdot_poll_control_check_in_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/PollControl/GeneratedCommands/check_in is received.
 */
void uic_mqtt_dotdot_poll_control_generated_check_in_callback_clear();
/**
 * @brief Setup callback to be called when a
 * PollControl/Commands/check_in_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_check_in_response_callback_set(const uic_mqtt_dotdot_poll_control_check_in_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * PollControl/Commands/check_in_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_check_in_response_callback_unset(const uic_mqtt_dotdot_poll_control_check_in_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * PollControl/Commands/check_in_response is received.
 */
void uic_mqtt_dotdot_poll_control_check_in_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/PollControl/GeneratedCommands/check_in_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_check_in_response_callback_set(const uic_mqtt_dotdot_poll_control_check_in_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/PollControl/GeneratedCommands/check_in_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_check_in_response_callback_unset(const uic_mqtt_dotdot_poll_control_check_in_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/PollControl/GeneratedCommands/check_in_response is received.
 */
void uic_mqtt_dotdot_poll_control_generated_check_in_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * PollControl/Commands/fast_poll_stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_set(const uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * PollControl/Commands/fast_poll_stop is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_unset(const uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * PollControl/Commands/fast_poll_stop is received.
 */
void uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/PollControl/GeneratedCommands/fast_poll_stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_fast_poll_stop_callback_set(const uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/PollControl/GeneratedCommands/fast_poll_stop is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_fast_poll_stop_callback_unset(const uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/PollControl/GeneratedCommands/fast_poll_stop is received.
 */
void uic_mqtt_dotdot_poll_control_generated_fast_poll_stop_callback_clear();
/**
 * @brief Setup callback to be called when a
 * PollControl/Commands/set_long_poll_interval is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_set(const uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * PollControl/Commands/set_long_poll_interval is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_unset(const uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * PollControl/Commands/set_long_poll_interval is received.
 */
void uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/PollControl/GeneratedCommands/set_long_poll_interval is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_set_long_poll_interval_callback_set(const uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/PollControl/GeneratedCommands/set_long_poll_interval is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_set_long_poll_interval_callback_unset(const uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/PollControl/GeneratedCommands/set_long_poll_interval is received.
 */
void uic_mqtt_dotdot_poll_control_generated_set_long_poll_interval_callback_clear();
/**
 * @brief Setup callback to be called when a
 * PollControl/Commands/set_short_poll_interval is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_set(const uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * PollControl/Commands/set_short_poll_interval is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_unset(const uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * PollControl/Commands/set_short_poll_interval is received.
 */
void uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/PollControl/GeneratedCommands/set_short_poll_interval is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_set_short_poll_interval_callback_set(const uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/PollControl/GeneratedCommands/set_short_poll_interval is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_poll_control_generated_set_short_poll_interval_callback_unset(const uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/PollControl/GeneratedCommands/set_short_poll_interval is received.
 */
void uic_mqtt_dotdot_poll_control_generated_set_short_poll_interval_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/poll_control/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_poll_control_write_attributes_callback(
  const uic_mqtt_dotdot_poll_control_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/poll_control/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_poll_control_write_attributes_callback(
  const uic_mqtt_dotdot_poll_control_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/poll_control/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_poll_control_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/poll_control/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_poll_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_poll_control_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/poll_control/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_poll_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_poll_control_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/poll_control/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_poll_control_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; PollControl/Attributes/CheckInInterval
 *
 * @param base_topic    topic prefix to publish, /check_in_interval
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/CheckInInterval
 *
 * @param base_topic    topic prefix to publish, /check_in_interval
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PollControl/Attributes/LongPollInterval
 *
 * @param base_topic    topic prefix to publish, /long_poll_interval
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/LongPollInterval
 *
 * @param base_topic    topic prefix to publish, /long_poll_interval
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PollControl/Attributes/ShortPollInterval
 *
 * @param base_topic    topic prefix to publish, /short_poll_interval
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_short_poll_interval_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/ShortPollInterval
 *
 * @param base_topic    topic prefix to publish, /short_poll_interval
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_short_poll_interval_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PollControl/Attributes/FastPollTimeout
 *
 * @param base_topic    topic prefix to publish, /fast_poll_timeout
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/FastPollTimeout
 *
 * @param base_topic    topic prefix to publish, /fast_poll_timeout
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PollControl/Attributes/CheckInIntervalMin
 *
 * @param base_topic    topic prefix to publish, /check_in_interval_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_min_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/CheckInIntervalMin
 *
 * @param base_topic    topic prefix to publish, /check_in_interval_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_check_in_interval_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PollControl/Attributes/LongPollIntervalMin
 *
 * @param base_topic    topic prefix to publish, /long_poll_interval_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_min_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/LongPollIntervalMin
 *
 * @param base_topic    topic prefix to publish, /long_poll_interval_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_long_poll_interval_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PollControl/Attributes/FastPollTimeoutMax
 *
 * @param base_topic    topic prefix to publish, /fast_poll_timeout_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PollControl/Attributes/FastPollTimeoutMax
 *
 * @param base_topic    topic prefix to publish, /fast_poll_timeout_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_poll_control_fast_poll_timeout_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the PollControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PollControl/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_poll_control_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to PollControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PollControl/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_poll_control_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the PollControl Cluster
 *
 * This function will iterate over all Commands in the PollControl Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_poll_control_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the PollControl Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_poll_control_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the shade_configuration cluster

typedef struct {
  uint16_t physical_closed_limit;
  uint8_t motor_step_size;
  uint8_t status;
  uint16_t closed_limit;
  uint8_t mode;
} uic_mqtt_dotdot_shade_configuration_state_t;

typedef struct {
  bool physical_closed_limit;
  bool motor_step_size;
  bool status;
  bool closed_limit;
  bool mode;
} uic_mqtt_dotdot_shade_configuration_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_shade_configuration_state_t,
    uic_mqtt_dotdot_shade_configuration_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_shade_configuration_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/shade_configuration/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_shade_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_shade_configuration_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/shade_configuration/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_shade_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_shade_configuration_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/shade_configuration/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_shade_configuration_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/shade_configuration/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_shade_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_shade_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/shade_configuration/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_shade_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_shade_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/shade_configuration/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_shade_configuration_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ShadeConfiguration/Attributes/PhysicalClosedLimit
 *
 * @param base_topic    topic prefix to publish, /physical_closed_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_physical_closed_limit_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ShadeConfiguration/Attributes/PhysicalClosedLimit
 *
 * @param base_topic    topic prefix to publish, /physical_closed_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_physical_closed_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ShadeConfiguration/Attributes/MotorStepSize
 *
 * @param base_topic    topic prefix to publish, /motor_step_size
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_motor_step_size_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ShadeConfiguration/Attributes/MotorStepSize
 *
 * @param base_topic    topic prefix to publish, /motor_step_size
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_motor_step_size_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ShadeConfiguration/Attributes/Status
 *
 * @param base_topic    topic prefix to publish, /status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_status_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ShadeConfiguration/Attributes/Status
 *
 * @param base_topic    topic prefix to publish, /status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ShadeConfiguration/Attributes/ClosedLimit
 *
 * @param base_topic    topic prefix to publish, /closed_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_closed_limit_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ShadeConfiguration/Attributes/ClosedLimit
 *
 * @param base_topic    topic prefix to publish, /closed_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_closed_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ShadeConfiguration/Attributes/Mode
 *
 * @param base_topic    topic prefix to publish, /mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ShadeConfiguration/Attributes/Mode
 *
 * @param base_topic    topic prefix to publish, /mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ShadeConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ShadeConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_shade_configuration_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ShadeConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ShadeConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_shade_configuration_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ShadeConfiguration Cluster
 *
 * This function will iterate over all Commands in the ShadeConfiguration Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_shade_configuration_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ShadeConfiguration Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_shade_configuration_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the door_lock cluster
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_lock_door_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* pin_orrfid_code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_lock_door_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_door_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* pin_orrfid_code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_toggle_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* pin_orrfid_code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_toggle_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t timeout_in_seconds,

    const char* pin_orrfid_code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    zclStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_log_record_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t log_index

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t log_entryid,

    uint32_t timestamp,

    GetLogRecordResponseEventType event_type,

    DrlkOperEventSource source_operation_event,

    uint8_t eventid_or_alarm_code,

    uint16_t userid,

    const char* pin

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_setpin_code_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPINUserID userid,

    DrlkSettableUserStatus user_status,

    DrlkUserType user_type,

    const char* pin

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_setpin_code_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkSetCodeStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_getpin_code_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPINUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_getpin_code_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t userid,

    DrlkUserStatus user_status,

    DrlkUserType user_type,

    const char* code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clearpin_code_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPINUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_status_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkTotalUserID userid,

    DrlkSettableUserStatus user_status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_status_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_status_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkTotalUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t userid,

    DrlkUserStatus user_status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkWeekDayScheduleID scheduleid,

    DrlkTotalUserID userid,

    uint8_t days_mask,

    uint8_t start_hour,

    uint8_t start_minute,

    uint8_t end_hour,

    uint8_t end_minute

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkWeekDayScheduleID scheduleid,

    DrlkTotalUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t scheduleid,

    uint16_t userid,

    zclStatus status,

    uint8_t days_mask,

    uint8_t start_hour,

    uint8_t start_minute,

    uint8_t end_hour,

    uint8_t end_minute

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkWeekDayScheduleID scheduleid,

    DrlkTotalUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkYearDayScheduleID scheduleid,

    DrlkTotalUserID userid,

    uint32_t local_start_time,

    uint32_t local_end_time

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkYearDayScheduleID scheduleid,

    DrlkTotalUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t scheduleid,

    uint16_t userid,

    zclStatus status,

    uint32_t local_start_time,

    uint32_t local_end_time

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkYearDayScheduleID scheduleid,

    DrlkTotalUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkHolidayScheduleID holiday_scheduleid,

    uint32_t local_start_time,

    uint32_t local_end_time,

    DrlkOperMode operating_mode_during_holiday

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkHolidayScheduleID holiday_scheduleid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t holiday_scheduleid,

    zclStatus status,

    uint32_t local_start_time,

    uint32_t local_end_time,

    DrlkOperMode operating_mode_during_holiday

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkHolidayScheduleID holiday_scheduleid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_type_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkTotalUserID userid,

    DrlkUserType user_type

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_set_user_type_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_type_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkTotalUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t userid,

    DrlkUserType user_type

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_setrfid_code_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkRFIDUserID userid,

    DrlkSettableUserStatus user_status,

    DrlkUserType user_type,

    const char* rfid_code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkSetCodeStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_getrfid_code_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkRFIDUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t userid,

    DrlkUserStatus user_status,

    DrlkUserType user_type,

    const char* rfid_code

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clearrfid_code_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkRFIDUserID userid

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkPassFailStatus status

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    DrlkOperEventSource operation_event_source,

    OperatingEventNotificationOperationEventCode operation_event_code,

    uint16_t userid,

    const char* pin,

    uint32_t local_time,

    const char* data

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_programming_event_notification_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    ProgrammingEventNotificationProgramEventSource program_event_source,

    ProgrammingEventNotificationProgramEventCode program_event_code,

    uint16_t userid,

    const char* pin,

    DrlkUserType user_type,

    DrlkUserStatus user_status,

    uint32_t local_time,

    const char* data

);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  uint8_t lock_state;
  uint8_t lock_type;
  bool actuator_enabled;
  uint8_t door_state;
  uint32_t door_open_events;
  uint32_t door_closed_events;
  uint16_t open_period;
  uint16_t number_of_log_records_supported;
  uint16_t number_of_total_users_supported;
  uint16_t number_ofpin_users_supported;
  uint16_t number_ofrfid_users_supported;
  uint8_t number_of_week_day_schedules_supported_per_user;
  uint8_t number_of_year_day_schedules_supported_per_user;
  uint8_t number_of_holiday_schedules_supported;
  uint8_t maxpin_code_length;
  uint8_t minpin_code_length;
  uint8_t maxrfid_code_length;
  uint8_t minrfid_code_length;
  bool enable_logging;
  const char* language;
  uint8_t led_settings;
  uint32_t auto_relock_time;
  uint8_t sound_volume;
  uint8_t operating_mode;
  uint16_t supported_operating_modes;
  uint16_t default_configuration_register;
  bool enable_local_programming;
  bool enable_one_touch_locking;
  bool enable_inside_statusled;
  bool enable_privacy_mode_button;
  uint8_t wrong_code_entry_limit;
  uint8_t user_code_temporary_disable_time;
  bool sendpin_over_the_air;
  bool requirepi_nforrf_operation;
  uint8_t security_level;
  uint16_t alarm_mask;
  uint16_t keypad_operation_event_mask;
  uint16_t rf_operation_event_mask;
  uint16_t manual_operation_event_mask;
  uint16_t rfid_operation_event_mask;
  uint16_t keypad_programming_event_mask;
  uint16_t rf_programming_event_mask;
  uint16_t rfid_programming_event_mask;
} uic_mqtt_dotdot_door_lock_state_t;

typedef struct {
  bool lock_state;
  bool lock_type;
  bool actuator_enabled;
  bool door_state;
  bool door_open_events;
  bool door_closed_events;
  bool open_period;
  bool number_of_log_records_supported;
  bool number_of_total_users_supported;
  bool number_ofpin_users_supported;
  bool number_ofrfid_users_supported;
  bool number_of_week_day_schedules_supported_per_user;
  bool number_of_year_day_schedules_supported_per_user;
  bool number_of_holiday_schedules_supported;
  bool maxpin_code_length;
  bool minpin_code_length;
  bool maxrfid_code_length;
  bool minrfid_code_length;
  bool enable_logging;
  bool language;
  bool led_settings;
  bool auto_relock_time;
  bool sound_volume;
  bool operating_mode;
  bool supported_operating_modes;
  bool default_configuration_register;
  bool enable_local_programming;
  bool enable_one_touch_locking;
  bool enable_inside_statusled;
  bool enable_privacy_mode_button;
  bool wrong_code_entry_limit;
  bool user_code_temporary_disable_time;
  bool sendpin_over_the_air;
  bool requirepi_nforrf_operation;
  bool security_level;
  bool alarm_mask;
  bool keypad_operation_event_mask;
  bool rf_operation_event_mask;
  bool manual_operation_event_mask;
  bool rfid_operation_event_mask;
  bool keypad_programming_event_mask;
  bool rf_programming_event_mask;
  bool rfid_programming_event_mask;
} uic_mqtt_dotdot_door_lock_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_door_lock_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_door_lock_state_t,
    uic_mqtt_dotdot_door_lock_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_door_lock_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_door_lock_updated_state_t
);


/**
 * @brief Command fields for DoorLock/LockDoor
 */
typedef struct {
  const char* pin_orrfid_code;
} uic_mqtt_dotdot_door_lock_command_lock_door_fields_t;

/**
 * @brief Command fields for DoorLock/LockDoorResponse
 */
typedef struct {
  zclStatus status;
} uic_mqtt_dotdot_door_lock_command_lock_door_response_fields_t;

/**
 * @brief Command fields for DoorLock/UnlockDoor
 */
typedef struct {
  const char* pin_orrfid_code;
} uic_mqtt_dotdot_door_lock_command_unlock_door_fields_t;

/**
 * @brief Command fields for DoorLock/UnlockDoorResponse
 */
typedef struct {
  zclStatus status;
} uic_mqtt_dotdot_door_lock_command_unlock_door_response_fields_t;

/**
 * @brief Command fields for DoorLock/Toggle
 */
typedef struct {
  const char* pin_orrfid_code;
} uic_mqtt_dotdot_door_lock_command_toggle_fields_t;

/**
 * @brief Command fields for DoorLock/ToggleResponse
 */
typedef struct {
  zclStatus status;
} uic_mqtt_dotdot_door_lock_command_toggle_response_fields_t;

/**
 * @brief Command fields for DoorLock/UnlockWithTimeout
 */
typedef struct {
  uint16_t timeout_in_seconds;

  const char* pin_orrfid_code;
} uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_fields_t;

/**
 * @brief Command fields for DoorLock/UnlockWithTimeoutResponse
 */
typedef struct {
  zclStatus status;
} uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetLogRecord
 */
typedef struct {
  uint16_t log_index;
} uic_mqtt_dotdot_door_lock_command_get_log_record_fields_t;

/**
 * @brief Command fields for DoorLock/GetLogRecordResponse
 */
typedef struct {
  uint16_t log_entryid;

  uint32_t timestamp;

  GetLogRecordResponseEventType event_type;

  DrlkOperEventSource source_operation_event;

  uint8_t eventid_or_alarm_code;

  uint16_t userid;

  const char* pin;
} uic_mqtt_dotdot_door_lock_command_get_log_record_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetPINCode
 */
typedef struct {
  DrlkPINUserID userid;

  DrlkSettableUserStatus user_status;

  DrlkUserType user_type;

  const char* pin;
} uic_mqtt_dotdot_door_lock_command_setpin_code_fields_t;

/**
 * @brief Command fields for DoorLock/SetPINCodeResponse
 */
typedef struct {
  DrlkSetCodeStatus status;
} uic_mqtt_dotdot_door_lock_command_setpin_code_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetPINCode
 */
typedef struct {
  DrlkPINUserID userid;
} uic_mqtt_dotdot_door_lock_command_getpin_code_fields_t;

/**
 * @brief Command fields for DoorLock/GetPINCodeResponse
 */
typedef struct {
  uint16_t userid;

  DrlkUserStatus user_status;

  DrlkUserType user_type;

  const char* code;
} uic_mqtt_dotdot_door_lock_command_getpin_code_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearPINCode
 */
typedef struct {
  DrlkPINUserID userid;
} uic_mqtt_dotdot_door_lock_command_clearpin_code_fields_t;

/**
 * @brief Command fields for DoorLock/ClearPINCodeResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clearpin_code_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearAllPINCodesResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clear_allpin_codes_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetUserStatus
 */
typedef struct {
  DrlkTotalUserID userid;

  DrlkSettableUserStatus user_status;
} uic_mqtt_dotdot_door_lock_command_set_user_status_fields_t;

/**
 * @brief Command fields for DoorLock/SetUserStatusResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_set_user_status_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetUserStatus
 */
typedef struct {
  DrlkTotalUserID userid;
} uic_mqtt_dotdot_door_lock_command_get_user_status_fields_t;

/**
 * @brief Command fields for DoorLock/GetUserStatusResponse
 */
typedef struct {
  uint16_t userid;

  DrlkUserStatus user_status;
} uic_mqtt_dotdot_door_lock_command_get_user_status_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetWeekdaySchedule
 */
typedef struct {
  DrlkWeekDayScheduleID scheduleid;

  DrlkTotalUserID userid;

  uint8_t days_mask;

  uint8_t start_hour;

  uint8_t start_minute;

  uint8_t end_hour;

  uint8_t end_minute;
} uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/SetWeekdayScheduleResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetWeekdaySchedule
 */
typedef struct {
  DrlkWeekDayScheduleID scheduleid;

  DrlkTotalUserID userid;
} uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/GetWeekdayScheduleResponse
 */
typedef struct {
  uint8_t scheduleid;

  uint16_t userid;

  zclStatus status;

  uint8_t days_mask;

  uint8_t start_hour;

  uint8_t start_minute;

  uint8_t end_hour;

  uint8_t end_minute;
} uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearWeekdaySchedule
 */
typedef struct {
  DrlkWeekDayScheduleID scheduleid;

  DrlkTotalUserID userid;
} uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/ClearWeekdayScheduleResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetYearDaySchedule
 */
typedef struct {
  DrlkYearDayScheduleID scheduleid;

  DrlkTotalUserID userid;

  uint32_t local_start_time;

  uint32_t local_end_time;
} uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/SetYearDayScheduleResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetYearDaySchedule
 */
typedef struct {
  DrlkYearDayScheduleID scheduleid;

  DrlkTotalUserID userid;
} uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/GetYearDayScheduleResponse
 */
typedef struct {
  uint8_t scheduleid;

  uint16_t userid;

  zclStatus status;

  uint32_t local_start_time;

  uint32_t local_end_time;
} uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearYearDaySchedule
 */
typedef struct {
  DrlkYearDayScheduleID scheduleid;

  DrlkTotalUserID userid;
} uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/ClearYearDayScheduleResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetHolidaySchedule
 */
typedef struct {
  DrlkHolidayScheduleID holiday_scheduleid;

  uint32_t local_start_time;

  uint32_t local_end_time;

  DrlkOperMode operating_mode_during_holiday;
} uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/SetHolidayScheduleResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetHolidaySchedule
 */
typedef struct {
  DrlkHolidayScheduleID holiday_scheduleid;
} uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/GetHolidayScheduleResponse
 */
typedef struct {
  uint8_t holiday_scheduleid;

  zclStatus status;

  uint32_t local_start_time;

  uint32_t local_end_time;

  DrlkOperMode operating_mode_during_holiday;
} uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearHolidaySchedule
 */
typedef struct {
  DrlkHolidayScheduleID holiday_scheduleid;
} uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_fields_t;

/**
 * @brief Command fields for DoorLock/ClearHolidayScheduleResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetUserType
 */
typedef struct {
  DrlkTotalUserID userid;

  DrlkUserType user_type;
} uic_mqtt_dotdot_door_lock_command_set_user_type_fields_t;

/**
 * @brief Command fields for DoorLock/SetUserTypeResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_set_user_type_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetUserType
 */
typedef struct {
  DrlkTotalUserID userid;
} uic_mqtt_dotdot_door_lock_command_get_user_type_fields_t;

/**
 * @brief Command fields for DoorLock/GetUserTypeResponse
 */
typedef struct {
  uint16_t userid;

  DrlkUserType user_type;
} uic_mqtt_dotdot_door_lock_command_get_user_type_response_fields_t;

/**
 * @brief Command fields for DoorLock/SetRFIDCode
 */
typedef struct {
  DrlkRFIDUserID userid;

  DrlkSettableUserStatus user_status;

  DrlkUserType user_type;

  const char* rfid_code;
} uic_mqtt_dotdot_door_lock_command_setrfid_code_fields_t;

/**
 * @brief Command fields for DoorLock/SetRFIDCodeResponse
 */
typedef struct {
  DrlkSetCodeStatus status;
} uic_mqtt_dotdot_door_lock_command_setrfid_code_response_fields_t;

/**
 * @brief Command fields for DoorLock/GetRFIDCode
 */
typedef struct {
  DrlkRFIDUserID userid;
} uic_mqtt_dotdot_door_lock_command_getrfid_code_fields_t;

/**
 * @brief Command fields for DoorLock/GetRFIDCodeResponse
 */
typedef struct {
  uint16_t userid;

  DrlkUserStatus user_status;

  DrlkUserType user_type;

  const char* rfid_code;
} uic_mqtt_dotdot_door_lock_command_getrfid_code_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearRFIDCode
 */
typedef struct {
  DrlkRFIDUserID userid;
} uic_mqtt_dotdot_door_lock_command_clearrfid_code_fields_t;

/**
 * @brief Command fields for DoorLock/ClearRFIDCodeResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clearrfid_code_response_fields_t;

/**
 * @brief Command fields for DoorLock/ClearAllRFIDCodesResponse
 */
typedef struct {
  DrlkPassFailStatus status;
} uic_mqtt_dotdot_door_lock_command_clear_allrfid_codes_response_fields_t;

/**
 * @brief Command fields for DoorLock/OperatingEventNotification
 */
typedef struct {
  DrlkOperEventSource operation_event_source;

  OperatingEventNotificationOperationEventCode operation_event_code;

  uint16_t userid;

  const char* pin;

  uint32_t local_time;

  const char* data;
} uic_mqtt_dotdot_door_lock_command_operating_event_notification_fields_t;

/**
 * @brief Command fields for DoorLock/ProgrammingEventNotification
 */
typedef struct {
  ProgrammingEventNotificationProgramEventSource program_event_source;

  ProgrammingEventNotificationProgramEventCode program_event_code;

  uint16_t userid;

  const char* pin;

  DrlkUserType user_type;

  DrlkUserStatus user_status;

  uint32_t local_time;

  const char* data;
} uic_mqtt_dotdot_door_lock_command_programming_event_notification_fields_t;


/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/lock_door is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_lock_door_callback_set(const uic_mqtt_dotdot_door_lock_lock_door_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/lock_door is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_lock_door_callback_unset(const uic_mqtt_dotdot_door_lock_lock_door_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/lock_door is received.
 */
void uic_mqtt_dotdot_door_lock_lock_door_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/lock_door is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_lock_door_callback_set(const uic_mqtt_dotdot_door_lock_lock_door_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/lock_door is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_lock_door_callback_unset(const uic_mqtt_dotdot_door_lock_lock_door_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/lock_door is received.
 */
void uic_mqtt_dotdot_door_lock_generated_lock_door_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/lock_door_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_lock_door_response_callback_set(const uic_mqtt_dotdot_door_lock_lock_door_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/lock_door_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_lock_door_response_callback_unset(const uic_mqtt_dotdot_door_lock_lock_door_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/lock_door_response is received.
 */
void uic_mqtt_dotdot_door_lock_lock_door_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/lock_door_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_lock_door_response_callback_set(const uic_mqtt_dotdot_door_lock_lock_door_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/lock_door_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_lock_door_response_callback_unset(const uic_mqtt_dotdot_door_lock_lock_door_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/lock_door_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_lock_door_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/unlock_door is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_door_callback_set(const uic_mqtt_dotdot_door_lock_unlock_door_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/unlock_door is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_door_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_door_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/unlock_door is received.
 */
void uic_mqtt_dotdot_door_lock_unlock_door_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_door is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_door_callback_set(const uic_mqtt_dotdot_door_lock_unlock_door_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_door is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_door_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_door_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/unlock_door is received.
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_door_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/unlock_door_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_door_response_callback_set(const uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/unlock_door_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_door_response_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/unlock_door_response is received.
 */
void uic_mqtt_dotdot_door_lock_unlock_door_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_door_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_door_response_callback_set(const uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_door_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_door_response_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/unlock_door_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_door_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/toggle is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_toggle_callback_set(const uic_mqtt_dotdot_door_lock_toggle_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/toggle is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_toggle_callback_unset(const uic_mqtt_dotdot_door_lock_toggle_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/toggle is received.
 */
void uic_mqtt_dotdot_door_lock_toggle_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/toggle is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_toggle_callback_set(const uic_mqtt_dotdot_door_lock_toggle_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/toggle is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_toggle_callback_unset(const uic_mqtt_dotdot_door_lock_toggle_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/toggle is received.
 */
void uic_mqtt_dotdot_door_lock_generated_toggle_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/toggle_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_toggle_response_callback_set(const uic_mqtt_dotdot_door_lock_toggle_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/toggle_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_toggle_response_callback_unset(const uic_mqtt_dotdot_door_lock_toggle_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/toggle_response is received.
 */
void uic_mqtt_dotdot_door_lock_toggle_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/toggle_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_toggle_response_callback_set(const uic_mqtt_dotdot_door_lock_toggle_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/toggle_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_toggle_response_callback_unset(const uic_mqtt_dotdot_door_lock_toggle_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/toggle_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_toggle_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/unlock_with_timeout is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_set(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/unlock_with_timeout is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/unlock_with_timeout is received.
 */
void uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_with_timeout is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_with_timeout_callback_set(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_with_timeout is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_with_timeout_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/unlock_with_timeout is received.
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_with_timeout_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/unlock_with_timeout_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_set(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/unlock_with_timeout_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/unlock_with_timeout_response is received.
 */
void uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_with_timeout_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_with_timeout_response_callback_set(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/unlock_with_timeout_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_with_timeout_response_callback_unset(const uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/unlock_with_timeout_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_unlock_with_timeout_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_log_record is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_log_record_callback_set(const uic_mqtt_dotdot_door_lock_get_log_record_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_log_record is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_log_record_callback_unset(const uic_mqtt_dotdot_door_lock_get_log_record_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_log_record is received.
 */
void uic_mqtt_dotdot_door_lock_get_log_record_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_log_record is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_log_record_callback_set(const uic_mqtt_dotdot_door_lock_get_log_record_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_log_record is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_log_record_callback_unset(const uic_mqtt_dotdot_door_lock_get_log_record_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_log_record is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_log_record_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_log_record_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_log_record_response_callback_set(const uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_log_record_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_log_record_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_log_record_response is received.
 */
void uic_mqtt_dotdot_door_lock_get_log_record_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_log_record_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_log_record_response_callback_set(const uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_log_record_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_log_record_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_log_record_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_log_record_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/setpin_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_setpin_code_callback_set(const uic_mqtt_dotdot_door_lock_setpin_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/setpin_code is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_setpin_code_callback_unset(const uic_mqtt_dotdot_door_lock_setpin_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/setpin_code is received.
 */
void uic_mqtt_dotdot_door_lock_setpin_code_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/setpin_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setpin_code_callback_set(const uic_mqtt_dotdot_door_lock_setpin_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/setpin_code is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setpin_code_callback_unset(const uic_mqtt_dotdot_door_lock_setpin_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/setpin_code is received.
 */
void uic_mqtt_dotdot_door_lock_generated_setpin_code_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/setpin_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_setpin_code_response_callback_set(const uic_mqtt_dotdot_door_lock_setpin_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/setpin_code_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_setpin_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_setpin_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/setpin_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_setpin_code_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/setpin_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setpin_code_response_callback_set(const uic_mqtt_dotdot_door_lock_setpin_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/setpin_code_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setpin_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_setpin_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/setpin_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_setpin_code_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/getpin_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_getpin_code_callback_set(const uic_mqtt_dotdot_door_lock_getpin_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/getpin_code is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_getpin_code_callback_unset(const uic_mqtt_dotdot_door_lock_getpin_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/getpin_code is received.
 */
void uic_mqtt_dotdot_door_lock_getpin_code_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/getpin_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getpin_code_callback_set(const uic_mqtt_dotdot_door_lock_getpin_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/getpin_code is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getpin_code_callback_unset(const uic_mqtt_dotdot_door_lock_getpin_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/getpin_code is received.
 */
void uic_mqtt_dotdot_door_lock_generated_getpin_code_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/getpin_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_getpin_code_response_callback_set(const uic_mqtt_dotdot_door_lock_getpin_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/getpin_code_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_getpin_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_getpin_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/getpin_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_getpin_code_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/getpin_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getpin_code_response_callback_set(const uic_mqtt_dotdot_door_lock_getpin_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/getpin_code_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getpin_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_getpin_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/getpin_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_getpin_code_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clearpin_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearpin_code_callback_set(const uic_mqtt_dotdot_door_lock_clearpin_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clearpin_code is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearpin_code_callback_unset(const uic_mqtt_dotdot_door_lock_clearpin_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clearpin_code is received.
 */
void uic_mqtt_dotdot_door_lock_clearpin_code_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clearpin_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearpin_code_callback_set(const uic_mqtt_dotdot_door_lock_clearpin_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clearpin_code is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearpin_code_callback_unset(const uic_mqtt_dotdot_door_lock_clearpin_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clearpin_code is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clearpin_code_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clearpin_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_set(const uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clearpin_code_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clearpin_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clearpin_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearpin_code_response_callback_set(const uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clearpin_code_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearpin_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clearpin_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clearpin_code_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_allpin_codes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_set(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_allpin_codes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_allpin_codes is received.
 */
void uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allpin_codes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allpin_codes_callback_set(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allpin_codes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allpin_codes_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_allpin_codes is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allpin_codes_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_allpin_codes_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_allpin_codes_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_allpin_codes_response is received.
 */
void uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allpin_codes_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allpin_codes_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allpin_codes_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allpin_codes_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_allpin_codes_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allpin_codes_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_user_status is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_status_callback_set(const uic_mqtt_dotdot_door_lock_set_user_status_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_user_status is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_status_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_status_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_user_status is received.
 */
void uic_mqtt_dotdot_door_lock_set_user_status_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_status is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_status_callback_set(const uic_mqtt_dotdot_door_lock_set_user_status_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_status is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_status_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_status_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_user_status is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_status_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_user_status_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_status_response_callback_set(const uic_mqtt_dotdot_door_lock_set_user_status_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_user_status_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_status_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_status_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_user_status_response is received.
 */
void uic_mqtt_dotdot_door_lock_set_user_status_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_status_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_status_response_callback_set(const uic_mqtt_dotdot_door_lock_set_user_status_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_status_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_status_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_status_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_user_status_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_status_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_user_status is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_status_callback_set(const uic_mqtt_dotdot_door_lock_get_user_status_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_user_status is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_status_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_status_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_user_status is received.
 */
void uic_mqtt_dotdot_door_lock_get_user_status_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_status is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_status_callback_set(const uic_mqtt_dotdot_door_lock_get_user_status_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_status is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_status_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_status_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_user_status is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_status_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_user_status_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_status_response_callback_set(const uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_user_status_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_status_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_user_status_response is received.
 */
void uic_mqtt_dotdot_door_lock_get_user_status_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_status_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_status_response_callback_set(const uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_status_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_status_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_user_status_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_status_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_weekday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_weekday_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_weekday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_weekday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_weekday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_weekday_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_weekday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_weekday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_weekday_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_weekday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_weekday_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_weekday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_weekday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_weekday_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_weekday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_weekday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_weekday_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_weekday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_weekday_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_weekday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_weekday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_weekday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_weekday_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_weekday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_weekday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_weekday_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_weekday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_weekday_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_weekday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_weekday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_weekday_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_weekday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_weekday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_weekday_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_weekday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_weekday_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_weekday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_weekday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_weekday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_weekday_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_weekday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_weekday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_weekday_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_weekday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_weekday_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_weekday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_weekday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_weekday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_weekday_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_weekday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_weekday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_weekday_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_year_day_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_set(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_year_day_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_year_day_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_year_day_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_year_day_schedule_callback_set(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_year_day_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_year_day_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_year_day_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_year_day_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_year_day_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_year_day_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_year_day_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_year_day_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_year_day_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_year_day_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_year_day_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_year_day_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_year_day_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_set(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_year_day_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_year_day_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_year_day_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_year_day_schedule_callback_set(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_year_day_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_year_day_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_year_day_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_year_day_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_year_day_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_year_day_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_year_day_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_year_day_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_year_day_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_year_day_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_year_day_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_year_day_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_year_day_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_set(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_year_day_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_year_day_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_year_day_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_year_day_schedule_callback_set(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_year_day_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_year_day_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_year_day_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_year_day_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_year_day_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_year_day_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_year_day_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_year_day_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_year_day_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_year_day_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_year_day_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_year_day_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_year_day_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_holiday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_holiday_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_holiday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_holiday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_holiday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_holiday_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_holiday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_holiday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_holiday_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_holiday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_holiday_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_holiday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_holiday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_holiday_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_holiday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_holiday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_holiday_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_holiday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_holiday_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_holiday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_holiday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_holiday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_holiday_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_holiday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_holiday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_holiday_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_holiday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_holiday_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_holiday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_holiday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_holiday_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_holiday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_holiday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_holiday_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_holiday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_holiday_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_holiday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_holiday_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_holiday_schedule_callback_set(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_holiday_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_holiday_schedule_callback_unset(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_holiday_schedule is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_holiday_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_holiday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_holiday_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_holiday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_holiday_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_holiday_schedule_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_holiday_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_holiday_schedule_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_holiday_schedule_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_holiday_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_user_type is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_type_callback_set(const uic_mqtt_dotdot_door_lock_set_user_type_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_user_type is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_type_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_type_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_user_type is received.
 */
void uic_mqtt_dotdot_door_lock_set_user_type_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_type is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_type_callback_set(const uic_mqtt_dotdot_door_lock_set_user_type_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_type is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_type_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_type_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_user_type is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_type_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/set_user_type_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_type_response_callback_set(const uic_mqtt_dotdot_door_lock_set_user_type_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/set_user_type_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_set_user_type_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_type_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/set_user_type_response is received.
 */
void uic_mqtt_dotdot_door_lock_set_user_type_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_type_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_type_response_callback_set(const uic_mqtt_dotdot_door_lock_set_user_type_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/set_user_type_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_type_response_callback_unset(const uic_mqtt_dotdot_door_lock_set_user_type_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/set_user_type_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_set_user_type_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_user_type is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_type_callback_set(const uic_mqtt_dotdot_door_lock_get_user_type_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_user_type is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_type_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_type_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_user_type is received.
 */
void uic_mqtt_dotdot_door_lock_get_user_type_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_type is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_type_callback_set(const uic_mqtt_dotdot_door_lock_get_user_type_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_type is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_type_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_type_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_user_type is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_type_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_user_type_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_type_response_callback_set(const uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_user_type_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_user_type_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_user_type_response is received.
 */
void uic_mqtt_dotdot_door_lock_get_user_type_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_type_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_type_response_callback_set(const uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_user_type_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_type_response_callback_unset(const uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_user_type_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_user_type_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/setrfid_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_setrfid_code_callback_set(const uic_mqtt_dotdot_door_lock_setrfid_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/setrfid_code is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_setrfid_code_callback_unset(const uic_mqtt_dotdot_door_lock_setrfid_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/setrfid_code is received.
 */
void uic_mqtt_dotdot_door_lock_setrfid_code_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/setrfid_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setrfid_code_callback_set(const uic_mqtt_dotdot_door_lock_setrfid_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/setrfid_code is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setrfid_code_callback_unset(const uic_mqtt_dotdot_door_lock_setrfid_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/setrfid_code is received.
 */
void uic_mqtt_dotdot_door_lock_generated_setrfid_code_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/setrfid_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_set(const uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/setrfid_code_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/setrfid_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/setrfid_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setrfid_code_response_callback_set(const uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/setrfid_code_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_setrfid_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/setrfid_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_setrfid_code_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/getrfid_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_getrfid_code_callback_set(const uic_mqtt_dotdot_door_lock_getrfid_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/getrfid_code is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_getrfid_code_callback_unset(const uic_mqtt_dotdot_door_lock_getrfid_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/getrfid_code is received.
 */
void uic_mqtt_dotdot_door_lock_getrfid_code_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/getrfid_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getrfid_code_callback_set(const uic_mqtt_dotdot_door_lock_getrfid_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/getrfid_code is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getrfid_code_callback_unset(const uic_mqtt_dotdot_door_lock_getrfid_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/getrfid_code is received.
 */
void uic_mqtt_dotdot_door_lock_generated_getrfid_code_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/getrfid_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_set(const uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/getrfid_code_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/getrfid_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/getrfid_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getrfid_code_response_callback_set(const uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/getrfid_code_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_getrfid_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/getrfid_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_getrfid_code_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clearrfid_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearrfid_code_callback_set(const uic_mqtt_dotdot_door_lock_clearrfid_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clearrfid_code is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearrfid_code_callback_unset(const uic_mqtt_dotdot_door_lock_clearrfid_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clearrfid_code is received.
 */
void uic_mqtt_dotdot_door_lock_clearrfid_code_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clearrfid_code is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearrfid_code_callback_set(const uic_mqtt_dotdot_door_lock_clearrfid_code_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clearrfid_code is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearrfid_code_callback_unset(const uic_mqtt_dotdot_door_lock_clearrfid_code_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clearrfid_code is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clearrfid_code_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clearrfid_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_set(const uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clearrfid_code_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clearrfid_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clearrfid_code_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearrfid_code_response_callback_set(const uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clearrfid_code_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clearrfid_code_response_callback_unset(const uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clearrfid_code_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clearrfid_code_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_allrfid_codes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_set(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_allrfid_codes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_allrfid_codes is received.
 */
void uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allrfid_codes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allrfid_codes_callback_set(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allrfid_codes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allrfid_codes_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_allrfid_codes is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allrfid_codes_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/clear_allrfid_codes_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/clear_allrfid_codes_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/clear_allrfid_codes_response is received.
 */
void uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allrfid_codes_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allrfid_codes_response_callback_set(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/clear_allrfid_codes_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allrfid_codes_response_callback_unset(const uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/clear_allrfid_codes_response is received.
 */
void uic_mqtt_dotdot_door_lock_generated_clear_allrfid_codes_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/operating_event_notification is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_operating_event_notification_callback_set(const uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/operating_event_notification is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_operating_event_notification_callback_unset(const uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/operating_event_notification is received.
 */
void uic_mqtt_dotdot_door_lock_operating_event_notification_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/operating_event_notification is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_operating_event_notification_callback_set(const uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/operating_event_notification is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_operating_event_notification_callback_unset(const uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/operating_event_notification is received.
 */
void uic_mqtt_dotdot_door_lock_generated_operating_event_notification_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/programming_event_notification is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_programming_event_notification_callback_set(const uic_mqtt_dotdot_door_lock_programming_event_notification_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/programming_event_notification is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_programming_event_notification_callback_unset(const uic_mqtt_dotdot_door_lock_programming_event_notification_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/programming_event_notification is received.
 */
void uic_mqtt_dotdot_door_lock_programming_event_notification_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/programming_event_notification is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_programming_event_notification_callback_set(const uic_mqtt_dotdot_door_lock_programming_event_notification_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/programming_event_notification is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_programming_event_notification_callback_unset(const uic_mqtt_dotdot_door_lock_programming_event_notification_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/programming_event_notification is received.
 */
void uic_mqtt_dotdot_door_lock_generated_programming_event_notification_callback_clear();
/**
 * @brief Setup callback to be called when a
 * DoorLock/Commands/get_allpin_codes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_set(const uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * DoorLock/Commands/get_allpin_codes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_unset(const uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * DoorLock/Commands/get_allpin_codes is received.
 */
void uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/DoorLock/GeneratedCommands/get_allpin_codes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_allpin_codes_callback_set(const uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/DoorLock/GeneratedCommands/get_allpin_codes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_door_lock_generated_get_allpin_codes_callback_unset(const uic_mqtt_dotdot_door_lock_get_allpin_codes_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/DoorLock/GeneratedCommands/get_allpin_codes is received.
 */
void uic_mqtt_dotdot_door_lock_generated_get_allpin_codes_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/door_lock/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_door_lock_write_attributes_callback(
  const uic_mqtt_dotdot_door_lock_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/door_lock/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_door_lock_write_attributes_callback(
  const uic_mqtt_dotdot_door_lock_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/door_lock/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_door_lock_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/door_lock/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_door_lock_force_read_attributes_callback(
  const uic_mqtt_dotdot_door_lock_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/door_lock/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_door_lock_force_read_attributes_callback(
  const uic_mqtt_dotdot_door_lock_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/door_lock/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_door_lock_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; DoorLock/Attributes/LockState
 *
 * @param base_topic    topic prefix to publish, /lock_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_lock_state_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/LockState
 *
 * @param base_topic    topic prefix to publish, /lock_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_lock_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/LockType
 *
 * @param base_topic    topic prefix to publish, /lock_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_lock_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/LockType
 *
 * @param base_topic    topic prefix to publish, /lock_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_lock_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/ActuatorEnabled
 *
 * @param base_topic    topic prefix to publish, /actuator_enabled
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_actuator_enabled_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/ActuatorEnabled
 *
 * @param base_topic    topic prefix to publish, /actuator_enabled
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_actuator_enabled_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/DoorState
 *
 * @param base_topic    topic prefix to publish, /door_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_door_state_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/DoorState
 *
 * @param base_topic    topic prefix to publish, /door_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_door_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/DoorOpenEvents
 *
 * @param base_topic    topic prefix to publish, /door_open_events
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_door_open_events_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/DoorOpenEvents
 *
 * @param base_topic    topic prefix to publish, /door_open_events
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_door_open_events_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/DoorClosedEvents
 *
 * @param base_topic    topic prefix to publish, /door_closed_events
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_door_closed_events_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/DoorClosedEvents
 *
 * @param base_topic    topic prefix to publish, /door_closed_events
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_door_closed_events_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/OpenPeriod
 *
 * @param base_topic    topic prefix to publish, /open_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_open_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/OpenPeriod
 *
 * @param base_topic    topic prefix to publish, /open_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_open_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfLogRecordsSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_log_records_supported
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_log_records_supported_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfLogRecordsSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_log_records_supported
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_log_records_supported_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfTotalUsersSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_total_users_supported
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_total_users_supported_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfTotalUsersSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_total_users_supported
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_total_users_supported_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfPINUsersSupported
 *
 * @param base_topic    topic prefix to publish, /number_ofpin_users_supported
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_ofpin_users_supported_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfPINUsersSupported
 *
 * @param base_topic    topic prefix to publish, /number_ofpin_users_supported
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_ofpin_users_supported_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfRFIDUsersSupported
 *
 * @param base_topic    topic prefix to publish, /number_ofrfid_users_supported
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_ofrfid_users_supported_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfRFIDUsersSupported
 *
 * @param base_topic    topic prefix to publish, /number_ofrfid_users_supported
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_ofrfid_users_supported_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfWeekDaySchedulesSupportedPerUser
 *
 * @param base_topic    topic prefix to publish, /number_of_week_day_schedules_supported_per_user
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfWeekDaySchedulesSupportedPerUser
 *
 * @param base_topic    topic prefix to publish, /number_of_week_day_schedules_supported_per_user
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_week_day_schedules_supported_per_user_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfYearDaySchedulesSupportedPerUser
 *
 * @param base_topic    topic prefix to publish, /number_of_year_day_schedules_supported_per_user
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfYearDaySchedulesSupportedPerUser
 *
 * @param base_topic    topic prefix to publish, /number_of_year_day_schedules_supported_per_user
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_year_day_schedules_supported_per_user_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/NumberOfHolidaySchedulesSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_holiday_schedules_supported
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/NumberOfHolidaySchedulesSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_holiday_schedules_supported
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_number_of_holiday_schedules_supported_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/MaxPINCodeLength
 *
 * @param base_topic    topic prefix to publish, /maxpin_code_length
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_maxpin_code_length_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/MaxPINCodeLength
 *
 * @param base_topic    topic prefix to publish, /maxpin_code_length
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_maxpin_code_length_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/MinPINCodeLength
 *
 * @param base_topic    topic prefix to publish, /minpin_code_length
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_minpin_code_length_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/MinPINCodeLength
 *
 * @param base_topic    topic prefix to publish, /minpin_code_length
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_minpin_code_length_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/MaxRFIDCodeLength
 *
 * @param base_topic    topic prefix to publish, /maxrfid_code_length
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_maxrfid_code_length_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/MaxRFIDCodeLength
 *
 * @param base_topic    topic prefix to publish, /maxrfid_code_length
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_maxrfid_code_length_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/MinRFIDCodeLength
 *
 * @param base_topic    topic prefix to publish, /minrfid_code_length
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_minrfid_code_length_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/MinRFIDCodeLength
 *
 * @param base_topic    topic prefix to publish, /minrfid_code_length
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_minrfid_code_length_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/EnableLogging
 *
 * @param base_topic    topic prefix to publish, /enable_logging
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_logging_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/EnableLogging
 *
 * @param base_topic    topic prefix to publish, /enable_logging
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_logging_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/Language
 *
 * @param base_topic    topic prefix to publish, /language
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_language_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/Language
 *
 * @param base_topic    topic prefix to publish, /language
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_language_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/LEDSettings
 *
 * @param base_topic    topic prefix to publish, /led_settings
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_led_settings_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/LEDSettings
 *
 * @param base_topic    topic prefix to publish, /led_settings
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_led_settings_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/AutoRelockTime
 *
 * @param base_topic    topic prefix to publish, /auto_relock_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_auto_relock_time_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/AutoRelockTime
 *
 * @param base_topic    topic prefix to publish, /auto_relock_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_auto_relock_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/SoundVolume
 *
 * @param base_topic    topic prefix to publish, /sound_volume
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_sound_volume_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/SoundVolume
 *
 * @param base_topic    topic prefix to publish, /sound_volume
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_sound_volume_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/OperatingMode
 *
 * @param base_topic    topic prefix to publish, /operating_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_operating_mode_publish(
  const char *base_topic,
  DrlkOperMode value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/OperatingMode
 *
 * @param base_topic    topic prefix to publish, /operating_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_operating_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/SupportedOperatingModes
 *
 * @param base_topic    topic prefix to publish, /supported_operating_modes
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_supported_operating_modes_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/SupportedOperatingModes
 *
 * @param base_topic    topic prefix to publish, /supported_operating_modes
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_supported_operating_modes_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/DefaultConfigurationRegister
 *
 * @param base_topic    topic prefix to publish, /default_configuration_register
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_default_configuration_register_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/DefaultConfigurationRegister
 *
 * @param base_topic    topic prefix to publish, /default_configuration_register
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_default_configuration_register_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/EnableLocalProgramming
 *
 * @param base_topic    topic prefix to publish, /enable_local_programming
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_local_programming_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/EnableLocalProgramming
 *
 * @param base_topic    topic prefix to publish, /enable_local_programming
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_local_programming_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/EnableOneTouchLocking
 *
 * @param base_topic    topic prefix to publish, /enable_one_touch_locking
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_one_touch_locking_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/EnableOneTouchLocking
 *
 * @param base_topic    topic prefix to publish, /enable_one_touch_locking
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_one_touch_locking_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/EnableInsideStatusLED
 *
 * @param base_topic    topic prefix to publish, /enable_inside_statusled
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_inside_statusled_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/EnableInsideStatusLED
 *
 * @param base_topic    topic prefix to publish, /enable_inside_statusled
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_inside_statusled_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/EnablePrivacyModeButton
 *
 * @param base_topic    topic prefix to publish, /enable_privacy_mode_button
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_privacy_mode_button_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/EnablePrivacyModeButton
 *
 * @param base_topic    topic prefix to publish, /enable_privacy_mode_button
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_enable_privacy_mode_button_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/WrongCodeEntryLimit
 *
 * @param base_topic    topic prefix to publish, /wrong_code_entry_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/WrongCodeEntryLimit
 *
 * @param base_topic    topic prefix to publish, /wrong_code_entry_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_wrong_code_entry_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/UserCodeTemporaryDisableTime
 *
 * @param base_topic    topic prefix to publish, /user_code_temporary_disable_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/UserCodeTemporaryDisableTime
 *
 * @param base_topic    topic prefix to publish, /user_code_temporary_disable_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_user_code_temporary_disable_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/SendPINOverTheAir
 *
 * @param base_topic    topic prefix to publish, /sendpin_over_the_air
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_sendpin_over_the_air_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/SendPINOverTheAir
 *
 * @param base_topic    topic prefix to publish, /sendpin_over_the_air
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_sendpin_over_the_air_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/RequirePINforRFOperation
 *
 * @param base_topic    topic prefix to publish, /requirepi_nforrf_operation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_requirepi_nforrf_operation_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/RequirePINforRFOperation
 *
 * @param base_topic    topic prefix to publish, /requirepi_nforrf_operation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_requirepi_nforrf_operation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/SecurityLevel
 *
 * @param base_topic    topic prefix to publish, /security_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_security_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/SecurityLevel
 *
 * @param base_topic    topic prefix to publish, /security_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_security_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_alarm_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/KeypadOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /keypad_operation_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_keypad_operation_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/KeypadOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /keypad_operation_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_keypad_operation_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/RFOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /rf_operation_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rf_operation_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/RFOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /rf_operation_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rf_operation_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/ManualOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /manual_operation_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_manual_operation_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/ManualOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /manual_operation_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_manual_operation_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/RFIDOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /rfid_operation_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rfid_operation_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/RFIDOperationEventMask
 *
 * @param base_topic    topic prefix to publish, /rfid_operation_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rfid_operation_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/KeypadProgrammingEventMask
 *
 * @param base_topic    topic prefix to publish, /keypad_programming_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_keypad_programming_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/KeypadProgrammingEventMask
 *
 * @param base_topic    topic prefix to publish, /keypad_programming_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_keypad_programming_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/RFProgrammingEventMask
 *
 * @param base_topic    topic prefix to publish, /rf_programming_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rf_programming_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/RFProgrammingEventMask
 *
 * @param base_topic    topic prefix to publish, /rf_programming_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rf_programming_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DoorLock/Attributes/RFIDProgrammingEventMask
 *
 * @param base_topic    topic prefix to publish, /rfid_programming_event_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rfid_programming_event_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DoorLock/Attributes/RFIDProgrammingEventMask
 *
 * @param base_topic    topic prefix to publish, /rfid_programming_event_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_door_lock_rfid_programming_event_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the DoorLock/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /DoorLock/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_door_lock_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to DoorLock/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /DoorLock/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_door_lock_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the DoorLock Cluster
 *
 * This function will iterate over all Commands in the DoorLock Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_door_lock_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the DoorLock Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_door_lock_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the window_covering cluster
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_up_or_open_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_down_or_close_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_stop_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t lift_value

);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t percentage_lift_value

);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t tilt_value

);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t percentage_tilt_value

);

typedef struct {
  uint8_t window_covering_type;
  uint16_t physical_closed_limit_lift;
  uint16_t physical_closed_limit_tilt;
  uint16_t current_position_lift;
  uint16_t current_position_tilt;
  uint16_t number_of_actuations_lift;
  uint16_t number_of_actuations_tilt;
  uint8_t config_or_status;
  uint8_t current_position_lift_percentage;
  uint8_t current_position_tilt_percentage;
  uint16_t installed_open_limit_lift;
  uint16_t installed_closed_limit_lift;
  uint16_t installed_open_limit_tilt;
  uint16_t installed_closed_limit_tilt;
  uint16_t velocity_lift;
  uint16_t acceleration_time_lift;
  uint16_t deceleration_time_lift;
  uint8_t mode;
  const char* intermediate_setpoints_lift;
  const char* intermediate_setpoints_tilt;
} uic_mqtt_dotdot_window_covering_state_t;

typedef struct {
  bool window_covering_type;
  bool physical_closed_limit_lift;
  bool physical_closed_limit_tilt;
  bool current_position_lift;
  bool current_position_tilt;
  bool number_of_actuations_lift;
  bool number_of_actuations_tilt;
  bool config_or_status;
  bool current_position_lift_percentage;
  bool current_position_tilt_percentage;
  bool installed_open_limit_lift;
  bool installed_closed_limit_lift;
  bool installed_open_limit_tilt;
  bool installed_closed_limit_tilt;
  bool velocity_lift;
  bool acceleration_time_lift;
  bool deceleration_time_lift;
  bool mode;
  bool intermediate_setpoints_lift;
  bool intermediate_setpoints_tilt;
} uic_mqtt_dotdot_window_covering_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_window_covering_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_window_covering_state_t,
    uic_mqtt_dotdot_window_covering_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_window_covering_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_window_covering_updated_state_t
);


/**
 * @brief Command fields for WindowCovering/GoToLiftValue
 */
typedef struct {
  uint16_t lift_value;
} uic_mqtt_dotdot_window_covering_command_go_to_lift_value_fields_t;

/**
 * @brief Command fields for WindowCovering/GoToLiftPercentage
 */
typedef struct {
  uint8_t percentage_lift_value;
} uic_mqtt_dotdot_window_covering_command_go_to_lift_percentage_fields_t;

/**
 * @brief Command fields for WindowCovering/GoToTiltValue
 */
typedef struct {
  uint16_t tilt_value;
} uic_mqtt_dotdot_window_covering_command_go_to_tilt_value_fields_t;

/**
 * @brief Command fields for WindowCovering/GoToTiltPercentage
 */
typedef struct {
  uint8_t percentage_tilt_value;
} uic_mqtt_dotdot_window_covering_command_go_to_tilt_percentage_fields_t;


/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/up_or_open is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_up_or_open_callback_set(const uic_mqtt_dotdot_window_covering_up_or_open_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/up_or_open is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_up_or_open_callback_unset(const uic_mqtt_dotdot_window_covering_up_or_open_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/up_or_open is received.
 */
void uic_mqtt_dotdot_window_covering_up_or_open_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/up_or_open is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_up_or_open_callback_set(const uic_mqtt_dotdot_window_covering_up_or_open_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/up_or_open is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_up_or_open_callback_unset(const uic_mqtt_dotdot_window_covering_up_or_open_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/up_or_open is received.
 */
void uic_mqtt_dotdot_window_covering_generated_up_or_open_callback_clear();
/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/down_or_close is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_down_or_close_callback_set(const uic_mqtt_dotdot_window_covering_down_or_close_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/down_or_close is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_down_or_close_callback_unset(const uic_mqtt_dotdot_window_covering_down_or_close_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/down_or_close is received.
 */
void uic_mqtt_dotdot_window_covering_down_or_close_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/down_or_close is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_down_or_close_callback_set(const uic_mqtt_dotdot_window_covering_down_or_close_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/down_or_close is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_down_or_close_callback_unset(const uic_mqtt_dotdot_window_covering_down_or_close_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/down_or_close is received.
 */
void uic_mqtt_dotdot_window_covering_generated_down_or_close_callback_clear();
/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_stop_callback_set(const uic_mqtt_dotdot_window_covering_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/stop is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_stop_callback_unset(const uic_mqtt_dotdot_window_covering_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/stop is received.
 */
void uic_mqtt_dotdot_window_covering_stop_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_stop_callback_set(const uic_mqtt_dotdot_window_covering_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/stop is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_stop_callback_unset(const uic_mqtt_dotdot_window_covering_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/stop is received.
 */
void uic_mqtt_dotdot_window_covering_generated_stop_callback_clear();
/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/go_to_lift_value is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_set(const uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/go_to_lift_value is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/go_to_lift_value is received.
 */
void uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_lift_value is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_lift_value_callback_set(const uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_lift_value is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_lift_value_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/go_to_lift_value is received.
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_lift_value_callback_clear();
/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/go_to_lift_percentage is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_set(const uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/go_to_lift_percentage is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/go_to_lift_percentage is received.
 */
void uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_lift_percentage is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_lift_percentage_callback_set(const uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_lift_percentage is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_lift_percentage_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/go_to_lift_percentage is received.
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_lift_percentage_callback_clear();
/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/go_to_tilt_value is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_set(const uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/go_to_tilt_value is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/go_to_tilt_value is received.
 */
void uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_tilt_value is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_tilt_value_callback_set(const uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_tilt_value is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_tilt_value_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/go_to_tilt_value is received.
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_tilt_value_callback_clear();
/**
 * @brief Setup callback to be called when a
 * WindowCovering/Commands/go_to_tilt_percentage is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_set(const uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * WindowCovering/Commands/go_to_tilt_percentage is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * WindowCovering/Commands/go_to_tilt_percentage is received.
 */
void uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_tilt_percentage is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_tilt_percentage_callback_set(const uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/WindowCovering/GeneratedCommands/go_to_tilt_percentage is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_tilt_percentage_callback_unset(const uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/WindowCovering/GeneratedCommands/go_to_tilt_percentage is received.
 */
void uic_mqtt_dotdot_window_covering_generated_go_to_tilt_percentage_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/window_covering/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_window_covering_write_attributes_callback(
  const uic_mqtt_dotdot_window_covering_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/window_covering/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_window_covering_write_attributes_callback(
  const uic_mqtt_dotdot_window_covering_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/window_covering/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_window_covering_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/window_covering/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_window_covering_force_read_attributes_callback(
  const uic_mqtt_dotdot_window_covering_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/window_covering/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_window_covering_force_read_attributes_callback(
  const uic_mqtt_dotdot_window_covering_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/window_covering/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_window_covering_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; WindowCovering/Attributes/WindowCoveringType
 *
 * @param base_topic    topic prefix to publish, /window_covering_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_window_covering_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/WindowCoveringType
 *
 * @param base_topic    topic prefix to publish, /window_covering_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_window_covering_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/PhysicalClosedLimitLift
 *
 * @param base_topic    topic prefix to publish, /physical_closed_limit_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/PhysicalClosedLimitLift
 *
 * @param base_topic    topic prefix to publish, /physical_closed_limit_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/PhysicalClosedLimitTilt
 *
 * @param base_topic    topic prefix to publish, /physical_closed_limit_tilt
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/PhysicalClosedLimitTilt
 *
 * @param base_topic    topic prefix to publish, /physical_closed_limit_tilt
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_physical_closed_limit_tilt_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/CurrentPositionLift
 *
 * @param base_topic    topic prefix to publish, /current_position_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/CurrentPositionLift
 *
 * @param base_topic    topic prefix to publish, /current_position_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/CurrentPositionTilt
 *
 * @param base_topic    topic prefix to publish, /current_position_tilt
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/CurrentPositionTilt
 *
 * @param base_topic    topic prefix to publish, /current_position_tilt
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/NumberOfActuationsLift
 *
 * @param base_topic    topic prefix to publish, /number_of_actuations_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/NumberOfActuationsLift
 *
 * @param base_topic    topic prefix to publish, /number_of_actuations_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/NumberOfActuationsTilt
 *
 * @param base_topic    topic prefix to publish, /number_of_actuations_tilt
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/NumberOfActuationsTilt
 *
 * @param base_topic    topic prefix to publish, /number_of_actuations_tilt
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_number_of_actuations_tilt_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/ConfigOrStatus
 *
 * @param base_topic    topic prefix to publish, /config_or_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_config_or_status_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/ConfigOrStatus
 *
 * @param base_topic    topic prefix to publish, /config_or_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_config_or_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/CurrentPositionLiftPercentage
 *
 * @param base_topic    topic prefix to publish, /current_position_lift_percentage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_percentage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/CurrentPositionLiftPercentage
 *
 * @param base_topic    topic prefix to publish, /current_position_lift_percentage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_lift_percentage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/CurrentPositionTiltPercentage
 *
 * @param base_topic    topic prefix to publish, /current_position_tilt_percentage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/CurrentPositionTiltPercentage
 *
 * @param base_topic    topic prefix to publish, /current_position_tilt_percentage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_current_position_tilt_percentage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/InstalledOpenLimitLift
 *
 * @param base_topic    topic prefix to publish, /installed_open_limit_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/InstalledOpenLimitLift
 *
 * @param base_topic    topic prefix to publish, /installed_open_limit_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/InstalledClosedLimitLift
 *
 * @param base_topic    topic prefix to publish, /installed_closed_limit_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/InstalledClosedLimitLift
 *
 * @param base_topic    topic prefix to publish, /installed_closed_limit_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/InstalledOpenLimitTilt
 *
 * @param base_topic    topic prefix to publish, /installed_open_limit_tilt
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/InstalledOpenLimitTilt
 *
 * @param base_topic    topic prefix to publish, /installed_open_limit_tilt
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_open_limit_tilt_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/InstalledClosedLimitTilt
 *
 * @param base_topic    topic prefix to publish, /installed_closed_limit_tilt
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/InstalledClosedLimitTilt
 *
 * @param base_topic    topic prefix to publish, /installed_closed_limit_tilt
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_installed_closed_limit_tilt_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/VelocityLift
 *
 * @param base_topic    topic prefix to publish, /velocity_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_velocity_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/VelocityLift
 *
 * @param base_topic    topic prefix to publish, /velocity_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_velocity_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/AccelerationTimeLift
 *
 * @param base_topic    topic prefix to publish, /acceleration_time_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_acceleration_time_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/AccelerationTimeLift
 *
 * @param base_topic    topic prefix to publish, /acceleration_time_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_acceleration_time_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/DecelerationTimeLift
 *
 * @param base_topic    topic prefix to publish, /deceleration_time_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_deceleration_time_lift_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/DecelerationTimeLift
 *
 * @param base_topic    topic prefix to publish, /deceleration_time_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_deceleration_time_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/Mode
 *
 * @param base_topic    topic prefix to publish, /mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/Mode
 *
 * @param base_topic    topic prefix to publish, /mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/IntermediateSetpointsLift
 *
 * @param base_topic    topic prefix to publish, /intermediate_setpoints_lift
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/IntermediateSetpointsLift
 *
 * @param base_topic    topic prefix to publish, /intermediate_setpoints_lift
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_lift_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindowCovering/Attributes/IntermediateSetpointsTilt
 *
 * @param base_topic    topic prefix to publish, /intermediate_setpoints_tilt
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindowCovering/Attributes/IntermediateSetpointsTilt
 *
 * @param base_topic    topic prefix to publish, /intermediate_setpoints_tilt
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_window_covering_intermediate_setpoints_tilt_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the WindowCovering/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /WindowCovering/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_window_covering_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to WindowCovering/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /WindowCovering/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_window_covering_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the WindowCovering Cluster
 *
 * This function will iterate over all Commands in the WindowCovering Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_window_covering_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the WindowCovering Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_window_covering_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the barrier_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t percent_open

);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_stop_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  uint8_t moving_state;
  uint16_t safety_status;
  uint8_t capabilities;
  uint16_t open_events;
  uint16_t close_events;
  uint16_t command_open_events;
  uint16_t command_close_events;
  uint16_t open_period;
  uint16_t close_period;
  uint8_t barrier_position;
} uic_mqtt_dotdot_barrier_control_state_t;

typedef struct {
  bool moving_state;
  bool safety_status;
  bool capabilities;
  bool open_events;
  bool close_events;
  bool command_open_events;
  bool command_close_events;
  bool open_period;
  bool close_period;
  bool barrier_position;
} uic_mqtt_dotdot_barrier_control_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_barrier_control_state_t,
    uic_mqtt_dotdot_barrier_control_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_barrier_control_updated_state_t
);


/**
 * @brief Command fields for BarrierControl/GoToPercent
 */
typedef struct {
  uint8_t percent_open;
} uic_mqtt_dotdot_barrier_control_command_go_to_percent_fields_t;


/**
 * @brief Setup callback to be called when a
 * BarrierControl/Commands/go_to_percent is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_barrier_control_go_to_percent_callback_set(const uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * BarrierControl/Commands/go_to_percent is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_barrier_control_go_to_percent_callback_unset(const uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * BarrierControl/Commands/go_to_percent is received.
 */
void uic_mqtt_dotdot_barrier_control_go_to_percent_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/BarrierControl/GeneratedCommands/go_to_percent is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_barrier_control_generated_go_to_percent_callback_set(const uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/BarrierControl/GeneratedCommands/go_to_percent is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_barrier_control_generated_go_to_percent_callback_unset(const uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/BarrierControl/GeneratedCommands/go_to_percent is received.
 */
void uic_mqtt_dotdot_barrier_control_generated_go_to_percent_callback_clear();
/**
 * @brief Setup callback to be called when a
 * BarrierControl/Commands/stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_barrier_control_stop_callback_set(const uic_mqtt_dotdot_barrier_control_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * BarrierControl/Commands/stop is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_barrier_control_stop_callback_unset(const uic_mqtt_dotdot_barrier_control_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * BarrierControl/Commands/stop is received.
 */
void uic_mqtt_dotdot_barrier_control_stop_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/BarrierControl/GeneratedCommands/stop is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_barrier_control_generated_stop_callback_set(const uic_mqtt_dotdot_barrier_control_stop_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/BarrierControl/GeneratedCommands/stop is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_barrier_control_generated_stop_callback_unset(const uic_mqtt_dotdot_barrier_control_stop_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/BarrierControl/GeneratedCommands/stop is received.
 */
void uic_mqtt_dotdot_barrier_control_generated_stop_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/barrier_control/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_barrier_control_write_attributes_callback(
  const uic_mqtt_dotdot_barrier_control_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/barrier_control/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_barrier_control_write_attributes_callback(
  const uic_mqtt_dotdot_barrier_control_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/barrier_control/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_barrier_control_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/barrier_control/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_barrier_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_barrier_control_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/barrier_control/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_barrier_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_barrier_control_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/barrier_control/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_barrier_control_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; BarrierControl/Attributes/MovingState
 *
 * @param base_topic    topic prefix to publish, /moving_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_moving_state_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/MovingState
 *
 * @param base_topic    topic prefix to publish, /moving_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_moving_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/SafetyStatus
 *
 * @param base_topic    topic prefix to publish, /safety_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_safety_status_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/SafetyStatus
 *
 * @param base_topic    topic prefix to publish, /safety_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_safety_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/Capabilities
 *
 * @param base_topic    topic prefix to publish, /capabilities
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_capabilities_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/Capabilities
 *
 * @param base_topic    topic prefix to publish, /capabilities
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_capabilities_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/OpenEvents
 *
 * @param base_topic    topic prefix to publish, /open_events
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_open_events_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/OpenEvents
 *
 * @param base_topic    topic prefix to publish, /open_events
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_open_events_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/CloseEvents
 *
 * @param base_topic    topic prefix to publish, /close_events
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_close_events_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/CloseEvents
 *
 * @param base_topic    topic prefix to publish, /close_events
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_close_events_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/CommandOpenEvents
 *
 * @param base_topic    topic prefix to publish, /command_open_events
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_command_open_events_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/CommandOpenEvents
 *
 * @param base_topic    topic prefix to publish, /command_open_events
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_command_open_events_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/CommandCloseEvents
 *
 * @param base_topic    topic prefix to publish, /command_close_events
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_command_close_events_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/CommandCloseEvents
 *
 * @param base_topic    topic prefix to publish, /command_close_events
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_command_close_events_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/OpenPeriod
 *
 * @param base_topic    topic prefix to publish, /open_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_open_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/OpenPeriod
 *
 * @param base_topic    topic prefix to publish, /open_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_open_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/ClosePeriod
 *
 * @param base_topic    topic prefix to publish, /close_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_close_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/ClosePeriod
 *
 * @param base_topic    topic prefix to publish, /close_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_close_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BarrierControl/Attributes/BarrierPosition
 *
 * @param base_topic    topic prefix to publish, /barrier_position
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_barrier_position_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BarrierControl/Attributes/BarrierPosition
 *
 * @param base_topic    topic prefix to publish, /barrier_position
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_barrier_control_barrier_position_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the BarrierControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /BarrierControl/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_barrier_control_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to BarrierControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /BarrierControl/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_barrier_control_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the BarrierControl Cluster
 *
 * This function will iterate over all Commands in the BarrierControl Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_barrier_control_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the BarrierControl Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_barrier_control_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the pump_configuration_and_control cluster

typedef struct {
  int16_t max_pressure;
  uint16_t max_speed;
  uint16_t max_flow;
  int16_t min_const_pressure;
  int16_t max_const_pressure;
  int16_t min_comp_pressure;
  int16_t max_comp_pressure;
  uint16_t min_const_speed;
  uint16_t max_const_speed;
  uint16_t min_const_flow;
  uint16_t max_const_flow;
  int16_t min_const_temp;
  int16_t max_const_temp;
  uint16_t pump_status;
  uint8_t effective_operation_mode;
  uint8_t effective_control_mode;
  int16_t capacity;
  uint16_t speed;
  uint32_t lifetime_running_hours;
  uint32_t power;
  uint32_t lifetime_energy_consumed;
  uint8_t operation_mode;
  uint8_t control_mode;
  uint16_t alarm_mask;
} uic_mqtt_dotdot_pump_configuration_and_control_state_t;

typedef struct {
  bool max_pressure;
  bool max_speed;
  bool max_flow;
  bool min_const_pressure;
  bool max_const_pressure;
  bool min_comp_pressure;
  bool max_comp_pressure;
  bool min_const_speed;
  bool max_const_speed;
  bool min_const_flow;
  bool max_const_flow;
  bool min_const_temp;
  bool max_const_temp;
  bool pump_status;
  bool effective_operation_mode;
  bool effective_control_mode;
  bool capacity;
  bool speed;
  bool lifetime_running_hours;
  bool power;
  bool lifetime_energy_consumed;
  bool operation_mode;
  bool control_mode;
  bool alarm_mask;
} uic_mqtt_dotdot_pump_configuration_and_control_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_pump_configuration_and_control_state_t,
    uic_mqtt_dotdot_pump_configuration_and_control_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_pump_configuration_and_control_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/pump_configuration_and_control/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_pump_configuration_and_control_write_attributes_callback(
  const uic_mqtt_dotdot_pump_configuration_and_control_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/pump_configuration_and_control/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_pump_configuration_and_control_write_attributes_callback(
  const uic_mqtt_dotdot_pump_configuration_and_control_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/pump_configuration_and_control/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_pump_configuration_and_control_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/pump_configuration_and_control/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_pump_configuration_and_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_pump_configuration_and_control_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/pump_configuration_and_control/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_pump_configuration_and_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_pump_configuration_and_control_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/pump_configuration_and_control/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_pump_configuration_and_control_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxPressure
 *
 * @param base_topic    topic prefix to publish, /max_pressure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_pressure_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxPressure
 *
 * @param base_topic    topic prefix to publish, /max_pressure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_pressure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxSpeed
 *
 * @param base_topic    topic prefix to publish, /max_speed
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_speed_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxSpeed
 *
 * @param base_topic    topic prefix to publish, /max_speed
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_speed_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxFlow
 *
 * @param base_topic    topic prefix to publish, /max_flow
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_flow_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxFlow
 *
 * @param base_topic    topic prefix to publish, /max_flow
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_flow_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MinConstPressure
 *
 * @param base_topic    topic prefix to publish, /min_const_pressure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_pressure_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MinConstPressure
 *
 * @param base_topic    topic prefix to publish, /min_const_pressure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_pressure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxConstPressure
 *
 * @param base_topic    topic prefix to publish, /max_const_pressure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_pressure_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxConstPressure
 *
 * @param base_topic    topic prefix to publish, /max_const_pressure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_pressure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MinCompPressure
 *
 * @param base_topic    topic prefix to publish, /min_comp_pressure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_comp_pressure_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MinCompPressure
 *
 * @param base_topic    topic prefix to publish, /min_comp_pressure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_comp_pressure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxCompPressure
 *
 * @param base_topic    topic prefix to publish, /max_comp_pressure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_comp_pressure_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxCompPressure
 *
 * @param base_topic    topic prefix to publish, /max_comp_pressure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_comp_pressure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MinConstSpeed
 *
 * @param base_topic    topic prefix to publish, /min_const_speed
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MinConstSpeed
 *
 * @param base_topic    topic prefix to publish, /min_const_speed
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_speed_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxConstSpeed
 *
 * @param base_topic    topic prefix to publish, /max_const_speed
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxConstSpeed
 *
 * @param base_topic    topic prefix to publish, /max_const_speed
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_speed_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MinConstFlow
 *
 * @param base_topic    topic prefix to publish, /min_const_flow
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MinConstFlow
 *
 * @param base_topic    topic prefix to publish, /min_const_flow
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_flow_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxConstFlow
 *
 * @param base_topic    topic prefix to publish, /max_const_flow
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxConstFlow
 *
 * @param base_topic    topic prefix to publish, /max_const_flow
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_flow_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MinConstTemp
 *
 * @param base_topic    topic prefix to publish, /min_const_temp
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_temp_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MinConstTemp
 *
 * @param base_topic    topic prefix to publish, /min_const_temp
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_min_const_temp_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/MaxConstTemp
 *
 * @param base_topic    topic prefix to publish, /max_const_temp
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_temp_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/MaxConstTemp
 *
 * @param base_topic    topic prefix to publish, /max_const_temp
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_max_const_temp_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/PumpStatus
 *
 * @param base_topic    topic prefix to publish, /pump_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_pump_status_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/PumpStatus
 *
 * @param base_topic    topic prefix to publish, /pump_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_pump_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/EffectiveOperationMode
 *
 * @param base_topic    topic prefix to publish, /effective_operation_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_effective_operation_mode_publish(
  const char *base_topic,
  PumpOperationMode value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/EffectiveOperationMode
 *
 * @param base_topic    topic prefix to publish, /effective_operation_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_effective_operation_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/EffectiveControlMode
 *
 * @param base_topic    topic prefix to publish, /effective_control_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_effective_control_mode_publish(
  const char *base_topic,
  PumpControlMode value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/EffectiveControlMode
 *
 * @param base_topic    topic prefix to publish, /effective_control_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_effective_control_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/Capacity
 *
 * @param base_topic    topic prefix to publish, /capacity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_capacity_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/Capacity
 *
 * @param base_topic    topic prefix to publish, /capacity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_capacity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/Speed
 *
 * @param base_topic    topic prefix to publish, /speed
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_speed_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/Speed
 *
 * @param base_topic    topic prefix to publish, /speed
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_speed_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/LifetimeRunningHours
 *
 * @param base_topic    topic prefix to publish, /lifetime_running_hours
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/LifetimeRunningHours
 *
 * @param base_topic    topic prefix to publish, /lifetime_running_hours
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_running_hours_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/Power
 *
 * @param base_topic    topic prefix to publish, /power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_power_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/Power
 *
 * @param base_topic    topic prefix to publish, /power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/LifetimeEnergyConsumed
 *
 * @param base_topic    topic prefix to publish, /lifetime_energy_consumed
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/LifetimeEnergyConsumed
 *
 * @param base_topic    topic prefix to publish, /lifetime_energy_consumed
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_lifetime_energy_consumed_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/OperationMode
 *
 * @param base_topic    topic prefix to publish, /operation_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_operation_mode_publish(
  const char *base_topic,
  PumpOperationMode value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/OperationMode
 *
 * @param base_topic    topic prefix to publish, /operation_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_operation_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/ControlMode
 *
 * @param base_topic    topic prefix to publish, /control_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_control_mode_publish(
  const char *base_topic,
  PumpControlMode value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/ControlMode
 *
 * @param base_topic    topic prefix to publish, /control_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_control_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PumpConfigurationAndControl/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_alarm_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PumpConfigurationAndControl/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the PumpConfigurationAndControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PumpConfigurationAndControl/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_pump_configuration_and_control_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to PumpConfigurationAndControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PumpConfigurationAndControl/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_pump_configuration_and_control_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the PumpConfigurationAndControl Cluster
 *
 * This function will iterate over all Commands in the PumpConfigurationAndControl Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_pump_configuration_and_control_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the PumpConfigurationAndControl Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_pump_configuration_and_control_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the thermostat cluster
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    SetpointRaiseOrLowerMode mode,

    int8_t amount

);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t number_of_transitions,

    uint8_t day_of_week,

    uint8_t mode,

    uint8_t transitions_count,
    const TransitionType *transitions

);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t number_of_transitions,

    uint8_t day_of_week,

    uint8_t mode,

    uint8_t transitions_count,
    const TransitionType *transitions

);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t time_of_day,

    uint8_t relay_status,

    int16_t local_temperature,

    uint8_t humidity_percentage,

    int16_t set_point,

    uint16_t unread_entries

);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t days_to_return,

    uint8_t mode_to_return

);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  int16_t local_temperature;
  int16_t outdoor_temperature;
  uint8_t occupancy;
  int16_t abs_min_heat_setpoint_limit;
  int16_t abs_max_heat_setpoint_limit;
  int16_t abs_min_cool_setpoint_limit;
  int16_t abs_max_cool_setpoint_limit;
  uint8_t pi_cooling_demand;
  uint8_t pi_heating_demand;
  uint8_t hvac_system_type_configuration;
  int8_t local_temperature_calibration;
  int16_t occupied_cooling_setpoint;
  int16_t occupied_heating_setpoint;
  int16_t unoccupied_cooling_setpoint;
  int16_t unoccupied_heating_setpoint;
  int16_t min_heat_setpoint_limit;
  int16_t max_heat_setpoint_limit;
  int16_t min_cool_setpoint_limit;
  int16_t max_cool_setpoint_limit;
  int8_t min_setpoint_dead_band;
  uint8_t remote_sensing;
  uint8_t control_sequence_of_operation;
  uint8_t system_mode;
  uint8_t alarm_mask;
  uint8_t thermostat_running_mode;
  uint8_t start_of_week;
  uint8_t number_of_weekly_transitions;
  uint8_t number_of_daily_transitions;
  uint8_t temperature_setpoint_hold;
  uint16_t temperature_setpoint_hold_duration;
  uint8_t thermostat_programming_operation_mode;
  uint16_t thermostat_running_state;
  uint8_t setpoint_change_source;
  int16_t setpoint_change_amount;
  UTC setpoint_change_source_timestamp;
  uint8_t occupied_setback;
  uint8_t occupied_setback_min;
  uint8_t occupied_setback_max;
  uint8_t unoccupied_setback;
  uint8_t unoccupied_setback_min;
  uint8_t unoccupied_setback_max;
  uint8_t emergency_heat_delta;
  uint8_t ac_type;
  uint16_t ac_capacity;
  uint8_t ac_refrigerant_type;
  uint8_t ac_compressor_type;
  uint32_t ac_error_code;
  uint8_t ac_louver_position;
  int16_t ac_coil_temperature;
  uint8_t ac_capacity_format;
} uic_mqtt_dotdot_thermostat_state_t;

typedef struct {
  bool local_temperature;
  bool outdoor_temperature;
  bool occupancy;
  bool abs_min_heat_setpoint_limit;
  bool abs_max_heat_setpoint_limit;
  bool abs_min_cool_setpoint_limit;
  bool abs_max_cool_setpoint_limit;
  bool pi_cooling_demand;
  bool pi_heating_demand;
  bool hvac_system_type_configuration;
  bool local_temperature_calibration;
  bool occupied_cooling_setpoint;
  bool occupied_heating_setpoint;
  bool unoccupied_cooling_setpoint;
  bool unoccupied_heating_setpoint;
  bool min_heat_setpoint_limit;
  bool max_heat_setpoint_limit;
  bool min_cool_setpoint_limit;
  bool max_cool_setpoint_limit;
  bool min_setpoint_dead_band;
  bool remote_sensing;
  bool control_sequence_of_operation;
  bool system_mode;
  bool alarm_mask;
  bool thermostat_running_mode;
  bool start_of_week;
  bool number_of_weekly_transitions;
  bool number_of_daily_transitions;
  bool temperature_setpoint_hold;
  bool temperature_setpoint_hold_duration;
  bool thermostat_programming_operation_mode;
  bool thermostat_running_state;
  bool setpoint_change_source;
  bool setpoint_change_amount;
  bool setpoint_change_source_timestamp;
  bool occupied_setback;
  bool occupied_setback_min;
  bool occupied_setback_max;
  bool unoccupied_setback;
  bool unoccupied_setback_min;
  bool unoccupied_setback_max;
  bool emergency_heat_delta;
  bool ac_type;
  bool ac_capacity;
  bool ac_refrigerant_type;
  bool ac_compressor_type;
  bool ac_error_code;
  bool ac_louver_position;
  bool ac_coil_temperature;
  bool ac_capacity_format;
} uic_mqtt_dotdot_thermostat_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_thermostat_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_thermostat_state_t,
    uic_mqtt_dotdot_thermostat_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_thermostat_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_thermostat_updated_state_t
);


/**
 * @brief Command fields for Thermostat/SetpointRaiseOrLower
 */
typedef struct {
  SetpointRaiseOrLowerMode mode;

  int8_t amount;
} uic_mqtt_dotdot_thermostat_command_setpoint_raise_or_lower_fields_t;

/**
 * @brief Command fields for Thermostat/GetWeeklyScheduleResponse
 */
typedef struct {
  uint8_t number_of_transitions;

  uint8_t day_of_week;

  uint8_t mode;

  uint8_t transitions_count;
  const TransitionType *transitions;
} uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_response_fields_t;

/**
 * @brief Command fields for Thermostat/SetWeeklySchedule
 */
typedef struct {
  uint8_t number_of_transitions;

  uint8_t day_of_week;

  uint8_t mode;

  uint8_t transitions_count;
  const TransitionType *transitions;
} uic_mqtt_dotdot_thermostat_command_set_weekly_schedule_fields_t;

/**
 * @brief Command fields for Thermostat/GetRelayStatusLogResponse
 */
typedef struct {
  uint16_t time_of_day;

  uint8_t relay_status;

  int16_t local_temperature;

  uint8_t humidity_percentage;

  int16_t set_point;

  uint16_t unread_entries;
} uic_mqtt_dotdot_thermostat_command_get_relay_status_log_response_fields_t;

/**
 * @brief Command fields for Thermostat/GetWeeklySchedule
 */
typedef struct {
  uint8_t days_to_return;

  uint8_t mode_to_return;
} uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_fields_t;


/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/setpoint_raise_or_lower is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_set(const uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/setpoint_raise_or_lower is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_unset(const uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/setpoint_raise_or_lower is received.
 */
void uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/setpoint_raise_or_lower is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_setpoint_raise_or_lower_callback_set(const uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/setpoint_raise_or_lower is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_setpoint_raise_or_lower_callback_unset(const uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/setpoint_raise_or_lower is received.
 */
void uic_mqtt_dotdot_thermostat_generated_setpoint_raise_or_lower_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/get_weekly_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_set(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/get_weekly_schedule_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_unset(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/get_weekly_schedule_response is received.
 */
void uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/get_weekly_schedule_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_weekly_schedule_response_callback_set(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/get_weekly_schedule_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_weekly_schedule_response_callback_unset(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/get_weekly_schedule_response is received.
 */
void uic_mqtt_dotdot_thermostat_generated_get_weekly_schedule_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/set_weekly_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_set(const uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/set_weekly_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_unset(const uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/set_weekly_schedule is received.
 */
void uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/set_weekly_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_set_weekly_schedule_callback_set(const uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/set_weekly_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_set_weekly_schedule_callback_unset(const uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/set_weekly_schedule is received.
 */
void uic_mqtt_dotdot_thermostat_generated_set_weekly_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/get_relay_status_log_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_set(const uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/get_relay_status_log_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_unset(const uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/get_relay_status_log_response is received.
 */
void uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/get_relay_status_log_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_relay_status_log_response_callback_set(const uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/get_relay_status_log_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_relay_status_log_response_callback_unset(const uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/get_relay_status_log_response is received.
 */
void uic_mqtt_dotdot_thermostat_generated_get_relay_status_log_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/get_weekly_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_set(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/get_weekly_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_unset(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/get_weekly_schedule is received.
 */
void uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/get_weekly_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_weekly_schedule_callback_set(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/get_weekly_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_weekly_schedule_callback_unset(const uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/get_weekly_schedule is received.
 */
void uic_mqtt_dotdot_thermostat_generated_get_weekly_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/clear_weekly_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_set(const uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/clear_weekly_schedule is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_unset(const uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/clear_weekly_schedule is received.
 */
void uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/clear_weekly_schedule is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_clear_weekly_schedule_callback_set(const uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/clear_weekly_schedule is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_clear_weekly_schedule_callback_unset(const uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/clear_weekly_schedule is received.
 */
void uic_mqtt_dotdot_thermostat_generated_clear_weekly_schedule_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Thermostat/Commands/get_relay_status_log is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_set(const uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Thermostat/Commands/get_relay_status_log is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_unset(const uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Thermostat/Commands/get_relay_status_log is received.
 */
void uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Thermostat/GeneratedCommands/get_relay_status_log is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_relay_status_log_callback_set(const uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Thermostat/GeneratedCommands/get_relay_status_log is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_thermostat_generated_get_relay_status_log_callback_unset(const uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Thermostat/GeneratedCommands/get_relay_status_log is received.
 */
void uic_mqtt_dotdot_thermostat_generated_get_relay_status_log_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/thermostat/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_thermostat_write_attributes_callback(
  const uic_mqtt_dotdot_thermostat_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/thermostat/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_thermostat_write_attributes_callback(
  const uic_mqtt_dotdot_thermostat_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/thermostat/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_thermostat_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/thermostat/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_thermostat_force_read_attributes_callback(
  const uic_mqtt_dotdot_thermostat_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/thermostat/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_thermostat_force_read_attributes_callback(
  const uic_mqtt_dotdot_thermostat_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/thermostat/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_thermostat_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Thermostat/Attributes/LocalTemperature
 *
 * @param base_topic    topic prefix to publish, /local_temperature
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_local_temperature_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/LocalTemperature
 *
 * @param base_topic    topic prefix to publish, /local_temperature
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_local_temperature_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/OutdoorTemperature
 *
 * @param base_topic    topic prefix to publish, /outdoor_temperature
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_outdoor_temperature_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/OutdoorTemperature
 *
 * @param base_topic    topic prefix to publish, /outdoor_temperature
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_outdoor_temperature_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/Occupancy
 *
 * @param base_topic    topic prefix to publish, /occupancy
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupancy_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/Occupancy
 *
 * @param base_topic    topic prefix to publish, /occupancy
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupancy_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/AbsMinHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_min_heat_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_min_heat_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/AbsMinHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_min_heat_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_min_heat_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/AbsMaxHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_max_heat_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_max_heat_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/AbsMaxHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_max_heat_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_max_heat_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/AbsMinCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_min_cool_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_min_cool_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/AbsMinCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_min_cool_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_min_cool_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/AbsMaxCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_max_cool_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_max_cool_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/AbsMaxCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /abs_max_cool_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_abs_max_cool_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/PICoolingDemand
 *
 * @param base_topic    topic prefix to publish, /pi_cooling_demand
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_pi_cooling_demand_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/PICoolingDemand
 *
 * @param base_topic    topic prefix to publish, /pi_cooling_demand
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_pi_cooling_demand_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/PIHeatingDemand
 *
 * @param base_topic    topic prefix to publish, /pi_heating_demand
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_pi_heating_demand_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/PIHeatingDemand
 *
 * @param base_topic    topic prefix to publish, /pi_heating_demand
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_pi_heating_demand_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/HVACSystemTypeConfiguration
 *
 * @param base_topic    topic prefix to publish, /hvac_system_type_configuration
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_hvac_system_type_configuration_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/HVACSystemTypeConfiguration
 *
 * @param base_topic    topic prefix to publish, /hvac_system_type_configuration
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_hvac_system_type_configuration_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/LocalTemperatureCalibration
 *
 * @param base_topic    topic prefix to publish, /local_temperature_calibration
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_local_temperature_calibration_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/LocalTemperatureCalibration
 *
 * @param base_topic    topic prefix to publish, /local_temperature_calibration
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_local_temperature_calibration_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/OccupiedCoolingSetpoint
 *
 * @param base_topic    topic prefix to publish, /occupied_cooling_setpoint
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_cooling_setpoint_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/OccupiedCoolingSetpoint
 *
 * @param base_topic    topic prefix to publish, /occupied_cooling_setpoint
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_cooling_setpoint_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/OccupiedHeatingSetpoint
 *
 * @param base_topic    topic prefix to publish, /occupied_heating_setpoint
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_heating_setpoint_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/OccupiedHeatingSetpoint
 *
 * @param base_topic    topic prefix to publish, /occupied_heating_setpoint
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_heating_setpoint_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/UnoccupiedCoolingSetpoint
 *
 * @param base_topic    topic prefix to publish, /unoccupied_cooling_setpoint
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_cooling_setpoint_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/UnoccupiedCoolingSetpoint
 *
 * @param base_topic    topic prefix to publish, /unoccupied_cooling_setpoint
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_cooling_setpoint_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/UnoccupiedHeatingSetpoint
 *
 * @param base_topic    topic prefix to publish, /unoccupied_heating_setpoint
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_heating_setpoint_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/UnoccupiedHeatingSetpoint
 *
 * @param base_topic    topic prefix to publish, /unoccupied_heating_setpoint
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_heating_setpoint_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/MinHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /min_heat_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_min_heat_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/MinHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /min_heat_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_min_heat_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/MaxHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /max_heat_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_max_heat_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/MaxHeatSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /max_heat_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_max_heat_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/MinCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /min_cool_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_min_cool_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/MinCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /min_cool_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_min_cool_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/MaxCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /max_cool_setpoint_limit
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_max_cool_setpoint_limit_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/MaxCoolSetpointLimit
 *
 * @param base_topic    topic prefix to publish, /max_cool_setpoint_limit
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_max_cool_setpoint_limit_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/MinSetpointDeadBand
 *
 * @param base_topic    topic prefix to publish, /min_setpoint_dead_band
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_min_setpoint_dead_band_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/MinSetpointDeadBand
 *
 * @param base_topic    topic prefix to publish, /min_setpoint_dead_band
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_min_setpoint_dead_band_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/RemoteSensing
 *
 * @param base_topic    topic prefix to publish, /remote_sensing
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_remote_sensing_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/RemoteSensing
 *
 * @param base_topic    topic prefix to publish, /remote_sensing
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_remote_sensing_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ControlSequenceOfOperation
 *
 * @param base_topic    topic prefix to publish, /control_sequence_of_operation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_control_sequence_of_operation_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ControlSequenceOfOperation
 *
 * @param base_topic    topic prefix to publish, /control_sequence_of_operation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_control_sequence_of_operation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/SystemMode
 *
 * @param base_topic    topic prefix to publish, /system_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_system_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/SystemMode
 *
 * @param base_topic    topic prefix to publish, /system_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_system_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_alarm_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/AlarmMask
 *
 * @param base_topic    topic prefix to publish, /alarm_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_alarm_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ThermostatRunningMode
 *
 * @param base_topic    topic prefix to publish, /thermostat_running_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_thermostat_running_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ThermostatRunningMode
 *
 * @param base_topic    topic prefix to publish, /thermostat_running_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_thermostat_running_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/StartOfWeek
 *
 * @param base_topic    topic prefix to publish, /start_of_week
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_start_of_week_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/StartOfWeek
 *
 * @param base_topic    topic prefix to publish, /start_of_week
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_start_of_week_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/NumberOfWeeklyTransitions
 *
 * @param base_topic    topic prefix to publish, /number_of_weekly_transitions
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/NumberOfWeeklyTransitions
 *
 * @param base_topic    topic prefix to publish, /number_of_weekly_transitions
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_number_of_weekly_transitions_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/NumberOfDailyTransitions
 *
 * @param base_topic    topic prefix to publish, /number_of_daily_transitions
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_number_of_daily_transitions_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/NumberOfDailyTransitions
 *
 * @param base_topic    topic prefix to publish, /number_of_daily_transitions
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_number_of_daily_transitions_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/TemperatureSetpointHold
 *
 * @param base_topic    topic prefix to publish, /temperature_setpoint_hold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/TemperatureSetpointHold
 *
 * @param base_topic    topic prefix to publish, /temperature_setpoint_hold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/TemperatureSetpointHoldDuration
 *
 * @param base_topic    topic prefix to publish, /temperature_setpoint_hold_duration
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/TemperatureSetpointHoldDuration
 *
 * @param base_topic    topic prefix to publish, /temperature_setpoint_hold_duration
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_temperature_setpoint_hold_duration_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ThermostatProgrammingOperationMode
 *
 * @param base_topic    topic prefix to publish, /thermostat_programming_operation_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_thermostat_programming_operation_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ThermostatProgrammingOperationMode
 *
 * @param base_topic    topic prefix to publish, /thermostat_programming_operation_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_thermostat_programming_operation_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ThermostatRunningState
 *
 * @param base_topic    topic prefix to publish, /thermostat_running_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_thermostat_running_state_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ThermostatRunningState
 *
 * @param base_topic    topic prefix to publish, /thermostat_running_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_thermostat_running_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/SetpointChangeSource
 *
 * @param base_topic    topic prefix to publish, /setpoint_change_source
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/SetpointChangeSource
 *
 * @param base_topic    topic prefix to publish, /setpoint_change_source
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/SetpointChangeAmount
 *
 * @param base_topic    topic prefix to publish, /setpoint_change_amount
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_amount_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/SetpointChangeAmount
 *
 * @param base_topic    topic prefix to publish, /setpoint_change_amount
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_amount_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/SetpointChangeSourceTimestamp
 *
 * @param base_topic    topic prefix to publish, /setpoint_change_source_timestamp
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/SetpointChangeSourceTimestamp
 *
 * @param base_topic    topic prefix to publish, /setpoint_change_source_timestamp
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_setpoint_change_source_timestamp_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/OccupiedSetback
 *
 * @param base_topic    topic prefix to publish, /occupied_setback
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/OccupiedSetback
 *
 * @param base_topic    topic prefix to publish, /occupied_setback
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/OccupiedSetbackMin
 *
 * @param base_topic    topic prefix to publish, /occupied_setback_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_min_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/OccupiedSetbackMin
 *
 * @param base_topic    topic prefix to publish, /occupied_setback_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/OccupiedSetbackMax
 *
 * @param base_topic    topic prefix to publish, /occupied_setback_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_max_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/OccupiedSetbackMax
 *
 * @param base_topic    topic prefix to publish, /occupied_setback_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_occupied_setback_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/UnoccupiedSetback
 *
 * @param base_topic    topic prefix to publish, /unoccupied_setback
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/UnoccupiedSetback
 *
 * @param base_topic    topic prefix to publish, /unoccupied_setback
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/UnoccupiedSetbackMin
 *
 * @param base_topic    topic prefix to publish, /unoccupied_setback_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_min_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/UnoccupiedSetbackMin
 *
 * @param base_topic    topic prefix to publish, /unoccupied_setback_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/UnoccupiedSetbackMax
 *
 * @param base_topic    topic prefix to publish, /unoccupied_setback_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_max_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/UnoccupiedSetbackMax
 *
 * @param base_topic    topic prefix to publish, /unoccupied_setback_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_unoccupied_setback_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/EmergencyHeatDelta
 *
 * @param base_topic    topic prefix to publish, /emergency_heat_delta
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_emergency_heat_delta_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/EmergencyHeatDelta
 *
 * @param base_topic    topic prefix to publish, /emergency_heat_delta
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_emergency_heat_delta_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACType
 *
 * @param base_topic    topic prefix to publish, /ac_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACType
 *
 * @param base_topic    topic prefix to publish, /ac_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACCapacity
 *
 * @param base_topic    topic prefix to publish, /ac_capacity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_capacity_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACCapacity
 *
 * @param base_topic    topic prefix to publish, /ac_capacity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_capacity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACRefrigerantType
 *
 * @param base_topic    topic prefix to publish, /ac_refrigerant_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_refrigerant_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACRefrigerantType
 *
 * @param base_topic    topic prefix to publish, /ac_refrigerant_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_refrigerant_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACCompressorType
 *
 * @param base_topic    topic prefix to publish, /ac_compressor_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_compressor_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACCompressorType
 *
 * @param base_topic    topic prefix to publish, /ac_compressor_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_compressor_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACErrorCode
 *
 * @param base_topic    topic prefix to publish, /ac_error_code
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_error_code_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACErrorCode
 *
 * @param base_topic    topic prefix to publish, /ac_error_code
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_error_code_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACLouverPosition
 *
 * @param base_topic    topic prefix to publish, /ac_louver_position
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_louver_position_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACLouverPosition
 *
 * @param base_topic    topic prefix to publish, /ac_louver_position
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_louver_position_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACCoilTemperature
 *
 * @param base_topic    topic prefix to publish, /ac_coil_temperature
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_coil_temperature_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACCoilTemperature
 *
 * @param base_topic    topic prefix to publish, /ac_coil_temperature
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_coil_temperature_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Thermostat/Attributes/ACCapacityFormat
 *
 * @param base_topic    topic prefix to publish, /ac_capacity_format
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_capacity_format_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Thermostat/Attributes/ACCapacityFormat
 *
 * @param base_topic    topic prefix to publish, /ac_capacity_format
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_ac_capacity_format_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Thermostat/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Thermostat/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_thermostat_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Thermostat/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Thermostat/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_thermostat_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Thermostat Cluster
 *
 * This function will iterate over all Commands in the Thermostat Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_thermostat_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Thermostat Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_thermostat_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the fan_control cluster

typedef struct {
  uint8_t fan_mode;
  uint8_t fan_mode_sequence;
} uic_mqtt_dotdot_fan_control_state_t;

typedef struct {
  bool fan_mode;
  bool fan_mode_sequence;
} uic_mqtt_dotdot_fan_control_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_fan_control_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_fan_control_state_t,
    uic_mqtt_dotdot_fan_control_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_fan_control_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_fan_control_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/fan_control/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_fan_control_write_attributes_callback(
  const uic_mqtt_dotdot_fan_control_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/fan_control/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_fan_control_write_attributes_callback(
  const uic_mqtt_dotdot_fan_control_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/fan_control/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_fan_control_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/fan_control/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_fan_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_fan_control_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/fan_control/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_fan_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_fan_control_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/fan_control/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_fan_control_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; FanControl/Attributes/FanMode
 *
 * @param base_topic    topic prefix to publish, /fan_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_fan_control_fan_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; FanControl/Attributes/FanMode
 *
 * @param base_topic    topic prefix to publish, /fan_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_fan_control_fan_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; FanControl/Attributes/FanModeSequence
 *
 * @param base_topic    topic prefix to publish, /fan_mode_sequence
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_fan_control_fan_mode_sequence_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; FanControl/Attributes/FanModeSequence
 *
 * @param base_topic    topic prefix to publish, /fan_mode_sequence
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_fan_control_fan_mode_sequence_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the FanControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /FanControl/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_fan_control_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to FanControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /FanControl/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_fan_control_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the FanControl Cluster
 *
 * This function will iterate over all Commands in the FanControl Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_fan_control_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the FanControl Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_fan_control_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the dehumidification_control cluster

typedef struct {
  uint8_t relative_humidity;
  uint8_t dehumidification_cooling;
  uint8_t rh_dehumidification_setpoint;
  uint8_t relative_humidity_mode;
  uint8_t dehumidification_lockout;
  uint8_t dehumidification_hysteresis;
  uint8_t dehumidification_max_cool;
  uint8_t relative_humidity_display;
} uic_mqtt_dotdot_dehumidification_control_state_t;

typedef struct {
  bool relative_humidity;
  bool dehumidification_cooling;
  bool rh_dehumidification_setpoint;
  bool relative_humidity_mode;
  bool dehumidification_lockout;
  bool dehumidification_hysteresis;
  bool dehumidification_max_cool;
  bool relative_humidity_display;
} uic_mqtt_dotdot_dehumidification_control_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_dehumidification_control_state_t,
    uic_mqtt_dotdot_dehumidification_control_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_dehumidification_control_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/dehumidification_control/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_dehumidification_control_write_attributes_callback(
  const uic_mqtt_dotdot_dehumidification_control_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/dehumidification_control/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_dehumidification_control_write_attributes_callback(
  const uic_mqtt_dotdot_dehumidification_control_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/dehumidification_control/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_dehumidification_control_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/dehumidification_control/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_dehumidification_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_dehumidification_control_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/dehumidification_control/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_dehumidification_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_dehumidification_control_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/dehumidification_control/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_dehumidification_control_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/RelativeHumidity
 *
 * @param base_topic    topic prefix to publish, /relative_humidity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/RelativeHumidity
 *
 * @param base_topic    topic prefix to publish, /relative_humidity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/DehumidificationCooling
 *
 * @param base_topic    topic prefix to publish, /dehumidification_cooling
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/DehumidificationCooling
 *
 * @param base_topic    topic prefix to publish, /dehumidification_cooling
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_cooling_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/RHDehumidificationSetpoint
 *
 * @param base_topic    topic prefix to publish, /rh_dehumidification_setpoint
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/RHDehumidificationSetpoint
 *
 * @param base_topic    topic prefix to publish, /rh_dehumidification_setpoint
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_rh_dehumidification_setpoint_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/RelativeHumidityMode
 *
 * @param base_topic    topic prefix to publish, /relative_humidity_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/RelativeHumidityMode
 *
 * @param base_topic    topic prefix to publish, /relative_humidity_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/DehumidificationLockout
 *
 * @param base_topic    topic prefix to publish, /dehumidification_lockout
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_lockout_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/DehumidificationLockout
 *
 * @param base_topic    topic prefix to publish, /dehumidification_lockout
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_lockout_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/DehumidificationHysteresis
 *
 * @param base_topic    topic prefix to publish, /dehumidification_hysteresis
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/DehumidificationHysteresis
 *
 * @param base_topic    topic prefix to publish, /dehumidification_hysteresis
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_hysteresis_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/DehumidificationMaxCool
 *
 * @param base_topic    topic prefix to publish, /dehumidification_max_cool
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/DehumidificationMaxCool
 *
 * @param base_topic    topic prefix to publish, /dehumidification_max_cool
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_dehumidification_max_cool_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; DehumidificationControl/Attributes/RelativeHumidityDisplay
 *
 * @param base_topic    topic prefix to publish, /relative_humidity_display
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_display_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; DehumidificationControl/Attributes/RelativeHumidityDisplay
 *
 * @param base_topic    topic prefix to publish, /relative_humidity_display
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_relative_humidity_display_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the DehumidificationControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /DehumidificationControl/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_dehumidification_control_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to DehumidificationControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /DehumidificationControl/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_dehumidification_control_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the DehumidificationControl Cluster
 *
 * This function will iterate over all Commands in the DehumidificationControl Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_dehumidification_control_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the DehumidificationControl Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_dehumidification_control_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the thermostat_user_interface_configuration cluster

typedef struct {
  uint8_t temperature_display_mode;
  uint8_t keypad_lockout;
  uint8_t schedule_programming_visibility;
} uic_mqtt_dotdot_thermostat_user_interface_configuration_state_t;

typedef struct {
  bool temperature_display_mode;
  bool keypad_lockout;
  bool schedule_programming_visibility;
} uic_mqtt_dotdot_thermostat_user_interface_configuration_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_thermostat_user_interface_configuration_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_thermostat_user_interface_configuration_state_t,
    uic_mqtt_dotdot_thermostat_user_interface_configuration_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_thermostat_user_interface_configuration_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_thermostat_user_interface_configuration_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/thermostat_user_interface_configuration/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_thermostat_user_interface_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_thermostat_user_interface_configuration_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/thermostat_user_interface_configuration/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_thermostat_user_interface_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_thermostat_user_interface_configuration_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/thermostat_user_interface_configuration/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_thermostat_user_interface_configuration_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/thermostat_user_interface_configuration/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_thermostat_user_interface_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_thermostat_user_interface_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/thermostat_user_interface_configuration/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_thermostat_user_interface_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_thermostat_user_interface_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/thermostat_user_interface_configuration/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_thermostat_user_interface_configuration_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ThermostatUserInterfaceConfiguration/Attributes/TemperatureDisplayMode
 *
 * @param base_topic    topic prefix to publish, /temperature_display_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_temperature_display_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ThermostatUserInterfaceConfiguration/Attributes/TemperatureDisplayMode
 *
 * @param base_topic    topic prefix to publish, /temperature_display_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_temperature_display_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ThermostatUserInterfaceConfiguration/Attributes/KeypadLockout
 *
 * @param base_topic    topic prefix to publish, /keypad_lockout
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_keypad_lockout_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ThermostatUserInterfaceConfiguration/Attributes/KeypadLockout
 *
 * @param base_topic    topic prefix to publish, /keypad_lockout
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_keypad_lockout_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ThermostatUserInterfaceConfiguration/Attributes/ScheduleProgrammingVisibility
 *
 * @param base_topic    topic prefix to publish, /schedule_programming_visibility
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ThermostatUserInterfaceConfiguration/Attributes/ScheduleProgrammingVisibility
 *
 * @param base_topic    topic prefix to publish, /schedule_programming_visibility
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_schedule_programming_visibility_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ThermostatUserInterfaceConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ThermostatUserInterfaceConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ThermostatUserInterfaceConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ThermostatUserInterfaceConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ThermostatUserInterfaceConfiguration Cluster
 *
 * This function will iterate over all Commands in the ThermostatUserInterfaceConfiguration Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ThermostatUserInterfaceConfiguration Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the color_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_hue_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t hue,

    CCDirection direction,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_hue_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCMoveMode move_mode,

    uint8_t rate,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_hue_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCStepMode step_mode,

    uint8_t step_size,

    uint8_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_saturation_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t saturation,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_saturation_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCMoveMode move_mode,

    uint8_t rate,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_saturation_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCStepMode step_mode,

    uint8_t step_size,

    uint8_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t hue,

    uint8_t saturation,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_color_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t colorx,

    uint16_t colory,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_color_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    int16_t ratex,

    int16_t ratey,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_color_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    int16_t stepx,

    int16_t stepy,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t color_temperature_mireds,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t enhanced_hue,

    CCDirection direction,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCMoveMode move_mode,

    uint16_t rate,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCStepMode step_mode,

    uint16_t step_size,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t enhanced_hue,

    uint8_t saturation,

    uint16_t transition_time,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_color_loop_set_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t update_flags,

    ColorLoopSetAction action,

    CCColorLoopDirection direction,

    uint16_t time,

    uint16_t start_hue,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_stop_move_step_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_move_color_temperature_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCMoveMode move_mode,

    uint16_t rate,

    CCMinMiredsField color_temperature_minimum_mireds,

    CCMaxMiredsField color_temperature_maximum_mireds,

    uint8_t options_mask,

    uint8_t options_override

);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_step_color_temperature_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    CCStepMode step_mode,

    uint16_t step_size,

    uint16_t transition_time,

    CCMinMiredsField color_temperature_minimum_mireds,

    CCMaxMiredsField color_temperature_maximum_mireds,

    uint8_t options_mask,

    uint8_t options_override

);

typedef struct {
  uint8_t current_hue;
  uint8_t current_saturation;
  uint16_t remaining_time;
  uint16_t currentx;
  uint16_t currenty;
  uint8_t drift_compensation;
  const char* compensation_text;
  uint16_t color_temperature_mireds;
  uint8_t color_mode;
  uint8_t options;
  uint8_t number_of_primaries;
  uint16_t primary1x;
  uint16_t primary1y;
  uint8_t primary1_intensity;
  uint16_t primary2x;
  uint16_t primary2y;
  uint8_t primary2_intensity;
  uint16_t primary3x;
  uint16_t primary3y;
  uint8_t primary3_intensity;
  uint16_t primary4x;
  uint16_t primary4y;
  uint8_t primary4_intensity;
  uint16_t primary5x;
  uint16_t primary5y;
  uint8_t primary5_intensity;
  uint16_t primary6x;
  uint16_t primary6y;
  uint8_t primary6_intensity;
  uint16_t white_pointx;
  uint16_t white_pointy;
  uint16_t color_pointrx;
  uint16_t color_pointry;
  uint8_t color_pointr_intensity;
  uint16_t color_pointgx;
  uint16_t color_pointgy;
  uint8_t color_pointg_intensity;
  uint16_t color_pointbx;
  uint16_t color_pointby;
  uint8_t color_pointb_intensity;
  uint16_t enhanced_current_hue;
  uint8_t enhanced_color_mode;
  uint8_t color_loop_active;
  uint8_t color_loop_direction;
  uint16_t color_loop_time;
  uint16_t color_loop_start_enhanced_hue;
  uint16_t color_loop_stored_enhanced_hue;
  uint16_t color_capabilities;
  uint16_t color_temp_physical_min_mireds;
  uint16_t color_temp_physical_max_mireds;
  uint16_t couple_color_temp_to_level_min_mireds;
  uint16_t start_up_color_temperature_mireds;
} uic_mqtt_dotdot_color_control_state_t;

typedef struct {
  bool current_hue;
  bool current_saturation;
  bool remaining_time;
  bool currentx;
  bool currenty;
  bool drift_compensation;
  bool compensation_text;
  bool color_temperature_mireds;
  bool color_mode;
  bool options;
  bool number_of_primaries;
  bool primary1x;
  bool primary1y;
  bool primary1_intensity;
  bool primary2x;
  bool primary2y;
  bool primary2_intensity;
  bool primary3x;
  bool primary3y;
  bool primary3_intensity;
  bool primary4x;
  bool primary4y;
  bool primary4_intensity;
  bool primary5x;
  bool primary5y;
  bool primary5_intensity;
  bool primary6x;
  bool primary6y;
  bool primary6_intensity;
  bool white_pointx;
  bool white_pointy;
  bool color_pointrx;
  bool color_pointry;
  bool color_pointr_intensity;
  bool color_pointgx;
  bool color_pointgy;
  bool color_pointg_intensity;
  bool color_pointbx;
  bool color_pointby;
  bool color_pointb_intensity;
  bool enhanced_current_hue;
  bool enhanced_color_mode;
  bool color_loop_active;
  bool color_loop_direction;
  bool color_loop_time;
  bool color_loop_start_enhanced_hue;
  bool color_loop_stored_enhanced_hue;
  bool color_capabilities;
  bool color_temp_physical_min_mireds;
  bool color_temp_physical_max_mireds;
  bool couple_color_temp_to_level_min_mireds;
  bool start_up_color_temperature_mireds;
} uic_mqtt_dotdot_color_control_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_color_control_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_color_control_state_t,
    uic_mqtt_dotdot_color_control_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_color_control_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_color_control_updated_state_t
);


/**
 * @brief Command fields for ColorControl/MoveToHue
 */
typedef struct {
  uint8_t hue;

  CCDirection direction;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_to_hue_fields_t;

/**
 * @brief Command fields for ColorControl/MoveHue
 */
typedef struct {
  CCMoveMode move_mode;

  uint8_t rate;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_hue_fields_t;

/**
 * @brief Command fields for ColorControl/StepHue
 */
typedef struct {
  CCStepMode step_mode;

  uint8_t step_size;

  uint8_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_step_hue_fields_t;

/**
 * @brief Command fields for ColorControl/MoveToSaturation
 */
typedef struct {
  uint8_t saturation;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_to_saturation_fields_t;

/**
 * @brief Command fields for ColorControl/MoveSaturation
 */
typedef struct {
  CCMoveMode move_mode;

  uint8_t rate;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_saturation_fields_t;

/**
 * @brief Command fields for ColorControl/StepSaturation
 */
typedef struct {
  CCStepMode step_mode;

  uint8_t step_size;

  uint8_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_step_saturation_fields_t;

/**
 * @brief Command fields for ColorControl/MoveToHueAndSaturation
 */
typedef struct {
  uint8_t hue;

  uint8_t saturation;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_to_hue_and_saturation_fields_t;

/**
 * @brief Command fields for ColorControl/MoveToColor
 */
typedef struct {
  uint16_t colorx;

  uint16_t colory;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_to_color_fields_t;

/**
 * @brief Command fields for ColorControl/MoveColor
 */
typedef struct {
  int16_t ratex;

  int16_t ratey;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_color_fields_t;

/**
 * @brief Command fields for ColorControl/StepColor
 */
typedef struct {
  int16_t stepx;

  int16_t stepy;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_step_color_fields_t;

/**
 * @brief Command fields for ColorControl/MoveToColorTemperature
 */
typedef struct {
  uint16_t color_temperature_mireds;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_to_color_temperature_fields_t;

/**
 * @brief Command fields for ColorControl/EnhancedMoveToHue
 */
typedef struct {
  uint16_t enhanced_hue;

  CCDirection direction;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_enhanced_move_to_hue_fields_t;

/**
 * @brief Command fields for ColorControl/EnhancedMoveHue
 */
typedef struct {
  CCMoveMode move_mode;

  uint16_t rate;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_enhanced_move_hue_fields_t;

/**
 * @brief Command fields for ColorControl/EnhancedStepHue
 */
typedef struct {
  CCStepMode step_mode;

  uint16_t step_size;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_enhanced_step_hue_fields_t;

/**
 * @brief Command fields for ColorControl/EnhancedMoveToHueAndSaturation
 */
typedef struct {
  uint16_t enhanced_hue;

  uint8_t saturation;

  uint16_t transition_time;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_enhanced_move_to_hue_and_saturation_fields_t;

/**
 * @brief Command fields for ColorControl/ColorLoopSet
 */
typedef struct {
  uint8_t update_flags;

  ColorLoopSetAction action;

  CCColorLoopDirection direction;

  uint16_t time;

  uint16_t start_hue;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_color_loop_set_fields_t;

/**
 * @brief Command fields for ColorControl/StopMoveStep
 */
typedef struct {
  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_stop_move_step_fields_t;

/**
 * @brief Command fields for ColorControl/MoveColorTemperature
 */
typedef struct {
  CCMoveMode move_mode;

  uint16_t rate;

  CCMinMiredsField color_temperature_minimum_mireds;

  CCMaxMiredsField color_temperature_maximum_mireds;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_move_color_temperature_fields_t;

/**
 * @brief Command fields for ColorControl/StepColorTemperature
 */
typedef struct {
  CCStepMode step_mode;

  uint16_t step_size;

  uint16_t transition_time;

  CCMinMiredsField color_temperature_minimum_mireds;

  CCMaxMiredsField color_temperature_maximum_mireds;

  uint8_t options_mask;

  uint8_t options_override;
} uic_mqtt_dotdot_color_control_command_step_color_temperature_fields_t;


/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_to_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_hue_callback_set(const uic_mqtt_dotdot_color_control_move_to_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_to_hue is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_hue_callback_unset(const uic_mqtt_dotdot_color_control_move_to_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_to_hue is received.
 */
void uic_mqtt_dotdot_color_control_move_to_hue_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_hue_callback_set(const uic_mqtt_dotdot_color_control_move_to_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_hue is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_hue_callback_unset(const uic_mqtt_dotdot_color_control_move_to_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_to_hue is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_to_hue_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_hue_callback_set(const uic_mqtt_dotdot_color_control_move_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_hue is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_hue_callback_unset(const uic_mqtt_dotdot_color_control_move_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_hue is received.
 */
void uic_mqtt_dotdot_color_control_move_hue_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_hue_callback_set(const uic_mqtt_dotdot_color_control_move_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_hue is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_hue_callback_unset(const uic_mqtt_dotdot_color_control_move_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_hue is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_hue_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/step_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_step_hue_callback_set(const uic_mqtt_dotdot_color_control_step_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/step_hue is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_step_hue_callback_unset(const uic_mqtt_dotdot_color_control_step_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/step_hue is received.
 */
void uic_mqtt_dotdot_color_control_step_hue_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/step_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_hue_callback_set(const uic_mqtt_dotdot_color_control_step_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/step_hue is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_hue_callback_unset(const uic_mqtt_dotdot_color_control_step_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/step_hue is received.
 */
void uic_mqtt_dotdot_color_control_generated_step_hue_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_to_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_saturation_callback_set(const uic_mqtt_dotdot_color_control_move_to_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_to_saturation is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_saturation_callback_unset(const uic_mqtt_dotdot_color_control_move_to_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_to_saturation is received.
 */
void uic_mqtt_dotdot_color_control_move_to_saturation_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_saturation_callback_set(const uic_mqtt_dotdot_color_control_move_to_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_saturation is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_saturation_callback_unset(const uic_mqtt_dotdot_color_control_move_to_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_to_saturation is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_to_saturation_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_saturation_callback_set(const uic_mqtt_dotdot_color_control_move_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_saturation is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_saturation_callback_unset(const uic_mqtt_dotdot_color_control_move_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_saturation is received.
 */
void uic_mqtt_dotdot_color_control_move_saturation_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_saturation_callback_set(const uic_mqtt_dotdot_color_control_move_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_saturation is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_saturation_callback_unset(const uic_mqtt_dotdot_color_control_move_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_saturation is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_saturation_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/step_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_step_saturation_callback_set(const uic_mqtt_dotdot_color_control_step_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/step_saturation is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_step_saturation_callback_unset(const uic_mqtt_dotdot_color_control_step_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/step_saturation is received.
 */
void uic_mqtt_dotdot_color_control_step_saturation_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/step_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_saturation_callback_set(const uic_mqtt_dotdot_color_control_step_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/step_saturation is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_saturation_callback_unset(const uic_mqtt_dotdot_color_control_step_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/step_saturation is received.
 */
void uic_mqtt_dotdot_color_control_generated_step_saturation_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_to_hue_and_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_set(const uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_to_hue_and_saturation is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_unset(const uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_to_hue_and_saturation is received.
 */
void uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_hue_and_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_hue_and_saturation_callback_set(const uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_hue_and_saturation is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_hue_and_saturation_callback_unset(const uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_to_hue_and_saturation is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_to_hue_and_saturation_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_to_color is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_color_callback_set(const uic_mqtt_dotdot_color_control_move_to_color_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_to_color is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_color_callback_unset(const uic_mqtt_dotdot_color_control_move_to_color_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_to_color is received.
 */
void uic_mqtt_dotdot_color_control_move_to_color_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_color is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_color_callback_set(const uic_mqtt_dotdot_color_control_move_to_color_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_color is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_color_callback_unset(const uic_mqtt_dotdot_color_control_move_to_color_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_to_color is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_to_color_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_color is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_color_callback_set(const uic_mqtt_dotdot_color_control_move_color_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_color is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_color_callback_unset(const uic_mqtt_dotdot_color_control_move_color_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_color is received.
 */
void uic_mqtt_dotdot_color_control_move_color_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_color is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_color_callback_set(const uic_mqtt_dotdot_color_control_move_color_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_color is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_color_callback_unset(const uic_mqtt_dotdot_color_control_move_color_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_color is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_color_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/step_color is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_step_color_callback_set(const uic_mqtt_dotdot_color_control_step_color_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/step_color is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_step_color_callback_unset(const uic_mqtt_dotdot_color_control_step_color_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/step_color is received.
 */
void uic_mqtt_dotdot_color_control_step_color_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/step_color is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_color_callback_set(const uic_mqtt_dotdot_color_control_step_color_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/step_color is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_color_callback_unset(const uic_mqtt_dotdot_color_control_step_color_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/step_color is received.
 */
void uic_mqtt_dotdot_color_control_generated_step_color_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_to_color_temperature is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_set(const uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_to_color_temperature is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_unset(const uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_to_color_temperature is received.
 */
void uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_color_temperature is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_color_temperature_callback_set(const uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_to_color_temperature is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_to_color_temperature_callback_unset(const uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_to_color_temperature is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_to_color_temperature_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/enhanced_move_to_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_set(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/enhanced_move_to_hue is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/enhanced_move_to_hue is received.
 */
void uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_move_to_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_to_hue_callback_set(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_move_to_hue is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_to_hue_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/enhanced_move_to_hue is received.
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_to_hue_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/enhanced_move_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_set(const uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/enhanced_move_hue is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/enhanced_move_hue is received.
 */
void uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_move_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_hue_callback_set(const uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_move_hue is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_hue_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/enhanced_move_hue is received.
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_hue_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/enhanced_step_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_set(const uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/enhanced_step_hue is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/enhanced_step_hue is received.
 */
void uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_step_hue is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_step_hue_callback_set(const uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_step_hue is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_step_hue_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/enhanced_step_hue is received.
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_step_hue_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/enhanced_move_to_hue_and_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_set(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/enhanced_move_to_hue_and_saturation is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/enhanced_move_to_hue_and_saturation is received.
 */
void uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_move_to_hue_and_saturation is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_to_hue_and_saturation_callback_set(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/enhanced_move_to_hue_and_saturation is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_to_hue_and_saturation_callback_unset(const uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/enhanced_move_to_hue_and_saturation is received.
 */
void uic_mqtt_dotdot_color_control_generated_enhanced_move_to_hue_and_saturation_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/color_loop_set is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_color_loop_set_callback_set(const uic_mqtt_dotdot_color_control_color_loop_set_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/color_loop_set is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_color_loop_set_callback_unset(const uic_mqtt_dotdot_color_control_color_loop_set_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/color_loop_set is received.
 */
void uic_mqtt_dotdot_color_control_color_loop_set_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/color_loop_set is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_color_loop_set_callback_set(const uic_mqtt_dotdot_color_control_color_loop_set_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/color_loop_set is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_color_loop_set_callback_unset(const uic_mqtt_dotdot_color_control_color_loop_set_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/color_loop_set is received.
 */
void uic_mqtt_dotdot_color_control_generated_color_loop_set_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/stop_move_step is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_stop_move_step_callback_set(const uic_mqtt_dotdot_color_control_stop_move_step_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/stop_move_step is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_stop_move_step_callback_unset(const uic_mqtt_dotdot_color_control_stop_move_step_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/stop_move_step is received.
 */
void uic_mqtt_dotdot_color_control_stop_move_step_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/stop_move_step is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_stop_move_step_callback_set(const uic_mqtt_dotdot_color_control_stop_move_step_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/stop_move_step is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_stop_move_step_callback_unset(const uic_mqtt_dotdot_color_control_stop_move_step_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/stop_move_step is received.
 */
void uic_mqtt_dotdot_color_control_generated_stop_move_step_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/move_color_temperature is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_move_color_temperature_callback_set(const uic_mqtt_dotdot_color_control_move_color_temperature_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/move_color_temperature is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_move_color_temperature_callback_unset(const uic_mqtt_dotdot_color_control_move_color_temperature_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/move_color_temperature is received.
 */
void uic_mqtt_dotdot_color_control_move_color_temperature_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/move_color_temperature is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_color_temperature_callback_set(const uic_mqtt_dotdot_color_control_move_color_temperature_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/move_color_temperature is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_move_color_temperature_callback_unset(const uic_mqtt_dotdot_color_control_move_color_temperature_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/move_color_temperature is received.
 */
void uic_mqtt_dotdot_color_control_generated_move_color_temperature_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ColorControl/Commands/step_color_temperature is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_step_color_temperature_callback_set(const uic_mqtt_dotdot_color_control_step_color_temperature_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ColorControl/Commands/step_color_temperature is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_step_color_temperature_callback_unset(const uic_mqtt_dotdot_color_control_step_color_temperature_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ColorControl/Commands/step_color_temperature is received.
 */
void uic_mqtt_dotdot_color_control_step_color_temperature_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ColorControl/GeneratedCommands/step_color_temperature is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_color_temperature_callback_set(const uic_mqtt_dotdot_color_control_step_color_temperature_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ColorControl/GeneratedCommands/step_color_temperature is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_color_control_generated_step_color_temperature_callback_unset(const uic_mqtt_dotdot_color_control_step_color_temperature_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ColorControl/GeneratedCommands/step_color_temperature is received.
 */
void uic_mqtt_dotdot_color_control_generated_step_color_temperature_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/color_control/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_color_control_write_attributes_callback(
  const uic_mqtt_dotdot_color_control_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/color_control/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_color_control_write_attributes_callback(
  const uic_mqtt_dotdot_color_control_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/color_control/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_color_control_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/color_control/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_color_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_color_control_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/color_control/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_color_control_force_read_attributes_callback(
  const uic_mqtt_dotdot_color_control_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/color_control/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_color_control_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ColorControl/Attributes/CurrentHue
 *
 * @param base_topic    topic prefix to publish, /current_hue
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_current_hue_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/CurrentHue
 *
 * @param base_topic    topic prefix to publish, /current_hue
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_current_hue_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/CurrentSaturation
 *
 * @param base_topic    topic prefix to publish, /current_saturation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_current_saturation_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/CurrentSaturation
 *
 * @param base_topic    topic prefix to publish, /current_saturation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_current_saturation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/RemainingTime
 *
 * @param base_topic    topic prefix to publish, /remaining_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_remaining_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/RemainingTime
 *
 * @param base_topic    topic prefix to publish, /remaining_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_remaining_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/CurrentX
 *
 * @param base_topic    topic prefix to publish, /currentx
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_currentx_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/CurrentX
 *
 * @param base_topic    topic prefix to publish, /currentx
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_currentx_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/CurrentY
 *
 * @param base_topic    topic prefix to publish, /currenty
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_currenty_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/CurrentY
 *
 * @param base_topic    topic prefix to publish, /currenty
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_currenty_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/DriftCompensation
 *
 * @param base_topic    topic prefix to publish, /drift_compensation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_drift_compensation_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/DriftCompensation
 *
 * @param base_topic    topic prefix to publish, /drift_compensation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_drift_compensation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/CompensationText
 *
 * @param base_topic    topic prefix to publish, /compensation_text
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_compensation_text_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/CompensationText
 *
 * @param base_topic    topic prefix to publish, /compensation_text
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_compensation_text_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorTemperatureMireds
 *
 * @param base_topic    topic prefix to publish, /color_temperature_mireds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_temperature_mireds_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorTemperatureMireds
 *
 * @param base_topic    topic prefix to publish, /color_temperature_mireds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_temperature_mireds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorMode
 *
 * @param base_topic    topic prefix to publish, /color_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorMode
 *
 * @param base_topic    topic prefix to publish, /color_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Options
 *
 * @param base_topic    topic prefix to publish, /options
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_options_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Options
 *
 * @param base_topic    topic prefix to publish, /options
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_options_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/NumberOfPrimaries
 *
 * @param base_topic    topic prefix to publish, /number_of_primaries
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_number_of_primaries_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/NumberOfPrimaries
 *
 * @param base_topic    topic prefix to publish, /number_of_primaries
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_number_of_primaries_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary1X
 *
 * @param base_topic    topic prefix to publish, /primary1x
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary1x_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary1X
 *
 * @param base_topic    topic prefix to publish, /primary1x
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary1x_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary1Y
 *
 * @param base_topic    topic prefix to publish, /primary1y
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary1y_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary1Y
 *
 * @param base_topic    topic prefix to publish, /primary1y
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary1y_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary1Intensity
 *
 * @param base_topic    topic prefix to publish, /primary1_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary1_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary1Intensity
 *
 * @param base_topic    topic prefix to publish, /primary1_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary1_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary2X
 *
 * @param base_topic    topic prefix to publish, /primary2x
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary2x_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary2X
 *
 * @param base_topic    topic prefix to publish, /primary2x
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary2x_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary2Y
 *
 * @param base_topic    topic prefix to publish, /primary2y
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary2y_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary2Y
 *
 * @param base_topic    topic prefix to publish, /primary2y
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary2y_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary2Intensity
 *
 * @param base_topic    topic prefix to publish, /primary2_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary2_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary2Intensity
 *
 * @param base_topic    topic prefix to publish, /primary2_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary2_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary3X
 *
 * @param base_topic    topic prefix to publish, /primary3x
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary3x_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary3X
 *
 * @param base_topic    topic prefix to publish, /primary3x
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary3x_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary3Y
 *
 * @param base_topic    topic prefix to publish, /primary3y
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary3y_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary3Y
 *
 * @param base_topic    topic prefix to publish, /primary3y
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary3y_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary3Intensity
 *
 * @param base_topic    topic prefix to publish, /primary3_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary3_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary3Intensity
 *
 * @param base_topic    topic prefix to publish, /primary3_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary3_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary4X
 *
 * @param base_topic    topic prefix to publish, /primary4x
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary4x_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary4X
 *
 * @param base_topic    topic prefix to publish, /primary4x
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary4x_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary4Y
 *
 * @param base_topic    topic prefix to publish, /primary4y
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary4y_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary4Y
 *
 * @param base_topic    topic prefix to publish, /primary4y
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary4y_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary4Intensity
 *
 * @param base_topic    topic prefix to publish, /primary4_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary4_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary4Intensity
 *
 * @param base_topic    topic prefix to publish, /primary4_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary4_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary5X
 *
 * @param base_topic    topic prefix to publish, /primary5x
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary5x_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary5X
 *
 * @param base_topic    topic prefix to publish, /primary5x
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary5x_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary5Y
 *
 * @param base_topic    topic prefix to publish, /primary5y
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary5y_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary5Y
 *
 * @param base_topic    topic prefix to publish, /primary5y
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary5y_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary5Intensity
 *
 * @param base_topic    topic prefix to publish, /primary5_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary5_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary5Intensity
 *
 * @param base_topic    topic prefix to publish, /primary5_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary5_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary6X
 *
 * @param base_topic    topic prefix to publish, /primary6x
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary6x_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary6X
 *
 * @param base_topic    topic prefix to publish, /primary6x
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary6x_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary6Y
 *
 * @param base_topic    topic prefix to publish, /primary6y
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary6y_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary6Y
 *
 * @param base_topic    topic prefix to publish, /primary6y
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary6y_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/Primary6Intensity
 *
 * @param base_topic    topic prefix to publish, /primary6_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary6_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/Primary6Intensity
 *
 * @param base_topic    topic prefix to publish, /primary6_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_primary6_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/WhitePointX
 *
 * @param base_topic    topic prefix to publish, /white_pointx
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_white_pointx_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/WhitePointX
 *
 * @param base_topic    topic prefix to publish, /white_pointx
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_white_pointx_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/WhitePointY
 *
 * @param base_topic    topic prefix to publish, /white_pointy
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_white_pointy_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/WhitePointY
 *
 * @param base_topic    topic prefix to publish, /white_pointy
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_white_pointy_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointRX
 *
 * @param base_topic    topic prefix to publish, /color_pointrx
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointrx_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointRX
 *
 * @param base_topic    topic prefix to publish, /color_pointrx
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointrx_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointRY
 *
 * @param base_topic    topic prefix to publish, /color_pointry
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointry_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointRY
 *
 * @param base_topic    topic prefix to publish, /color_pointry
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointry_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointRIntensity
 *
 * @param base_topic    topic prefix to publish, /color_pointr_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointr_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointRIntensity
 *
 * @param base_topic    topic prefix to publish, /color_pointr_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointr_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointGX
 *
 * @param base_topic    topic prefix to publish, /color_pointgx
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointgx_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointGX
 *
 * @param base_topic    topic prefix to publish, /color_pointgx
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointgx_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointGY
 *
 * @param base_topic    topic prefix to publish, /color_pointgy
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointgy_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointGY
 *
 * @param base_topic    topic prefix to publish, /color_pointgy
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointgy_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointGIntensity
 *
 * @param base_topic    topic prefix to publish, /color_pointg_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointg_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointGIntensity
 *
 * @param base_topic    topic prefix to publish, /color_pointg_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointg_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointBX
 *
 * @param base_topic    topic prefix to publish, /color_pointbx
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointbx_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointBX
 *
 * @param base_topic    topic prefix to publish, /color_pointbx
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointbx_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointBY
 *
 * @param base_topic    topic prefix to publish, /color_pointby
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointby_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointBY
 *
 * @param base_topic    topic prefix to publish, /color_pointby
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointby_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorPointBIntensity
 *
 * @param base_topic    topic prefix to publish, /color_pointb_intensity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointb_intensity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorPointBIntensity
 *
 * @param base_topic    topic prefix to publish, /color_pointb_intensity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_pointb_intensity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/EnhancedCurrentHue
 *
 * @param base_topic    topic prefix to publish, /enhanced_current_hue
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_enhanced_current_hue_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/EnhancedCurrentHue
 *
 * @param base_topic    topic prefix to publish, /enhanced_current_hue
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_enhanced_current_hue_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/EnhancedColorMode
 *
 * @param base_topic    topic prefix to publish, /enhanced_color_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_enhanced_color_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/EnhancedColorMode
 *
 * @param base_topic    topic prefix to publish, /enhanced_color_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_enhanced_color_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorLoopActive
 *
 * @param base_topic    topic prefix to publish, /color_loop_active
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_active_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorLoopActive
 *
 * @param base_topic    topic prefix to publish, /color_loop_active
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_active_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorLoopDirection
 *
 * @param base_topic    topic prefix to publish, /color_loop_direction
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_direction_publish(
  const char *base_topic,
  CCColorLoopDirection value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorLoopDirection
 *
 * @param base_topic    topic prefix to publish, /color_loop_direction
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_direction_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorLoopTime
 *
 * @param base_topic    topic prefix to publish, /color_loop_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorLoopTime
 *
 * @param base_topic    topic prefix to publish, /color_loop_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorLoopStartEnhancedHue
 *
 * @param base_topic    topic prefix to publish, /color_loop_start_enhanced_hue
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorLoopStartEnhancedHue
 *
 * @param base_topic    topic prefix to publish, /color_loop_start_enhanced_hue
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_start_enhanced_hue_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorLoopStoredEnhancedHue
 *
 * @param base_topic    topic prefix to publish, /color_loop_stored_enhanced_hue
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorLoopStoredEnhancedHue
 *
 * @param base_topic    topic prefix to publish, /color_loop_stored_enhanced_hue
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_loop_stored_enhanced_hue_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorCapabilities
 *
 * @param base_topic    topic prefix to publish, /color_capabilities
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_capabilities_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorCapabilities
 *
 * @param base_topic    topic prefix to publish, /color_capabilities
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_capabilities_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorTempPhysicalMinMireds
 *
 * @param base_topic    topic prefix to publish, /color_temp_physical_min_mireds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorTempPhysicalMinMireds
 *
 * @param base_topic    topic prefix to publish, /color_temp_physical_min_mireds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_min_mireds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/ColorTempPhysicalMaxMireds
 *
 * @param base_topic    topic prefix to publish, /color_temp_physical_max_mireds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/ColorTempPhysicalMaxMireds
 *
 * @param base_topic    topic prefix to publish, /color_temp_physical_max_mireds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_color_temp_physical_max_mireds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/CoupleColorTempToLevelMinMireds
 *
 * @param base_topic    topic prefix to publish, /couple_color_temp_to_level_min_mireds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/CoupleColorTempToLevelMinMireds
 *
 * @param base_topic    topic prefix to publish, /couple_color_temp_to_level_min_mireds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_couple_color_temp_to_level_min_mireds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ColorControl/Attributes/StartUpColorTemperatureMireds
 *
 * @param base_topic    topic prefix to publish, /start_up_color_temperature_mireds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ColorControl/Attributes/StartUpColorTemperatureMireds
 *
 * @param base_topic    topic prefix to publish, /start_up_color_temperature_mireds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_color_control_start_up_color_temperature_mireds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ColorControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ColorControl/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_color_control_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ColorControl/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ColorControl/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_color_control_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ColorControl Cluster
 *
 * This function will iterate over all Commands in the ColorControl Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_color_control_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ColorControl Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_color_control_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the ballast_configuration cluster

typedef struct {
  uint8_t physical_min_level;
  uint8_t physical_max_level;
  uint8_t ballast_status;
  uint8_t min_level;
  uint8_t max_level;
  uint8_t power_on_level;
  uint16_t power_on_fade_time;
  uint8_t intrinsic_ballast_factor;
  uint8_t ballast_factor_adjustment;
  uint8_t lamp_quantity;
  const char* lamp_type;
  const char* lamp_manufacturer;
  uint32_t lamp_rated_hours;
  uint32_t lamp_burn_hours;
  uint8_t lamp_alarm_mode;
  uint32_t lamp_burn_hours_trip_point;
} uic_mqtt_dotdot_ballast_configuration_state_t;

typedef struct {
  bool physical_min_level;
  bool physical_max_level;
  bool ballast_status;
  bool min_level;
  bool max_level;
  bool power_on_level;
  bool power_on_fade_time;
  bool intrinsic_ballast_factor;
  bool ballast_factor_adjustment;
  bool lamp_quantity;
  bool lamp_type;
  bool lamp_manufacturer;
  bool lamp_rated_hours;
  bool lamp_burn_hours;
  bool lamp_alarm_mode;
  bool lamp_burn_hours_trip_point;
} uic_mqtt_dotdot_ballast_configuration_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_ballast_configuration_state_t,
    uic_mqtt_dotdot_ballast_configuration_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_ballast_configuration_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/ballast_configuration/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_ballast_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_ballast_configuration_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/ballast_configuration/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_ballast_configuration_write_attributes_callback(
  const uic_mqtt_dotdot_ballast_configuration_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/ballast_configuration/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_ballast_configuration_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/ballast_configuration/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_ballast_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_ballast_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/ballast_configuration/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_ballast_configuration_force_read_attributes_callback(
  const uic_mqtt_dotdot_ballast_configuration_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/ballast_configuration/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_ballast_configuration_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/PhysicalMinLevel
 *
 * @param base_topic    topic prefix to publish, /physical_min_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_min_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/PhysicalMinLevel
 *
 * @param base_topic    topic prefix to publish, /physical_min_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_min_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/PhysicalMaxLevel
 *
 * @param base_topic    topic prefix to publish, /physical_max_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_max_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/PhysicalMaxLevel
 *
 * @param base_topic    topic prefix to publish, /physical_max_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_physical_max_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/BallastStatus
 *
 * @param base_topic    topic prefix to publish, /ballast_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_status_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/BallastStatus
 *
 * @param base_topic    topic prefix to publish, /ballast_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/MinLevel
 *
 * @param base_topic    topic prefix to publish, /min_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_min_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/MinLevel
 *
 * @param base_topic    topic prefix to publish, /min_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_min_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/MaxLevel
 *
 * @param base_topic    topic prefix to publish, /max_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_max_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/MaxLevel
 *
 * @param base_topic    topic prefix to publish, /max_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_max_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/PowerOnLevel
 *
 * @param base_topic    topic prefix to publish, /power_on_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/PowerOnLevel
 *
 * @param base_topic    topic prefix to publish, /power_on_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/PowerOnFadeTime
 *
 * @param base_topic    topic prefix to publish, /power_on_fade_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/PowerOnFadeTime
 *
 * @param base_topic    topic prefix to publish, /power_on_fade_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_power_on_fade_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/IntrinsicBallastFactor
 *
 * @param base_topic    topic prefix to publish, /intrinsic_ballast_factor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/IntrinsicBallastFactor
 *
 * @param base_topic    topic prefix to publish, /intrinsic_ballast_factor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_intrinsic_ballast_factor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/BallastFactorAdjustment
 *
 * @param base_topic    topic prefix to publish, /ballast_factor_adjustment
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/BallastFactorAdjustment
 *
 * @param base_topic    topic prefix to publish, /ballast_factor_adjustment
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_ballast_factor_adjustment_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampQuantity
 *
 * @param base_topic    topic prefix to publish, /lamp_quantity
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_quantity_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampQuantity
 *
 * @param base_topic    topic prefix to publish, /lamp_quantity
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_quantity_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampType
 *
 * @param base_topic    topic prefix to publish, /lamp_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_type_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampType
 *
 * @param base_topic    topic prefix to publish, /lamp_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampManufacturer
 *
 * @param base_topic    topic prefix to publish, /lamp_manufacturer
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_manufacturer_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampManufacturer
 *
 * @param base_topic    topic prefix to publish, /lamp_manufacturer
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_manufacturer_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampRatedHours
 *
 * @param base_topic    topic prefix to publish, /lamp_rated_hours
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampRatedHours
 *
 * @param base_topic    topic prefix to publish, /lamp_rated_hours
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_rated_hours_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampBurnHours
 *
 * @param base_topic    topic prefix to publish, /lamp_burn_hours
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampBurnHours
 *
 * @param base_topic    topic prefix to publish, /lamp_burn_hours
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampAlarmMode
 *
 * @param base_topic    topic prefix to publish, /lamp_alarm_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_alarm_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampAlarmMode
 *
 * @param base_topic    topic prefix to publish, /lamp_alarm_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_alarm_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; BallastConfiguration/Attributes/LampBurnHoursTripPoint
 *
 * @param base_topic    topic prefix to publish, /lamp_burn_hours_trip_point
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; BallastConfiguration/Attributes/LampBurnHoursTripPoint
 *
 * @param base_topic    topic prefix to publish, /lamp_burn_hours_trip_point
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_lamp_burn_hours_trip_point_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the BallastConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /BallastConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_ballast_configuration_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to BallastConfiguration/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /BallastConfiguration/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_ballast_configuration_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the BallastConfiguration Cluster
 *
 * This function will iterate over all Commands in the BallastConfiguration Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_ballast_configuration_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the BallastConfiguration Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_ballast_configuration_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the illuminance_measurement cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
  uint8_t light_sensor_type;
} uic_mqtt_dotdot_illuminance_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
  bool light_sensor_type;
} uic_mqtt_dotdot_illuminance_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_illuminance_measurement_state_t,
    uic_mqtt_dotdot_illuminance_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_illuminance_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/illuminance_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_illuminance_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_illuminance_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/illuminance_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_illuminance_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_illuminance_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/illuminance_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_illuminance_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/illuminance_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_illuminance_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_illuminance_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/illuminance_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_illuminance_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_illuminance_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/illuminance_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_illuminance_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; IlluminanceMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IlluminanceMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IlluminanceMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IlluminanceMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IlluminanceMeasurement/Attributes/LightSensorType
 *
 * @param base_topic    topic prefix to publish, /light_sensor_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_light_sensor_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceMeasurement/Attributes/LightSensorType
 *
 * @param base_topic    topic prefix to publish, /light_sensor_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_light_sensor_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the IlluminanceMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IlluminanceMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_illuminance_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to IlluminanceMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IlluminanceMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_illuminance_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the IlluminanceMeasurement Cluster
 *
 * This function will iterate over all Commands in the IlluminanceMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_illuminance_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the IlluminanceMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_illuminance_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the illuminance_level_sensing cluster

typedef struct {
  uint8_t level_status;
  uint8_t light_sensor_type;
  uint16_t illuminance_target_level;
} uic_mqtt_dotdot_illuminance_level_sensing_state_t;

typedef struct {
  bool level_status;
  bool light_sensor_type;
  bool illuminance_target_level;
} uic_mqtt_dotdot_illuminance_level_sensing_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_illuminance_level_sensing_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_illuminance_level_sensing_state_t,
    uic_mqtt_dotdot_illuminance_level_sensing_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_illuminance_level_sensing_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_illuminance_level_sensing_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/illuminance_level_sensing/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_illuminance_level_sensing_write_attributes_callback(
  const uic_mqtt_dotdot_illuminance_level_sensing_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/illuminance_level_sensing/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_illuminance_level_sensing_write_attributes_callback(
  const uic_mqtt_dotdot_illuminance_level_sensing_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/illuminance_level_sensing/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_illuminance_level_sensing_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/illuminance_level_sensing/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_illuminance_level_sensing_force_read_attributes_callback(
  const uic_mqtt_dotdot_illuminance_level_sensing_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/illuminance_level_sensing/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_illuminance_level_sensing_force_read_attributes_callback(
  const uic_mqtt_dotdot_illuminance_level_sensing_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/illuminance_level_sensing/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_illuminance_level_sensing_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; IlluminanceLevelSensing/Attributes/LevelStatus
 *
 * @param base_topic    topic prefix to publish, /level_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_level_status_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceLevelSensing/Attributes/LevelStatus
 *
 * @param base_topic    topic prefix to publish, /level_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_level_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IlluminanceLevelSensing/Attributes/LightSensorType
 *
 * @param base_topic    topic prefix to publish, /light_sensor_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_light_sensor_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceLevelSensing/Attributes/LightSensorType
 *
 * @param base_topic    topic prefix to publish, /light_sensor_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_light_sensor_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IlluminanceLevelSensing/Attributes/IlluminanceTargetLevel
 *
 * @param base_topic    topic prefix to publish, /illuminance_target_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IlluminanceLevelSensing/Attributes/IlluminanceTargetLevel
 *
 * @param base_topic    topic prefix to publish, /illuminance_target_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_illuminance_target_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the IlluminanceLevelSensing/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IlluminanceLevelSensing/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_illuminance_level_sensing_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to IlluminanceLevelSensing/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IlluminanceLevelSensing/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_illuminance_level_sensing_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the IlluminanceLevelSensing Cluster
 *
 * This function will iterate over all Commands in the IlluminanceLevelSensing Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_illuminance_level_sensing_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the IlluminanceLevelSensing Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_illuminance_level_sensing_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the temperature_measurement cluster

typedef struct {
  int16_t measured_value;
  int16_t min_measured_value;
  int16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_temperature_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_temperature_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_temperature_measurement_state_t,
    uic_mqtt_dotdot_temperature_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_temperature_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/temperature_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_temperature_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_temperature_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/temperature_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_temperature_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_temperature_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/temperature_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_temperature_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/temperature_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_temperature_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_temperature_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/temperature_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_temperature_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_temperature_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/temperature_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_temperature_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; TemperatureMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_measured_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; TemperatureMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; TemperatureMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_min_measured_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; TemperatureMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; TemperatureMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_max_measured_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; TemperatureMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; TemperatureMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; TemperatureMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the TemperatureMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /TemperatureMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_temperature_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to TemperatureMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /TemperatureMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_temperature_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the TemperatureMeasurement Cluster
 *
 * This function will iterate over all Commands in the TemperatureMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_temperature_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the TemperatureMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_temperature_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the pressure_measurement cluster

typedef struct {
  int16_t measured_value;
  int16_t min_measured_value;
  int16_t max_measured_value;
  uint16_t tolerance;
  int16_t scaled_value;
  int16_t min_scaled_value;
  int16_t max_scaled_value;
  uint16_t scaled_tolerance;
  int8_t scale;
} uic_mqtt_dotdot_pressure_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
  bool scaled_value;
  bool min_scaled_value;
  bool max_scaled_value;
  bool scaled_tolerance;
  bool scale;
} uic_mqtt_dotdot_pressure_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_pressure_measurement_state_t,
    uic_mqtt_dotdot_pressure_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_pressure_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/pressure_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_pressure_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_pressure_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/pressure_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_pressure_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_pressure_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/pressure_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_pressure_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/pressure_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_pressure_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_pressure_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/pressure_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_pressure_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_pressure_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/pressure_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_pressure_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_measured_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_min_measured_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_max_measured_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/ScaledValue
 *
 * @param base_topic    topic prefix to publish, /scaled_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_scaled_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/ScaledValue
 *
 * @param base_topic    topic prefix to publish, /scaled_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_scaled_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/MinScaledValue
 *
 * @param base_topic    topic prefix to publish, /min_scaled_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_min_scaled_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/MinScaledValue
 *
 * @param base_topic    topic prefix to publish, /min_scaled_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_min_scaled_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/MaxScaledValue
 *
 * @param base_topic    topic prefix to publish, /max_scaled_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_max_scaled_value_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/MaxScaledValue
 *
 * @param base_topic    topic prefix to publish, /max_scaled_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_max_scaled_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/ScaledTolerance
 *
 * @param base_topic    topic prefix to publish, /scaled_tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/ScaledTolerance
 *
 * @param base_topic    topic prefix to publish, /scaled_tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_scaled_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PressureMeasurement/Attributes/Scale
 *
 * @param base_topic    topic prefix to publish, /scale
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_scale_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PressureMeasurement/Attributes/Scale
 *
 * @param base_topic    topic prefix to publish, /scale
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_scale_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the PressureMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PressureMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_pressure_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to PressureMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PressureMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_pressure_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the PressureMeasurement Cluster
 *
 * This function will iterate over all Commands in the PressureMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_pressure_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the PressureMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_pressure_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the flow_measurement cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_flow_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_flow_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_flow_measurement_state_t,
    uic_mqtt_dotdot_flow_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_flow_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/flow_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_flow_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_flow_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/flow_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_flow_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_flow_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/flow_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_flow_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/flow_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_flow_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_flow_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/flow_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_flow_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_flow_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/flow_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_flow_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; FlowMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; FlowMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; FlowMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; FlowMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; FlowMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; FlowMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; FlowMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; FlowMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the FlowMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /FlowMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_flow_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to FlowMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /FlowMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_flow_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the FlowMeasurement Cluster
 *
 * This function will iterate over all Commands in the FlowMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_flow_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the FlowMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_flow_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the relativity_humidity cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_relativity_humidity_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_relativity_humidity_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_relativity_humidity_state_t,
    uic_mqtt_dotdot_relativity_humidity_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_relativity_humidity_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/relativity_humidity/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_relativity_humidity_write_attributes_callback(
  const uic_mqtt_dotdot_relativity_humidity_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/relativity_humidity/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_relativity_humidity_write_attributes_callback(
  const uic_mqtt_dotdot_relativity_humidity_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/relativity_humidity/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_relativity_humidity_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/relativity_humidity/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_relativity_humidity_force_read_attributes_callback(
  const uic_mqtt_dotdot_relativity_humidity_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/relativity_humidity/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_relativity_humidity_force_read_attributes_callback(
  const uic_mqtt_dotdot_relativity_humidity_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/relativity_humidity/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_relativity_humidity_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; RelativityHumidity/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; RelativityHumidity/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; RelativityHumidity/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; RelativityHumidity/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; RelativityHumidity/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; RelativityHumidity/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; RelativityHumidity/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; RelativityHumidity/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the RelativityHumidity/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /RelativityHumidity/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_relativity_humidity_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to RelativityHumidity/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /RelativityHumidity/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_relativity_humidity_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the RelativityHumidity Cluster
 *
 * This function will iterate over all Commands in the RelativityHumidity Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_relativity_humidity_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the RelativityHumidity Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_relativity_humidity_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the occupancy_sensing cluster

typedef struct {
  uint8_t occupancy;
  uint8_t occupancy_sensor_type;
  uint8_t occupancy_sensor_type_bitmap;
  uint16_t pir_occupied_to_unoccupied_delay;
  uint16_t pir_unoccupied_to_occupied_delay;
  uint8_t pir_unoccupied_to_occupied_threshold;
  uint16_t ultrasonic_occupied_to_unoccupied_delay;
  uint16_t ultrasonic_unoccupied_to_occupied_delay;
  uint8_t ultrasonic_unoccupied_to_occupied_threshold;
  uint16_t physical_contact_occupied_to_unoccupied_delay;
  uint16_t physical_contact_unoccupied_to_occupied_delay;
  uint8_t physical_contact_unoccupied_to_occupied_threshold;
} uic_mqtt_dotdot_occupancy_sensing_state_t;

typedef struct {
  bool occupancy;
  bool occupancy_sensor_type;
  bool occupancy_sensor_type_bitmap;
  bool pir_occupied_to_unoccupied_delay;
  bool pir_unoccupied_to_occupied_delay;
  bool pir_unoccupied_to_occupied_threshold;
  bool ultrasonic_occupied_to_unoccupied_delay;
  bool ultrasonic_unoccupied_to_occupied_delay;
  bool ultrasonic_unoccupied_to_occupied_threshold;
  bool physical_contact_occupied_to_unoccupied_delay;
  bool physical_contact_unoccupied_to_occupied_delay;
  bool physical_contact_unoccupied_to_occupied_threshold;
} uic_mqtt_dotdot_occupancy_sensing_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_occupancy_sensing_state_t,
    uic_mqtt_dotdot_occupancy_sensing_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_occupancy_sensing_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/occupancy_sensing/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_occupancy_sensing_write_attributes_callback(
  const uic_mqtt_dotdot_occupancy_sensing_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/occupancy_sensing/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_occupancy_sensing_write_attributes_callback(
  const uic_mqtt_dotdot_occupancy_sensing_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/occupancy_sensing/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_occupancy_sensing_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/occupancy_sensing/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_occupancy_sensing_force_read_attributes_callback(
  const uic_mqtt_dotdot_occupancy_sensing_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/occupancy_sensing/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_occupancy_sensing_force_read_attributes_callback(
  const uic_mqtt_dotdot_occupancy_sensing_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/occupancy_sensing/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_occupancy_sensing_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/Occupancy
 *
 * @param base_topic    topic prefix to publish, /occupancy
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/Occupancy
 *
 * @param base_topic    topic prefix to publish, /occupancy
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/OccupancySensorType
 *
 * @param base_topic    topic prefix to publish, /occupancy_sensor_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/OccupancySensorType
 *
 * @param base_topic    topic prefix to publish, /occupancy_sensor_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/OccupancySensorTypeBitmap
 *
 * @param base_topic    topic prefix to publish, /occupancy_sensor_type_bitmap
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/OccupancySensorTypeBitmap
 *
 * @param base_topic    topic prefix to publish, /occupancy_sensor_type_bitmap
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_occupancy_sensor_type_bitmap_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/PIROccupiedToUnoccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /pir_occupied_to_unoccupied_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/PIROccupiedToUnoccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /pir_occupied_to_unoccupied_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_occupied_to_unoccupied_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/PIRUnoccupiedToOccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /pir_unoccupied_to_occupied_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/PIRUnoccupiedToOccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /pir_unoccupied_to_occupied_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/PIRUnoccupiedToOccupiedThreshold
 *
 * @param base_topic    topic prefix to publish, /pir_unoccupied_to_occupied_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/PIRUnoccupiedToOccupiedThreshold
 *
 * @param base_topic    topic prefix to publish, /pir_unoccupied_to_occupied_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_pir_unoccupied_to_occupied_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/UltrasonicOccupiedToUnoccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /ultrasonic_occupied_to_unoccupied_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/UltrasonicOccupiedToUnoccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /ultrasonic_occupied_to_unoccupied_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/UltrasonicUnoccupiedToOccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /ultrasonic_unoccupied_to_occupied_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/UltrasonicUnoccupiedToOccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /ultrasonic_unoccupied_to_occupied_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/UltrasonicUnoccupiedToOccupiedThreshold
 *
 * @param base_topic    topic prefix to publish, /ultrasonic_unoccupied_to_occupied_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/UltrasonicUnoccupiedToOccupiedThreshold
 *
 * @param base_topic    topic prefix to publish, /ultrasonic_unoccupied_to_occupied_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/PhysicalContactOccupiedToUnoccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /physical_contact_occupied_to_unoccupied_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/PhysicalContactOccupiedToUnoccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /physical_contact_occupied_to_unoccupied_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/PhysicalContactUnoccupiedToOccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /physical_contact_unoccupied_to_occupied_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/PhysicalContactUnoccupiedToOccupiedDelay
 *
 * @param base_topic    topic prefix to publish, /physical_contact_unoccupied_to_occupied_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; OccupancySensing/Attributes/PhysicalContactUnoccupiedToOccupiedThreshold
 *
 * @param base_topic    topic prefix to publish, /physical_contact_unoccupied_to_occupied_threshold
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; OccupancySensing/Attributes/PhysicalContactUnoccupiedToOccupiedThreshold
 *
 * @param base_topic    topic prefix to publish, /physical_contact_unoccupied_to_occupied_threshold
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the OccupancySensing/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /OccupancySensing/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_occupancy_sensing_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to OccupancySensing/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /OccupancySensing/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_occupancy_sensing_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the OccupancySensing Cluster
 *
 * This function will iterate over all Commands in the OccupancySensing Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_occupancy_sensing_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the OccupancySensing Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_occupancy_sensing_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the soil_moisture cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_soil_moisture_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_soil_moisture_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_soil_moisture_state_t,
    uic_mqtt_dotdot_soil_moisture_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_soil_moisture_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/soil_moisture/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_soil_moisture_write_attributes_callback(
  const uic_mqtt_dotdot_soil_moisture_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/soil_moisture/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_soil_moisture_write_attributes_callback(
  const uic_mqtt_dotdot_soil_moisture_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/soil_moisture/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_soil_moisture_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/soil_moisture/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_soil_moisture_force_read_attributes_callback(
  const uic_mqtt_dotdot_soil_moisture_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/soil_moisture/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_soil_moisture_force_read_attributes_callback(
  const uic_mqtt_dotdot_soil_moisture_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/soil_moisture/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_soil_moisture_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; SoilMoisture/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SoilMoisture/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SoilMoisture/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SoilMoisture/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SoilMoisture/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SoilMoisture/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SoilMoisture/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SoilMoisture/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the SoilMoisture/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /SoilMoisture/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_soil_moisture_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to SoilMoisture/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /SoilMoisture/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_soil_moisture_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the SoilMoisture Cluster
 *
 * This function will iterate over all Commands in the SoilMoisture Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_soil_moisture_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the SoilMoisture Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_soil_moisture_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the ph_measurement cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_ph_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_ph_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_ph_measurement_state_t,
    uic_mqtt_dotdot_ph_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_ph_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/ph_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_ph_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_ph_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/ph_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_ph_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_ph_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/ph_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_ph_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/ph_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_ph_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_ph_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/ph_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_ph_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_ph_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/ph_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_ph_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; PhMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PhMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PhMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PhMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PhMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PhMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PhMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PhMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the PhMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PhMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_ph_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to PhMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PhMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_ph_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the PhMeasurement Cluster
 *
 * This function will iterate over all Commands in the PhMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_ph_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the PhMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_ph_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the electrical_conductivity_measurement cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_electrical_conductivity_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_electrical_conductivity_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_electrical_conductivity_measurement_state_t,
    uic_mqtt_dotdot_electrical_conductivity_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_electrical_conductivity_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/electrical_conductivity_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_electrical_conductivity_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_electrical_conductivity_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/electrical_conductivity_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_electrical_conductivity_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_electrical_conductivity_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/electrical_conductivity_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_electrical_conductivity_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/electrical_conductivity_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_electrical_conductivity_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_electrical_conductivity_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/electrical_conductivity_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_electrical_conductivity_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_electrical_conductivity_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/electrical_conductivity_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_electrical_conductivity_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ElectricalConductivityMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalConductivityMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalConductivityMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalConductivityMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalConductivityMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalConductivityMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalConductivityMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalConductivityMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ElectricalConductivityMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ElectricalConductivityMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ElectricalConductivityMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ElectricalConductivityMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ElectricalConductivityMeasurement Cluster
 *
 * This function will iterate over all Commands in the ElectricalConductivityMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ElectricalConductivityMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the wind_speed_measurement cluster

typedef struct {
  uint16_t measured_value;
  uint16_t min_measured_value;
  uint16_t max_measured_value;
  uint16_t tolerance;
} uic_mqtt_dotdot_wind_speed_measurement_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_wind_speed_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_wind_speed_measurement_state_t,
    uic_mqtt_dotdot_wind_speed_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_wind_speed_measurement_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/wind_speed_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_wind_speed_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_wind_speed_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/wind_speed_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_wind_speed_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_wind_speed_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/wind_speed_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_wind_speed_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/wind_speed_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_wind_speed_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_wind_speed_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/wind_speed_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_wind_speed_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_wind_speed_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/wind_speed_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_wind_speed_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; WindSpeedMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindSpeedMeasurement/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindSpeedMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindSpeedMeasurement/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindSpeedMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindSpeedMeasurement/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; WindSpeedMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_tolerance_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; WindSpeedMeasurement/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the WindSpeedMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /WindSpeedMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_wind_speed_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to WindSpeedMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /WindSpeedMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_wind_speed_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the WindSpeedMeasurement Cluster
 *
 * This function will iterate over all Commands in the WindSpeedMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_wind_speed_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the WindSpeedMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_wind_speed_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the carbon_monoxide cluster

typedef struct {
  float measured_value;
  float min_measured_value;
  float max_measured_value;
  float tolerance;
} uic_mqtt_dotdot_carbon_monoxide_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_carbon_monoxide_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_carbon_monoxide_state_t,
    uic_mqtt_dotdot_carbon_monoxide_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_carbon_monoxide_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/carbon_monoxide/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_carbon_monoxide_write_attributes_callback(
  const uic_mqtt_dotdot_carbon_monoxide_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/carbon_monoxide/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_carbon_monoxide_write_attributes_callback(
  const uic_mqtt_dotdot_carbon_monoxide_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/carbon_monoxide/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_carbon_monoxide_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/carbon_monoxide/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_carbon_monoxide_force_read_attributes_callback(
  const uic_mqtt_dotdot_carbon_monoxide_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/carbon_monoxide/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_carbon_monoxide_force_read_attributes_callback(
  const uic_mqtt_dotdot_carbon_monoxide_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/carbon_monoxide/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_carbon_monoxide_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; CarbonMonoxide/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonMonoxide/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; CarbonMonoxide/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_min_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonMonoxide/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; CarbonMonoxide/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_max_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonMonoxide/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; CarbonMonoxide/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_tolerance_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonMonoxide/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the CarbonMonoxide/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /CarbonMonoxide/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_carbon_monoxide_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to CarbonMonoxide/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /CarbonMonoxide/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_carbon_monoxide_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the CarbonMonoxide Cluster
 *
 * This function will iterate over all Commands in the CarbonMonoxide Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_carbon_monoxide_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the CarbonMonoxide Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_carbon_monoxide_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the carbon_dioxide cluster

typedef struct {
  float measured_value;
  float min_measured_value;
  float max_measured_value;
  float tolerance;
} uic_mqtt_dotdot_carbon_dioxide_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_carbon_dioxide_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_carbon_dioxide_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_carbon_dioxide_state_t,
    uic_mqtt_dotdot_carbon_dioxide_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_carbon_dioxide_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_carbon_dioxide_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/carbon_dioxide/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_carbon_dioxide_write_attributes_callback(
  const uic_mqtt_dotdot_carbon_dioxide_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/carbon_dioxide/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_carbon_dioxide_write_attributes_callback(
  const uic_mqtt_dotdot_carbon_dioxide_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/carbon_dioxide/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_carbon_dioxide_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/carbon_dioxide/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_carbon_dioxide_force_read_attributes_callback(
  const uic_mqtt_dotdot_carbon_dioxide_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/carbon_dioxide/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_carbon_dioxide_force_read_attributes_callback(
  const uic_mqtt_dotdot_carbon_dioxide_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/carbon_dioxide/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_carbon_dioxide_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; CarbonDioxide/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonDioxide/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; CarbonDioxide/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_min_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonDioxide/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; CarbonDioxide/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_max_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonDioxide/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; CarbonDioxide/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_tolerance_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; CarbonDioxide/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the CarbonDioxide/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /CarbonDioxide/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_carbon_dioxide_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to CarbonDioxide/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /CarbonDioxide/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_carbon_dioxide_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the CarbonDioxide Cluster
 *
 * This function will iterate over all Commands in the CarbonDioxide Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_carbon_dioxide_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the CarbonDioxide Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_carbon_dioxide_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the pm25 cluster

typedef struct {
  float measured_value;
  float min_measured_value;
  float max_measured_value;
  float tolerance;
} uic_mqtt_dotdot_pm25_state_t;

typedef struct {
  bool measured_value;
  bool min_measured_value;
  bool max_measured_value;
  bool tolerance;
} uic_mqtt_dotdot_pm25_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_pm25_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_pm25_state_t,
    uic_mqtt_dotdot_pm25_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_pm25_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_pm25_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/pm25/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_pm25_write_attributes_callback(
  const uic_mqtt_dotdot_pm25_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/pm25/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_pm25_write_attributes_callback(
  const uic_mqtt_dotdot_pm25_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/pm25/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_pm25_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/pm25/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_pm25_force_read_attributes_callback(
  const uic_mqtt_dotdot_pm25_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/pm25/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_pm25_force_read_attributes_callback(
  const uic_mqtt_dotdot_pm25_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/pm25/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_pm25_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; PM25/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PM25/Attributes/MeasuredValue
 *
 * @param base_topic    topic prefix to publish, /measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PM25/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_min_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PM25/Attributes/MinMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /min_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_min_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PM25/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_max_measured_value_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PM25/Attributes/MaxMeasuredValue
 *
 * @param base_topic    topic prefix to publish, /max_measured_value
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_max_measured_value_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; PM25/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_tolerance_publish(
  const char *base_topic,
  float value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; PM25/Attributes/Tolerance
 *
 * @param base_topic    topic prefix to publish, /tolerance
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_pm25_tolerance_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the PM25/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PM25/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_pm25_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to PM25/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /PM25/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_pm25_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the PM25 Cluster
 *
 * This function will iterate over all Commands in the PM25 Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_pm25_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the PM25 Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_pm25_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the ias_zone cluster
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    ZoneEnrollResponseEnrollResponseCode enroll_response_code,

    uint8_t zoneid

);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t zone_status,

    uint8_t extended_status,

    uint8_t zoneid,

    uint16_t delay

);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    IasZoneType zone_type,

    uint16_t manufacturer_code

);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t test_mode_duration,

    uint8_t current_zone_sensitivity_level

);

typedef struct {
  uint8_t zone_state;
  uint8_t zone_type;
  uint16_t zone_status;
  EUI64 iascie_address;
  uint8_t zoneid;
  uint8_t number_of_zone_sensitivity_levels_supported;
  uint8_t current_zone_sensitivity_level;
} uic_mqtt_dotdot_ias_zone_state_t;

typedef struct {
  bool zone_state;
  bool zone_type;
  bool zone_status;
  bool iascie_address;
  bool zoneid;
  bool number_of_zone_sensitivity_levels_supported;
  bool current_zone_sensitivity_level;
} uic_mqtt_dotdot_ias_zone_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_ias_zone_state_t,
    uic_mqtt_dotdot_ias_zone_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_ias_zone_updated_state_t
);


/**
 * @brief Command fields for IASZone/ZoneEnrollResponse
 */
typedef struct {
  ZoneEnrollResponseEnrollResponseCode enroll_response_code;

  uint8_t zoneid;
} uic_mqtt_dotdot_ias_zone_command_zone_enroll_response_fields_t;

/**
 * @brief Command fields for IASZone/ZoneStatusChangeNotification
 */
typedef struct {
  uint16_t zone_status;

  uint8_t extended_status;

  uint8_t zoneid;

  uint16_t delay;
} uic_mqtt_dotdot_ias_zone_command_zone_status_change_notification_fields_t;

/**
 * @brief Command fields for IASZone/ZoneEnrollRequest
 */
typedef struct {
  IasZoneType zone_type;

  uint16_t manufacturer_code;
} uic_mqtt_dotdot_ias_zone_command_zone_enroll_request_fields_t;

/**
 * @brief Command fields for IASZone/InitiateTestMode
 */
typedef struct {
  uint8_t test_mode_duration;

  uint8_t current_zone_sensitivity_level;
} uic_mqtt_dotdot_ias_zone_command_initiate_test_mode_fields_t;


/**
 * @brief Setup callback to be called when a
 * IASZone/Commands/zone_enroll_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_set(const uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASZone/Commands/zone_enroll_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_unset(const uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASZone/Commands/zone_enroll_response is received.
 */
void uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASZone/GeneratedCommands/zone_enroll_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_enroll_response_callback_set(const uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASZone/GeneratedCommands/zone_enroll_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_enroll_response_callback_unset(const uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASZone/GeneratedCommands/zone_enroll_response is received.
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_enroll_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * IASZone/Commands/zone_status_change_notification is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_set(const uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASZone/Commands/zone_status_change_notification is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_unset(const uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASZone/Commands/zone_status_change_notification is received.
 */
void uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASZone/GeneratedCommands/zone_status_change_notification is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_status_change_notification_callback_set(const uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASZone/GeneratedCommands/zone_status_change_notification is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_status_change_notification_callback_unset(const uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASZone/GeneratedCommands/zone_status_change_notification is received.
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_status_change_notification_callback_clear();
/**
 * @brief Setup callback to be called when a
 * IASZone/Commands/initiate_normal_operation_mode is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_set(const uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASZone/Commands/initiate_normal_operation_mode is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_unset(const uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASZone/Commands/initiate_normal_operation_mode is received.
 */
void uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASZone/GeneratedCommands/initiate_normal_operation_mode is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_initiate_normal_operation_mode_callback_set(const uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASZone/GeneratedCommands/initiate_normal_operation_mode is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_initiate_normal_operation_mode_callback_unset(const uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASZone/GeneratedCommands/initiate_normal_operation_mode is received.
 */
void uic_mqtt_dotdot_ias_zone_generated_initiate_normal_operation_mode_callback_clear();
/**
 * @brief Setup callback to be called when a
 * IASZone/Commands/zone_enroll_request is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_set(const uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASZone/Commands/zone_enroll_request is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_unset(const uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASZone/Commands/zone_enroll_request is received.
 */
void uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASZone/GeneratedCommands/zone_enroll_request is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_enroll_request_callback_set(const uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASZone/GeneratedCommands/zone_enroll_request is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_enroll_request_callback_unset(const uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASZone/GeneratedCommands/zone_enroll_request is received.
 */
void uic_mqtt_dotdot_ias_zone_generated_zone_enroll_request_callback_clear();
/**
 * @brief Setup callback to be called when a
 * IASZone/Commands/initiate_test_mode is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_set(const uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASZone/Commands/initiate_test_mode is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_unset(const uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASZone/Commands/initiate_test_mode is received.
 */
void uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASZone/GeneratedCommands/initiate_test_mode is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_initiate_test_mode_callback_set(const uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASZone/GeneratedCommands/initiate_test_mode is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_ias_zone_generated_initiate_test_mode_callback_unset(const uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASZone/GeneratedCommands/initiate_test_mode is received.
 */
void uic_mqtt_dotdot_ias_zone_generated_initiate_test_mode_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/ias_zone/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_ias_zone_write_attributes_callback(
  const uic_mqtt_dotdot_ias_zone_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/ias_zone/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_ias_zone_write_attributes_callback(
  const uic_mqtt_dotdot_ias_zone_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/ias_zone/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_ias_zone_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/ias_zone/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_ias_zone_force_read_attributes_callback(
  const uic_mqtt_dotdot_ias_zone_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/ias_zone/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_ias_zone_force_read_attributes_callback(
  const uic_mqtt_dotdot_ias_zone_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/ias_zone/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_ias_zone_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; IASZone/Attributes/ZoneState
 *
 * @param base_topic    topic prefix to publish, /zone_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zone_state_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/ZoneState
 *
 * @param base_topic    topic prefix to publish, /zone_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zone_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IASZone/Attributes/ZoneType
 *
 * @param base_topic    topic prefix to publish, /zone_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zone_type_publish(
  const char *base_topic,
  IasZoneType value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/ZoneType
 *
 * @param base_topic    topic prefix to publish, /zone_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zone_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IASZone/Attributes/ZoneStatus
 *
 * @param base_topic    topic prefix to publish, /zone_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zone_status_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/ZoneStatus
 *
 * @param base_topic    topic prefix to publish, /zone_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zone_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IASZone/Attributes/IASCIEAddress
 *
 * @param base_topic    topic prefix to publish, /iascie_address
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_iascie_address_publish(
  const char *base_topic,
  EUI64 value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/IASCIEAddress
 *
 * @param base_topic    topic prefix to publish, /iascie_address
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_iascie_address_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IASZone/Attributes/ZoneID
 *
 * @param base_topic    topic prefix to publish, /zoneid
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zoneid_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/ZoneID
 *
 * @param base_topic    topic prefix to publish, /zoneid
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_zoneid_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IASZone/Attributes/NumberOfZoneSensitivityLevelsSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_zone_sensitivity_levels_supported
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/NumberOfZoneSensitivityLevelsSupported
 *
 * @param base_topic    topic prefix to publish, /number_of_zone_sensitivity_levels_supported
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_number_of_zone_sensitivity_levels_supported_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; IASZone/Attributes/CurrentZoneSensitivityLevel
 *
 * @param base_topic    topic prefix to publish, /current_zone_sensitivity_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASZone/Attributes/CurrentZoneSensitivityLevel
 *
 * @param base_topic    topic prefix to publish, /current_zone_sensitivity_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_ias_zone_current_zone_sensitivity_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the IASZone/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IASZone/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_ias_zone_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to IASZone/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IASZone/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_ias_zone_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the IASZone Cluster
 *
 * This function will iterate over all Commands in the IASZone Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_ias_zone_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the IASZone Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_ias_zone_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the iaswd cluster
typedef sl_status_t (*uic_mqtt_dotdot_iaswd_start_warning_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t siren_configuration,

    uint16_t warning_duration,

    uint8_t strobe_duty_cycle,

    IaswdLevel strobe_level

);
typedef sl_status_t (*uic_mqtt_dotdot_iaswd_squawk_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t squawk_configuration

);

typedef struct {
  uint16_t max_duration;
} uic_mqtt_dotdot_iaswd_state_t;

typedef struct {
  bool max_duration;
} uic_mqtt_dotdot_iaswd_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_iaswd_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_iaswd_state_t,
    uic_mqtt_dotdot_iaswd_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_iaswd_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_iaswd_updated_state_t
);


/**
 * @brief Command fields for IASWD/StartWarning
 */
typedef struct {
  uint8_t siren_configuration;

  uint16_t warning_duration;

  uint8_t strobe_duty_cycle;

  IaswdLevel strobe_level;
} uic_mqtt_dotdot_iaswd_command_start_warning_fields_t;

/**
 * @brief Command fields for IASWD/Squawk
 */
typedef struct {
  uint8_t squawk_configuration;
} uic_mqtt_dotdot_iaswd_command_squawk_fields_t;


/**
 * @brief Setup callback to be called when a
 * IASWD/Commands/start_warning is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_iaswd_start_warning_callback_set(const uic_mqtt_dotdot_iaswd_start_warning_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASWD/Commands/start_warning is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_iaswd_start_warning_callback_unset(const uic_mqtt_dotdot_iaswd_start_warning_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASWD/Commands/start_warning is received.
 */
void uic_mqtt_dotdot_iaswd_start_warning_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASWD/GeneratedCommands/start_warning is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_iaswd_generated_start_warning_callback_set(const uic_mqtt_dotdot_iaswd_start_warning_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASWD/GeneratedCommands/start_warning is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_iaswd_generated_start_warning_callback_unset(const uic_mqtt_dotdot_iaswd_start_warning_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASWD/GeneratedCommands/start_warning is received.
 */
void uic_mqtt_dotdot_iaswd_generated_start_warning_callback_clear();
/**
 * @brief Setup callback to be called when a
 * IASWD/Commands/squawk is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_iaswd_squawk_callback_set(const uic_mqtt_dotdot_iaswd_squawk_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * IASWD/Commands/squawk is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_iaswd_squawk_callback_unset(const uic_mqtt_dotdot_iaswd_squawk_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * IASWD/Commands/squawk is received.
 */
void uic_mqtt_dotdot_iaswd_squawk_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/IASWD/GeneratedCommands/squawk is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_iaswd_generated_squawk_callback_set(const uic_mqtt_dotdot_iaswd_squawk_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/IASWD/GeneratedCommands/squawk is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_iaswd_generated_squawk_callback_unset(const uic_mqtt_dotdot_iaswd_squawk_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/IASWD/GeneratedCommands/squawk is received.
 */
void uic_mqtt_dotdot_iaswd_generated_squawk_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/iaswd/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_iaswd_write_attributes_callback(
  const uic_mqtt_dotdot_iaswd_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/iaswd/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_iaswd_write_attributes_callback(
  const uic_mqtt_dotdot_iaswd_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/iaswd/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_iaswd_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/iaswd/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_iaswd_force_read_attributes_callback(
  const uic_mqtt_dotdot_iaswd_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/iaswd/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_iaswd_force_read_attributes_callback(
  const uic_mqtt_dotdot_iaswd_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/iaswd/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_iaswd_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; IASWD/Attributes/MaxDuration
 *
 * @param base_topic    topic prefix to publish, /max_duration
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_iaswd_max_duration_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; IASWD/Attributes/MaxDuration
 *
 * @param base_topic    topic prefix to publish, /max_duration
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_iaswd_max_duration_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the IASWD/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IASWD/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_iaswd_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to IASWD/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /IASWD/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_iaswd_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the IASWD Cluster
 *
 * This function will iterate over all Commands in the IASWD Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_iaswd_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the IASWD Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_iaswd_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the metering cluster

typedef struct {
  uint64_t current_summation_delivered;
  uint64_t current_summation_received;
  uint64_t current_max_demand_delivered;
  int8_t current_max_demand_received;
  int8_t power_factor;
  UTC reading_snap_shot_time;
  UTC current_max_demand_delivered_time;
  UTC current_max_demand_received_time;
  uint8_t default_update_period;
  uint8_t supply_status;
  uint64_t current_inlet_energy_carrier_summation;
  uint64_t current_outlet_energy_carrier_summation;
  uint32_t inlet_temperature;
  uint32_t outlet_temperature;
  uint8_t unitof_measure;
  uint32_t multiplier;
  uint32_t divisor;
  uint8_t summation_formatting;
  uint8_t demand_formatting;
  uint8_t historical_consumption_formatting;
  uint8_t metering_device_type;
  uint8_t energy_carrier_unit_of_measure;
  uint8_t energy_carrier_summation_formatting;
  uint8_t energy_carrier_demand_formatting;
  uint8_t temperature_unit_of_measure;
  uint8_t temperature_formatting;
} uic_mqtt_dotdot_metering_state_t;

typedef struct {
  bool current_summation_delivered;
  bool current_summation_received;
  bool current_max_demand_delivered;
  bool current_max_demand_received;
  bool power_factor;
  bool reading_snap_shot_time;
  bool current_max_demand_delivered_time;
  bool current_max_demand_received_time;
  bool default_update_period;
  bool supply_status;
  bool current_inlet_energy_carrier_summation;
  bool current_outlet_energy_carrier_summation;
  bool inlet_temperature;
  bool outlet_temperature;
  bool unitof_measure;
  bool multiplier;
  bool divisor;
  bool summation_formatting;
  bool demand_formatting;
  bool historical_consumption_formatting;
  bool metering_device_type;
  bool energy_carrier_unit_of_measure;
  bool energy_carrier_summation_formatting;
  bool energy_carrier_demand_formatting;
  bool temperature_unit_of_measure;
  bool temperature_formatting;
} uic_mqtt_dotdot_metering_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_metering_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_metering_state_t,
    uic_mqtt_dotdot_metering_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_metering_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_metering_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/metering/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_metering_write_attributes_callback(
  const uic_mqtt_dotdot_metering_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/metering/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_metering_write_attributes_callback(
  const uic_mqtt_dotdot_metering_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/metering/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_metering_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/metering/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_metering_force_read_attributes_callback(
  const uic_mqtt_dotdot_metering_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/metering/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_metering_force_read_attributes_callback(
  const uic_mqtt_dotdot_metering_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/metering/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_metering_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentSummationDelivered
 *
 * @param base_topic    topic prefix to publish, /current_summation_delivered
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_summation_delivered_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentSummationDelivered
 *
 * @param base_topic    topic prefix to publish, /current_summation_delivered
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_summation_delivered_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentSummationReceived
 *
 * @param base_topic    topic prefix to publish, /current_summation_received
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_summation_received_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentSummationReceived
 *
 * @param base_topic    topic prefix to publish, /current_summation_received
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_summation_received_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentMaxDemandDelivered
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_delivered
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentMaxDemandDelivered
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_delivered
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentMaxDemandReceived
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_received
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentMaxDemandReceived
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_received
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/PowerFactor
 *
 * @param base_topic    topic prefix to publish, /power_factor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_power_factor_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/PowerFactor
 *
 * @param base_topic    topic prefix to publish, /power_factor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_power_factor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/ReadingSnapShotTime
 *
 * @param base_topic    topic prefix to publish, /reading_snap_shot_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_reading_snap_shot_time_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/ReadingSnapShotTime
 *
 * @param base_topic    topic prefix to publish, /reading_snap_shot_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_reading_snap_shot_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentMaxDemandDeliveredTime
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_delivered_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_time_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentMaxDemandDeliveredTime
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_delivered_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_delivered_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentMaxDemandReceivedTime
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_received_time
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_time_publish(
  const char *base_topic,
  UTC value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentMaxDemandReceivedTime
 *
 * @param base_topic    topic prefix to publish, /current_max_demand_received_time
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_max_demand_received_time_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/DefaultUpdatePeriod
 *
 * @param base_topic    topic prefix to publish, /default_update_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_default_update_period_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/DefaultUpdatePeriod
 *
 * @param base_topic    topic prefix to publish, /default_update_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_default_update_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/SupplyStatus
 *
 * @param base_topic    topic prefix to publish, /supply_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_supply_status_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/SupplyStatus
 *
 * @param base_topic    topic prefix to publish, /supply_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_supply_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentInletEnergyCarrierSummation
 *
 * @param base_topic    topic prefix to publish, /current_inlet_energy_carrier_summation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentInletEnergyCarrierSummation
 *
 * @param base_topic    topic prefix to publish, /current_inlet_energy_carrier_summation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_inlet_energy_carrier_summation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/CurrentOutletEnergyCarrierSummation
 *
 * @param base_topic    topic prefix to publish, /current_outlet_energy_carrier_summation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/CurrentOutletEnergyCarrierSummation
 *
 * @param base_topic    topic prefix to publish, /current_outlet_energy_carrier_summation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_current_outlet_energy_carrier_summation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/InletTemperature
 *
 * @param base_topic    topic prefix to publish, /inlet_temperature
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_inlet_temperature_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/InletTemperature
 *
 * @param base_topic    topic prefix to publish, /inlet_temperature
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_inlet_temperature_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/OutletTemperature
 *
 * @param base_topic    topic prefix to publish, /outlet_temperature
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_outlet_temperature_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/OutletTemperature
 *
 * @param base_topic    topic prefix to publish, /outlet_temperature
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_outlet_temperature_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/UnitofMeasure
 *
 * @param base_topic    topic prefix to publish, /unitof_measure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_unitof_measure_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/UnitofMeasure
 *
 * @param base_topic    topic prefix to publish, /unitof_measure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_unitof_measure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/Multiplier
 *
 * @param base_topic    topic prefix to publish, /multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_multiplier_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/Multiplier
 *
 * @param base_topic    topic prefix to publish, /multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/Divisor
 *
 * @param base_topic    topic prefix to publish, /divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_divisor_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/Divisor
 *
 * @param base_topic    topic prefix to publish, /divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/SummationFormatting
 *
 * @param base_topic    topic prefix to publish, /summation_formatting
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_summation_formatting_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/SummationFormatting
 *
 * @param base_topic    topic prefix to publish, /summation_formatting
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_summation_formatting_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/DemandFormatting
 *
 * @param base_topic    topic prefix to publish, /demand_formatting
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_demand_formatting_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/DemandFormatting
 *
 * @param base_topic    topic prefix to publish, /demand_formatting
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_demand_formatting_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/HistoricalConsumptionFormatting
 *
 * @param base_topic    topic prefix to publish, /historical_consumption_formatting
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_historical_consumption_formatting_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/HistoricalConsumptionFormatting
 *
 * @param base_topic    topic prefix to publish, /historical_consumption_formatting
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_historical_consumption_formatting_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/MeteringDeviceType
 *
 * @param base_topic    topic prefix to publish, /metering_device_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_metering_device_type_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/MeteringDeviceType
 *
 * @param base_topic    topic prefix to publish, /metering_device_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_metering_device_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/EnergyCarrierUnitOfMeasure
 *
 * @param base_topic    topic prefix to publish, /energy_carrier_unit_of_measure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_energy_carrier_unit_of_measure_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/EnergyCarrierUnitOfMeasure
 *
 * @param base_topic    topic prefix to publish, /energy_carrier_unit_of_measure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_energy_carrier_unit_of_measure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/EnergyCarrierSummationFormatting
 *
 * @param base_topic    topic prefix to publish, /energy_carrier_summation_formatting
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_energy_carrier_summation_formatting_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/EnergyCarrierSummationFormatting
 *
 * @param base_topic    topic prefix to publish, /energy_carrier_summation_formatting
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_energy_carrier_summation_formatting_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/EnergyCarrierDemandFormatting
 *
 * @param base_topic    topic prefix to publish, /energy_carrier_demand_formatting
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_energy_carrier_demand_formatting_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/EnergyCarrierDemandFormatting
 *
 * @param base_topic    topic prefix to publish, /energy_carrier_demand_formatting
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_energy_carrier_demand_formatting_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/TemperatureUnitOfMeasure
 *
 * @param base_topic    topic prefix to publish, /temperature_unit_of_measure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_temperature_unit_of_measure_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/TemperatureUnitOfMeasure
 *
 * @param base_topic    topic prefix to publish, /temperature_unit_of_measure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_temperature_unit_of_measure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Metering/Attributes/TemperatureFormatting
 *
 * @param base_topic    topic prefix to publish, /temperature_formatting
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_temperature_formatting_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Metering/Attributes/TemperatureFormatting
 *
 * @param base_topic    topic prefix to publish, /temperature_formatting
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_metering_temperature_formatting_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Metering/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Metering/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_metering_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Metering/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Metering/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_metering_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Metering Cluster
 *
 * This function will iterate over all Commands in the Metering Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_metering_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Metering Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_metering_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the electrical_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint8_t profile_count,

    ProfileIntervalPeriod profile_interval_period,

    uint8_t max_number_of_intervals,

    uint8_t list_of_attributes_count,
    const uint16_t *list_of_attributes

);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    UTC start_time,

    GetMeasurementProfileResponseStatus status,

    ProfileIntervalPeriod profile_interval_period,

    uint8_t number_of_intervals_delivered,

    uint16_t attribute_id,

    uint8_t intervals_count,
    const uint8_t *intervals

);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t attributeid,

    UTC start_time,

    uint8_t number_of_intervals

);

typedef struct {
  uint32_t measurement_type;
  int16_t dc_voltage;
  int16_t dc_voltage_min;
  int16_t dc_voltage_max;
  int16_t dc_current;
  int16_t dc_current_min;
  int16_t dc_current_max;
  int16_t dc_power;
  int16_t dc_power_min;
  int16_t dc_power_max;
  uint16_t dc_voltage_multiplier;
  uint16_t dc_voltage_divisor;
  uint16_t dc_current_multiplier;
  uint16_t dc_current_divisor;
  uint16_t dc_power_multiplier;
  uint16_t dc_power_divisor;
  uint16_t ac_frequency;
  uint16_t ac_frequency_min;
  uint16_t ac_frequency_max;
  uint16_t neutral_current;
  int32_t total_active_power;
  int32_t total_reactive_power;
  uint32_t total_apparent_power;
  int16_t measured1st_harmonic_current;
  int16_t measured3rd_harmonic_current;
  int16_t measured5th_harmonic_current;
  int16_t measured7th_harmonic_current;
  int16_t measured9th_harmonic_current;
  int16_t measured11th_harmonic_current;
  int16_t measured_phase1st_harmonic_current;
  int16_t measured_phase3rd_harmonic_current;
  int16_t measured_phase5th_harmonic_current;
  int16_t measured_phase7th_harmonic_current;
  int16_t measured_phase9th_harmonic_current;
  int16_t measured_phase11th_harmonic_current;
  uint16_t ac_frequency_multiplier;
  uint16_t ac_frequency_divisor;
  uint32_t power_multiplier;
  uint32_t power_divisor;
  int8_t harmonic_current_multiplier;
  int8_t phase_harmonic_current_multiplier;
  uint16_t line_current;
  int16_t active_current;
  int16_t reactive_current;
  uint16_t rms_voltage;
  uint16_t rms_voltage_min;
  uint16_t rms_voltage_max;
  uint16_t rms_current;
  uint16_t rms_current_min;
  uint16_t rms_current_max;
  int16_t active_power;
  int16_t active_power_min;
  int16_t active_power_max;
  int16_t reactive_power;
  uint16_t apparent_power;
  int8_t power_factor;
  uint16_t averagerms_voltage_measurement_period;
  uint16_t averagerms_over_voltage_counter;
  uint16_t averagerms_under_voltage_counter;
  uint16_t rms_extreme_over_voltage_period;
  uint16_t rms_extreme_under_voltage_period;
  uint16_t rms_voltage_sag_period;
  uint16_t rms_voltage_swell_period;
  uint16_t ac_voltage_multiplier;
  uint16_t ac_voltage_divisor;
  uint16_t ac_current_multiplier;
  uint16_t ac_current_divisor;
  uint16_t ac_power_multiplier;
  uint16_t ac_power_divisor;
  uint8_t dc_overload_alarms_mask;
  int16_t dc_voltage_overload;
  int16_t dc_current_overload;
  uint16_t ac_alarms_mask;
  int16_t ac_voltage_overload;
  int16_t ac_current_overload;
  int16_t ac_active_power_overload;
  int16_t ac_reactive_power_overload;
  int16_t averagerms_over_voltage;
  int16_t averagerms_under_voltage;
  int16_t rms_extreme_over_voltage;
  int16_t rms_extreme_under_voltage;
  int16_t rms_voltage_sag;
  int16_t rms_voltage_swell;
  uint16_t line_current_phb;
  int16_t active_current_phb;
  int16_t reactive_current_phb;
  uint16_t rms_voltage_phb;
  uint16_t rms_voltage_min_phb;
  uint16_t rms_voltage_max_phb;
  uint16_t rms_current_phb;
  uint16_t rms_current_min_phb;
  uint16_t rms_current_max_phb;
  int16_t active_power_phb;
  int16_t active_power_min_phb;
  int16_t active_power_max_phb;
  int16_t reactive_power_phb;
  uint16_t apparent_power_phb;
  int8_t power_factor_phb;
  uint16_t averagerms_voltage_measurement_period_phb;
  uint16_t averagerms_over_voltage_counter_phb;
  uint16_t averagerms_under_voltage_counter_phb;
  uint16_t rms_extreme_over_voltage_period_phb;
  uint16_t rms_extreme_under_voltage_period_phb;
  uint16_t rms_voltage_sag_period_phb;
  uint16_t rms_voltage_swell_period_phb;
  uint16_t line_current_phc;
  int16_t active_current_phc;
  int16_t reactive_current_phc;
  uint16_t rms_voltage_phc;
  uint16_t rms_voltage_min_phc;
  uint16_t rms_voltage_max_phc;
  uint16_t rms_current_phc;
  uint16_t rms_current_min_phc;
  uint16_t rms_current_max_phc;
  int16_t active_power_phc;
  int16_t active_power_min_phc;
  int16_t active_power_max_phc;
  int16_t reactive_power_phc;
  uint16_t apparent_power_phc;
  int8_t power_factor_phc;
  uint16_t averagerms_voltage_measurement_period_phc;
  uint16_t averagerms_over_voltage_counter_phc;
  uint16_t averagerms_under_voltage_counter_phc;
  uint16_t rms_extreme_over_voltage_period_phc;
  uint16_t rms_extreme_under_voltage_period_phc;
  uint16_t rms_voltage_sag_period_phc;
  uint16_t rms_voltage_swell_period_phc;
} uic_mqtt_dotdot_electrical_measurement_state_t;

typedef struct {
  bool measurement_type;
  bool dc_voltage;
  bool dc_voltage_min;
  bool dc_voltage_max;
  bool dc_current;
  bool dc_current_min;
  bool dc_current_max;
  bool dc_power;
  bool dc_power_min;
  bool dc_power_max;
  bool dc_voltage_multiplier;
  bool dc_voltage_divisor;
  bool dc_current_multiplier;
  bool dc_current_divisor;
  bool dc_power_multiplier;
  bool dc_power_divisor;
  bool ac_frequency;
  bool ac_frequency_min;
  bool ac_frequency_max;
  bool neutral_current;
  bool total_active_power;
  bool total_reactive_power;
  bool total_apparent_power;
  bool measured1st_harmonic_current;
  bool measured3rd_harmonic_current;
  bool measured5th_harmonic_current;
  bool measured7th_harmonic_current;
  bool measured9th_harmonic_current;
  bool measured11th_harmonic_current;
  bool measured_phase1st_harmonic_current;
  bool measured_phase3rd_harmonic_current;
  bool measured_phase5th_harmonic_current;
  bool measured_phase7th_harmonic_current;
  bool measured_phase9th_harmonic_current;
  bool measured_phase11th_harmonic_current;
  bool ac_frequency_multiplier;
  bool ac_frequency_divisor;
  bool power_multiplier;
  bool power_divisor;
  bool harmonic_current_multiplier;
  bool phase_harmonic_current_multiplier;
  bool line_current;
  bool active_current;
  bool reactive_current;
  bool rms_voltage;
  bool rms_voltage_min;
  bool rms_voltage_max;
  bool rms_current;
  bool rms_current_min;
  bool rms_current_max;
  bool active_power;
  bool active_power_min;
  bool active_power_max;
  bool reactive_power;
  bool apparent_power;
  bool power_factor;
  bool averagerms_voltage_measurement_period;
  bool averagerms_over_voltage_counter;
  bool averagerms_under_voltage_counter;
  bool rms_extreme_over_voltage_period;
  bool rms_extreme_under_voltage_period;
  bool rms_voltage_sag_period;
  bool rms_voltage_swell_period;
  bool ac_voltage_multiplier;
  bool ac_voltage_divisor;
  bool ac_current_multiplier;
  bool ac_current_divisor;
  bool ac_power_multiplier;
  bool ac_power_divisor;
  bool dc_overload_alarms_mask;
  bool dc_voltage_overload;
  bool dc_current_overload;
  bool ac_alarms_mask;
  bool ac_voltage_overload;
  bool ac_current_overload;
  bool ac_active_power_overload;
  bool ac_reactive_power_overload;
  bool averagerms_over_voltage;
  bool averagerms_under_voltage;
  bool rms_extreme_over_voltage;
  bool rms_extreme_under_voltage;
  bool rms_voltage_sag;
  bool rms_voltage_swell;
  bool line_current_phb;
  bool active_current_phb;
  bool reactive_current_phb;
  bool rms_voltage_phb;
  bool rms_voltage_min_phb;
  bool rms_voltage_max_phb;
  bool rms_current_phb;
  bool rms_current_min_phb;
  bool rms_current_max_phb;
  bool active_power_phb;
  bool active_power_min_phb;
  bool active_power_max_phb;
  bool reactive_power_phb;
  bool apparent_power_phb;
  bool power_factor_phb;
  bool averagerms_voltage_measurement_period_phb;
  bool averagerms_over_voltage_counter_phb;
  bool averagerms_under_voltage_counter_phb;
  bool rms_extreme_over_voltage_period_phb;
  bool rms_extreme_under_voltage_period_phb;
  bool rms_voltage_sag_period_phb;
  bool rms_voltage_swell_period_phb;
  bool line_current_phc;
  bool active_current_phc;
  bool reactive_current_phc;
  bool rms_voltage_phc;
  bool rms_voltage_min_phc;
  bool rms_voltage_max_phc;
  bool rms_current_phc;
  bool rms_current_min_phc;
  bool rms_current_max_phc;
  bool active_power_phc;
  bool active_power_min_phc;
  bool active_power_max_phc;
  bool reactive_power_phc;
  bool apparent_power_phc;
  bool power_factor_phc;
  bool averagerms_voltage_measurement_period_phc;
  bool averagerms_over_voltage_counter_phc;
  bool averagerms_under_voltage_counter_phc;
  bool rms_extreme_over_voltage_period_phc;
  bool rms_extreme_under_voltage_period_phc;
  bool rms_voltage_sag_period_phc;
  bool rms_voltage_swell_period_phc;
} uic_mqtt_dotdot_electrical_measurement_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_electrical_measurement_state_t,
    uic_mqtt_dotdot_electrical_measurement_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_electrical_measurement_updated_state_t
);


/**
 * @brief Command fields for ElectricalMeasurement/GetProfileInfoResponse
 */
typedef struct {
  uint8_t profile_count;

  ProfileIntervalPeriod profile_interval_period;

  uint8_t max_number_of_intervals;

  uint8_t list_of_attributes_count;
  const uint16_t *list_of_attributes;
} uic_mqtt_dotdot_electrical_measurement_command_get_profile_info_response_fields_t;

/**
 * @brief Command fields for ElectricalMeasurement/GetMeasurementProfileResponse
 */
typedef struct {
  UTC start_time;

  GetMeasurementProfileResponseStatus status;

  ProfileIntervalPeriod profile_interval_period;

  uint8_t number_of_intervals_delivered;

  uint16_t attribute_id;

  uint8_t intervals_count;
  const uint8_t *intervals;
} uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_response_fields_t;

/**
 * @brief Command fields for ElectricalMeasurement/GetMeasurementProfile
 */
typedef struct {
  uint16_t attributeid;

  UTC start_time;

  uint8_t number_of_intervals;
} uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_fields_t;


/**
 * @brief Setup callback to be called when a
 * ElectricalMeasurement/Commands/get_profile_info_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ElectricalMeasurement/Commands/get_profile_info_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ElectricalMeasurement/Commands/get_profile_info_response is received.
 */
void uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_profile_info_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_profile_info_response_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_profile_info_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_profile_info_response_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ElectricalMeasurement/GeneratedCommands/get_profile_info_response is received.
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_profile_info_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ElectricalMeasurement/Commands/get_profile_info is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ElectricalMeasurement/Commands/get_profile_info is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ElectricalMeasurement/Commands/get_profile_info is received.
 */
void uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_profile_info is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_profile_info_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_profile_info is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_profile_info_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ElectricalMeasurement/GeneratedCommands/get_profile_info is received.
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_profile_info_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ElectricalMeasurement/Commands/get_measurement_profile_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ElectricalMeasurement/Commands/get_measurement_profile_response is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ElectricalMeasurement/Commands/get_measurement_profile_response is received.
 */
void uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_measurement_profile_response is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_measurement_profile_response_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_measurement_profile_response is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_measurement_profile_response_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ElectricalMeasurement/GeneratedCommands/get_measurement_profile_response is received.
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_measurement_profile_response_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ElectricalMeasurement/Commands/get_measurement_profile is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ElectricalMeasurement/Commands/get_measurement_profile is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ElectricalMeasurement/Commands/get_measurement_profile is received.
 */
void uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_measurement_profile is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_measurement_profile_callback_set(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ElectricalMeasurement/GeneratedCommands/get_measurement_profile is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_measurement_profile_callback_unset(const uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ElectricalMeasurement/GeneratedCommands/get_measurement_profile is received.
 */
void uic_mqtt_dotdot_electrical_measurement_generated_get_measurement_profile_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/electrical_measurement/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_electrical_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_electrical_measurement_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/electrical_measurement/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_electrical_measurement_write_attributes_callback(
  const uic_mqtt_dotdot_electrical_measurement_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/electrical_measurement/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_electrical_measurement_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/electrical_measurement/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_electrical_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_electrical_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/electrical_measurement/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_electrical_measurement_force_read_attributes_callback(
  const uic_mqtt_dotdot_electrical_measurement_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/electrical_measurement/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_electrical_measurement_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasurementType
 *
 * @param base_topic    topic prefix to publish, /measurement_type
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measurement_type_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasurementType
 *
 * @param base_topic    topic prefix to publish, /measurement_type
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measurement_type_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCVoltage
 *
 * @param base_topic    topic prefix to publish, /dc_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCVoltage
 *
 * @param base_topic    topic prefix to publish, /dc_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCVoltageMin
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_min_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCVoltageMin
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCVoltageMax
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_max_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCVoltageMax
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCCurrent
 *
 * @param base_topic    topic prefix to publish, /dc_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCCurrent
 *
 * @param base_topic    topic prefix to publish, /dc_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCCurrentMin
 *
 * @param base_topic    topic prefix to publish, /dc_current_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_min_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCCurrentMin
 *
 * @param base_topic    topic prefix to publish, /dc_current_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCCurrentMax
 *
 * @param base_topic    topic prefix to publish, /dc_current_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_max_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCCurrentMax
 *
 * @param base_topic    topic prefix to publish, /dc_current_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCPower
 *
 * @param base_topic    topic prefix to publish, /dc_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCPower
 *
 * @param base_topic    topic prefix to publish, /dc_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCPowerMin
 *
 * @param base_topic    topic prefix to publish, /dc_power_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_min_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCPowerMin
 *
 * @param base_topic    topic prefix to publish, /dc_power_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCPowerMax
 *
 * @param base_topic    topic prefix to publish, /dc_power_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_max_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCPowerMax
 *
 * @param base_topic    topic prefix to publish, /dc_power_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCVoltageMultiplier
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCVoltageMultiplier
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCVoltageDivisor
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCVoltageDivisor
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /dc_current_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /dc_current_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCCurrentDivisor
 *
 * @param base_topic    topic prefix to publish, /dc_current_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCCurrentDivisor
 *
 * @param base_topic    topic prefix to publish, /dc_current_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCPowerMultiplier
 *
 * @param base_topic    topic prefix to publish, /dc_power_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCPowerMultiplier
 *
 * @param base_topic    topic prefix to publish, /dc_power_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCPowerDivisor
 *
 * @param base_topic    topic prefix to publish, /dc_power_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCPowerDivisor
 *
 * @param base_topic    topic prefix to publish, /dc_power_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_power_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACFrequency
 *
 * @param base_topic    topic prefix to publish, /ac_frequency
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACFrequency
 *
 * @param base_topic    topic prefix to publish, /ac_frequency
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACFrequencyMin
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACFrequencyMin
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACFrequencyMax
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACFrequencyMax
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/NeutralCurrent
 *
 * @param base_topic    topic prefix to publish, /neutral_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_neutral_current_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/NeutralCurrent
 *
 * @param base_topic    topic prefix to publish, /neutral_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_neutral_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/TotalActivePower
 *
 * @param base_topic    topic prefix to publish, /total_active_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_total_active_power_publish(
  const char *base_topic,
  int32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/TotalActivePower
 *
 * @param base_topic    topic prefix to publish, /total_active_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_total_active_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/TotalReactivePower
 *
 * @param base_topic    topic prefix to publish, /total_reactive_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_total_reactive_power_publish(
  const char *base_topic,
  int32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/TotalReactivePower
 *
 * @param base_topic    topic prefix to publish, /total_reactive_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_total_reactive_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/TotalApparentPower
 *
 * @param base_topic    topic prefix to publish, /total_apparent_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_total_apparent_power_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/TotalApparentPower
 *
 * @param base_topic    topic prefix to publish, /total_apparent_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_total_apparent_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/Measured1stHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured1st_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured1st_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/Measured1stHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured1st_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured1st_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/Measured3rdHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured3rd_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured3rd_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/Measured3rdHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured3rd_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured3rd_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/Measured5thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured5th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured5th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/Measured5thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured5th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured5th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/Measured7thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured7th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured7th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/Measured7thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured7th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured7th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/Measured9thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured9th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured9th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/Measured9thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured9th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured9th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/Measured11thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured11th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured11th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/Measured11thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured11th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured11th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasuredPhase1stHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase1st_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase1st_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasuredPhase1stHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase1st_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase1st_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasuredPhase3rdHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase3rd_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase3rd_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasuredPhase3rdHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase3rd_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase3rd_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasuredPhase5thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase5th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase5th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasuredPhase5thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase5th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase5th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasuredPhase7thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase7th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase7th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasuredPhase7thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase7th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase7th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasuredPhase9thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase9th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase9th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasuredPhase9thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase9th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase9th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/MeasuredPhase11thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase11th_harmonic_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase11th_harmonic_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/MeasuredPhase11thHarmonicCurrent
 *
 * @param base_topic    topic prefix to publish, /measured_phase11th_harmonic_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_measured_phase11th_harmonic_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACFrequencyMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACFrequencyMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACFrequencyDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACFrequencyDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_frequency_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_frequency_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/PowerMultiplier
 *
 * @param base_topic    topic prefix to publish, /power_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_multiplier_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/PowerMultiplier
 *
 * @param base_topic    topic prefix to publish, /power_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/PowerDivisor
 *
 * @param base_topic    topic prefix to publish, /power_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_divisor_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/PowerDivisor
 *
 * @param base_topic    topic prefix to publish, /power_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/HarmonicCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /harmonic_current_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_harmonic_current_multiplier_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/HarmonicCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /harmonic_current_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_harmonic_current_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/PhaseHarmonicCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /phase_harmonic_current_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_phase_harmonic_current_multiplier_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/PhaseHarmonicCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /phase_harmonic_current_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_phase_harmonic_current_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/LineCurrent
 *
 * @param base_topic    topic prefix to publish, /line_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/LineCurrent
 *
 * @param base_topic    topic prefix to publish, /line_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActiveCurrent
 *
 * @param base_topic    topic prefix to publish, /active_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActiveCurrent
 *
 * @param base_topic    topic prefix to publish, /active_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ReactiveCurrent
 *
 * @param base_topic    topic prefix to publish, /reactive_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ReactiveCurrent
 *
 * @param base_topic    topic prefix to publish, /reactive_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltage
 *
 * @param base_topic    topic prefix to publish, /rms_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltage
 *
 * @param base_topic    topic prefix to publish, /rms_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageMin
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageMin
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageMax
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageMax
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrent
 *
 * @param base_topic    topic prefix to publish, /rms_current
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrent
 *
 * @param base_topic    topic prefix to publish, /rms_current
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentMin
 *
 * @param base_topic    topic prefix to publish, /rms_current_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentMin
 *
 * @param base_topic    topic prefix to publish, /rms_current_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentMax
 *
 * @param base_topic    topic prefix to publish, /rms_current_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentMax
 *
 * @param base_topic    topic prefix to publish, /rms_current_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePower
 *
 * @param base_topic    topic prefix to publish, /active_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePower
 *
 * @param base_topic    topic prefix to publish, /active_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerMin
 *
 * @param base_topic    topic prefix to publish, /active_power_min
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_min_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerMin
 *
 * @param base_topic    topic prefix to publish, /active_power_min
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_min_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerMax
 *
 * @param base_topic    topic prefix to publish, /active_power_max
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_max_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerMax
 *
 * @param base_topic    topic prefix to publish, /active_power_max
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_max_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ReactivePower
 *
 * @param base_topic    topic prefix to publish, /reactive_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ReactivePower
 *
 * @param base_topic    topic prefix to publish, /reactive_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ApparentPower
 *
 * @param base_topic    topic prefix to publish, /apparent_power
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ApparentPower
 *
 * @param base_topic    topic prefix to publish, /apparent_power
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/PowerFactor
 *
 * @param base_topic    topic prefix to publish, /power_factor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/PowerFactor
 *
 * @param base_topic    topic prefix to publish, /power_factor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSVoltageMeasurementPeriod
 *
 * @param base_topic    topic prefix to publish, /averagerms_voltage_measurement_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_voltage_measurement_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSVoltageMeasurementPeriod
 *
 * @param base_topic    topic prefix to publish, /averagerms_voltage_measurement_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_voltage_measurement_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltageCounter
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage_counter
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_counter_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltageCounter
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage_counter
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_counter_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltageCounter
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage_counter
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_counter_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltageCounter
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage_counter
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_counter_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltagePeriod
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltagePeriod
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltagePeriod
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltagePeriod
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSagPeriod
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSagPeriod
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSwellPeriod
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell_period
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSwellPeriod
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell_period
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACVoltageMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_voltage_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACVoltageMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_voltage_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACVoltageDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_voltage_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACVoltageDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_voltage_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_current_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACCurrentMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_current_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACCurrentDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_current_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACCurrentDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_current_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACPowerMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_power_multiplier
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACPowerMultiplier
 *
 * @param base_topic    topic prefix to publish, /ac_power_multiplier
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_multiplier_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACPowerDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_power_divisor
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACPowerDivisor
 *
 * @param base_topic    topic prefix to publish, /ac_power_divisor
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_power_divisor_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCOverloadAlarmsMask
 *
 * @param base_topic    topic prefix to publish, /dc_overload_alarms_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_overload_alarms_mask_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCOverloadAlarmsMask
 *
 * @param base_topic    topic prefix to publish, /dc_overload_alarms_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_overload_alarms_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCVoltageOverload
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_overload
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_overload_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCVoltageOverload
 *
 * @param base_topic    topic prefix to publish, /dc_voltage_overload
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_voltage_overload_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/DCCurrentOverload
 *
 * @param base_topic    topic prefix to publish, /dc_current_overload
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_overload_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/DCCurrentOverload
 *
 * @param base_topic    topic prefix to publish, /dc_current_overload
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_dc_current_overload_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACAlarmsMask
 *
 * @param base_topic    topic prefix to publish, /ac_alarms_mask
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_alarms_mask_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACAlarmsMask
 *
 * @param base_topic    topic prefix to publish, /ac_alarms_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_alarms_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACVoltageOverload
 *
 * @param base_topic    topic prefix to publish, /ac_voltage_overload
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_overload_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACVoltageOverload
 *
 * @param base_topic    topic prefix to publish, /ac_voltage_overload
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_voltage_overload_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACCurrentOverload
 *
 * @param base_topic    topic prefix to publish, /ac_current_overload
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_overload_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACCurrentOverload
 *
 * @param base_topic    topic prefix to publish, /ac_current_overload
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_current_overload_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACActivePowerOverload
 *
 * @param base_topic    topic prefix to publish, /ac_active_power_overload
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_active_power_overload_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACActivePowerOverload
 *
 * @param base_topic    topic prefix to publish, /ac_active_power_overload
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_active_power_overload_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ACReactivePowerOverload
 *
 * @param base_topic    topic prefix to publish, /ac_reactive_power_overload
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_reactive_power_overload_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ACReactivePowerOverload
 *
 * @param base_topic    topic prefix to publish, /ac_reactive_power_overload
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_ac_reactive_power_overload_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltage
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltage
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltage
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltage
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltage
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltage
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltage
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltage
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSag
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSag
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSwell
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSwell
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/LineCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /line_current_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/LineCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /line_current_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActiveCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /active_current_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_current_phb_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActiveCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /active_current_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_current_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ReactiveCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /reactive_current_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phb_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ReactiveCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /reactive_current_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltagePhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltagePhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageMinPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_min_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageMinPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_min_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageMaxPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_max_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageMaxPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_max_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /rms_current_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentPhB
 *
 * @param base_topic    topic prefix to publish, /rms_current_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentMinPhB
 *
 * @param base_topic    topic prefix to publish, /rms_current_min_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentMinPhB
 *
 * @param base_topic    topic prefix to publish, /rms_current_min_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentMaxPhB
 *
 * @param base_topic    topic prefix to publish, /rms_current_max_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentMaxPhB
 *
 * @param base_topic    topic prefix to publish, /rms_current_max_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerPhB
 *
 * @param base_topic    topic prefix to publish, /active_power_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_phb_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerPhB
 *
 * @param base_topic    topic prefix to publish, /active_power_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerMinPhB
 *
 * @param base_topic    topic prefix to publish, /active_power_min_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_min_phb_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerMinPhB
 *
 * @param base_topic    topic prefix to publish, /active_power_min_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_min_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerMaxPhB
 *
 * @param base_topic    topic prefix to publish, /active_power_max_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_max_phb_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerMaxPhB
 *
 * @param base_topic    topic prefix to publish, /active_power_max_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_max_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ReactivePowerPhB
 *
 * @param base_topic    topic prefix to publish, /reactive_power_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phb_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ReactivePowerPhB
 *
 * @param base_topic    topic prefix to publish, /reactive_power_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ApparentPowerPhB
 *
 * @param base_topic    topic prefix to publish, /apparent_power_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ApparentPowerPhB
 *
 * @param base_topic    topic prefix to publish, /apparent_power_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/PowerFactorPhB
 *
 * @param base_topic    topic prefix to publish, /power_factor_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phb_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/PowerFactorPhB
 *
 * @param base_topic    topic prefix to publish, /power_factor_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSVoltageMeasurementPeriodPhB
 *
 * @param base_topic    topic prefix to publish, /averagerms_voltage_measurement_period_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_voltage_measurement_period_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSVoltageMeasurementPeriodPhB
 *
 * @param base_topic    topic prefix to publish, /averagerms_voltage_measurement_period_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_voltage_measurement_period_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltageCounterPhB
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage_counter_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_counter_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltageCounterPhB
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage_counter_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_counter_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltageCounterPhB
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage_counter_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_counter_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltageCounterPhB
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage_counter_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_counter_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltagePeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage_period_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltagePeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage_period_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltagePeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage_period_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltagePeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage_period_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSagPeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag_period_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSagPeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag_period_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSwellPeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell_period_phb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSwellPeriodPhB
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell_period_phb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/LineCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /line_current_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/LineCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /line_current_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_line_current_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActiveCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /active_current_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_current_phc_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActiveCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /active_current_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_current_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ReactiveCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /reactive_current_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phc_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ReactiveCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /reactive_current_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_current_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltagePhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltagePhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageMinPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_min_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageMinPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_min_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_min_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageMaxPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_max_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageMaxPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_max_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_max_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /rms_current_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentPhC
 *
 * @param base_topic    topic prefix to publish, /rms_current_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentMinPhC
 *
 * @param base_topic    topic prefix to publish, /rms_current_min_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentMinPhC
 *
 * @param base_topic    topic prefix to publish, /rms_current_min_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_min_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSCurrentMaxPhC
 *
 * @param base_topic    topic prefix to publish, /rms_current_max_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSCurrentMaxPhC
 *
 * @param base_topic    topic prefix to publish, /rms_current_max_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_current_max_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerPhC
 *
 * @param base_topic    topic prefix to publish, /active_power_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_phc_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerPhC
 *
 * @param base_topic    topic prefix to publish, /active_power_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerMinPhC
 *
 * @param base_topic    topic prefix to publish, /active_power_min_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_min_phc_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerMinPhC
 *
 * @param base_topic    topic prefix to publish, /active_power_min_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_min_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ActivePowerMaxPhC
 *
 * @param base_topic    topic prefix to publish, /active_power_max_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_max_phc_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ActivePowerMaxPhC
 *
 * @param base_topic    topic prefix to publish, /active_power_max_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_active_power_max_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ReactivePowerPhC
 *
 * @param base_topic    topic prefix to publish, /reactive_power_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phc_publish(
  const char *base_topic,
  int16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ReactivePowerPhC
 *
 * @param base_topic    topic prefix to publish, /reactive_power_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_reactive_power_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/ApparentPowerPhC
 *
 * @param base_topic    topic prefix to publish, /apparent_power_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/ApparentPowerPhC
 *
 * @param base_topic    topic prefix to publish, /apparent_power_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_apparent_power_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/PowerFactorPhC
 *
 * @param base_topic    topic prefix to publish, /power_factor_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phc_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/PowerFactorPhC
 *
 * @param base_topic    topic prefix to publish, /power_factor_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_power_factor_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSVoltageMeasurementPeriodPhC
 *
 * @param base_topic    topic prefix to publish, /averagerms_voltage_measurement_period_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_voltage_measurement_period_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSVoltageMeasurementPeriodPhC
 *
 * @param base_topic    topic prefix to publish, /averagerms_voltage_measurement_period_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_voltage_measurement_period_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltageCounterPhC
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage_counter_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_counter_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSOverVoltageCounterPhC
 *
 * @param base_topic    topic prefix to publish, /averagerms_over_voltage_counter_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_over_voltage_counter_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltageCounterPhC
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage_counter_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_counter_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/AverageRMSUnderVoltageCounterPhC
 *
 * @param base_topic    topic prefix to publish, /averagerms_under_voltage_counter_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_averagerms_under_voltage_counter_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltagePeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage_period_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeOverVoltagePeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_over_voltage_period_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_over_voltage_period_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltagePeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage_period_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSExtremeUnderVoltagePeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_extreme_under_voltage_period_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_extreme_under_voltage_period_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSagPeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag_period_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSagPeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_sag_period_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_sag_period_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ElectricalMeasurement/Attributes/RMSVoltageSwellPeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell_period_phc
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ElectricalMeasurement/Attributes/RMSVoltageSwellPeriodPhC
 *
 * @param base_topic    topic prefix to publish, /rms_voltage_swell_period_phc
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_rms_voltage_swell_period_phc_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ElectricalMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ElectricalMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_electrical_measurement_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ElectricalMeasurement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ElectricalMeasurement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_electrical_measurement_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ElectricalMeasurement Cluster
 *
 * This function will iterate over all Commands in the ElectricalMeasurement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_electrical_measurement_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ElectricalMeasurement Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_electrical_measurement_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the diagnostics cluster

typedef struct {
  uint16_t number_of_resets;
  uint16_t persistent_memory_writes;
  uint32_t mac_rx_bcast;
  uint32_t mac_tx_bcast;
  uint32_t mac_rx_ucast;
  uint32_t mac_tx_ucast;
  uint16_t mac_tx_ucast_retry;
  uint16_t mac_tx_ucast_fail;
  uint16_t aps_rx_bcast;
  uint16_t aps_tx_bcast;
  uint16_t aps_rx_ucast;
  uint16_t aps_tx_ucast_success;
  uint16_t aps_tx_ucast_retry;
  uint16_t aps_tx_ucast_fail;
  uint16_t route_disc_initiated;
  uint16_t neighbor_added;
  uint16_t neighbor_removed;
  uint16_t neighbor_stale;
  uint16_t join_indication;
  uint16_t child_moved;
  uint16_t nwkfc_failure;
  uint16_t apsfc_failure;
  uint16_t aps_unauthorized_key;
  uint16_t nwk_decrypt_failures;
  uint16_t aps_decrypt_failures;
  uint16_t packet_buffer_allocate_failures;
  uint16_t relayed_ucast;
  uint16_t phy_tomac_queue_limit_reached;
  uint16_t packet_validate_drop_count;
  uint16_t averagemac_retry_peraps_message_sent;
  uint8_t last_messagelqi;
  int8_t last_messagerssi;
} uic_mqtt_dotdot_diagnostics_state_t;

typedef struct {
  bool number_of_resets;
  bool persistent_memory_writes;
  bool mac_rx_bcast;
  bool mac_tx_bcast;
  bool mac_rx_ucast;
  bool mac_tx_ucast;
  bool mac_tx_ucast_retry;
  bool mac_tx_ucast_fail;
  bool aps_rx_bcast;
  bool aps_tx_bcast;
  bool aps_rx_ucast;
  bool aps_tx_ucast_success;
  bool aps_tx_ucast_retry;
  bool aps_tx_ucast_fail;
  bool route_disc_initiated;
  bool neighbor_added;
  bool neighbor_removed;
  bool neighbor_stale;
  bool join_indication;
  bool child_moved;
  bool nwkfc_failure;
  bool apsfc_failure;
  bool aps_unauthorized_key;
  bool nwk_decrypt_failures;
  bool aps_decrypt_failures;
  bool packet_buffer_allocate_failures;
  bool relayed_ucast;
  bool phy_tomac_queue_limit_reached;
  bool packet_validate_drop_count;
  bool averagemac_retry_peraps_message_sent;
  bool last_messagelqi;
  bool last_messagerssi;
} uic_mqtt_dotdot_diagnostics_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_diagnostics_state_t,
    uic_mqtt_dotdot_diagnostics_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_diagnostics_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/diagnostics/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_diagnostics_write_attributes_callback(
  const uic_mqtt_dotdot_diagnostics_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/diagnostics/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_diagnostics_write_attributes_callback(
  const uic_mqtt_dotdot_diagnostics_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/diagnostics/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_diagnostics_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/diagnostics/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_diagnostics_force_read_attributes_callback(
  const uic_mqtt_dotdot_diagnostics_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/diagnostics/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_diagnostics_force_read_attributes_callback(
  const uic_mqtt_dotdot_diagnostics_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/diagnostics/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_diagnostics_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Diagnostics/Attributes/NumberOfResets
 *
 * @param base_topic    topic prefix to publish, /number_of_resets
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_number_of_resets_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/NumberOfResets
 *
 * @param base_topic    topic prefix to publish, /number_of_resets
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_number_of_resets_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/PersistentMemoryWrites
 *
 * @param base_topic    topic prefix to publish, /persistent_memory_writes
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_persistent_memory_writes_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/PersistentMemoryWrites
 *
 * @param base_topic    topic prefix to publish, /persistent_memory_writes
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_persistent_memory_writes_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/MacRxBcast
 *
 * @param base_topic    topic prefix to publish, /mac_rx_bcast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_bcast_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/MacRxBcast
 *
 * @param base_topic    topic prefix to publish, /mac_rx_bcast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_bcast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/MacTxBcast
 *
 * @param base_topic    topic prefix to publish, /mac_tx_bcast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_bcast_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/MacTxBcast
 *
 * @param base_topic    topic prefix to publish, /mac_tx_bcast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_bcast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/MacRxUcast
 *
 * @param base_topic    topic prefix to publish, /mac_rx_ucast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_ucast_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/MacRxUcast
 *
 * @param base_topic    topic prefix to publish, /mac_rx_ucast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_rx_ucast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/MacTxUcast
 *
 * @param base_topic    topic prefix to publish, /mac_tx_ucast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/MacTxUcast
 *
 * @param base_topic    topic prefix to publish, /mac_tx_ucast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/MacTxUcastRetry
 *
 * @param base_topic    topic prefix to publish, /mac_tx_ucast_retry
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/MacTxUcastRetry
 *
 * @param base_topic    topic prefix to publish, /mac_tx_ucast_retry
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_retry_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/MacTxUcastFail
 *
 * @param base_topic    topic prefix to publish, /mac_tx_ucast_fail
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/MacTxUcastFail
 *
 * @param base_topic    topic prefix to publish, /mac_tx_ucast_fail
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_mac_tx_ucast_fail_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSRxBcast
 *
 * @param base_topic    topic prefix to publish, /aps_rx_bcast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_bcast_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSRxBcast
 *
 * @param base_topic    topic prefix to publish, /aps_rx_bcast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_bcast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSTxBcast
 *
 * @param base_topic    topic prefix to publish, /aps_tx_bcast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_bcast_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSTxBcast
 *
 * @param base_topic    topic prefix to publish, /aps_tx_bcast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_bcast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSRxUcast
 *
 * @param base_topic    topic prefix to publish, /aps_rx_ucast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_ucast_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSRxUcast
 *
 * @param base_topic    topic prefix to publish, /aps_rx_ucast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_rx_ucast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSTxUcastSuccess
 *
 * @param base_topic    topic prefix to publish, /aps_tx_ucast_success
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSTxUcastSuccess
 *
 * @param base_topic    topic prefix to publish, /aps_tx_ucast_success
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_success_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSTxUcastRetry
 *
 * @param base_topic    topic prefix to publish, /aps_tx_ucast_retry
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSTxUcastRetry
 *
 * @param base_topic    topic prefix to publish, /aps_tx_ucast_retry
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_retry_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSTxUcastFail
 *
 * @param base_topic    topic prefix to publish, /aps_tx_ucast_fail
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSTxUcastFail
 *
 * @param base_topic    topic prefix to publish, /aps_tx_ucast_fail
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_tx_ucast_fail_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/RouteDiscInitiated
 *
 * @param base_topic    topic prefix to publish, /route_disc_initiated
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_route_disc_initiated_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/RouteDiscInitiated
 *
 * @param base_topic    topic prefix to publish, /route_disc_initiated
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_route_disc_initiated_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/NeighborAdded
 *
 * @param base_topic    topic prefix to publish, /neighbor_added
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_added_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/NeighborAdded
 *
 * @param base_topic    topic prefix to publish, /neighbor_added
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_added_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/NeighborRemoved
 *
 * @param base_topic    topic prefix to publish, /neighbor_removed
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_removed_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/NeighborRemoved
 *
 * @param base_topic    topic prefix to publish, /neighbor_removed
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_removed_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/NeighborStale
 *
 * @param base_topic    topic prefix to publish, /neighbor_stale
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_stale_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/NeighborStale
 *
 * @param base_topic    topic prefix to publish, /neighbor_stale
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_neighbor_stale_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/JoinIndication
 *
 * @param base_topic    topic prefix to publish, /join_indication
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_join_indication_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/JoinIndication
 *
 * @param base_topic    topic prefix to publish, /join_indication
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_join_indication_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/ChildMoved
 *
 * @param base_topic    topic prefix to publish, /child_moved
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_child_moved_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/ChildMoved
 *
 * @param base_topic    topic prefix to publish, /child_moved
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_child_moved_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/NWKFCFailure
 *
 * @param base_topic    topic prefix to publish, /nwkfc_failure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_nwkfc_failure_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/NWKFCFailure
 *
 * @param base_topic    topic prefix to publish, /nwkfc_failure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_nwkfc_failure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSFCFailure
 *
 * @param base_topic    topic prefix to publish, /apsfc_failure
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_apsfc_failure_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSFCFailure
 *
 * @param base_topic    topic prefix to publish, /apsfc_failure
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_apsfc_failure_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSUnauthorizedKey
 *
 * @param base_topic    topic prefix to publish, /aps_unauthorized_key
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSUnauthorizedKey
 *
 * @param base_topic    topic prefix to publish, /aps_unauthorized_key
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_unauthorized_key_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/NWKDecryptFailures
 *
 * @param base_topic    topic prefix to publish, /nwk_decrypt_failures
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/NWKDecryptFailures
 *
 * @param base_topic    topic prefix to publish, /nwk_decrypt_failures
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_nwk_decrypt_failures_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/APSDecryptFailures
 *
 * @param base_topic    topic prefix to publish, /aps_decrypt_failures
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/APSDecryptFailures
 *
 * @param base_topic    topic prefix to publish, /aps_decrypt_failures
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_aps_decrypt_failures_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/PacketBufferAllocateFailures
 *
 * @param base_topic    topic prefix to publish, /packet_buffer_allocate_failures
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/PacketBufferAllocateFailures
 *
 * @param base_topic    topic prefix to publish, /packet_buffer_allocate_failures
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_packet_buffer_allocate_failures_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/RelayedUcast
 *
 * @param base_topic    topic prefix to publish, /relayed_ucast
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_relayed_ucast_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/RelayedUcast
 *
 * @param base_topic    topic prefix to publish, /relayed_ucast
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_relayed_ucast_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/PHYToMACQueueLimitReached
 *
 * @param base_topic    topic prefix to publish, /phy_tomac_queue_limit_reached
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_phy_tomac_queue_limit_reached_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/PHYToMACQueueLimitReached
 *
 * @param base_topic    topic prefix to publish, /phy_tomac_queue_limit_reached
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_phy_tomac_queue_limit_reached_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/PacketValidateDropCount
 *
 * @param base_topic    topic prefix to publish, /packet_validate_drop_count
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/PacketValidateDropCount
 *
 * @param base_topic    topic prefix to publish, /packet_validate_drop_count
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_packet_validate_drop_count_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/AverageMACRetryPerAPSMessageSent
 *
 * @param base_topic    topic prefix to publish, /averagemac_retry_peraps_message_sent
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_averagemac_retry_peraps_message_sent_publish(
  const char *base_topic,
  uint16_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/AverageMACRetryPerAPSMessageSent
 *
 * @param base_topic    topic prefix to publish, /averagemac_retry_peraps_message_sent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_averagemac_retry_peraps_message_sent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/LastMessageLQI
 *
 * @param base_topic    topic prefix to publish, /last_messagelqi
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_last_messagelqi_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/LastMessageLQI
 *
 * @param base_topic    topic prefix to publish, /last_messagelqi
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_last_messagelqi_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Diagnostics/Attributes/LastMessageRSSI
 *
 * @param base_topic    topic prefix to publish, /last_messagerssi
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_last_messagerssi_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Diagnostics/Attributes/LastMessageRSSI
 *
 * @param base_topic    topic prefix to publish, /last_messagerssi
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_diagnostics_last_messagerssi_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Diagnostics/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Diagnostics/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_diagnostics_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Diagnostics/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Diagnostics/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_diagnostics_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Diagnostics Cluster
 *
 * This function will iterate over all Commands in the Diagnostics Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_diagnostics_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Diagnostics Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_diagnostics_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the protocol_controller_rf_telemetry cluster
typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* sourceunid,

    const char* destinationunid,

    bool transmission_successful,

    uint16_t transmission_time_ms,

    int8_t tx_powerd_bm,

    uint8_t tx_channel,

    uint8_t routing_attempts,

    bool route_changed,

    TxReportTransmissionSpeed transmission_speed,

    int8_t measured_noise_floord_bm,

    uint8_t last_route_repeaters_count,
    const char* *last_route_repeaters,

    uint8_t incomingrssi_repeaters_count,
    const int8_t *incomingrssi_repeaters,

    int8_t ackrssi,

    uint8_t ack_channel,

    const char* last_route_failed_link_functionalunid,

    const char* last_route_failed_link_non_functionalunid,

    int8_t destination_ack_tx_powerd_bm,

    int8_t destination_ack_measuredrssi,

    int8_t destination_ack_measured_noise_floor

);

typedef struct {
  bool tx_report_enabled;
  bool pti_enabled;
} uic_mqtt_dotdot_protocol_controller_rf_telemetry_state_t;

typedef struct {
  bool tx_report_enabled;
  bool pti_enabled;
} uic_mqtt_dotdot_protocol_controller_rf_telemetry_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_protocol_controller_rf_telemetry_state_t,
    uic_mqtt_dotdot_protocol_controller_rf_telemetry_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_protocol_controller_rf_telemetry_updated_state_t
);


/**
 * @brief Command fields for ProtocolController-RFTelemetry/TxReport
 */
typedef struct {
  const char* sourceunid;

  const char* destinationunid;

  bool transmission_successful;

  uint16_t transmission_time_ms;

  int8_t tx_powerd_bm;

  uint8_t tx_channel;

  uint8_t routing_attempts;

  bool route_changed;

  TxReportTransmissionSpeed transmission_speed;

  int8_t measured_noise_floord_bm;

  uint8_t last_route_repeaters_count;
  const char* *last_route_repeaters;

  uint8_t incomingrssi_repeaters_count;
  const int8_t *incomingrssi_repeaters;

  int8_t ackrssi;

  uint8_t ack_channel;

  const char* last_route_failed_link_functionalunid;

  const char* last_route_failed_link_non_functionalunid;

  int8_t destination_ack_tx_powerd_bm;

  int8_t destination_ack_measuredrssi;

  int8_t destination_ack_measured_noise_floor;
} uic_mqtt_dotdot_protocol_controller_rf_telemetry_command_tx_report_fields_t;


/**
 * @brief Setup callback to be called when a
 * ProtocolController-RFTelemetry/Commands/tx_report is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_set(const uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ProtocolController-RFTelemetry/Commands/tx_report is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_unset(const uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ProtocolController-RFTelemetry/Commands/tx_report is received.
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ProtocolController-RFTelemetry/GeneratedCommands/tx_report is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_generated_tx_report_callback_set(const uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ProtocolController-RFTelemetry/GeneratedCommands/tx_report is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_generated_tx_report_callback_unset(const uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ProtocolController-RFTelemetry/GeneratedCommands/tx_report is received.
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_generated_tx_report_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/protocol_controller_rf_telemetry/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_protocol_controller_rf_telemetry_write_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_rf_telemetry_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/protocol_controller_rf_telemetry/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_protocol_controller_rf_telemetry_write_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_rf_telemetry_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/protocol_controller_rf_telemetry/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_protocol_controller_rf_telemetry_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/protocol_controller_rf_telemetry/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_protocol_controller_rf_telemetry_force_read_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_rf_telemetry_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/protocol_controller_rf_telemetry/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_protocol_controller_rf_telemetry_force_read_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_rf_telemetry_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/protocol_controller_rf_telemetry/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_protocol_controller_rf_telemetry_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ProtocolController-RFTelemetry/Attributes/TxReportEnabled
 *
 * @param base_topic    topic prefix to publish, /tx_report_enabled
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_enabled_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ProtocolController-RFTelemetry/Attributes/TxReportEnabled
 *
 * @param base_topic    topic prefix to publish, /tx_report_enabled
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_enabled_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ProtocolController-RFTelemetry/Attributes/PTIEnabled
 *
 * @param base_topic    topic prefix to publish, /pti_enabled
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_pti_enabled_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ProtocolController-RFTelemetry/Attributes/PTIEnabled
 *
 * @param base_topic    topic prefix to publish, /pti_enabled
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_pti_enabled_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ProtocolController-RFTelemetry/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ProtocolController-RFTelemetry/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ProtocolController-RFTelemetry/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ProtocolController-RFTelemetry/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ProtocolController-RFTelemetry Cluster
 *
 * This function will iterate over all Commands in the ProtocolController-RFTelemetry Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ProtocolController-RFTelemetry Cluster
 *
 * @param unid
 * )
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_publish_empty_supported_commands(
  const dotdot_unid_t unid
  );
// Callback types used by the state cluster
typedef sl_status_t (*uic_mqtt_dotdot_state_remove_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_state_remove_offline_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_state_discover_neighbors_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_state_interview_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_state_discover_security_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  size_t endpoint_id_list_count;
  const uint8_t* endpoint_id_list;
  uint8_t network_status;
  uint8_t security;
  uint32_t maximum_command_delay;
  size_t network_list_count;
  const char** network_list;
} uic_mqtt_dotdot_state_state_t;

typedef struct {
  bool endpoint_id_list;
  bool network_status;
  bool security;
  bool maximum_command_delay;
  bool network_list;
} uic_mqtt_dotdot_state_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_state_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_state_state_t,
    uic_mqtt_dotdot_state_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_state_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_state_updated_state_t
);



/**
 * @brief Setup callback to be called when a
 * State/Commands/remove is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_remove_callback_set(const uic_mqtt_dotdot_state_remove_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * State/Commands/remove is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_remove_callback_unset(const uic_mqtt_dotdot_state_remove_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * State/Commands/remove is received.
 */
void uic_mqtt_dotdot_state_remove_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/State/GeneratedCommands/remove is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_generated_remove_callback_set(const uic_mqtt_dotdot_state_remove_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/State/GeneratedCommands/remove is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_generated_remove_callback_unset(const uic_mqtt_dotdot_state_remove_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/State/GeneratedCommands/remove is received.
 */
void uic_mqtt_dotdot_state_generated_remove_callback_clear();
/**
 * @brief Setup callback to be called when a
 * State/Commands/remove_offline is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_remove_offline_callback_set(const uic_mqtt_dotdot_state_remove_offline_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * State/Commands/remove_offline is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_remove_offline_callback_unset(const uic_mqtt_dotdot_state_remove_offline_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * State/Commands/remove_offline is received.
 */
void uic_mqtt_dotdot_state_remove_offline_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/State/GeneratedCommands/remove_offline is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_generated_remove_offline_callback_set(const uic_mqtt_dotdot_state_remove_offline_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/State/GeneratedCommands/remove_offline is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_generated_remove_offline_callback_unset(const uic_mqtt_dotdot_state_remove_offline_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/State/GeneratedCommands/remove_offline is received.
 */
void uic_mqtt_dotdot_state_generated_remove_offline_callback_clear();
/**
 * @brief Setup callback to be called when a
 * State/Commands/discover_neighbors is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_discover_neighbors_callback_set(const uic_mqtt_dotdot_state_discover_neighbors_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * State/Commands/discover_neighbors is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_discover_neighbors_callback_unset(const uic_mqtt_dotdot_state_discover_neighbors_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * State/Commands/discover_neighbors is received.
 */
void uic_mqtt_dotdot_state_discover_neighbors_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/State/GeneratedCommands/discover_neighbors is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_generated_discover_neighbors_callback_set(const uic_mqtt_dotdot_state_discover_neighbors_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/State/GeneratedCommands/discover_neighbors is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_generated_discover_neighbors_callback_unset(const uic_mqtt_dotdot_state_discover_neighbors_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/State/GeneratedCommands/discover_neighbors is received.
 */
void uic_mqtt_dotdot_state_generated_discover_neighbors_callback_clear();
/**
 * @brief Setup callback to be called when a
 * State/Commands/interview is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_interview_callback_set(const uic_mqtt_dotdot_state_interview_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * State/Commands/interview is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_interview_callback_unset(const uic_mqtt_dotdot_state_interview_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * State/Commands/interview is received.
 */
void uic_mqtt_dotdot_state_interview_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/State/GeneratedCommands/interview is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_generated_interview_callback_set(const uic_mqtt_dotdot_state_interview_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/State/GeneratedCommands/interview is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_generated_interview_callback_unset(const uic_mqtt_dotdot_state_interview_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/State/GeneratedCommands/interview is received.
 */
void uic_mqtt_dotdot_state_generated_interview_callback_clear();
/**
 * @brief Setup callback to be called when a
 * State/Commands/discover_security is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_discover_security_callback_set(const uic_mqtt_dotdot_state_discover_security_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * State/Commands/discover_security is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_discover_security_callback_unset(const uic_mqtt_dotdot_state_discover_security_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * State/Commands/discover_security is received.
 */
void uic_mqtt_dotdot_state_discover_security_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/State/GeneratedCommands/discover_security is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_state_generated_discover_security_callback_set(const uic_mqtt_dotdot_state_discover_security_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/State/GeneratedCommands/discover_security is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_state_generated_discover_security_callback_unset(const uic_mqtt_dotdot_state_discover_security_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/State/GeneratedCommands/discover_security is received.
 */
void uic_mqtt_dotdot_state_generated_discover_security_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/state/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_state_write_attributes_callback(
  const uic_mqtt_dotdot_state_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/state/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_state_write_attributes_callback(
  const uic_mqtt_dotdot_state_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/state/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_state_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/state/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_state_force_read_attributes_callback(
  const uic_mqtt_dotdot_state_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/state/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_state_force_read_attributes_callback(
  const uic_mqtt_dotdot_state_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/state/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_state_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; State/Attributes/EndpointIdList
 *
 * @param base_topic    topic prefix to publish, /endpoint_id_list
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_endpoint_id_list_publish(
  const char *base_topic,
  size_t value_count,
  const uint8_t* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; State/Attributes/EndpointIdList
 *
 * @param base_topic    topic prefix to publish, /endpoint_id_list
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_endpoint_id_list_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; State/Attributes/NetworkStatus
 *
 * @param base_topic    topic prefix to publish, /network_status
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_network_status_publish(
  const char *base_topic,
  NodeStateNetworkStatus value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; State/Attributes/NetworkStatus
 *
 * @param base_topic    topic prefix to publish, /network_status
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_network_status_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; State/Attributes/Security
 *
 * @param base_topic    topic prefix to publish, /security
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_security_publish(
  const char *base_topic,
  NodeStateSecurity value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; State/Attributes/Security
 *
 * @param base_topic    topic prefix to publish, /security
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_security_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; State/Attributes/MaximumCommandDelay
 *
 * @param base_topic    topic prefix to publish, /maximum_command_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_maximum_command_delay_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; State/Attributes/MaximumCommandDelay
 *
 * @param base_topic    topic prefix to publish, /maximum_command_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_maximum_command_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; State/Attributes/NetworkList
 *
 * @param base_topic    topic prefix to publish, /network_list
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_network_list_publish(
  const char *base_topic,
  size_t value_count,
  const char** value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; State/Attributes/NetworkList
 *
 * @param base_topic    topic prefix to publish, /network_list
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_state_network_list_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the State/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /State/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_state_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to State/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /State/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_state_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the State Cluster
 *
 * This function will iterate over all Commands in the State Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_state_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the State Cluster
 *
 * @param unid
 * )
 */
void uic_mqtt_dotdot_state_publish_empty_supported_commands(
  const dotdot_unid_t unid
  );
// Callback types used by the binding cluster
typedef sl_status_t (*uic_mqtt_dotdot_binding_bind_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* cluster_name,

    const char* destination_unid,

    uint8_t destination_ep

);
typedef sl_status_t (*uic_mqtt_dotdot_binding_unbind_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* cluster_name,

    const char* destination_unid,

    uint8_t destination_ep

);
typedef sl_status_t (*uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* cluster_name

);
typedef sl_status_t (*uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* cluster_name

);

typedef struct {
  bool binding_table_full;
  size_t bindable_cluster_list_count;
  const char** bindable_cluster_list;
  size_t binding_table_count;
  const BindingObject* binding_table;
} uic_mqtt_dotdot_binding_state_t;

typedef struct {
  bool binding_table_full;
  bool bindable_cluster_list;
  bool binding_table;
} uic_mqtt_dotdot_binding_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_binding_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_binding_state_t,
    uic_mqtt_dotdot_binding_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_binding_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_binding_updated_state_t
);


/**
 * @brief Command fields for Binding/Bind
 */
typedef struct {
  const char* cluster_name;

  const char* destination_unid;

  uint8_t destination_ep;
} uic_mqtt_dotdot_binding_command_bind_fields_t;

/**
 * @brief Command fields for Binding/Unbind
 */
typedef struct {
  const char* cluster_name;

  const char* destination_unid;

  uint8_t destination_ep;
} uic_mqtt_dotdot_binding_command_unbind_fields_t;

/**
 * @brief Command fields for Binding/BindToProtocolController
 */
typedef struct {
  const char* cluster_name;
} uic_mqtt_dotdot_binding_command_bind_to_protocol_controller_fields_t;

/**
 * @brief Command fields for Binding/UnbindFromProtocolController
 */
typedef struct {
  const char* cluster_name;
} uic_mqtt_dotdot_binding_command_unbind_from_protocol_controller_fields_t;


/**
 * @brief Setup callback to be called when a
 * Binding/Commands/bind is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_bind_callback_set(const uic_mqtt_dotdot_binding_bind_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Binding/Commands/bind is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_bind_callback_unset(const uic_mqtt_dotdot_binding_bind_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Binding/Commands/bind is received.
 */
void uic_mqtt_dotdot_binding_bind_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Binding/GeneratedCommands/bind is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_generated_bind_callback_set(const uic_mqtt_dotdot_binding_bind_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Binding/GeneratedCommands/bind is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_generated_bind_callback_unset(const uic_mqtt_dotdot_binding_bind_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Binding/GeneratedCommands/bind is received.
 */
void uic_mqtt_dotdot_binding_generated_bind_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Binding/Commands/unbind is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_unbind_callback_set(const uic_mqtt_dotdot_binding_unbind_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Binding/Commands/unbind is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_unbind_callback_unset(const uic_mqtt_dotdot_binding_unbind_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Binding/Commands/unbind is received.
 */
void uic_mqtt_dotdot_binding_unbind_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Binding/GeneratedCommands/unbind is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_generated_unbind_callback_set(const uic_mqtt_dotdot_binding_unbind_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Binding/GeneratedCommands/unbind is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_generated_unbind_callback_unset(const uic_mqtt_dotdot_binding_unbind_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Binding/GeneratedCommands/unbind is received.
 */
void uic_mqtt_dotdot_binding_generated_unbind_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Binding/Commands/bind_to_protocol_controller is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_set(const uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Binding/Commands/bind_to_protocol_controller is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_unset(const uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Binding/Commands/bind_to_protocol_controller is received.
 */
void uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Binding/GeneratedCommands/bind_to_protocol_controller is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_generated_bind_to_protocol_controller_callback_set(const uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Binding/GeneratedCommands/bind_to_protocol_controller is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_generated_bind_to_protocol_controller_callback_unset(const uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Binding/GeneratedCommands/bind_to_protocol_controller is received.
 */
void uic_mqtt_dotdot_binding_generated_bind_to_protocol_controller_callback_clear();
/**
 * @brief Setup callback to be called when a
 * Binding/Commands/unbind_from_protocol_controller is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_set(const uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * Binding/Commands/unbind_from_protocol_controller is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_unset(const uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * Binding/Commands/unbind_from_protocol_controller is received.
 */
void uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/Binding/GeneratedCommands/unbind_from_protocol_controller is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_binding_generated_unbind_from_protocol_controller_callback_set(const uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/Binding/GeneratedCommands/unbind_from_protocol_controller is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_binding_generated_unbind_from_protocol_controller_callback_unset(const uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/Binding/GeneratedCommands/unbind_from_protocol_controller is received.
 */
void uic_mqtt_dotdot_binding_generated_unbind_from_protocol_controller_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/binding/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_binding_write_attributes_callback(
  const uic_mqtt_dotdot_binding_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/binding/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_binding_write_attributes_callback(
  const uic_mqtt_dotdot_binding_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/binding/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_binding_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/binding/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_binding_force_read_attributes_callback(
  const uic_mqtt_dotdot_binding_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/binding/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_binding_force_read_attributes_callback(
  const uic_mqtt_dotdot_binding_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/binding/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_binding_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; Binding/Attributes/BindingTableFull
 *
 * @param base_topic    topic prefix to publish, /binding_table_full
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_binding_binding_table_full_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Binding/Attributes/BindingTableFull
 *
 * @param base_topic    topic prefix to publish, /binding_table_full
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_binding_binding_table_full_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Binding/Attributes/BindableClusterList
 *
 * @param base_topic    topic prefix to publish, /bindable_cluster_list
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_binding_bindable_cluster_list_publish(
  const char *base_topic,
  size_t value_count,
  const char** value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Binding/Attributes/BindableClusterList
 *
 * @param base_topic    topic prefix to publish, /bindable_cluster_list
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_binding_bindable_cluster_list_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; Binding/Attributes/BindingTable
 *
 * @param base_topic    topic prefix to publish, /binding_table
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_binding_binding_table_publish(
  const char *base_topic,
  size_t value_count,
  const BindingObject* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; Binding/Attributes/BindingTable
 *
 * @param base_topic    topic prefix to publish, /binding_table
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_binding_binding_table_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the Binding/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Binding/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_binding_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to Binding/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /Binding/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_binding_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the Binding Cluster
 *
 * This function will iterate over all Commands in the Binding Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_binding_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the Binding Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_binding_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the system_metrics cluster

typedef struct {
  uint32_t reporting_interval_seconds;
  size_t cpu_usage_percent_count;
  const double* cpu_usage_percent;
  size_t cpu_frequencym_hz_count;
  const double* cpu_frequencym_hz;
  size_t cpu_average_usage_percent_count;
  const double* cpu_average_usage_percent;
  size_t cpu_min_usage_percent_count;
  const double* cpu_min_usage_percent;
  size_t cpu_max_usage_percent_count;
  const double* cpu_max_usage_percent;
  double ram_totalmb;
  double ram_freemb;
  double ram_availablemb;
  double swap_memory_totalmb;
  double swap_memory_usedmb;
  double virtual_memory_totalmb;
  double virtual_memory_usedmb;
  size_t disks_usage_count;
  const DiskUsageData* disks_usage;
  size_t disks_counters_count;
  const DiskIOCounters* disks_counters;
  size_t network_interfaces_data_count;
  const NetworkInterfaceData* network_interfaces_data;
  size_t wireless_network_interfaces_data_count;
  const WirelessNetworkInterfaceData* wireless_network_interfaces_data;
  const char* hostname;
  const char* fqdn;
  uint64_t uptime_minutes;
  double current_temperature_celcius;
  double average_temperature_celcius;
  double min_temperature_celcius;
  double max_temperature_celcius;
  bool power_plugged;
  double battery_percentage;
  uint64_t system_interrupts;
} uic_mqtt_dotdot_system_metrics_state_t;

typedef struct {
  bool reporting_interval_seconds;
  bool cpu_usage_percent;
  bool cpu_frequencym_hz;
  bool cpu_average_usage_percent;
  bool cpu_min_usage_percent;
  bool cpu_max_usage_percent;
  bool ram_totalmb;
  bool ram_freemb;
  bool ram_availablemb;
  bool swap_memory_totalmb;
  bool swap_memory_usedmb;
  bool virtual_memory_totalmb;
  bool virtual_memory_usedmb;
  bool disks_usage;
  bool disks_counters;
  bool network_interfaces_data;
  bool wireless_network_interfaces_data;
  bool hostname;
  bool fqdn;
  bool uptime_minutes;
  bool current_temperature_celcius;
  bool average_temperature_celcius;
  bool min_temperature_celcius;
  bool max_temperature_celcius;
  bool power_plugged;
  bool battery_percentage;
  bool system_interrupts;
} uic_mqtt_dotdot_system_metrics_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_system_metrics_state_t,
    uic_mqtt_dotdot_system_metrics_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_system_metrics_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/system_metrics/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_system_metrics_write_attributes_callback(
  const uic_mqtt_dotdot_system_metrics_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/system_metrics/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_system_metrics_write_attributes_callback(
  const uic_mqtt_dotdot_system_metrics_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/system_metrics/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_system_metrics_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/system_metrics/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_system_metrics_force_read_attributes_callback(
  const uic_mqtt_dotdot_system_metrics_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/system_metrics/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_system_metrics_force_read_attributes_callback(
  const uic_mqtt_dotdot_system_metrics_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/system_metrics/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_system_metrics_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/ReportingIntervalSeconds
 *
 * @param base_topic    topic prefix to publish, /reporting_interval_seconds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_reporting_interval_seconds_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/ReportingIntervalSeconds
 *
 * @param base_topic    topic prefix to publish, /reporting_interval_seconds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_reporting_interval_seconds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/CPUUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_usage_percent
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_usage_percent_publish(
  const char *base_topic,
  size_t value_count,
  const double* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/CPUUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/CPUFrequencyMHz
 *
 * @param base_topic    topic prefix to publish, /cpu_frequencym_hz
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_frequencym_hz_publish(
  const char *base_topic,
  size_t value_count,
  const double* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/CPUFrequencyMHz
 *
 * @param base_topic    topic prefix to publish, /cpu_frequencym_hz
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_frequencym_hz_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/CPUAverageUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_average_usage_percent
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_average_usage_percent_publish(
  const char *base_topic,
  size_t value_count,
  const double* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/CPUAverageUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_average_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_average_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/CPUMinUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_min_usage_percent
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_min_usage_percent_publish(
  const char *base_topic,
  size_t value_count,
  const double* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/CPUMinUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_min_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_min_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/CPUMaxUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_max_usage_percent
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_max_usage_percent_publish(
  const char *base_topic,
  size_t value_count,
  const double* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/CPUMaxUsagePercent
 *
 * @param base_topic    topic prefix to publish, /cpu_max_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_cpu_max_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/RAMTotalMB
 *
 * @param base_topic    topic prefix to publish, /ram_totalmb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_ram_totalmb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/RAMTotalMB
 *
 * @param base_topic    topic prefix to publish, /ram_totalmb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_ram_totalmb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/RAMFreeMB
 *
 * @param base_topic    topic prefix to publish, /ram_freemb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_ram_freemb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/RAMFreeMB
 *
 * @param base_topic    topic prefix to publish, /ram_freemb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_ram_freemb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/RAMAvailableMB
 *
 * @param base_topic    topic prefix to publish, /ram_availablemb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_ram_availablemb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/RAMAvailableMB
 *
 * @param base_topic    topic prefix to publish, /ram_availablemb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_ram_availablemb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/SWAPMemoryTotalMB
 *
 * @param base_topic    topic prefix to publish, /swap_memory_totalmb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_swap_memory_totalmb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/SWAPMemoryTotalMB
 *
 * @param base_topic    topic prefix to publish, /swap_memory_totalmb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_swap_memory_totalmb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/SWAPMemoryUsedMB
 *
 * @param base_topic    topic prefix to publish, /swap_memory_usedmb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_swap_memory_usedmb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/SWAPMemoryUsedMB
 *
 * @param base_topic    topic prefix to publish, /swap_memory_usedmb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_swap_memory_usedmb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/VirtualMemoryTotalMB
 *
 * @param base_topic    topic prefix to publish, /virtual_memory_totalmb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_virtual_memory_totalmb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/VirtualMemoryTotalMB
 *
 * @param base_topic    topic prefix to publish, /virtual_memory_totalmb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_virtual_memory_totalmb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/VirtualMemoryUsedMB
 *
 * @param base_topic    topic prefix to publish, /virtual_memory_usedmb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_virtual_memory_usedmb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/VirtualMemoryUsedMB
 *
 * @param base_topic    topic prefix to publish, /virtual_memory_usedmb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_virtual_memory_usedmb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/DisksUsage
 *
 * @param base_topic    topic prefix to publish, /disks_usage
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_disks_usage_publish(
  const char *base_topic,
  size_t value_count,
  const DiskUsageData* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/DisksUsage
 *
 * @param base_topic    topic prefix to publish, /disks_usage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_disks_usage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/DisksCounters
 *
 * @param base_topic    topic prefix to publish, /disks_counters
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_disks_counters_publish(
  const char *base_topic,
  size_t value_count,
  const DiskIOCounters* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/DisksCounters
 *
 * @param base_topic    topic prefix to publish, /disks_counters
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_disks_counters_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/NetworkInterfacesData
 *
 * @param base_topic    topic prefix to publish, /network_interfaces_data
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_network_interfaces_data_publish(
  const char *base_topic,
  size_t value_count,
  const NetworkInterfaceData* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/NetworkInterfacesData
 *
 * @param base_topic    topic prefix to publish, /network_interfaces_data
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_network_interfaces_data_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/WirelessNetworkInterfacesData
 *
 * @param base_topic    topic prefix to publish, /wireless_network_interfaces_data
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_wireless_network_interfaces_data_publish(
  const char *base_topic,
  size_t value_count,
  const WirelessNetworkInterfaceData* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/WirelessNetworkInterfacesData
 *
 * @param base_topic    topic prefix to publish, /wireless_network_interfaces_data
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_wireless_network_interfaces_data_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/Hostname
 *
 * @param base_topic    topic prefix to publish, /hostname
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_hostname_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/Hostname
 *
 * @param base_topic    topic prefix to publish, /hostname
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_hostname_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/FQDN
 *
 * @param base_topic    topic prefix to publish, /fqdn
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_fqdn_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/FQDN
 *
 * @param base_topic    topic prefix to publish, /fqdn
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_fqdn_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/UptimeMinutes
 *
 * @param base_topic    topic prefix to publish, /uptime_minutes
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_uptime_minutes_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/UptimeMinutes
 *
 * @param base_topic    topic prefix to publish, /uptime_minutes
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_uptime_minutes_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/CurrentTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /current_temperature_celcius
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_current_temperature_celcius_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/CurrentTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /current_temperature_celcius
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_current_temperature_celcius_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/AverageTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /average_temperature_celcius
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_average_temperature_celcius_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/AverageTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /average_temperature_celcius
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_average_temperature_celcius_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/MinTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /min_temperature_celcius
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_min_temperature_celcius_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/MinTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /min_temperature_celcius
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_min_temperature_celcius_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/MaxTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /max_temperature_celcius
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_max_temperature_celcius_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/MaxTemperatureCelcius
 *
 * @param base_topic    topic prefix to publish, /max_temperature_celcius
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_max_temperature_celcius_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/PowerPlugged
 *
 * @param base_topic    topic prefix to publish, /power_plugged
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_power_plugged_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/PowerPlugged
 *
 * @param base_topic    topic prefix to publish, /power_plugged
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_power_plugged_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/BatteryPercentage
 *
 * @param base_topic    topic prefix to publish, /battery_percentage
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_battery_percentage_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/BatteryPercentage
 *
 * @param base_topic    topic prefix to publish, /battery_percentage
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_battery_percentage_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; SystemMetrics/Attributes/SystemInterrupts
 *
 * @param base_topic    topic prefix to publish, /system_interrupts
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_system_interrupts_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; SystemMetrics/Attributes/SystemInterrupts
 *
 * @param base_topic    topic prefix to publish, /system_interrupts
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_system_metrics_system_interrupts_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the SystemMetrics/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /SystemMetrics/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_system_metrics_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to SystemMetrics/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /SystemMetrics/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_system_metrics_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the SystemMetrics Cluster
 *
 * This function will iterate over all Commands in the SystemMetrics Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_system_metrics_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the SystemMetrics Cluster
 *
 * @param unid
 * )
 */
void uic_mqtt_dotdot_system_metrics_publish_empty_supported_commands(
  const dotdot_unid_t unid
  );
// Callback types used by the application_monitoring cluster
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_log_entry_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* timestamp,

    LoggingLevelEnum log_level,

    const char* log_tag,

    const char* log_message

);

typedef struct {
  const char* application_name;
  const char* application_version;
  bool application_connected;
  size_t applicationmqtt_topics_count;
  const char** applicationmqtt_topics;
  uint64_t uptime_minutes;
  uint64_t process_id;
  const char* hostname;
  const char* fqdn;
  bool mqtt_logging_enabled;
  uint8_t mqtt_logging_level;
  uint32_t mqtt_statistics_reporting_interval_seconds;
  uint64_t mqtt_messages_sent;
  uint64_t mqtt_messages_received;
  uint64_t mqtt_subscription_count;
  double mqtt_average_delivery_time_seconds;
  double mqtt_min_delivery_time_seconds;
  double mqtt_max_delivery_time_seconds;
  uint32_t application_statistics_reporting_interval_seconds;
  double applicationcpu_usage_percent;
  double applicationcpu_average_usage_percent;
  double applicationcpu_min_usage_percent;
  double applicationcpu_max_usage_percent;
  double applicationram_usagemb;
} uic_mqtt_dotdot_application_monitoring_state_t;

typedef struct {
  bool application_name;
  bool application_version;
  bool application_connected;
  bool applicationmqtt_topics;
  bool uptime_minutes;
  bool process_id;
  bool hostname;
  bool fqdn;
  bool mqtt_logging_enabled;
  bool mqtt_logging_level;
  bool mqtt_statistics_reporting_interval_seconds;
  bool mqtt_messages_sent;
  bool mqtt_messages_received;
  bool mqtt_subscription_count;
  bool mqtt_average_delivery_time_seconds;
  bool mqtt_min_delivery_time_seconds;
  bool mqtt_max_delivery_time_seconds;
  bool application_statistics_reporting_interval_seconds;
  bool applicationcpu_usage_percent;
  bool applicationcpu_average_usage_percent;
  bool applicationcpu_min_usage_percent;
  bool applicationcpu_max_usage_percent;
  bool applicationram_usagemb;
} uic_mqtt_dotdot_application_monitoring_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_application_monitoring_state_t,
    uic_mqtt_dotdot_application_monitoring_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_application_monitoring_updated_state_t
);


/**
 * @brief Command fields for ApplicationMonitoring/LogEntry
 */
typedef struct {
  const char* timestamp;

  LoggingLevelEnum log_level;

  const char* log_tag;

  const char* log_message;
} uic_mqtt_dotdot_application_monitoring_command_log_entry_fields_t;


/**
 * @brief Setup callback to be called when a
 * ApplicationMonitoring/Commands/log_entry is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_application_monitoring_log_entry_callback_set(const uic_mqtt_dotdot_application_monitoring_log_entry_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ApplicationMonitoring/Commands/log_entry is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_application_monitoring_log_entry_callback_unset(const uic_mqtt_dotdot_application_monitoring_log_entry_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ApplicationMonitoring/Commands/log_entry is received.
 */
void uic_mqtt_dotdot_application_monitoring_log_entry_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ApplicationMonitoring/GeneratedCommands/log_entry is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_application_monitoring_generated_log_entry_callback_set(const uic_mqtt_dotdot_application_monitoring_log_entry_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ApplicationMonitoring/GeneratedCommands/log_entry is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_application_monitoring_generated_log_entry_callback_unset(const uic_mqtt_dotdot_application_monitoring_log_entry_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ApplicationMonitoring/GeneratedCommands/log_entry is received.
 */
void uic_mqtt_dotdot_application_monitoring_generated_log_entry_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/application_monitoring/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_application_monitoring_write_attributes_callback(
  const uic_mqtt_dotdot_application_monitoring_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/application_monitoring/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_application_monitoring_write_attributes_callback(
  const uic_mqtt_dotdot_application_monitoring_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/application_monitoring/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_application_monitoring_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/application_monitoring/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_application_monitoring_force_read_attributes_callback(
  const uic_mqtt_dotdot_application_monitoring_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/application_monitoring/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_application_monitoring_force_read_attributes_callback(
  const uic_mqtt_dotdot_application_monitoring_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/application_monitoring/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_application_monitoring_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationName
 *
 * @param base_topic    topic prefix to publish, /application_name
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_name_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationName
 *
 * @param base_topic    topic prefix to publish, /application_name
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_name_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationVersion
 *
 * @param base_topic    topic prefix to publish, /application_version
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_version_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationVersion
 *
 * @param base_topic    topic prefix to publish, /application_version
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_version_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationConnected
 *
 * @param base_topic    topic prefix to publish, /application_connected
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_connected_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationConnected
 *
 * @param base_topic    topic prefix to publish, /application_connected
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_connected_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationMQTTTopics
 *
 * @param base_topic    topic prefix to publish, /applicationmqtt_topics
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationmqtt_topics_publish(
  const char *base_topic,
  size_t value_count,
  const char** value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationMQTTTopics
 *
 * @param base_topic    topic prefix to publish, /applicationmqtt_topics
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationmqtt_topics_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/UptimeMinutes
 *
 * @param base_topic    topic prefix to publish, /uptime_minutes
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_uptime_minutes_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/UptimeMinutes
 *
 * @param base_topic    topic prefix to publish, /uptime_minutes
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_uptime_minutes_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ProcessId
 *
 * @param base_topic    topic prefix to publish, /process_id
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_process_id_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ProcessId
 *
 * @param base_topic    topic prefix to publish, /process_id
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_process_id_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/Hostname
 *
 * @param base_topic    topic prefix to publish, /hostname
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_hostname_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/Hostname
 *
 * @param base_topic    topic prefix to publish, /hostname
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_hostname_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/FQDN
 *
 * @param base_topic    topic prefix to publish, /fqdn
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_fqdn_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/FQDN
 *
 * @param base_topic    topic prefix to publish, /fqdn
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_fqdn_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTLoggingEnabled
 *
 * @param base_topic    topic prefix to publish, /mqtt_logging_enabled
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_logging_enabled_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTLoggingEnabled
 *
 * @param base_topic    topic prefix to publish, /mqtt_logging_enabled
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_logging_enabled_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTLoggingLevel
 *
 * @param base_topic    topic prefix to publish, /mqtt_logging_level
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_logging_level_publish(
  const char *base_topic,
  LoggingLevelEnum value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTLoggingLevel
 *
 * @param base_topic    topic prefix to publish, /mqtt_logging_level
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_logging_level_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTStatisticsReportingIntervalSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_statistics_reporting_interval_seconds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTStatisticsReportingIntervalSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_statistics_reporting_interval_seconds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_statistics_reporting_interval_seconds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTMessagesSent
 *
 * @param base_topic    topic prefix to publish, /mqtt_messages_sent
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTMessagesSent
 *
 * @param base_topic    topic prefix to publish, /mqtt_messages_sent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_sent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTMessagesReceived
 *
 * @param base_topic    topic prefix to publish, /mqtt_messages_received
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTMessagesReceived
 *
 * @param base_topic    topic prefix to publish, /mqtt_messages_received
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_messages_received_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTSubscriptionCount
 *
 * @param base_topic    topic prefix to publish, /mqtt_subscription_count
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_subscription_count_publish(
  const char *base_topic,
  uint64_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTSubscriptionCount
 *
 * @param base_topic    topic prefix to publish, /mqtt_subscription_count
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_subscription_count_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTAverageDeliveryTimeSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_average_delivery_time_seconds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_average_delivery_time_seconds_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTAverageDeliveryTimeSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_average_delivery_time_seconds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_average_delivery_time_seconds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTMinDeliveryTimeSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_min_delivery_time_seconds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_min_delivery_time_seconds_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTMinDeliveryTimeSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_min_delivery_time_seconds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_min_delivery_time_seconds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/MQTTMaxDeliveryTimeSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_max_delivery_time_seconds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_max_delivery_time_seconds_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/MQTTMaxDeliveryTimeSeconds
 *
 * @param base_topic    topic prefix to publish, /mqtt_max_delivery_time_seconds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_mqtt_max_delivery_time_seconds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationStatisticsReportingIntervalSeconds
 *
 * @param base_topic    topic prefix to publish, /application_statistics_reporting_interval_seconds
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_statistics_reporting_interval_seconds_publish(
  const char *base_topic,
  uint32_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationStatisticsReportingIntervalSeconds
 *
 * @param base_topic    topic prefix to publish, /application_statistics_reporting_interval_seconds
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_application_statistics_reporting_interval_seconds_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationCPUUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_usage_percent
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_usage_percent_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationCPUUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationCPUAverageUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_average_usage_percent
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_average_usage_percent_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationCPUAverageUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_average_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_average_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationCPUMinUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_min_usage_percent
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_min_usage_percent_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationCPUMinUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_min_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_min_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationCPUMaxUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_max_usage_percent
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_max_usage_percent_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationCPUMaxUsagePercent
 *
 * @param base_topic    topic prefix to publish, /applicationcpu_max_usage_percent
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationcpu_max_usage_percent_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; ApplicationMonitoring/Attributes/ApplicationRAMUsageMB
 *
 * @param base_topic    topic prefix to publish, /applicationram_usagemb
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationram_usagemb_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ApplicationMonitoring/Attributes/ApplicationRAMUsageMB
 *
 * @param base_topic    topic prefix to publish, /applicationram_usagemb
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_applicationram_usagemb_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ApplicationMonitoring/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ApplicationMonitoring/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_application_monitoring_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ApplicationMonitoring/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ApplicationMonitoring/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_application_monitoring_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ApplicationMonitoring Cluster
 *
 * This function will iterate over all Commands in the ApplicationMonitoring Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_application_monitoring_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ApplicationMonitoring Cluster
 *
 * @param unid
 * )
 */
void uic_mqtt_dotdot_application_monitoring_publish_empty_supported_commands(
  const dotdot_unid_t unid
  );
// Callback types used by the name_and_location cluster

typedef struct {
  const char* name;
  const char* location;
} uic_mqtt_dotdot_name_and_location_state_t;

typedef struct {
  bool name;
  bool location;
} uic_mqtt_dotdot_name_and_location_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_name_and_location_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_name_and_location_state_t,
    uic_mqtt_dotdot_name_and_location_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_name_and_location_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_name_and_location_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/name_and_location/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_name_and_location_write_attributes_callback(
  const uic_mqtt_dotdot_name_and_location_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/name_and_location/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_name_and_location_write_attributes_callback(
  const uic_mqtt_dotdot_name_and_location_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/name_and_location/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_name_and_location_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/name_and_location/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_name_and_location_force_read_attributes_callback(
  const uic_mqtt_dotdot_name_and_location_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/name_and_location/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_name_and_location_force_read_attributes_callback(
  const uic_mqtt_dotdot_name_and_location_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/name_and_location/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_name_and_location_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; NameAndLocation/Attributes/Name
 *
 * @param base_topic    topic prefix to publish, /name
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_name_and_location_name_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; NameAndLocation/Attributes/Name
 *
 * @param base_topic    topic prefix to publish, /name
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_name_and_location_name_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; NameAndLocation/Attributes/Location
 *
 * @param base_topic    topic prefix to publish, /location
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_name_and_location_location_publish(
  const char *base_topic,
  const char* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; NameAndLocation/Attributes/Location
 *
 * @param base_topic    topic prefix to publish, /location
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_name_and_location_location_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the NameAndLocation/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /NameAndLocation/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_name_and_location_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to NameAndLocation/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /NameAndLocation/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_name_and_location_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the NameAndLocation Cluster
 *
 * This function will iterate over all Commands in the NameAndLocation Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_name_and_location_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the NameAndLocation Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_name_and_location_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the configuration_parameters cluster
typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t parameter_id

);
typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);
typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t parameter_id,

    int64_t value

);
typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uint16_t first_parameter_id,

    uint16_t last_parameter_id

);

typedef struct {
  size_t configuration_parameters_count;
  const ConfigurationParameter* configuration_parameters;
} uic_mqtt_dotdot_configuration_parameters_state_t;

typedef struct {
  bool configuration_parameters;
} uic_mqtt_dotdot_configuration_parameters_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_configuration_parameters_state_t,
    uic_mqtt_dotdot_configuration_parameters_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_configuration_parameters_updated_state_t
);


/**
 * @brief Command fields for ConfigurationParameters/DiscoverParameter
 */
typedef struct {
  uint16_t parameter_id;
} uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_fields_t;

/**
 * @brief Command fields for ConfigurationParameters/SetParameter
 */
typedef struct {
  uint16_t parameter_id;

  int64_t value;
} uic_mqtt_dotdot_configuration_parameters_command_set_parameter_fields_t;

/**
 * @brief Command fields for ConfigurationParameters/DiscoverParameterRange
 */
typedef struct {
  uint16_t first_parameter_id;

  uint16_t last_parameter_id;
} uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_range_fields_t;


/**
 * @brief Setup callback to be called when a
 * ConfigurationParameters/Commands/discover_parameter is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_set(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ConfigurationParameters/Commands/discover_parameter is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_unset(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ConfigurationParameters/Commands/discover_parameter is received.
 */
void uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/discover_parameter is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_discover_parameter_callback_set(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/discover_parameter is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_discover_parameter_callback_unset(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ConfigurationParameters/GeneratedCommands/discover_parameter is received.
 */
void uic_mqtt_dotdot_configuration_parameters_generated_discover_parameter_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ConfigurationParameters/Commands/default_reset_all_parameters is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_set(const uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ConfigurationParameters/Commands/default_reset_all_parameters is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_unset(const uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ConfigurationParameters/Commands/default_reset_all_parameters is received.
 */
void uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/default_reset_all_parameters is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_default_reset_all_parameters_callback_set(const uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/default_reset_all_parameters is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_default_reset_all_parameters_callback_unset(const uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ConfigurationParameters/GeneratedCommands/default_reset_all_parameters is received.
 */
void uic_mqtt_dotdot_configuration_parameters_generated_default_reset_all_parameters_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ConfigurationParameters/Commands/set_parameter is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_set(const uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ConfigurationParameters/Commands/set_parameter is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_unset(const uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ConfigurationParameters/Commands/set_parameter is received.
 */
void uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/set_parameter is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_set_parameter_callback_set(const uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/set_parameter is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_set_parameter_callback_unset(const uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ConfigurationParameters/GeneratedCommands/set_parameter is received.
 */
void uic_mqtt_dotdot_configuration_parameters_generated_set_parameter_callback_clear();
/**
 * @brief Setup callback to be called when a
 * ConfigurationParameters/Commands/discover_parameter_range is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_set(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ConfigurationParameters/Commands/discover_parameter_range is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_unset(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ConfigurationParameters/Commands/discover_parameter_range is received.
 */
void uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/discover_parameter_range is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_discover_parameter_range_callback_set(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ConfigurationParameters/GeneratedCommands/discover_parameter_range is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_configuration_parameters_generated_discover_parameter_range_callback_unset(const uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ConfigurationParameters/GeneratedCommands/discover_parameter_range is received.
 */
void uic_mqtt_dotdot_configuration_parameters_generated_discover_parameter_range_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/configuration_parameters/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_configuration_parameters_write_attributes_callback(
  const uic_mqtt_dotdot_configuration_parameters_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/configuration_parameters/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_configuration_parameters_write_attributes_callback(
  const uic_mqtt_dotdot_configuration_parameters_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/configuration_parameters/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_configuration_parameters_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/configuration_parameters/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_configuration_parameters_force_read_attributes_callback(
  const uic_mqtt_dotdot_configuration_parameters_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/configuration_parameters/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_configuration_parameters_force_read_attributes_callback(
  const uic_mqtt_dotdot_configuration_parameters_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/configuration_parameters/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_configuration_parameters_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ConfigurationParameters/Attributes/ConfigurationParameters
 *
 * @param base_topic    topic prefix to publish, /configuration_parameters
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_configuration_parameters_configuration_parameters_publish(
  const char *base_topic,
  size_t value_count,
  const ConfigurationParameter* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ConfigurationParameters/Attributes/ConfigurationParameters
 *
 * @param base_topic    topic prefix to publish, /configuration_parameters
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_configuration_parameters_configuration_parameters_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ConfigurationParameters/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ConfigurationParameters/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_configuration_parameters_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ConfigurationParameters/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ConfigurationParameters/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_configuration_parameters_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ConfigurationParameters Cluster
 *
 * This function will iterate over all Commands in the ConfigurationParameters Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_configuration_parameters_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ConfigurationParameters Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_configuration_parameters_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the aox_locator cluster
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_iq_report_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* tag_unid,

    uint8_t channel,

    int8_t rssi,

    uint8_t samples_count,
    const int8_t *samples,

    int32_t sequence

);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_angle_report_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* tag_unid,

    SphericalCoordinates direction,

    SphericalCoordinates deviation,

    int32_t sequence

);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_angle_correction_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    const char* tag_unid,

    SphericalCoordinates direction,

    SphericalCoordinates deviation,

    int32_t sequence

);

typedef struct {
  uint8_t reporting_mode;
  bool position_and_orientation_valid;
  CoordinateAndOrientation position_and_orientation;
  size_t azimuth_mask_count;
  const MinMaxPair* azimuth_mask;
  size_t elevation_mask_count;
  const MinMaxPair* elevation_mask;
  size_t allow_list_count;
  const char** allow_list;
  uint8_t aox_mode;
  uint8_t antenna_mode;
  size_t antenna_array_count;
  const int8_t* antenna_array;
  int8_t period_samples;
  bool angle_filtering;
  double angle_filtering_weight;
  int8_t angle_correction_timeout;
  int8_t angle_correction_delay;
  uint8_t cte_mode;
  int8_t cte_sampling_interval;
  int8_t cte_length;
  int8_t slot_duration;
} uic_mqtt_dotdot_aox_locator_state_t;

typedef struct {
  bool reporting_mode;
  bool position_and_orientation_valid;
  bool position_and_orientation;
  bool azimuth_mask;
  bool elevation_mask;
  bool allow_list;
  bool aox_mode;
  bool antenna_mode;
  bool antenna_array;
  bool period_samples;
  bool angle_filtering;
  bool angle_filtering_weight;
  bool angle_correction_timeout;
  bool angle_correction_delay;
  bool cte_mode;
  bool cte_sampling_interval;
  bool cte_length;
  bool slot_duration;
} uic_mqtt_dotdot_aox_locator_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_aox_locator_state_t,
    uic_mqtt_dotdot_aox_locator_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_aox_locator_updated_state_t
);


/**
 * @brief Command fields for AoXLocator/IQReport
 */
typedef struct {
  const char* tag_unid;

  uint8_t channel;

  int8_t rssi;

  uint8_t samples_count;
  const int8_t *samples;

  int32_t sequence;
} uic_mqtt_dotdot_aox_locator_command_iq_report_fields_t;

/**
 * @brief Command fields for AoXLocator/AngleReport
 */
typedef struct {
  const char* tag_unid;

  SphericalCoordinates direction;

  SphericalCoordinates deviation;

  int32_t sequence;
} uic_mqtt_dotdot_aox_locator_command_angle_report_fields_t;

/**
 * @brief Command fields for AoXLocator/AngleCorrection
 */
typedef struct {
  const char* tag_unid;

  SphericalCoordinates direction;

  SphericalCoordinates deviation;

  int32_t sequence;
} uic_mqtt_dotdot_aox_locator_command_angle_correction_fields_t;


/**
 * @brief Setup callback to be called when a
 * AoXLocator/Commands/iq_report is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_aox_locator_iq_report_callback_set(const uic_mqtt_dotdot_aox_locator_iq_report_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * AoXLocator/Commands/iq_report is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_aox_locator_iq_report_callback_unset(const uic_mqtt_dotdot_aox_locator_iq_report_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * AoXLocator/Commands/iq_report is received.
 */
void uic_mqtt_dotdot_aox_locator_iq_report_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/AoXLocator/GeneratedCommands/iq_report is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_aox_locator_generated_iq_report_callback_set(const uic_mqtt_dotdot_aox_locator_iq_report_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/AoXLocator/GeneratedCommands/iq_report is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_aox_locator_generated_iq_report_callback_unset(const uic_mqtt_dotdot_aox_locator_iq_report_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/AoXLocator/GeneratedCommands/iq_report is received.
 */
void uic_mqtt_dotdot_aox_locator_generated_iq_report_callback_clear();
/**
 * @brief Setup callback to be called when a
 * AoXLocator/Commands/angle_report is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_aox_locator_angle_report_callback_set(const uic_mqtt_dotdot_aox_locator_angle_report_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * AoXLocator/Commands/angle_report is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_aox_locator_angle_report_callback_unset(const uic_mqtt_dotdot_aox_locator_angle_report_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * AoXLocator/Commands/angle_report is received.
 */
void uic_mqtt_dotdot_aox_locator_angle_report_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/AoXLocator/GeneratedCommands/angle_report is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_aox_locator_generated_angle_report_callback_set(const uic_mqtt_dotdot_aox_locator_angle_report_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/AoXLocator/GeneratedCommands/angle_report is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_aox_locator_generated_angle_report_callback_unset(const uic_mqtt_dotdot_aox_locator_angle_report_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/AoXLocator/GeneratedCommands/angle_report is received.
 */
void uic_mqtt_dotdot_aox_locator_generated_angle_report_callback_clear();
/**
 * @brief Setup callback to be called when a
 * AoXLocator/Commands/angle_correction is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_aox_locator_angle_correction_callback_set(const uic_mqtt_dotdot_aox_locator_angle_correction_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * AoXLocator/Commands/angle_correction is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_aox_locator_angle_correction_callback_unset(const uic_mqtt_dotdot_aox_locator_angle_correction_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * AoXLocator/Commands/angle_correction is received.
 */
void uic_mqtt_dotdot_aox_locator_angle_correction_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/AoXLocator/GeneratedCommands/angle_correction is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_aox_locator_generated_angle_correction_callback_set(const uic_mqtt_dotdot_aox_locator_angle_correction_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/AoXLocator/GeneratedCommands/angle_correction is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_aox_locator_generated_angle_correction_callback_unset(const uic_mqtt_dotdot_aox_locator_angle_correction_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/AoXLocator/GeneratedCommands/angle_correction is received.
 */
void uic_mqtt_dotdot_aox_locator_generated_angle_correction_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/aox_locator/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_aox_locator_write_attributes_callback(
  const uic_mqtt_dotdot_aox_locator_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/aox_locator/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_aox_locator_write_attributes_callback(
  const uic_mqtt_dotdot_aox_locator_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/aox_locator/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_aox_locator_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/aox_locator/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_aox_locator_force_read_attributes_callback(
  const uic_mqtt_dotdot_aox_locator_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/aox_locator/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_aox_locator_force_read_attributes_callback(
  const uic_mqtt_dotdot_aox_locator_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/aox_locator/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_aox_locator_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; AoXLocator/Attributes/ReportingMode
 *
 * @param base_topic    topic prefix to publish, /reporting_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_reporting_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/ReportingMode
 *
 * @param base_topic    topic prefix to publish, /reporting_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_reporting_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/PositionAndOrientationValid
 *
 * @param base_topic    topic prefix to publish, /position_and_orientation_valid
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_position_and_orientation_valid_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/PositionAndOrientationValid
 *
 * @param base_topic    topic prefix to publish, /position_and_orientation_valid
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_position_and_orientation_valid_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/PositionAndOrientation
 *
 * @param base_topic    topic prefix to publish, /position_and_orientation
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_position_and_orientation_publish(
  const char *base_topic,
  CoordinateAndOrientation value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/PositionAndOrientation
 *
 * @param base_topic    topic prefix to publish, /position_and_orientation
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_position_and_orientation_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AzimuthMask
 *
 * @param base_topic    topic prefix to publish, /azimuth_mask
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_azimuth_mask_publish(
  const char *base_topic,
  size_t value_count,
  const MinMaxPair* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AzimuthMask
 *
 * @param base_topic    topic prefix to publish, /azimuth_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_azimuth_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/ElevationMask
 *
 * @param base_topic    topic prefix to publish, /elevation_mask
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_elevation_mask_publish(
  const char *base_topic,
  size_t value_count,
  const MinMaxPair* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/ElevationMask
 *
 * @param base_topic    topic prefix to publish, /elevation_mask
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_elevation_mask_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AllowList
 *
 * @param base_topic    topic prefix to publish, /allow_list
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_allow_list_publish(
  const char *base_topic,
  size_t value_count,
  const char** value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AllowList
 *
 * @param base_topic    topic prefix to publish, /allow_list
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_allow_list_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AoXMode
 *
 * @param base_topic    topic prefix to publish, /aox_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_aox_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AoXMode
 *
 * @param base_topic    topic prefix to publish, /aox_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_aox_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AntennaMode
 *
 * @param base_topic    topic prefix to publish, /antenna_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_antenna_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AntennaMode
 *
 * @param base_topic    topic prefix to publish, /antenna_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_antenna_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AntennaArray
 *
 * @param base_topic    topic prefix to publish, /antenna_array
 *                      will be appended
 * @param value_count   Size of the array contained at value
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_antenna_array_publish(
  const char *base_topic,
  size_t value_count,
  const int8_t* value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AntennaArray
 *
 * @param base_topic    topic prefix to publish, /antenna_array
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_antenna_array_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/PeriodSamples
 *
 * @param base_topic    topic prefix to publish, /period_samples
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_period_samples_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/PeriodSamples
 *
 * @param base_topic    topic prefix to publish, /period_samples
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_period_samples_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AngleFiltering
 *
 * @param base_topic    topic prefix to publish, /angle_filtering
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_filtering_publish(
  const char *base_topic,
  bool value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AngleFiltering
 *
 * @param base_topic    topic prefix to publish, /angle_filtering
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_filtering_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AngleFilteringWeight
 *
 * @param base_topic    topic prefix to publish, /angle_filtering_weight
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_filtering_weight_publish(
  const char *base_topic,
  double value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AngleFilteringWeight
 *
 * @param base_topic    topic prefix to publish, /angle_filtering_weight
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_filtering_weight_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AngleCorrectionTimeout
 *
 * @param base_topic    topic prefix to publish, /angle_correction_timeout
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_correction_timeout_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AngleCorrectionTimeout
 *
 * @param base_topic    topic prefix to publish, /angle_correction_timeout
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_correction_timeout_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/AngleCorrectionDelay
 *
 * @param base_topic    topic prefix to publish, /angle_correction_delay
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_correction_delay_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/AngleCorrectionDelay
 *
 * @param base_topic    topic prefix to publish, /angle_correction_delay
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_angle_correction_delay_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/CTEMode
 *
 * @param base_topic    topic prefix to publish, /cte_mode
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_cte_mode_publish(
  const char *base_topic,
  uint8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/CTEMode
 *
 * @param base_topic    topic prefix to publish, /cte_mode
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_cte_mode_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/CTESamplingInterval
 *
 * @param base_topic    topic prefix to publish, /cte_sampling_interval
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_cte_sampling_interval_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/CTESamplingInterval
 *
 * @param base_topic    topic prefix to publish, /cte_sampling_interval
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_cte_sampling_interval_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/CTELength
 *
 * @param base_topic    topic prefix to publish, /cte_length
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_cte_length_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/CTELength
 *
 * @param base_topic    topic prefix to publish, /cte_length
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_cte_length_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Publish the attribute; AoXLocator/Attributes/SlotDuration
 *
 * @param base_topic    topic prefix to publish, /slot_duration
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_slot_duration_publish(
  const char *base_topic,
  int8_t value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXLocator/Attributes/SlotDuration
 *
 * @param base_topic    topic prefix to publish, /slot_duration
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_locator_slot_duration_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the AoXLocator/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /AoXLocator/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_aox_locator_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to AoXLocator/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /AoXLocator/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_aox_locator_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the AoXLocator Cluster
 *
 * This function will iterate over all Commands in the AoXLocator Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_aox_locator_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the AoXLocator Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_aox_locator_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the aox_position_estimation cluster

typedef struct {
  EstimatedPosition position;
} uic_mqtt_dotdot_aox_position_estimation_state_t;

typedef struct {
  bool position;
} uic_mqtt_dotdot_aox_position_estimation_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_aox_position_estimation_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_aox_position_estimation_state_t,
    uic_mqtt_dotdot_aox_position_estimation_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_aox_position_estimation_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_aox_position_estimation_updated_state_t
);




/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/aox_position_estimation/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_aox_position_estimation_write_attributes_callback(
  const uic_mqtt_dotdot_aox_position_estimation_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/aox_position_estimation/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_aox_position_estimation_write_attributes_callback(
  const uic_mqtt_dotdot_aox_position_estimation_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/aox_position_estimation/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_aox_position_estimation_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/aox_position_estimation/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_aox_position_estimation_force_read_attributes_callback(
  const uic_mqtt_dotdot_aox_position_estimation_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/aox_position_estimation/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_aox_position_estimation_force_read_attributes_callback(
  const uic_mqtt_dotdot_aox_position_estimation_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/aox_position_estimation/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_aox_position_estimation_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; AoXPositionEstimation/Attributes/Position
 *
 * @param base_topic    topic prefix to publish, /position
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_position_estimation_position_publish(
  const char *base_topic,
  EstimatedPosition value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; AoXPositionEstimation/Attributes/Position
 *
 * @param base_topic    topic prefix to publish, /position
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_aox_position_estimation_position_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the AoXPositionEstimation/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /AoXPositionEstimation/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_aox_position_estimation_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to AoXPositionEstimation/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /AoXPositionEstimation/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_aox_position_estimation_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the AoXPositionEstimation Cluster
 *
 * This function will iterate over all Commands in the AoXPositionEstimation Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_aox_position_estimation_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the AoXPositionEstimation Cluster
 *
 * @param unid
 * @param endpoint )
 */
void uic_mqtt_dotdot_aox_position_estimation_publish_empty_supported_commands(
  const dotdot_unid_t unid
  ,dotdot_endpoint_id_t endpoint);
// Callback types used by the protocol_controller_network_management cluster
typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_network_management_write_callback_t)(
    dotdot_unid_t unid,
    dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type
);

typedef struct {
  NetworkManagementState network_management_state;
} uic_mqtt_dotdot_protocol_controller_network_management_state_t;

typedef struct {
  bool network_management_state;
} uic_mqtt_dotdot_protocol_controller_network_management_updated_state_t;

typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_network_management_write_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_protocol_controller_network_management_state_t,
    uic_mqtt_dotdot_protocol_controller_network_management_updated_state_t
);

typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_network_management_force_read_attributes_callback_t)(
    const dotdot_unid_t unid,
    const dotdot_endpoint_id_t endpoint,
    uic_mqtt_dotdot_callback_call_type_t call_type,
    uic_mqtt_dotdot_protocol_controller_network_management_updated_state_t
);



/**
 * @brief Setup callback to be called when a
 * ProtocolController-NetworkManagement/Commands/write is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_network_management_write_callback_set(const uic_mqtt_dotdot_protocol_controller_network_management_write_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * ProtocolController-NetworkManagement/Commands/write is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_network_management_write_callback_unset(const uic_mqtt_dotdot_protocol_controller_network_management_write_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * ProtocolController-NetworkManagement/Commands/write is received.
 */
void uic_mqtt_dotdot_protocol_controller_network_management_write_callback_clear();

/**
 * @brief Setup callback to be called when a
 * +/ProtocolController-NetworkManagement/GeneratedCommands/write is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_network_management_generated_write_callback_set(const uic_mqtt_dotdot_protocol_controller_network_management_write_callback_t callback);
/**
 * @brief Unsets callback to be called when a
 * +/ProtocolController-NetworkManagement/GeneratedCommands/write is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_protocol_controller_network_management_generated_write_callback_unset(const uic_mqtt_dotdot_protocol_controller_network_management_write_callback_t callback);
/**
 * @brief Clears all callbacks registered for when
 * +/ProtocolController-NetworkManagement/GeneratedCommands/write is received.
 */
void uic_mqtt_dotdot_protocol_controller_network_management_generated_write_callback_clear();

/**
 * @brief Setup a callback for WriteAttribute to be called when a
 * +/protocol_controller_network_management/Commands/WriteAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_protocol_controller_network_management_write_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_network_management_write_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for WriteAttribute to be called when a
 * +/protocol_controller_network_management/Commands/WriteAttributes is received.
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_protocol_controller_network_management_write_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_network_management_write_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/protocol_controller_network_management/Commands/WriteAttributes is received.
 */
void uic_mqtt_dotdot_clear_protocol_controller_network_management_write_attributes_callbacks();

/**
 * @brief Setup a callback for ForceReadAttributes to be called when a
 * +/protocol_controller_network_management/Commands/ForceReadAttributes is received.
 *
 * Setting this callback will not overwrite the previous set callback
 * @param callback      Function to be called on command reception
 */
void uic_mqtt_dotdot_set_protocol_controller_network_management_force_read_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_network_management_force_read_attributes_callback_t callback
);
/**
 * @brief Unsets a callback for ForceReadAttributes to be called when a
 * +/protocol_controller_network_management/Commands/ForceReadAttributes is received.
 *
 * @param callback      Function to be no longer called on command reception
 */
void uic_mqtt_dotdot_unset_protocol_controller_network_management_force_read_attributes_callback(
  const uic_mqtt_dotdot_protocol_controller_network_management_force_read_attributes_callback_t callback
);
/**
 * @brief Clears all callbacks registered for when
 * +/protocol_controller_network_management/Commands/ForceReadAttributes is received.
 */
void uic_mqtt_dotdot_clear_protocol_controller_network_management_force_read_attributes_callbacks();

/**
 * @brief Publish the attribute; ProtocolController-NetworkManagement/Attributes/NetworkManagementState
 *
 * @param base_topic    topic prefix to publish, /network_management_state
 *                      will be appended
 * @param value         Value to publish
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_network_management_network_management_state_publish(
  const char *base_topic,
  NetworkManagementState value,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);

/**
 * @brief Unretains a published attribute; ProtocolController-NetworkManagement/Attributes/NetworkManagementState
 *
 * @param base_topic    topic prefix to publish, /network_management_state
 *                      will be appended
 * @param publish_type  Whether to publish as Desired, Reported, or Both.
 *
 * @returns SL_STATUS_OK on success
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_network_management_network_management_state_unretain(
  const char *base_topic,
  uic_mqtt_dotdot_attribute_publish_type_t publish_type
);


/**
 * @brief Publish the ProtocolController-NetworkManagement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ProtocolController-NetworkManagement/Attributes/ClusterRevision
 *                      will be appended.
 * @param value         Value to publish.
 */
void uic_mqtt_dotdot_protocol_controller_network_management_publish_cluster_revision(const char* base_topic, uint16_t value);

/**
 * @brief Unretain a publication to ProtocolController-NetworkManagement/ClusterRevision attribute
 *
 * @param base_topic    topic prefix to publish, /ProtocolController-NetworkManagement/Attributes/ClusterRevision
 *                      will be appended.
 */
void uic_mqtt_dotdot_protocol_controller_network_management_unretain_cluster_revision(const char* base_topic);

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint for the ProtocolController-NetworkManagement Cluster
 *
 * This function will iterate over all Commands in the ProtocolController-NetworkManagement Cluster and
 * call all registered callback functions with UNID/endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK.
 * All Cluster Command callback functions that return SL_STATUS_OK
 * will be added to the list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_protocol_controller_network_management_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish an empty array of SupportedCommands for UNID/EndPoint for
 * the ProtocolController-NetworkManagement Cluster
 *
 * @param unid
 * )
 */
void uic_mqtt_dotdot_protocol_controller_network_management_publish_empty_supported_commands(
  const dotdot_unid_t unid
  );

/**
 * @brief Publish the SupportedCommands for UNID/EndPoint
 *
 * This function will iterate over all Commands in all Clusters and call all
 * registered callback functions with unid, endpoint, and
 * callback_type = UIC_MQTT_DOTDOT_CALLBACK_TYPE_SUPPORT_CHECK. All Cluster
 * Command callback functions that return SL_STATUS_OK  will be added to the
 * list of supported commands and published.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_publish_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);

/**
 * @brief Publish emtpy values for SupportedCommands for UNID/EndPoint
 *
 * This function will publish value: [] for SupportedCommands if a publications
 * was already made under the topic.
 *
 * @param unid
 * @param endpoint
 */
void uic_mqtt_dotdot_publish_empty_supported_commands(
  const dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint);


/**
* Function definition used to register a Group dispatch function from a Protocol
* Controller.
* Incoming publications at ucl/by-group/+/&lt;Cluster&gt;/Commands/&lt;Command&gt; will be
* forwarded to this function.
* @param group_id       Group ID of the group to dispatch.
* @param cluster_name   The name of the Cluster for which the command was received
* @param command        The Command that was received within the Cluster.
* @param message        The MQTT message/payload received for the command
* @param message_length The length of the MQTT message/payload received for the
*                       Command.
* @param callback MQTT subscription callback that is normally used for individual
*                 Command dispatch for the cluster.
*/
typedef void (*group_dispatch_t)(uint16_t group_id,
                                 const char *cluster_name,
                                 const char *command,
                                 const char *message,
                                 size_t message_length,
                                 mqtt_message_callback_t callback);

/**
 * @brief Setup Group dispatch callback
 *
 * This function will set the callback used when a ucl/by-group/# is received
 * and subscribe to all by-group topics handlers supported by the Protocol
 * Controller. Setting this callback will overwrite any previously set
 * callback but will not resubscribe to the topic handlers.
 *
 * @param callback
 */
void uic_mqtt_dotdot_set_group_dispatch_callback(group_dispatch_t callback);

/**
 * @brief Gets the Group dispatch callback
 *
 * @returns Pointer to the registered group dispatch function. Note: may be NULL
 */
group_dispatch_t uic_mqtt_dotdot_get_group_dispatch_callback();


#ifdef __cplusplus
}
#endif // __cplusplus

#endif // DOTDOT_MQTT_H
/** @} end dotdot_mqtt */
