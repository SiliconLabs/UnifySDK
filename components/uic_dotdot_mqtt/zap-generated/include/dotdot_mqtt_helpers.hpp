/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/
// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

/**
 * @defgroup dotdot_mqtt_helpers_ccp DotDot MQTT C++ helpers
 * @ingroup dotdot_mqtt
 * @brief Various helper functions for \ref dotdot_mqtt
 *
 * @{
 */

#ifndef DOTDOT_MQTT_HELPERS_HPP
#define DOTDOT_MQTT_HELPERS_HPP

#include "uic_typedefs.h"

#include <string>
#include <functional>
#include <map>
#include <optional>

#define AOX_LOCATOR_ANTENNA_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the AoXLocatorAntennaMode enum
 *
 * @returns A string representation of the value.
 */
std::string aox_locator_antenna_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the AoXLocatorAntennaMode enum
 *
 * @returns A number enum value.
 */
uint32_t aox_locator_antenna_mode_get_enum_value_number(const std::string &str);

#define AOX_LOCATOR_AOX_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the AoXLocatorAoXMode enum
 *
 * @returns A string representation of the value.
 */
std::string aox_locator_aox_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the AoXLocatorAoXMode enum
 *
 * @returns A number enum value.
 */
uint32_t aox_locator_aox_mode_get_enum_value_number(const std::string &str);

#define AOX_LOCATOR_CTE_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the AoXLocatorCTEMode enum
 *
 * @returns A string representation of the value.
 */
std::string aox_locator_cte_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the AoXLocatorCTEMode enum
 *
 * @returns A number enum value.
 */
uint32_t aox_locator_cte_mode_get_enum_value_number(const std::string &str);

#define AOX_LOCATOR_REPORTING_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the AoXLocatorReportingMode enum
 *
 * @returns A string representation of the value.
 */
std::string aox_locator_reporting_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the AoXLocatorReportingMode enum
 *
 * @returns A number enum value.
 */
uint32_t aox_locator_reporting_mode_get_enum_value_number(const std::string &str);

#define ARM_ARM_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ArmArmMode enum
 *
 * @returns A string representation of the value.
 */
std::string arm_arm_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ArmArmMode enum
 *
 * @returns A number enum value.
 */
uint32_t arm_arm_mode_get_enum_value_number(const std::string &str);

#define ARM_RESPONSE_ARM_NOTIFICATION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ArmResponseArmNotification enum
 *
 * @returns A string representation of the value.
 */
std::string arm_response_arm_notification_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ArmResponseArmNotification enum
 *
 * @returns A number enum value.
 */
uint32_t arm_response_arm_notification_get_enum_value_number(const std::string &str);

#define BARRIER_CONTROL_MOVING_STATE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BarrierControlMovingState enum
 *
 * @returns A string representation of the value.
 */
std::string barrier_control_moving_state_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BarrierControlMovingState enum
 *
 * @returns A number enum value.
 */
uint32_t barrier_control_moving_state_get_enum_value_number(const std::string &str);

#define BASIC_GENERIC_DEVICE_CLASS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BasicGenericDevice-Class enum
 *
 * @returns A string representation of the value.
 */
std::string basic_generic_device_class_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BasicGenericDevice-Class enum
 *
 * @returns A number enum value.
 */
uint32_t basic_generic_device_class_get_enum_value_number(const std::string &str);

#define BASIC_GENERIC_DEVICE_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BasicGenericDevice-Type enum
 *
 * @returns A string representation of the value.
 */
std::string basic_generic_device_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BasicGenericDevice-Type enum
 *
 * @returns A number enum value.
 */
uint32_t basic_generic_device_type_get_enum_value_number(const std::string &str);

#define BASIC_PHYSICAL_ENVIRONMENT_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BasicPhysicalEnvironment enum
 *
 * @returns A string representation of the value.
 */
std::string basic_physical_environment_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BasicPhysicalEnvironment enum
 *
 * @returns A number enum value.
 */
uint32_t basic_physical_environment_get_enum_value_number(const std::string &str);

#define BASIC_POWER_SOURCE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BasicPowerSource enum
 *
 * @returns A string representation of the value.
 */
std::string basic_power_source_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BasicPowerSource enum
 *
 * @returns A number enum value.
 */
uint32_t basic_power_source_get_enum_value_number(const std::string &str);

#define BATTERY_SIZE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BatterySize enum
 *
 * @returns A string representation of the value.
 */
std::string battery_size_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BatterySize enum
 *
 * @returns A number enum value.
 */
uint32_t battery_size_get_enum_value_number(const std::string &str);

#define BYPASS_RESPONSE_ZONE_ID_BYPASS_RESULT_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the BypassResponseZoneIDBypassResult enum
 *
 * @returns A string representation of the value.
 */
std::string bypass_response_zone_id_bypass_result_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the BypassResponseZoneIDBypassResult enum
 *
 * @returns A number enum value.
 */
uint32_t bypass_response_zone_id_bypass_result_get_enum_value_number(const std::string &str);

#define CC_COLOR_LOOP_DIRECTION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CCColorLoopDirection enum
 *
 * @returns A string representation of the value.
 */
std::string cc_color_loop_direction_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CCColorLoopDirection enum
 *
 * @returns A number enum value.
 */
uint32_t cc_color_loop_direction_get_enum_value_number(const std::string &str);

#define CC_DIRECTION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CCDirection enum
 *
 * @returns A string representation of the value.
 */
std::string cc_direction_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CCDirection enum
 *
 * @returns A number enum value.
 */
uint32_t cc_direction_get_enum_value_number(const std::string &str);

#define CC_MOVE_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CCMoveMode enum
 *
 * @returns A string representation of the value.
 */
std::string cc_move_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CCMoveMode enum
 *
 * @returns A number enum value.
 */
uint32_t cc_move_mode_get_enum_value_number(const std::string &str);

#define CC_STEP_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CCStepMode enum
 *
 * @returns A string representation of the value.
 */
std::string cc_step_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CCStepMode enum
 *
 * @returns A number enum value.
 */
uint32_t cc_step_mode_get_enum_value_number(const std::string &str);

#define COLOR_CONTROL_COLOR_LOOP_ACTIVE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ColorControlColorLoopActive enum
 *
 * @returns A string representation of the value.
 */
std::string color_control_color_loop_active_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ColorControlColorLoopActive enum
 *
 * @returns A number enum value.
 */
uint32_t color_control_color_loop_active_get_enum_value_number(const std::string &str);

#define COLOR_CONTROL_COLOR_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ColorControlColorMode enum
 *
 * @returns A string representation of the value.
 */
std::string color_control_color_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ColorControlColorMode enum
 *
 * @returns A number enum value.
 */
uint32_t color_control_color_mode_get_enum_value_number(const std::string &str);

#define COLOR_CONTROL_DRIFT_COMPENSATION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ColorControlDriftCompensation enum
 *
 * @returns A string representation of the value.
 */
std::string color_control_drift_compensation_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ColorControlDriftCompensation enum
 *
 * @returns A number enum value.
 */
uint32_t color_control_drift_compensation_get_enum_value_number(const std::string &str);

#define COLOR_CONTROL_ENHANCED_COLOR_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ColorControlEnhancedColorMode enum
 *
 * @returns A string representation of the value.
 */
std::string color_control_enhanced_color_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ColorControlEnhancedColorMode enum
 *
 * @returns A number enum value.
 */
uint32_t color_control_enhanced_color_mode_get_enum_value_number(const std::string &str);

#define COLOR_LOOP_SET_ACTION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ColorLoopSetAction enum
 *
 * @returns A string representation of the value.
 */
std::string color_loop_set_action_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ColorLoopSetAction enum
 *
 * @returns A number enum value.
 */
uint32_t color_loop_set_action_get_enum_value_number(const std::string &str);

#define COMMISSIONING_NETWORK_KEY_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CommissioningNetworkKeyType enum
 *
 * @returns A string representation of the value.
 */
std::string commissioning_network_key_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CommissioningNetworkKeyType enum
 *
 * @returns A number enum value.
 */
uint32_t commissioning_network_key_type_get_enum_value_number(const std::string &str);

#define COMMISSIONING_PROTOCOL_VERSION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CommissioningProtocolVersion enum
 *
 * @returns A string representation of the value.
 */
std::string commissioning_protocol_version_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CommissioningProtocolVersion enum
 *
 * @returns A number enum value.
 */
uint32_t commissioning_protocol_version_get_enum_value_number(const std::string &str);

#define COMMISSIONING_STACK_PROFILE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CommissioningStackProfile enum
 *
 * @returns A string representation of the value.
 */
std::string commissioning_stack_profile_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CommissioningStackProfile enum
 *
 * @returns A number enum value.
 */
uint32_t commissioning_stack_profile_get_enum_value_number(const std::string &str);

#define COMMISSIONING_STARTUP_CONTROL_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CommissioningStartupControl enum
 *
 * @returns A string representation of the value.
 */
std::string commissioning_startup_control_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CommissioningStartupControl enum
 *
 * @returns A number enum value.
 */
uint32_t commissioning_startup_control_get_enum_value_number(const std::string &str);

#define CREDENTIAL_RULE_ENUM_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CredentialRuleEnum enum
 *
 * @returns A string representation of the value.
 */
std::string credential_rule_enum_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CredentialRuleEnum enum
 *
 * @returns A number enum value.
 */
uint32_t credential_rule_enum_get_enum_value_number(const std::string &str);

#define CREDENTIAL_TYPE_ENUM_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the CredentialTypeEnum enum
 *
 * @returns A string representation of the value.
 */
std::string credential_type_enum_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the CredentialTypeEnum enum
 *
 * @returns A number enum value.
 */
uint32_t credential_type_enum_get_enum_value_number(const std::string &str);

#define DATA_OPERATION_TYPE_ENUM_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DataOperationTypeEnum enum
 *
 * @returns A string representation of the value.
 */
std::string data_operation_type_enum_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DataOperationTypeEnum enum
 *
 * @returns A number enum value.
 */
uint32_t data_operation_type_enum_get_enum_value_number(const std::string &str);

#define DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DehumidificationControlDehumidificationLockout enum
 *
 * @returns A string representation of the value.
 */
std::string dehumidification_control_dehumidification_lockout_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DehumidificationControlDehumidificationLockout enum
 *
 * @returns A number enum value.
 */
uint32_t dehumidification_control_dehumidification_lockout_get_enum_value_number(const std::string &str);

#define DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DehumidificationControlRelativeHumidityDisplay enum
 *
 * @returns A string representation of the value.
 */
std::string dehumidification_control_relative_humidity_display_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DehumidificationControlRelativeHumidityDisplay enum
 *
 * @returns A number enum value.
 */
uint32_t dehumidification_control_relative_humidity_display_get_enum_value_number(const std::string &str);

#define DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DehumidificationControlRelativeHumidityMode enum
 *
 * @returns A string representation of the value.
 */
std::string dehumidification_control_relative_humidity_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DehumidificationControlRelativeHumidityMode enum
 *
 * @returns A number enum value.
 */
uint32_t dehumidification_control_relative_humidity_mode_get_enum_value_number(const std::string &str);

#define DEV_TYPE_ID_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DevTypeId enum
 *
 * @returns A string representation of the value.
 */
std::string dev_type_id_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DevTypeId enum
 *
 * @returns A number enum value.
 */
uint32_t dev_type_id_get_enum_value_number(const std::string &str);

#define DOOR_LOCK_DOOR_STATE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DoorLockDoorState enum
 *
 * @returns A string representation of the value.
 */
std::string door_lock_door_state_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DoorLockDoorState enum
 *
 * @returns A number enum value.
 */
uint32_t door_lock_door_state_get_enum_value_number(const std::string &str);

#define DOOR_LOCK_LED_SETTINGS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DoorLockLEDSettings enum
 *
 * @returns A string representation of the value.
 */
std::string door_lock_led_settings_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DoorLockLEDSettings enum
 *
 * @returns A number enum value.
 */
uint32_t door_lock_led_settings_get_enum_value_number(const std::string &str);

#define DOOR_LOCK_LOCK_STATE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DoorLockLockState enum
 *
 * @returns A string representation of the value.
 */
std::string door_lock_lock_state_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DoorLockLockState enum
 *
 * @returns A number enum value.
 */
uint32_t door_lock_lock_state_get_enum_value_number(const std::string &str);

#define DOOR_LOCK_LOCK_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DoorLockLockType enum
 *
 * @returns A string representation of the value.
 */
std::string door_lock_lock_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DoorLockLockType enum
 *
 * @returns A number enum value.
 */
uint32_t door_lock_lock_type_get_enum_value_number(const std::string &str);

#define DOOR_LOCK_SECURITY_LEVEL_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DoorLockSecurityLevel enum
 *
 * @returns A string representation of the value.
 */
std::string door_lock_security_level_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DoorLockSecurityLevel enum
 *
 * @returns A number enum value.
 */
uint32_t door_lock_security_level_get_enum_value_number(const std::string &str);

#define DOOR_LOCK_SOUND_VOLUME_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DoorLockSoundVolume enum
 *
 * @returns A string representation of the value.
 */
std::string door_lock_sound_volume_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DoorLockSoundVolume enum
 *
 * @returns A number enum value.
 */
uint32_t door_lock_sound_volume_get_enum_value_number(const std::string &str);

#define DRLK_OPER_EVENT_SOURCE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkOperEventSource enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_oper_event_source_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkOperEventSource enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_oper_event_source_get_enum_value_number(const std::string &str);

#define DRLK_OPER_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkOperMode enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_oper_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkOperMode enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_oper_mode_get_enum_value_number(const std::string &str);

#define DRLK_PASS_FAIL_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkPassFailStatus enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_pass_fail_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkPassFailStatus enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_pass_fail_status_get_enum_value_number(const std::string &str);

#define DRLK_SET_CODE_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkSetCodeStatus enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_set_code_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkSetCodeStatus enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_set_code_status_get_enum_value_number(const std::string &str);

#define DRLK_SETTABLE_USER_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkSettableUserStatus enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_settable_user_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkSettableUserStatus enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_settable_user_status_get_enum_value_number(const std::string &str);

#define DRLK_USER_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkUserStatus enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_user_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkUserStatus enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_user_status_get_enum_value_number(const std::string &str);

#define DRLK_USER_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the DrlkUserType enum
 *
 * @returns A string representation of the value.
 */
std::string drlk_user_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the DrlkUserType enum
 *
 * @returns A number enum value.
 */
uint32_t drlk_user_type_get_enum_value_number(const std::string &str);

#define FAN_CONTROL_FAN_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the FanControlFanMode enum
 *
 * @returns A string representation of the value.
 */
std::string fan_control_fan_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the FanControlFanMode enum
 *
 * @returns A number enum value.
 */
uint32_t fan_control_fan_mode_get_enum_value_number(const std::string &str);

#define FAN_CONTROL_FAN_MODE_SEQUENCE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the FanControlFanModeSequence enum
 *
 * @returns A string representation of the value.
 */
std::string fan_control_fan_mode_sequence_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the FanControlFanModeSequence enum
 *
 * @returns A number enum value.
 */
uint32_t fan_control_fan_mode_sequence_get_enum_value_number(const std::string &str);

#define GET_LOG_RECORD_RESPONSE_EVENT_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the GetLogRecordResponseEventType enum
 *
 * @returns A string representation of the value.
 */
std::string get_log_record_response_event_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the GetLogRecordResponseEventType enum
 *
 * @returns A number enum value.
 */
uint32_t get_log_record_response_event_type_get_enum_value_number(const std::string &str);

#define GET_MEASUREMENT_PROFILE_RESPONSE_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the GetMeasurementProfileResponseStatus enum
 *
 * @returns A string representation of the value.
 */
std::string get_measurement_profile_response_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the GetMeasurementProfileResponseStatus enum
 *
 * @returns A number enum value.
 */
uint32_t get_measurement_profile_response_status_get_enum_value_number(const std::string &str);

#define HVAC_SYSTEM_TYPE_CONFIGURATION_COOLING_SYSTEM_STAGE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the HVACSystemTypeConfigurationCoolingSystemStage enum
 *
 * @returns A string representation of the value.
 */
std::string hvac_system_type_configuration_cooling_system_stage_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the HVACSystemTypeConfigurationCoolingSystemStage enum
 *
 * @returns A number enum value.
 */
uint32_t hvac_system_type_configuration_cooling_system_stage_get_enum_value_number(const std::string &str);

#define HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_FUEL_SOURCE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the HVACSystemTypeConfigurationHeatingFuelSource enum
 *
 * @returns A string representation of the value.
 */
std::string hvac_system_type_configuration_heating_fuel_source_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the HVACSystemTypeConfigurationHeatingFuelSource enum
 *
 * @returns A number enum value.
 */
uint32_t hvac_system_type_configuration_heating_fuel_source_get_enum_value_number(const std::string &str);

#define HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_STAGE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the HVACSystemTypeConfigurationHeatingSystemStage enum
 *
 * @returns A string representation of the value.
 */
std::string hvac_system_type_configuration_heating_system_stage_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the HVACSystemTypeConfigurationHeatingSystemStage enum
 *
 * @returns A number enum value.
 */
uint32_t hvac_system_type_configuration_heating_system_stage_get_enum_value_number(const std::string &str);

#define HVAC_SYSTEM_TYPE_CONFIGURATION_HEATING_SYSTEM_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the HVACSystemTypeConfigurationHeatingSystemType enum
 *
 * @returns A string representation of the value.
 */
std::string hvac_system_type_configuration_heating_system_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the HVACSystemTypeConfigurationHeatingSystemType enum
 *
 * @returns A number enum value.
 */
uint32_t hvac_system_type_configuration_heating_system_type_get_enum_value_number(const std::string &str);

#define IAS_ZONE_ZONE_STATE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IASZoneZoneState enum
 *
 * @returns A string representation of the value.
 */
std::string ias_zone_zone_state_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IASZoneZoneState enum
 *
 * @returns A number enum value.
 */
uint32_t ias_zone_zone_state_get_enum_value_number(const std::string &str);

#define IAS_ZONE_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IasZoneType enum
 *
 * @returns A string representation of the value.
 */
std::string ias_zone_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IasZoneType enum
 *
 * @returns A number enum value.
 */
uint32_t ias_zone_type_get_enum_value_number(const std::string &str);

#define IASAC_PANEL_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IasacPanelStatus enum
 *
 * @returns A string representation of the value.
 */
std::string iasac_panel_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IasacPanelStatus enum
 *
 * @returns A number enum value.
 */
uint32_t iasac_panel_status_get_enum_value_number(const std::string &str);

#define IASACE_ALARM_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IasaceAlarmStatus enum
 *
 * @returns A string representation of the value.
 */
std::string iasace_alarm_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IasaceAlarmStatus enum
 *
 * @returns A number enum value.
 */
uint32_t iasace_alarm_status_get_enum_value_number(const std::string &str);

#define IASACE_AUDIBLE_NOTIFICATION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IasaceAudibleNotification enum
 *
 * @returns A string representation of the value.
 */
std::string iasace_audible_notification_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IasaceAudibleNotification enum
 *
 * @returns A number enum value.
 */
uint32_t iasace_audible_notification_get_enum_value_number(const std::string &str);

#define IASWD_LEVEL_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IaswdLevel enum
 *
 * @returns A string representation of the value.
 */
std::string iaswd_level_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IaswdLevel enum
 *
 * @returns A number enum value.
 */
uint32_t iaswd_level_get_enum_value_number(const std::string &str);

#define ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IlluminanceLevelSensingLevelStatus enum
 *
 * @returns A string representation of the value.
 */
std::string illuminance_level_sensing_level_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IlluminanceLevelSensingLevelStatus enum
 *
 * @returns A number enum value.
 */
uint32_t illuminance_level_sensing_level_status_get_enum_value_number(const std::string &str);

#define ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IlluminanceLevelSensingLightSensorType enum
 *
 * @returns A string representation of the value.
 */
std::string illuminance_level_sensing_light_sensor_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IlluminanceLevelSensingLightSensorType enum
 *
 * @returns A number enum value.
 */
uint32_t illuminance_level_sensing_light_sensor_type_get_enum_value_number(const std::string &str);

#define ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the IlluminanceMeasurementLightSensorType enum
 *
 * @returns A string representation of the value.
 */
std::string illuminance_measurement_light_sensor_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the IlluminanceMeasurementLightSensorType enum
 *
 * @returns A number enum value.
 */
uint32_t illuminance_measurement_light_sensor_type_get_enum_value_number(const std::string &str);

#define IMAGE_NOTIFY_PAYLOAD_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ImageNotifyPayloadType enum
 *
 * @returns A string representation of the value.
 */
std::string image_notify_payload_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ImageNotifyPayloadType enum
 *
 * @returns A number enum value.
 */
uint32_t image_notify_payload_type_get_enum_value_number(const std::string &str);

#define LOGGING_LEVEL_ENUM_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the LoggingLevelEnum enum
 *
 * @returns A string representation of the value.
 */
std::string logging_level_enum_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the LoggingLevelEnum enum
 *
 * @returns A number enum value.
 */
uint32_t logging_level_enum_get_enum_value_number(const std::string &str);

#define METERING_ENERGY_CARRIER_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the MeteringEnergyCarrierUnitOfMeasure enum
 *
 * @returns A string representation of the value.
 */
std::string metering_energy_carrier_unit_of_measure_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the MeteringEnergyCarrierUnitOfMeasure enum
 *
 * @returns A number enum value.
 */
uint32_t metering_energy_carrier_unit_of_measure_get_enum_value_number(const std::string &str);

#define METERING_METERING_DEVICE_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the MeteringMeteringDeviceType enum
 *
 * @returns A string representation of the value.
 */
std::string metering_metering_device_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the MeteringMeteringDeviceType enum
 *
 * @returns A number enum value.
 */
uint32_t metering_metering_device_type_get_enum_value_number(const std::string &str);

#define METERING_SUPPLY_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the MeteringSupplyStatus enum
 *
 * @returns A string representation of the value.
 */
std::string metering_supply_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the MeteringSupplyStatus enum
 *
 * @returns A number enum value.
 */
uint32_t metering_supply_status_get_enum_value_number(const std::string &str);

#define METERING_TEMPERATURE_UNIT_OF_MEASURE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the MeteringTemperatureUnitOfMeasure enum
 *
 * @returns A string representation of the value.
 */
std::string metering_temperature_unit_of_measure_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the MeteringTemperatureUnitOfMeasure enum
 *
 * @returns A number enum value.
 */
uint32_t metering_temperature_unit_of_measure_get_enum_value_number(const std::string &str);

#define METERING_UNITOF_MEASURE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the MeteringUnitofMeasure enum
 *
 * @returns A string representation of the value.
 */
std::string metering_unitof_measure_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the MeteringUnitofMeasure enum
 *
 * @returns A number enum value.
 */
uint32_t metering_unitof_measure_get_enum_value_number(const std::string &str);

#define MODE_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ModeType enum
 *
 * @returns A string representation of the value.
 */
std::string mode_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ModeType enum
 *
 * @returns A number enum value.
 */
uint32_t mode_type_get_enum_value_number(const std::string &str);

#define MOVE_STEP_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the MoveStepMode enum
 *
 * @returns A string representation of the value.
 */
std::string move_step_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the MoveStepMode enum
 *
 * @returns A number enum value.
 */
uint32_t move_step_mode_get_enum_value_number(const std::string &str);

#define NM_STATE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the NM_State enum
 *
 * @returns A string representation of the value.
 */
std::string nm_state_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the NM_State enum
 *
 * @returns A number enum value.
 */
uint32_t nm_state_get_enum_value_number(const std::string &str);

#define NODE_STATE_NETWORK_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the NodeStateNetworkStatus enum
 *
 * @returns A string representation of the value.
 */
std::string node_state_network_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the NodeStateNetworkStatus enum
 *
 * @returns A number enum value.
 */
uint32_t node_state_network_status_get_enum_value_number(const std::string &str);

#define NODE_STATE_SECURITY_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the NodeStateSecurity enum
 *
 * @returns A string representation of the value.
 */
std::string node_state_security_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the NodeStateSecurity enum
 *
 * @returns A number enum value.
 */
uint32_t node_state_security_get_enum_value_number(const std::string &str);

#define OTA_DEVICE_SPECIFIC_IMAGE_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OTADeviceSpecificImageType enum
 *
 * @returns A string representation of the value.
 */
std::string ota_device_specific_image_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OTADeviceSpecificImageType enum
 *
 * @returns A number enum value.
 */
uint32_t ota_device_specific_image_type_get_enum_value_number(const std::string &str);

#define OTA_UPGRADE_IMAGE_UPGRADE_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OTAUpgradeImageUpgradeStatus enum
 *
 * @returns A string representation of the value.
 */
std::string ota_upgrade_image_upgrade_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OTAUpgradeImageUpgradeStatus enum
 *
 * @returns A number enum value.
 */
uint32_t ota_upgrade_image_upgrade_status_get_enum_value_number(const std::string &str);

#define OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OTAUpgradeUpgradeActivationPolicy enum
 *
 * @returns A string representation of the value.
 */
std::string ota_upgrade_upgrade_activation_policy_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OTAUpgradeUpgradeActivationPolicy enum
 *
 * @returns A number enum value.
 */
uint32_t ota_upgrade_upgrade_activation_policy_get_enum_value_number(const std::string &str);

#define OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OTAUpgradeUpgradeTimeoutPolicy enum
 *
 * @returns A string representation of the value.
 */
std::string ota_upgrade_upgrade_timeout_policy_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OTAUpgradeUpgradeTimeoutPolicy enum
 *
 * @returns A number enum value.
 */
uint32_t ota_upgrade_upgrade_timeout_policy_get_enum_value_number(const std::string &str);

#define OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OccupancySensingOccupancySensorType enum
 *
 * @returns A string representation of the value.
 */
std::string occupancy_sensing_occupancy_sensor_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OccupancySensingOccupancySensorType enum
 *
 * @returns A number enum value.
 */
uint32_t occupancy_sensing_occupancy_sensor_type_get_enum_value_number(const std::string &str);

#define OFF_WITH_EFFECT_EFFECT_IDENTIFIER_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OffWithEffectEffectIdentifier enum
 *
 * @returns A string representation of the value.
 */
std::string off_with_effect_effect_identifier_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OffWithEffectEffectIdentifier enum
 *
 * @returns A number enum value.
 */
uint32_t off_with_effect_effect_identifier_get_enum_value_number(const std::string &str);

#define ON_OFF_START_UP_ON_OFF_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OnOffStartUpOnOff enum
 *
 * @returns A string representation of the value.
 */
std::string on_off_start_up_on_off_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OnOffStartUpOnOff enum
 *
 * @returns A number enum value.
 */
uint32_t on_off_start_up_on_off_get_enum_value_number(const std::string &str);

#define OPERATING_EVENT_NOTIFICATION_OPERATION_EVENT_CODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OperatingEventNotificationOperationEventCode enum
 *
 * @returns A string representation of the value.
 */
std::string operating_event_notification_operation_event_code_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OperatingEventNotificationOperationEventCode enum
 *
 * @returns A number enum value.
 */
uint32_t operating_event_notification_operation_event_code_get_enum_value_number(const std::string &str);

#define OPTIONS_STARTUP_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the OptionsStartupMode enum
 *
 * @returns A string representation of the value.
 */
std::string options_startup_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the OptionsStartupMode enum
 *
 * @returns A number enum value.
 */
uint32_t options_startup_mode_get_enum_value_number(const std::string &str);

#define PROFILE_INTERVAL_PERIOD_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ProfileIntervalPeriod enum
 *
 * @returns A string representation of the value.
 */
std::string profile_interval_period_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ProfileIntervalPeriod enum
 *
 * @returns A number enum value.
 */
uint32_t profile_interval_period_get_enum_value_number(const std::string &str);

#define PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_CODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ProgrammingEventNotificationProgramEventCode enum
 *
 * @returns A string representation of the value.
 */
std::string programming_event_notification_program_event_code_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ProgrammingEventNotificationProgramEventCode enum
 *
 * @returns A number enum value.
 */
uint32_t programming_event_notification_program_event_code_get_enum_value_number(const std::string &str);

#define PROGRAMMING_EVENT_NOTIFICATION_PROGRAM_EVENT_SOURCE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ProgrammingEventNotificationProgramEventSource enum
 *
 * @returns A string representation of the value.
 */
std::string programming_event_notification_program_event_source_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ProgrammingEventNotificationProgramEventSource enum
 *
 * @returns A number enum value.
 */
uint32_t programming_event_notification_program_event_source_get_enum_value_number(const std::string &str);

#define PUMP_CONTROL_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the PumpControlMode enum
 *
 * @returns A string representation of the value.
 */
std::string pump_control_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the PumpControlMode enum
 *
 * @returns A number enum value.
 */
uint32_t pump_control_mode_get_enum_value_number(const std::string &str);

#define PUMP_OPERATION_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the PumpOperationMode enum
 *
 * @returns A string representation of the value.
 */
std::string pump_operation_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the PumpOperationMode enum
 *
 * @returns A number enum value.
 */
uint32_t pump_operation_mode_get_enum_value_number(const std::string &str);

#define SHDCFG_DIRECTION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the SHDCFGDirection enum
 *
 * @returns A string representation of the value.
 */
std::string shdcfg_direction_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the SHDCFGDirection enum
 *
 * @returns A number enum value.
 */
uint32_t shdcfg_direction_get_enum_value_number(const std::string &str);

#define SCALE_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ScaleType enum
 *
 * @returns A string representation of the value.
 */
std::string scale_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ScaleType enum
 *
 * @returns A number enum value.
 */
uint32_t scale_type_get_enum_value_number(const std::string &str);

#define SETPOINT_RAISE_OR_LOWER_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the SetpointRaiseOrLowerMode enum
 *
 * @returns A string representation of the value.
 */
std::string setpoint_raise_or_lower_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the SetpointRaiseOrLowerMode enum
 *
 * @returns A number enum value.
 */
uint32_t setpoint_raise_or_lower_mode_get_enum_value_number(const std::string &str);

#define SETPOINT_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the SetpointType enum
 *
 * @returns A string representation of the value.
 */
std::string setpoint_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the SetpointType enum
 *
 * @returns A number enum value.
 */
uint32_t setpoint_type_get_enum_value_number(const std::string &str);

#define SHADE_CONFIGURATION_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ShadeConfigurationMode enum
 *
 * @returns A string representation of the value.
 */
std::string shade_configuration_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ShadeConfigurationMode enum
 *
 * @returns A number enum value.
 */
uint32_t shade_configuration_mode_get_enum_value_number(const std::string &str);

#define SIREN_CONFIGURATION_STROBE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the SirenConfigurationStrobe enum
 *
 * @returns A string representation of the value.
 */
std::string siren_configuration_strobe_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the SirenConfigurationStrobe enum
 *
 * @returns A number enum value.
 */
uint32_t siren_configuration_strobe_get_enum_value_number(const std::string &str);

#define SIREN_CONFIGURATION_WARNING_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the SirenConfigurationWarningMode enum
 *
 * @returns A string representation of the value.
 */
std::string siren_configuration_warning_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the SirenConfigurationWarningMode enum
 *
 * @returns A number enum value.
 */
uint32_t siren_configuration_warning_mode_get_enum_value_number(const std::string &str);

#define SQUAWK_CONFIGURATION_SQUAWK_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the SquawkConfigurationSquawkMode enum
 *
 * @returns A string representation of the value.
 */
std::string squawk_configuration_squawk_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the SquawkConfigurationSquawkMode enum
 *
 * @returns A number enum value.
 */
uint32_t squawk_configuration_squawk_mode_get_enum_value_number(const std::string &str);

#define THERMOSTAT_AC_CAPACITY_FORMAT_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatACCapacityFormat enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_ac_capacity_format_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatACCapacityFormat enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_ac_capacity_format_get_enum_value_number(const std::string &str);

#define THERMOSTAT_AC_COMPRESSOR_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatACCompressorType enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_ac_compressor_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatACCompressorType enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_ac_compressor_type_get_enum_value_number(const std::string &str);

#define THERMOSTAT_AC_LOUVER_POSITION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatACLouverPosition enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_ac_louver_position_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatACLouverPosition enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_ac_louver_position_get_enum_value_number(const std::string &str);

#define THERMOSTAT_AC_REFRIGERANT_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatACRefrigerantType enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_ac_refrigerant_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatACRefrigerantType enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_ac_refrigerant_type_get_enum_value_number(const std::string &str);

#define THERMOSTAT_AC_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatACType enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_ac_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatACType enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_ac_type_get_enum_value_number(const std::string &str);

#define THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatControlSequenceOfOperation enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_control_sequence_of_operation_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatControlSequenceOfOperation enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_control_sequence_of_operation_get_enum_value_number(const std::string &str);

#define THERMOSTAT_PROGRAMMING_OPERATION_MODE_PROGRAMMING_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatProgrammingOperationModeProgrammingMode enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_programming_operation_mode_programming_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatProgrammingOperationModeProgrammingMode enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_programming_operation_mode_programming_mode_get_enum_value_number(const std::string &str);

#define THERMOSTAT_SETPOINT_CHANGE_SOURCE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatSetpointChangeSource enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_setpoint_change_source_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatSetpointChangeSource enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_setpoint_change_source_get_enum_value_number(const std::string &str);

#define THERMOSTAT_START_OF_WEEK_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatStartOfWeek enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_start_of_week_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatStartOfWeek enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_start_of_week_get_enum_value_number(const std::string &str);

#define THERMOSTAT_SYSTEM_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatSystemMode enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_system_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatSystemMode enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_system_mode_get_enum_value_number(const std::string &str);

#define THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatTemperatureSetpointHold enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_temperature_setpoint_hold_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatTemperatureSetpointHold enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_temperature_setpoint_hold_get_enum_value_number(const std::string &str);

#define THERMOSTAT_THERMOSTAT_RUNNING_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatThermostatRunningMode enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_thermostat_running_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatThermostatRunningMode enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_thermostat_running_mode_get_enum_value_number(const std::string &str);

#define THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatUserInterfaceConfigurationKeypadLockout enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_user_interface_configuration_keypad_lockout_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatUserInterfaceConfigurationKeypadLockout enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_user_interface_configuration_keypad_lockout_get_enum_value_number(const std::string &str);

#define THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatUserInterfaceConfigurationScheduleProgrammingVisibility enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatUserInterfaceConfigurationScheduleProgrammingVisibility enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_user_interface_configuration_schedule_programming_visibility_get_enum_value_number(const std::string &str);

#define THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ThermostatUserInterfaceConfigurationTemperatureDisplayMode enum
 *
 * @returns A string representation of the value.
 */
std::string thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ThermostatUserInterfaceConfigurationTemperatureDisplayMode enum
 *
 * @returns A number enum value.
 */
uint32_t thermostat_user_interface_configuration_temperature_display_mode_get_enum_value_number(const std::string &str);

#define TRIGGER_EFFECT_EFFECT_IDENTIFIER_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the TriggerEffectEffectIdentifier enum
 *
 * @returns A string representation of the value.
 */
std::string trigger_effect_effect_identifier_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the TriggerEffectEffectIdentifier enum
 *
 * @returns A number enum value.
 */
uint32_t trigger_effect_effect_identifier_get_enum_value_number(const std::string &str);

#define TRIGGER_EFFECT_EFFECT_VARIANT_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the TriggerEffectEffectVariant enum
 *
 * @returns A string representation of the value.
 */
std::string trigger_effect_effect_variant_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the TriggerEffectEffectVariant enum
 *
 * @returns A number enum value.
 */
uint32_t trigger_effect_effect_variant_get_enum_value_number(const std::string &str);

#define TX_REPORT_TRANSMISSION_SPEED_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the TxReportTransmissionSpeed enum
 *
 * @returns A string representation of the value.
 */
std::string tx_report_transmission_speed_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the TxReportTransmissionSpeed enum
 *
 * @returns A number enum value.
 */
uint32_t tx_report_transmission_speed_get_enum_value_number(const std::string &str);

#define UNIFY_HUMIDITY_CONTROL_CURRENT_STATE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the UnifyHumidityControlCurrentState enum
 *
 * @returns A string representation of the value.
 */
std::string unify_humidity_control_current_state_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the UnifyHumidityControlCurrentState enum
 *
 * @returns A number enum value.
 */
uint32_t unify_humidity_control_current_state_get_enum_value_number(const std::string &str);

#define WINDOW_COVERING_WINDOW_COVERING_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the WindowCoveringWindowCoveringType enum
 *
 * @returns A string representation of the value.
 */
std::string window_covering_window_covering_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the WindowCoveringWindowCoveringType enum
 *
 * @returns A number enum value.
 */
uint32_t window_covering_window_covering_type_get_enum_value_number(const std::string &str);

#define ZONE_ENROLL_RESPONSE_ENROLL_RESPONSE_CODE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the ZoneEnrollResponseEnrollResponseCode enum
 *
 * @returns A string representation of the value.
 */
std::string zone_enroll_response_enroll_response_code_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the ZoneEnrollResponseEnrollResponseCode enum
 *
 * @returns A number enum value.
 */
uint32_t zone_enroll_response_enroll_response_code_get_enum_value_number(const std::string &str);

#define ATTRIBUTE_REPORTING_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the attributeReportingStatus enum
 *
 * @returns A string representation of the value.
 */
std::string attribute_reporting_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the attributeReportingStatus enum
 *
 * @returns A number enum value.
 */
uint32_t attribute_reporting_status_get_enum_value_number(const std::string &str);

#define ZCL_STATUS_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the zclStatus enum
 *
 * @returns A string representation of the value.
 */
std::string zcl_status_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the zclStatus enum
 *
 * @returns A number enum value.
 */
uint32_t zcl_status_get_enum_value_number(const std::string &str);

#define ZCL_TYPE_ENUM_NAME_AVAILABLE 1

/**
 * @brief Finds the name of a field for the zclType enum
 *
 * @returns A string representation of the value.
 */
std::string zcl_type_get_enum_value_name(
  uint32_t value);

/**
 * @brief Finds the enum number of a string representation for the zclType enum
 *
 * @returns A number enum value.
 */
uint32_t zcl_type_get_enum_value_number(const std::string &str);


/**
 * @brief Generic function to get the Value Name of a Cluster/Attribute/Value
 *
 * @param cluster_id      The ID of the cluster for which we are trying to get
 *                        a value name
 * @param attribute_id    The ID of the Attribute within the Cluster for which
 *                        we are tying to get a value name
 * @param value           Value of the Attribute
 * @return std::string. Empty if something wrong happened or no string
 *         exists for this value.
 */
std::string get_enum_value_name(
  dotdot_cluster_id_t cluster_id,
  dotdot_attribute_id_t attribute_id,
  uint32_t value);

/**
 * @brief Generic function to get the Value from a Value Name of a Cluster/Attribute
 *
 * @param cluster_id      The ID of the cluster for which we are trying to get
 *                        a value name
 * @param attribute_id    The ID of the Attribute within the Cluster for which
 *                        we are tying to get a value name
 * @param name            Name of the Value for the Attribute
 * @return uint32_t value. std::numeric_limits<uint32_t>::max() if something does not exist
 */
uint32_t get_enum_name_value(
  dotdot_cluster_id_t cluster_id,
  dotdot_attribute_id_t attribute_id,
  const std::string &name);

namespace unify {
/**
 * @brief Get UNID from MQTT topic
 *
 * @param topic MQTT topic
 * @return std::optional<std::string> either a string with the UNID or
 * std::nullopt if unable to get the UNID from the topic.
 */
std::optional<std::string> unid_from_mqtt_topic(const std::string &topic);
}
#endif  //DOTDOT_MQTT_HELPERS_HPP
/** @} end dotdot_mqtt_helpers */
