/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
/**
 * @defgroup dotdot_mqtt_attributes DotDot Attributes Serializer
 * @ingroup dotdot_mqtt
 *
 * @brief This component provides helper functions for parsing the
 * Attribute space of topics and generates Unify json payloads sent over MQTT.
 *
 * @{
 */

#ifndef DOTDOT_MQTT_ATTRIBUTES_H
#define DOTDOT_MQTT_ATTRIBUTES_H

#include <stdint.h>
#include <stdbool.h>

#include "sl_status.h"
#include "uic_typedefs.h"
#include "zap-types.h"
#include "uic_mqtt.h"


/** @brief Attribute value updated type */
typedef enum {
  /** The Desired value of an attribute has been updated */
  UCL_DESIRED_UPDATED   = 0x01,
  /** The Reported value of an attribute has been updated */
  UCL_REPORTED_UPDATED  = 0x02,
} uic_mqtt_dotdot_attribute_update_type_t;

// Callback types used by the basic cluster
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_zcl_version_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t zcl_version
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_application_version_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t application_version
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_stack_version_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t stack_version
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_hw_version_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t hw_version
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_manufacturer_name_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* manufacturer_name
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_model_identifier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* model_identifier
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_date_code_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* date_code
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_power_source_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t power_source
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_generic_device_class_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t generic_device_class
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_generic_device_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t generic_device_type
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_product_code_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* product_code
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_producturl_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* producturl
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_manufacturer_version_details_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* manufacturer_version_details
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_serial_number_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* serial_number
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_product_label_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* product_label
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_location_description_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* location_description
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_physical_environment_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t physical_environment
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_device_enabled_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool device_enabled
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_disable_local_config_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t disable_local_config
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_sw_buildid_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* sw_buildid
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_z_wave_generic_device_class_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t z_wave_generic_device_class
);
typedef sl_status_t (*uic_mqtt_dotdot_basic_attribute_z_wave_specific_device_class_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t z_wave_specific_device_class
);
// Callback types used by the power_configuration cluster
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t mains_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_frequency_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t mains_frequency
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t mains_alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t mains_voltage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_max_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t mains_voltage_max_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_dwell_trip_point_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t mains_voltage_dwell_trip_point
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_remaining_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_percentage_remaining
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_manufacturer_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* battery_manufacturer
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_size_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_size
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_batterya_hr_rating_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t batterya_hr_rating
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_quantity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_quantity
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_rated_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_rated_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_voltage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold1_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_voltage_threshold1
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold2_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_voltage_threshold2
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold3_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_voltage_threshold3
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_percentage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold1_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_percentage_threshold1
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold2_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_percentage_threshold2
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold3_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery_percentage_threshold3
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t battery_alarm_state
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_remaining_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_percentage_remaining
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_manufacturer_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* battery2_manufacturer
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_size_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_size
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2a_hr_rating_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t battery2a_hr_rating
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_quantity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_quantity
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_rated_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_rated_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_voltage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold1_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_voltage_threshold1
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold2_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_voltage_threshold2
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold3_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_voltage_threshold3
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_percentage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold1_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_percentage_threshold1
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold2_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_percentage_threshold2
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold3_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery2_percentage_threshold3
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t battery2_alarm_state
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_remaining_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_percentage_remaining
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_manufacturer_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* battery3_manufacturer
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_size_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_size
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3a_hr_rating_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t battery3a_hr_rating
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_quantity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_quantity
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_rated_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_rated_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_voltage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold1_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_voltage_threshold1
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold2_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_voltage_threshold2
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold3_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_voltage_threshold3
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_min_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_percentage_min_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold1_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_percentage_threshold1
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold2_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_percentage_threshold2
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold3_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t battery3_percentage_threshold3
);
typedef sl_status_t (*uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t battery3_alarm_state
);
// Callback types used by the device_temperature_configuration cluster
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_current_temperature_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t current_temperature
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_min_temp_experienced_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_temp_experienced
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_max_temp_experienced_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_temp_experienced
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_over_temp_total_dwell_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t over_temp_total_dwell
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_device_temp_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t device_temp_alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_low_temp_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t low_temp_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t high_temp_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_low_temp_dwell_trip_point_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t low_temp_dwell_trip_point
);
typedef sl_status_t (*uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_dwell_trip_point_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t high_temp_dwell_trip_point
);
// Callback types used by the identify cluster
typedef sl_status_t (*uic_mqtt_dotdot_identify_attribute_identify_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t identify_time
);
// Callback types used by the groups cluster
typedef sl_status_t (*uic_mqtt_dotdot_groups_attribute_name_support_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t name_support
);
// Callback types used by the scenes cluster
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_scene_count_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t scene_count
);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_current_scene_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_scene
);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_current_group_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  SGroupId current_group
);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_scene_valid_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool scene_valid
);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_name_support_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t name_support
);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_last_configured_by_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  EUI64 last_configured_by
);
typedef sl_status_t (*uic_mqtt_dotdot_scenes_attribute_scene_table_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t scene_table_count,
  const SSceneTable* scene_table
);
// Callback types used by the on_off cluster
typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_on_off_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool on_off
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_global_scene_control_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool global_scene_control
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_on_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t on_time
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_off_wait_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t off_wait_time
);
typedef sl_status_t (*uic_mqtt_dotdot_on_off_attribute_start_up_on_off_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t start_up_on_off
);
// Callback types used by the level cluster
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_current_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_level
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_remaining_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t remaining_time
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_min_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t min_level
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_max_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t max_level
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_current_frequency_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t current_frequency
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_min_frequency_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_frequency
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_max_frequency_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_frequency
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_options_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t options
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_on_off_transition_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t on_off_transition_time
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_on_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t on_level
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_on_transition_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t on_transition_time
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_off_transition_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t off_transition_time
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_default_move_rate_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t default_move_rate
);
typedef sl_status_t (*uic_mqtt_dotdot_level_attribute_start_up_current_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t start_up_current_level
);
// Callback types used by the alarms cluster
typedef sl_status_t (*uic_mqtt_dotdot_alarms_attribute_alarm_count_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t alarm_count
);
// Callback types used by the time cluster
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC time
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_time_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t time_status
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_time_zone_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int32_t time_zone
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_dst_start_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t dst_start
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_dst_end_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t dst_end
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_dst_shift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int32_t dst_shift
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_standard_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t standard_time
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_local_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t local_time
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_last_set_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC last_set_time
);
typedef sl_status_t (*uic_mqtt_dotdot_time_attribute_valid_until_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC valid_until_time
);
// Callback types used by the poll_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_check_in_interval_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t check_in_interval
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t long_poll_interval
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_short_poll_interval_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t short_poll_interval
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t fast_poll_timeout
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_check_in_interval_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t check_in_interval_min
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t long_poll_interval_min
);
typedef sl_status_t (*uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t fast_poll_timeout_max
);
// Callback types used by the shade_configuration cluster
typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_physical_closed_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t physical_closed_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_motor_step_size_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t motor_step_size
);
typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t status
);
typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_closed_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t closed_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_shade_configuration_attribute_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t mode
);
// Callback types used by the door_lock cluster
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_lock_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t lock_state
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_lock_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t lock_type
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_actuator_enabled_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool actuator_enabled
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_door_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t door_state
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_door_open_events_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t door_open_events
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_door_closed_events_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t door_closed_events
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_open_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t open_period
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_log_records_supported_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_log_records_supported
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_total_users_supported_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_total_users_supported
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_pin_users_supported_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_pin_users_supported
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_rfid_users_supported_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_rfid_users_supported
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_week_day_schedules_supported_per_user_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_week_day_schedules_supported_per_user
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_year_day_schedules_supported_per_user_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_year_day_schedules_supported_per_user
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_holiday_schedules_supported_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_holiday_schedules_supported
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_max_pin_code_length_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t max_pin_code_length
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_min_pin_code_length_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t min_pin_code_length
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_max_rfid_code_length_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t max_rfid_code_length
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_min_rfid_code_length_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t min_rfid_code_length
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_credential_rules_support_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t credential_rules_support
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_number_of_credentials_supported_per_user_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_credentials_supported_per_user
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_enable_logging_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool enable_logging
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_language_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* language
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_led_settings_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t led_settings
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_auto_relock_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t auto_relock_time
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_sound_volume_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t sound_volume
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_operating_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t operating_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_supported_operating_modes_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t supported_operating_modes
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_default_configuration_register_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t default_configuration_register
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_enable_local_programming_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool enable_local_programming
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_enable_one_touch_locking_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool enable_one_touch_locking
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_enable_inside_statusled_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool enable_inside_statusled
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_enable_privacy_mode_button_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool enable_privacy_mode_button
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_local_programming_features_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t local_programming_features
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_wrong_code_entry_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t wrong_code_entry_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_user_code_temporary_disable_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t user_code_temporary_disable_time
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_send_pin_over_the_air_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool send_pin_over_the_air
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_require_pi_nfor_rf_operation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool require_pi_nfor_rf_operation
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_security_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t security_level
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_expiring_user_timeout_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t expiring_user_timeout
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_keypad_operation_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t keypad_operation_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_rf_operation_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rf_operation_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_manual_operation_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t manual_operation_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_rfid_operation_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rfid_operation_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_keypad_programming_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t keypad_programming_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_rf_programming_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rf_programming_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_rfid_programming_event_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rfid_programming_event_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_door_lock_attribute_feature_map_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t feature_map
);
// Callback types used by the window_covering cluster
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_window_covering_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t window_covering_type
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t physical_closed_limit_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_tilt_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t physical_closed_limit_tilt
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t current_position_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t current_position_tilt
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_actuations_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_tilt_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_actuations_tilt
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_config_or_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t config_or_status
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_lift_percentage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_position_lift_percentage
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_percentage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_position_tilt_percentage
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t installed_open_limit_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t installed_closed_limit_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_tilt_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t installed_open_limit_tilt
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_tilt_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t installed_closed_limit_tilt
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_velocity_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t velocity_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_acceleration_time_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t acceleration_time_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_deceleration_time_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t deceleration_time_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t mode
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_lift_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* intermediate_setpoints_lift
);
typedef sl_status_t (*uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_tilt_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* intermediate_setpoints_tilt
);
// Callback types used by the barrier_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_moving_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t moving_state
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_safety_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t safety_status
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_capabilities_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t capabilities
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_open_events_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t open_events
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_close_events_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t close_events
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_command_open_events_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t command_open_events
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_command_close_events_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t command_close_events
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_open_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t open_period
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_close_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t close_period
);
typedef sl_status_t (*uic_mqtt_dotdot_barrier_control_attribute_barrier_position_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t barrier_position
);
// Callback types used by the pump_configuration_and_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_pressure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_pressure
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_speed_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_speed
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_flow_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_flow
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_pressure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_const_pressure
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_pressure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_const_pressure
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_comp_pressure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_comp_pressure
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_comp_pressure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_comp_pressure
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_speed_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_const_speed
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_speed_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_const_speed
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_flow_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_const_flow
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_flow_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_const_flow
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_temp_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_const_temp
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_temp_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_const_temp
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_pump_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t pump_status
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_effective_operation_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t effective_operation_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_effective_control_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t effective_control_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_capacity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t capacity
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_speed_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t speed
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_running_hours_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t lifetime_running_hours
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t power
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_energy_consumed_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t lifetime_energy_consumed
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_operation_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t operation_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_control_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t control_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_pump_configuration_and_control_attribute_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t alarm_mask
);
// Callback types used by the thermostat cluster
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_local_temperature_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t local_temperature
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_outdoor_temperature_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t outdoor_temperature
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupancy_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupancy
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_abs_min_heat_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t abs_min_heat_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_abs_max_heat_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t abs_max_heat_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_abs_min_cool_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t abs_min_cool_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_abs_max_cool_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t abs_max_cool_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_pi_cooling_demand_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t pi_cooling_demand
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_pi_heating_demand_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t pi_heating_demand
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_hvac_system_type_configuration_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t hvac_system_type_configuration
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_local_temperature_calibration_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t local_temperature_calibration
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_cooling_setpoint_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t occupied_cooling_setpoint
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_heating_setpoint_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t occupied_heating_setpoint
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_cooling_setpoint_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t unoccupied_cooling_setpoint
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_heating_setpoint_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t unoccupied_heating_setpoint
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_min_heat_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_heat_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_max_heat_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_heat_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_min_cool_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_cool_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_max_cool_setpoint_limit_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_cool_setpoint_limit
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_min_setpoint_dead_band_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t min_setpoint_dead_band
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_remote_sensing_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t remote_sensing
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_control_sequence_of_operation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t control_sequence_of_operation
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_system_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t system_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_alarm_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t alarm_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_thermostat_running_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t thermostat_running_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_start_of_week_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t start_of_week
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_number_of_weekly_transitions_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_weekly_transitions
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_number_of_daily_transitions_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_daily_transitions
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t temperature_setpoint_hold
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_duration_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t temperature_setpoint_hold_duration
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_thermostat_programming_operation_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t thermostat_programming_operation_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_thermostat_running_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t thermostat_running_state
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_setpoint_change_source_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t setpoint_change_source
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_setpoint_change_amount_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t setpoint_change_amount
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_setpoint_change_source_timestamp_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC setpoint_change_source_timestamp
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_setback_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupied_setback
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_setback_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupied_setback_min
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_occupied_setback_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupied_setback_max
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t unoccupied_setback
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t unoccupied_setback_min
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t unoccupied_setback_max
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_emergency_heat_delta_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t emergency_heat_delta
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ac_type
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_capacity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_capacity
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_refrigerant_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ac_refrigerant_type
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_compressor_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ac_compressor_type
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_error_code_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t ac_error_code
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_louver_position_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ac_louver_position
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_coil_temperature_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t ac_coil_temperature
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_attribute_ac_capacity_format_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ac_capacity_format
);
// Callback types used by the fan_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_fan_control_attribute_fan_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t fan_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_fan_control_attribute_fan_mode_sequence_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t fan_mode_sequence
);
// Callback types used by the dehumidification_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t relative_humidity
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_cooling_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t dehumidification_cooling
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_rh_dehumidification_setpoint_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t rh_dehumidification_setpoint
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t relative_humidity_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_lockout_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t dehumidification_lockout
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_hysteresis_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t dehumidification_hysteresis
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_max_cool_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t dehumidification_max_cool
);
typedef sl_status_t (*uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_display_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t relative_humidity_display
);
// Callback types used by the thermostat_user_interface_configuration cluster
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_temperature_display_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t temperature_display_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_keypad_lockout_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t keypad_lockout
);
typedef sl_status_t (*uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_schedule_programming_visibility_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t schedule_programming_visibility
);
// Callback types used by the color_control cluster
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_current_hue_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_hue
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_current_saturation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_saturation
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_remaining_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t remaining_time
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_currentx_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t currentx
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_currenty_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t currenty
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_drift_compensation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t drift_compensation
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_compensation_text_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* compensation_text
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_temperature_mireds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_temperature_mireds
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t color_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_options_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t options
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_number_of_primaries_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_primaries
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary1x_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary1x
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary1y_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary1y
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary1_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t primary1_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary2x_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary2x
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary2y_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary2y
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary2_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t primary2_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary3x_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary3x
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary3y_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary3y
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary3_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t primary3_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary4x_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary4x
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary4y_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary4y
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary4_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t primary4_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary5x_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary5x
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary5y_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary5y
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary5_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t primary5_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary6x_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary6x
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary6y_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t primary6y
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_primary6_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t primary6_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_white_pointx_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t white_pointx
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_white_pointy_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t white_pointy
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointrx_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_pointrx
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointry_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_pointry
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointr_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t color_pointr_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointgx_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_pointgx
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointgy_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_pointgy
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointg_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t color_pointg_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointbx_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_pointbx
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointby_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_pointby
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_pointb_intensity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t color_pointb_intensity
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_enhanced_current_hue_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t enhanced_current_hue
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_enhanced_color_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t enhanced_color_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_active_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t color_loop_active
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_direction_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t color_loop_direction
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_loop_time
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_start_enhanced_hue_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_loop_start_enhanced_hue
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_loop_stored_enhanced_hue_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_loop_stored_enhanced_hue
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_capabilities_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_capabilities
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_temp_physical_min_mireds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_temp_physical_min_mireds
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_color_temp_physical_max_mireds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t color_temp_physical_max_mireds
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_couple_color_temp_to_level_min_mireds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t couple_color_temp_to_level_min_mireds
);
typedef sl_status_t (*uic_mqtt_dotdot_color_control_attribute_start_up_color_temperature_mireds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t start_up_color_temperature_mireds
);
// Callback types used by the ballast_configuration cluster
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_physical_min_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t physical_min_level
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_physical_max_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t physical_max_level
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_ballast_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ballast_status
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_min_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t min_level
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_max_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t max_level
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_power_on_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t power_on_level
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_power_on_fade_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t power_on_fade_time
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_intrinsic_ballast_factor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t intrinsic_ballast_factor
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_ballast_factor_adjustment_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ballast_factor_adjustment
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_quantity_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t lamp_quantity
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* lamp_type
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_manufacturer_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* lamp_manufacturer
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_rated_hours_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t lamp_rated_hours
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t lamp_burn_hours
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_alarm_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t lamp_alarm_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_trip_point_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t lamp_burn_hours_trip_point
);
// Callback types used by the illuminance_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_measurement_attribute_light_sensor_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t light_sensor_type
);
// Callback types used by the illuminance_level_sensing cluster
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_level_sensing_attribute_level_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t level_status
);
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_level_sensing_attribute_light_sensor_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t light_sensor_type
);
typedef sl_status_t (*uic_mqtt_dotdot_illuminance_level_sensing_attribute_illuminance_target_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t illuminance_target_level
);
// Callback types used by the temperature_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_temperature_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the pressure_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_scaled_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t scaled_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_min_scaled_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t min_scaled_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_max_scaled_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t max_scaled_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_scaled_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t scaled_tolerance
);
typedef sl_status_t (*uic_mqtt_dotdot_pressure_measurement_attribute_scale_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t scale
);
// Callback types used by the flow_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_flow_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the relativity_humidity cluster
typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_relativity_humidity_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the occupancy_sensing cluster
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupancy
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_sensor_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupancy_sensor_type
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_sensor_type_bitmap_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t occupancy_sensor_type_bitmap
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_pir_occupied_to_unoccupied_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t pir_occupied_to_unoccupied_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t pir_unoccupied_to_occupied_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t pir_unoccupied_to_occupied_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_occupied_to_unoccupied_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ultrasonic_occupied_to_unoccupied_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ultrasonic_unoccupied_to_occupied_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t ultrasonic_unoccupied_to_occupied_threshold
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_occupied_to_unoccupied_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t physical_contact_occupied_to_unoccupied_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t physical_contact_unoccupied_to_occupied_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_threshold_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t physical_contact_unoccupied_to_occupied_threshold
);
// Callback types used by the soil_moisture cluster
typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_soil_moisture_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the ph_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_ph_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the electrical_conductivity_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the wind_speed_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_wind_speed_measurement_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t tolerance
);
// Callback types used by the carbon_monoxide cluster
typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_carbon_monoxide_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float tolerance
);
// Callback types used by the carbon_dioxide cluster
typedef sl_status_t (*uic_mqtt_dotdot_carbon_dioxide_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_carbon_dioxide_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_carbon_dioxide_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_carbon_dioxide_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float tolerance
);
// Callback types used by the pm25 cluster
typedef sl_status_t (*uic_mqtt_dotdot_pm25_attribute_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pm25_attribute_min_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float min_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pm25_attribute_max_measured_value_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float max_measured_value
);
typedef sl_status_t (*uic_mqtt_dotdot_pm25_attribute_tolerance_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  float tolerance
);
// Callback types used by the ias_zone cluster
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_zone_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t zone_state
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_zone_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t zone_type
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_zone_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t zone_status
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_iascie_address_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  EUI64 iascie_address
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_zoneid_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t zoneid
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_number_of_zone_sensitivity_levels_supported_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t number_of_zone_sensitivity_levels_supported
);
typedef sl_status_t (*uic_mqtt_dotdot_ias_zone_attribute_current_zone_sensitivity_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t current_zone_sensitivity_level
);
// Callback types used by the iaswd cluster
typedef sl_status_t (*uic_mqtt_dotdot_iaswd_attribute_max_duration_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t max_duration
);
// Callback types used by the metering cluster
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_summation_delivered_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t current_summation_delivered
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_summation_received_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t current_summation_received
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t current_max_demand_delivered
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_received_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t current_max_demand_received
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_power_factor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t power_factor
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_reading_snap_shot_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC reading_snap_shot_time
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC current_max_demand_delivered_time
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_max_demand_received_time_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  UTC current_max_demand_received_time
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_default_update_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t default_update_period
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_supply_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t supply_status
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_inlet_energy_carrier_summation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t current_inlet_energy_carrier_summation
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_current_outlet_energy_carrier_summation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t current_outlet_energy_carrier_summation
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_inlet_temperature_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t inlet_temperature
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_outlet_temperature_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t outlet_temperature
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_unitof_measure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t unitof_measure
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_summation_formatting_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t summation_formatting
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_demand_formatting_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t demand_formatting
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_historical_consumption_formatting_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t historical_consumption_formatting
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_metering_device_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t metering_device_type
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_energy_carrier_unit_of_measure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t energy_carrier_unit_of_measure
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_energy_carrier_summation_formatting_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t energy_carrier_summation_formatting
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_energy_carrier_demand_formatting_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t energy_carrier_demand_formatting
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_temperature_unit_of_measure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t temperature_unit_of_measure
);
typedef sl_status_t (*uic_mqtt_dotdot_metering_attribute_temperature_formatting_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t temperature_formatting
);
// Callback types used by the electrical_measurement cluster
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measurement_type_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t measurement_type
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_voltage_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_voltage_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_current_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_current_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_power_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_power_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t dc_voltage_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t dc_voltage_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t dc_current_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t dc_current_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t dc_power_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t dc_power_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_frequency
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_frequency_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_frequency_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_neutral_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t neutral_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_total_active_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int32_t total_active_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_total_reactive_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int32_t total_reactive_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_total_apparent_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t total_apparent_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured1st_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured1st_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured3rd_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured3rd_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured5th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured5th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured7th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured7th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured9th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured9th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured11th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured11th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase1st_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_phase1st_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase3rd_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_phase3rd_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase5th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_phase5th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase7th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_phase7th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase9th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_phase9th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase11th_harmonic_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t measured_phase11th_harmonic_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_frequency_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_frequency_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t power_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t power_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_harmonic_current_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t harmonic_current_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_phase_harmonic_current_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t phase_harmonic_current_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_line_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t line_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t reactive_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_min
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_max
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t reactive_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t apparent_power
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t power_factor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_voltage_measurement_period
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_over_voltage_counter
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_under_voltage_counter
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_extreme_over_voltage_period
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_extreme_under_voltage_period
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_sag_period
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_swell_period
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_voltage_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_voltage_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_current_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_current_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_multiplier_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_power_multiplier
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_divisor_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_power_divisor
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_overload_alarms_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t dc_overload_alarms_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_overload_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_voltage_overload
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_overload_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t dc_current_overload
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_alarms_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t ac_alarms_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_overload_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t ac_voltage_overload
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_overload_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t ac_current_overload
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_active_power_overload_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t ac_active_power_overload
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_ac_reactive_power_overload_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t ac_reactive_power_overload
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t average_rms_over_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t average_rms_under_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t rms_extreme_over_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t rms_extreme_under_voltage
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t rms_voltage_sag
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t rms_voltage_swell
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t line_current_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_current_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t reactive_current_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_min_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_max_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_min_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_max_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_min_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_max_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t reactive_power_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t apparent_power_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t power_factor_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_voltage_measurement_period_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_over_voltage_counter_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_under_voltage_counter_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_extreme_over_voltage_period_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_extreme_under_voltage_period_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_sag_period_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_swell_period_phb
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t line_current_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_current_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t reactive_current_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_min_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_max_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_min_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_current_max_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_min_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t active_power_max_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int16_t reactive_power_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t apparent_power_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t power_factor_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_voltage_measurement_period_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_over_voltage_counter_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_rms_under_voltage_counter_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_extreme_over_voltage_period_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_extreme_under_voltage_period_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_sag_period_phc
);
typedef sl_status_t (*uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phc_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t rms_voltage_swell_period_phc
);
// Callback types used by the diagnostics cluster
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_number_of_resets_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t number_of_resets
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_persistent_memory_writes_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t persistent_memory_writes
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_rx_bcast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t mac_rx_bcast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_bcast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t mac_tx_bcast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_rx_ucast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t mac_rx_ucast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t mac_tx_ucast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_retry_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t mac_tx_ucast_retry
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_fail_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t mac_tx_ucast_fail
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_rx_bcast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_rx_bcast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_bcast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_tx_bcast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_rx_ucast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_rx_ucast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_success_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_tx_ucast_success
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_retry_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_tx_ucast_retry
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_fail_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_tx_ucast_fail
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_route_disc_initiated_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t route_disc_initiated
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_neighbor_added_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t neighbor_added
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_neighbor_removed_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t neighbor_removed
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_neighbor_stale_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t neighbor_stale
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_join_indication_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t join_indication
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_child_moved_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t child_moved
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_nwkfc_failure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t nwkfc_failure
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_apsfc_failure_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t apsfc_failure
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_unauthorized_key_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_unauthorized_key
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_nwk_decrypt_failures_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t nwk_decrypt_failures
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_aps_decrypt_failures_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t aps_decrypt_failures
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_packet_buffer_allocate_failures_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t packet_buffer_allocate_failures
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_relayed_ucast_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t relayed_ucast
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_phy_to_mac_queue_limit_reached_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t phy_to_mac_queue_limit_reached
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_packet_validate_drop_count_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t packet_validate_drop_count
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_average_mac_retry_per_aps_message_sent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint16_t average_mac_retry_per_aps_message_sent
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_last_messagelqi_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t last_messagelqi
);
typedef sl_status_t (*uic_mqtt_dotdot_diagnostics_attribute_last_messagerssi_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t last_messagerssi
);
// Callback types used by the protocol_controller_rf_telemetry cluster
typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_attribute_tx_report_enabled_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool tx_report_enabled
);
typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_rf_telemetry_attribute_pti_enabled_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool pti_enabled
);
// Callback types used by the state cluster
typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_endpoint_id_list_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t endpoint_id_list_count,
  const uint8_t* endpoint_id_list
);
typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_network_status_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t network_status
);
typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_security_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t security
);
typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_maximum_command_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t maximum_command_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_state_attribute_network_list_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t network_list_count,
  const char** network_list
);
// Callback types used by the binding cluster
typedef sl_status_t (*uic_mqtt_dotdot_binding_attribute_binding_table_full_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool binding_table_full
);
typedef sl_status_t (*uic_mqtt_dotdot_binding_attribute_bindable_cluster_list_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t bindable_cluster_list_count,
  const char** bindable_cluster_list
);
typedef sl_status_t (*uic_mqtt_dotdot_binding_attribute_binding_table_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t binding_table_count,
  const BindingObject* binding_table
);
// Callback types used by the system_metrics cluster
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_reporting_interval_seconds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t reporting_interval_seconds
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_cpu_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t cpu_usage_percent_count,
  const double* cpu_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_cpu_frequencym_hz_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t cpu_frequencym_hz_count,
  const double* cpu_frequencym_hz
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_cpu_average_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t cpu_average_usage_percent_count,
  const double* cpu_average_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_cpu_min_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t cpu_min_usage_percent_count,
  const double* cpu_min_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_cpu_max_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t cpu_max_usage_percent_count,
  const double* cpu_max_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_ram_totalmb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double ram_totalmb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_ram_freemb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double ram_freemb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_ram_availablemb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double ram_availablemb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_swap_memory_totalmb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double swap_memory_totalmb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_swap_memory_usedmb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double swap_memory_usedmb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_virtual_memory_totalmb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double virtual_memory_totalmb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_virtual_memory_usedmb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double virtual_memory_usedmb
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_disks_usage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t disks_usage_count,
  const DiskUsageData* disks_usage
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_disks_counters_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t disks_counters_count,
  const DiskIOCounters* disks_counters
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_network_interfaces_data_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t network_interfaces_data_count,
  const NetworkInterfaceData* network_interfaces_data
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_wireless_network_interfaces_data_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t wireless_network_interfaces_data_count,
  const WirelessNetworkInterfaceData* wireless_network_interfaces_data
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_hostname_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* hostname
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_fqdn_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* fqdn
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_uptime_minutes_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t uptime_minutes
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_current_temperature_celcius_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double current_temperature_celcius
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_average_temperature_celcius_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double average_temperature_celcius
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_min_temperature_celcius_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double min_temperature_celcius
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_max_temperature_celcius_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double max_temperature_celcius
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_power_plugged_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool power_plugged
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_battery_percentage_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double battery_percentage
);
typedef sl_status_t (*uic_mqtt_dotdot_system_metrics_attribute_system_interrupts_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t system_interrupts
);
// Callback types used by the application_monitoring cluster
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_name_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* application_name
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_version_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* application_version
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_connected_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool application_connected
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_mqtt_topics_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t application_mqtt_topics_count,
  const char** application_mqtt_topics
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_uptime_minutes_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t uptime_minutes
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_process_id_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t process_id
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_hostname_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* hostname
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_fqdn_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* fqdn
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_logging_enabled_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool mqtt_logging_enabled
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_logging_level_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t mqtt_logging_level
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_statistics_reporting_interval_seconds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t mqtt_statistics_reporting_interval_seconds
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_sent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t mqtt_messages_sent
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_received_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t mqtt_messages_received
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_subscription_count_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint64_t mqtt_subscription_count
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_average_delivery_time_seconds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double mqtt_average_delivery_time_seconds
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_min_delivery_time_seconds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double mqtt_min_delivery_time_seconds
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_mqtt_max_delivery_time_seconds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double mqtt_max_delivery_time_seconds
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_statistics_reporting_interval_seconds_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint32_t application_statistics_reporting_interval_seconds
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double application_cpu_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_average_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double application_cpu_average_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_min_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double application_cpu_min_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_max_usage_percent_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double application_cpu_max_usage_percent
);
typedef sl_status_t (*uic_mqtt_dotdot_application_monitoring_attribute_application_ram_usagemb_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double application_ram_usagemb
);
// Callback types used by the name_and_location cluster
typedef sl_status_t (*uic_mqtt_dotdot_name_and_location_attribute_name_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* name
);
typedef sl_status_t (*uic_mqtt_dotdot_name_and_location_attribute_location_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  const char* location
);
// Callback types used by the configuration_parameters cluster
typedef sl_status_t (*uic_mqtt_dotdot_configuration_parameters_attribute_configuration_parameters_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t configuration_parameters_count,
  const ConfigurationParameter* configuration_parameters
);
// Callback types used by the aox_locator cluster
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_reporting_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t reporting_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_position_and_orientation_valid_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool position_and_orientation_valid
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_position_and_orientation_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  CoordinateAndOrientation position_and_orientation
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_azimuth_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t azimuth_mask_count,
  const MinMaxPair* azimuth_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_elevation_mask_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t elevation_mask_count,
  const MinMaxPair* elevation_mask
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_allow_list_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t allow_list_count,
  const char** allow_list
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_aox_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t aox_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_antenna_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t antenna_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_antenna_array_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t antenna_array_count,
  const int8_t* antenna_array
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_period_samples_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t period_samples
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_angle_filtering_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  bool angle_filtering
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_angle_filtering_weight_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  double angle_filtering_weight
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_angle_correction_timeout_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t angle_correction_timeout
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_angle_correction_delay_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t angle_correction_delay
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_cte_mode_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  uint8_t cte_mode
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_cte_sampling_interval_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t cte_sampling_interval
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_cte_length_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t cte_length
);
typedef sl_status_t (*uic_mqtt_dotdot_aox_locator_attribute_slot_duration_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  int8_t slot_duration
);
// Callback types used by the aox_position_estimation cluster
typedef sl_status_t (*uic_mqtt_dotdot_aox_position_estimation_attribute_position_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  EstimatedPosition position
);
// Callback types used by the protocol_controller_network_management cluster
typedef sl_status_t (*uic_mqtt_dotdot_protocol_controller_network_management_attribute_network_management_state_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  NetworkManagementState network_management_state
);
// Callback types used by the descriptor cluster
typedef sl_status_t (*uic_mqtt_dotdot_descriptor_attribute_device_type_list_callback_t)(
  dotdot_unid_t unid,
  dotdot_endpoint_id_t endpoint,
  bool unretained,
  uic_mqtt_dotdot_attribute_update_type_t update_type,
  size_t device_type_list_count,
  const DeviceTypeStruct* device_type_list
);

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


/**
 *  Initializes the attributes features for the Basic cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_basic_attributes_init();

/**
 * Setup callback to be called when a
 * Basic/Attributes/zcl_version/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_zcl_version_callback_set(const uic_mqtt_dotdot_basic_attribute_zcl_version_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/application_version/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_application_version_callback_set(const uic_mqtt_dotdot_basic_attribute_application_version_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/stack_version/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_stack_version_callback_set(const uic_mqtt_dotdot_basic_attribute_stack_version_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/hw_version/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_hw_version_callback_set(const uic_mqtt_dotdot_basic_attribute_hw_version_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/manufacturer_name/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_manufacturer_name_callback_set(const uic_mqtt_dotdot_basic_attribute_manufacturer_name_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/model_identifier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_model_identifier_callback_set(const uic_mqtt_dotdot_basic_attribute_model_identifier_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/date_code/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_date_code_callback_set(const uic_mqtt_dotdot_basic_attribute_date_code_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/power_source/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_power_source_callback_set(const uic_mqtt_dotdot_basic_attribute_power_source_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/generic_device_class/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_generic_device_class_callback_set(const uic_mqtt_dotdot_basic_attribute_generic_device_class_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/generic_device_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_generic_device_type_callback_set(const uic_mqtt_dotdot_basic_attribute_generic_device_type_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/product_code/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_product_code_callback_set(const uic_mqtt_dotdot_basic_attribute_product_code_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/producturl/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_producturl_callback_set(const uic_mqtt_dotdot_basic_attribute_producturl_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/manufacturer_version_details/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_manufacturer_version_details_callback_set(const uic_mqtt_dotdot_basic_attribute_manufacturer_version_details_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/serial_number/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_serial_number_callback_set(const uic_mqtt_dotdot_basic_attribute_serial_number_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/product_label/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_product_label_callback_set(const uic_mqtt_dotdot_basic_attribute_product_label_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/location_description/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_location_description_callback_set(const uic_mqtt_dotdot_basic_attribute_location_description_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/physical_environment/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_physical_environment_callback_set(const uic_mqtt_dotdot_basic_attribute_physical_environment_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/device_enabled/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_device_enabled_callback_set(const uic_mqtt_dotdot_basic_attribute_device_enabled_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_alarm_mask_callback_set(const uic_mqtt_dotdot_basic_attribute_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/disable_local_config/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_disable_local_config_callback_set(const uic_mqtt_dotdot_basic_attribute_disable_local_config_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/sw_buildid/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_sw_buildid_callback_set(const uic_mqtt_dotdot_basic_attribute_sw_buildid_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/z_wave_generic_device_class/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_z_wave_generic_device_class_callback_set(const uic_mqtt_dotdot_basic_attribute_z_wave_generic_device_class_callback_t callback);
/**
 * Setup callback to be called when a
 * Basic/Attributes/z_wave_specific_device_class/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_basic_attribute_z_wave_specific_device_class_callback_set(const uic_mqtt_dotdot_basic_attribute_z_wave_specific_device_class_callback_t callback);


/**
 *  Initializes the attributes features for the PowerConfiguration cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_power_configuration_attributes_init();

/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/mains_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/mains_frequency/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_mains_frequency_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_mains_frequency_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/mains_alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_mains_alarm_mask_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_mains_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/mains_voltage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/mains_voltage_max_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_max_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_max_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/mains_voltage_dwell_trip_point/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_dwell_trip_point_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_mains_voltage_dwell_trip_point_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_percentage_remaining/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_remaining_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_remaining_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_manufacturer/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_manufacturer_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_manufacturer_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_size/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_size_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_size_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/batterya_hr_rating/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_batterya_hr_rating_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_batterya_hr_rating_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_quantity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_quantity_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_quantity_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_rated_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_rated_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_rated_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_mask_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_voltage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_voltage_threshold1/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold1_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold1_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_voltage_threshold2/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold2_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold2_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_voltage_threshold3/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold3_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_voltage_threshold3_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_percentage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_percentage_threshold1/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold1_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold1_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_percentage_threshold2/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold2_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold2_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_percentage_threshold3/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold3_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_percentage_threshold3_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery_alarm_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_state_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery_alarm_state_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_percentage_remaining/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_remaining_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_remaining_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_manufacturer/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_manufacturer_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_manufacturer_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_size/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_size_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_size_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2a_hr_rating/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2a_hr_rating_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2a_hr_rating_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_quantity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_quantity_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_quantity_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_rated_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_rated_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_rated_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_mask_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_voltage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_voltage_threshold1/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold1_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold1_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_voltage_threshold2/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold2_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold2_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_voltage_threshold3/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold3_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_voltage_threshold3_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_percentage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_percentage_threshold1/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold1_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold1_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_percentage_threshold2/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold2_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold2_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_percentage_threshold3/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold3_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_percentage_threshold3_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery2_alarm_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_state_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery2_alarm_state_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_percentage_remaining/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_remaining_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_remaining_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_manufacturer/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_manufacturer_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_manufacturer_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_size/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_size_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_size_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3a_hr_rating/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3a_hr_rating_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3a_hr_rating_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_quantity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_quantity_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_quantity_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_rated_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_rated_voltage_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_rated_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_mask_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_voltage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_voltage_threshold1/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold1_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold1_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_voltage_threshold2/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold2_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold2_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_voltage_threshold3/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold3_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_voltage_threshold3_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_percentage_min_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_min_threshold_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_min_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_percentage_threshold1/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold1_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold1_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_percentage_threshold2/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold2_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold2_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_percentage_threshold3/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold3_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_percentage_threshold3_callback_t callback);
/**
 * Setup callback to be called when a
 * PowerConfiguration/Attributes/battery3_alarm_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_state_callback_set(const uic_mqtt_dotdot_power_configuration_attribute_battery3_alarm_state_callback_t callback);


/**
 *  Initializes the attributes features for the DeviceTemperatureConfiguration cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_device_temperature_configuration_attributes_init();

/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/current_temperature/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_current_temperature_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_current_temperature_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/min_temp_experienced/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_min_temp_experienced_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_min_temp_experienced_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/max_temp_experienced/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_max_temp_experienced_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_max_temp_experienced_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/over_temp_total_dwell/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_over_temp_total_dwell_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_over_temp_total_dwell_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/device_temp_alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_device_temp_alarm_mask_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_device_temp_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/low_temp_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_low_temp_threshold_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_low_temp_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/high_temp_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_threshold_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/low_temp_dwell_trip_point/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_low_temp_dwell_trip_point_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_low_temp_dwell_trip_point_callback_t callback);
/**
 * Setup callback to be called when a
 * DeviceTemperatureConfiguration/Attributes/high_temp_dwell_trip_point/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_dwell_trip_point_callback_set(const uic_mqtt_dotdot_device_temperature_configuration_attribute_high_temp_dwell_trip_point_callback_t callback);


/**
 *  Initializes the attributes features for the Identify cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_identify_attributes_init();

/**
 * Setup callback to be called when a
 * Identify/Attributes/identify_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_identify_attribute_identify_time_callback_set(const uic_mqtt_dotdot_identify_attribute_identify_time_callback_t callback);


/**
 *  Initializes the attributes features for the Groups cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_groups_attributes_init();

/**
 * Setup callback to be called when a
 * Groups/Attributes/name_support/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_groups_attribute_name_support_callback_set(const uic_mqtt_dotdot_groups_attribute_name_support_callback_t callback);


/**
 *  Initializes the attributes features for the Scenes cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_scenes_attributes_init();

/**
 * Setup callback to be called when a
 * Scenes/Attributes/scene_count/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_scene_count_callback_set(const uic_mqtt_dotdot_scenes_attribute_scene_count_callback_t callback);
/**
 * Setup callback to be called when a
 * Scenes/Attributes/current_scene/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_current_scene_callback_set(const uic_mqtt_dotdot_scenes_attribute_current_scene_callback_t callback);
/**
 * Setup callback to be called when a
 * Scenes/Attributes/current_group/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_current_group_callback_set(const uic_mqtt_dotdot_scenes_attribute_current_group_callback_t callback);
/**
 * Setup callback to be called when a
 * Scenes/Attributes/scene_valid/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_scene_valid_callback_set(const uic_mqtt_dotdot_scenes_attribute_scene_valid_callback_t callback);
/**
 * Setup callback to be called when a
 * Scenes/Attributes/name_support/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_name_support_callback_set(const uic_mqtt_dotdot_scenes_attribute_name_support_callback_t callback);
/**
 * Setup callback to be called when a
 * Scenes/Attributes/last_configured_by/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_last_configured_by_callback_set(const uic_mqtt_dotdot_scenes_attribute_last_configured_by_callback_t callback);
/**
 * Setup callback to be called when a
 * Scenes/Attributes/scene_table/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_scenes_attribute_scene_table_callback_set(const uic_mqtt_dotdot_scenes_attribute_scene_table_callback_t callback);


/**
 *  Initializes the attributes features for the OnOff cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_on_off_attributes_init();

/**
 * Setup callback to be called when a
 * OnOff/Attributes/on_off/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_on_off_attribute_on_off_callback_set(const uic_mqtt_dotdot_on_off_attribute_on_off_callback_t callback);
/**
 * Setup callback to be called when a
 * OnOff/Attributes/global_scene_control/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_on_off_attribute_global_scene_control_callback_set(const uic_mqtt_dotdot_on_off_attribute_global_scene_control_callback_t callback);
/**
 * Setup callback to be called when a
 * OnOff/Attributes/on_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_on_off_attribute_on_time_callback_set(const uic_mqtt_dotdot_on_off_attribute_on_time_callback_t callback);
/**
 * Setup callback to be called when a
 * OnOff/Attributes/off_wait_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_on_off_attribute_off_wait_time_callback_set(const uic_mqtt_dotdot_on_off_attribute_off_wait_time_callback_t callback);
/**
 * Setup callback to be called when a
 * OnOff/Attributes/start_up_on_off/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_on_off_attribute_start_up_on_off_callback_set(const uic_mqtt_dotdot_on_off_attribute_start_up_on_off_callback_t callback);


/**
 *  Initializes the attributes features for the Level cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_level_attributes_init();

/**
 * Setup callback to be called when a
 * Level/Attributes/current_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_current_level_callback_set(const uic_mqtt_dotdot_level_attribute_current_level_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/remaining_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_remaining_time_callback_set(const uic_mqtt_dotdot_level_attribute_remaining_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/min_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_min_level_callback_set(const uic_mqtt_dotdot_level_attribute_min_level_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/max_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_max_level_callback_set(const uic_mqtt_dotdot_level_attribute_max_level_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/current_frequency/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_current_frequency_callback_set(const uic_mqtt_dotdot_level_attribute_current_frequency_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/min_frequency/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_min_frequency_callback_set(const uic_mqtt_dotdot_level_attribute_min_frequency_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/max_frequency/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_max_frequency_callback_set(const uic_mqtt_dotdot_level_attribute_max_frequency_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/options/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_options_callback_set(const uic_mqtt_dotdot_level_attribute_options_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/on_off_transition_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_on_off_transition_time_callback_set(const uic_mqtt_dotdot_level_attribute_on_off_transition_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/on_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_on_level_callback_set(const uic_mqtt_dotdot_level_attribute_on_level_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/on_transition_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_on_transition_time_callback_set(const uic_mqtt_dotdot_level_attribute_on_transition_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/off_transition_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_off_transition_time_callback_set(const uic_mqtt_dotdot_level_attribute_off_transition_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/default_move_rate/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_default_move_rate_callback_set(const uic_mqtt_dotdot_level_attribute_default_move_rate_callback_t callback);
/**
 * Setup callback to be called when a
 * Level/Attributes/start_up_current_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_level_attribute_start_up_current_level_callback_set(const uic_mqtt_dotdot_level_attribute_start_up_current_level_callback_t callback);


/**
 *  Initializes the attributes features for the Alarms cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_alarms_attributes_init();

/**
 * Setup callback to be called when a
 * Alarms/Attributes/alarm_count/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_alarms_attribute_alarm_count_callback_set(const uic_mqtt_dotdot_alarms_attribute_alarm_count_callback_t callback);


/**
 *  Initializes the attributes features for the Time cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_time_attributes_init();

/**
 * Setup callback to be called when a
 * Time/Attributes/time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_time_callback_set(const uic_mqtt_dotdot_time_attribute_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/time_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_time_status_callback_set(const uic_mqtt_dotdot_time_attribute_time_status_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/time_zone/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_time_zone_callback_set(const uic_mqtt_dotdot_time_attribute_time_zone_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/dst_start/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_dst_start_callback_set(const uic_mqtt_dotdot_time_attribute_dst_start_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/dst_end/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_dst_end_callback_set(const uic_mqtt_dotdot_time_attribute_dst_end_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/dst_shift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_dst_shift_callback_set(const uic_mqtt_dotdot_time_attribute_dst_shift_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/standard_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_standard_time_callback_set(const uic_mqtt_dotdot_time_attribute_standard_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/local_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_local_time_callback_set(const uic_mqtt_dotdot_time_attribute_local_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/last_set_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_last_set_time_callback_set(const uic_mqtt_dotdot_time_attribute_last_set_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Time/Attributes/valid_until_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_time_attribute_valid_until_time_callback_set(const uic_mqtt_dotdot_time_attribute_valid_until_time_callback_t callback);


/**
 *  Initializes the attributes features for the PollControl cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_poll_control_attributes_init();

/**
 * Setup callback to be called when a
 * PollControl/Attributes/check_in_interval/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_check_in_interval_callback_set(const uic_mqtt_dotdot_poll_control_attribute_check_in_interval_callback_t callback);
/**
 * Setup callback to be called when a
 * PollControl/Attributes/long_poll_interval/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_callback_set(const uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_callback_t callback);
/**
 * Setup callback to be called when a
 * PollControl/Attributes/short_poll_interval/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_short_poll_interval_callback_set(const uic_mqtt_dotdot_poll_control_attribute_short_poll_interval_callback_t callback);
/**
 * Setup callback to be called when a
 * PollControl/Attributes/fast_poll_timeout/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_callback_set(const uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_callback_t callback);
/**
 * Setup callback to be called when a
 * PollControl/Attributes/check_in_interval_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_check_in_interval_min_callback_set(const uic_mqtt_dotdot_poll_control_attribute_check_in_interval_min_callback_t callback);
/**
 * Setup callback to be called when a
 * PollControl/Attributes/long_poll_interval_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_min_callback_set(const uic_mqtt_dotdot_poll_control_attribute_long_poll_interval_min_callback_t callback);
/**
 * Setup callback to be called when a
 * PollControl/Attributes/fast_poll_timeout_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_max_callback_set(const uic_mqtt_dotdot_poll_control_attribute_fast_poll_timeout_max_callback_t callback);


/**
 *  Initializes the attributes features for the ShadeConfiguration cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_shade_configuration_attributes_init();

/**
 * Setup callback to be called when a
 * ShadeConfiguration/Attributes/physical_closed_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_shade_configuration_attribute_physical_closed_limit_callback_set(const uic_mqtt_dotdot_shade_configuration_attribute_physical_closed_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * ShadeConfiguration/Attributes/motor_step_size/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_shade_configuration_attribute_motor_step_size_callback_set(const uic_mqtt_dotdot_shade_configuration_attribute_motor_step_size_callback_t callback);
/**
 * Setup callback to be called when a
 * ShadeConfiguration/Attributes/status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_shade_configuration_attribute_status_callback_set(const uic_mqtt_dotdot_shade_configuration_attribute_status_callback_t callback);
/**
 * Setup callback to be called when a
 * ShadeConfiguration/Attributes/closed_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_shade_configuration_attribute_closed_limit_callback_set(const uic_mqtt_dotdot_shade_configuration_attribute_closed_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * ShadeConfiguration/Attributes/mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_shade_configuration_attribute_mode_callback_set(const uic_mqtt_dotdot_shade_configuration_attribute_mode_callback_t callback);


/**
 *  Initializes the attributes features for the DoorLock cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_door_lock_attributes_init();

/**
 * Setup callback to be called when a
 * DoorLock/Attributes/lock_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_lock_state_callback_set(const uic_mqtt_dotdot_door_lock_attribute_lock_state_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/lock_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_lock_type_callback_set(const uic_mqtt_dotdot_door_lock_attribute_lock_type_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/actuator_enabled/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_actuator_enabled_callback_set(const uic_mqtt_dotdot_door_lock_attribute_actuator_enabled_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/door_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_door_state_callback_set(const uic_mqtt_dotdot_door_lock_attribute_door_state_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/door_open_events/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_door_open_events_callback_set(const uic_mqtt_dotdot_door_lock_attribute_door_open_events_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/door_closed_events/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_door_closed_events_callback_set(const uic_mqtt_dotdot_door_lock_attribute_door_closed_events_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/open_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_open_period_callback_set(const uic_mqtt_dotdot_door_lock_attribute_open_period_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_log_records_supported/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_log_records_supported_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_log_records_supported_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_total_users_supported/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_total_users_supported_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_total_users_supported_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_pin_users_supported/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_pin_users_supported_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_pin_users_supported_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_rfid_users_supported/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_rfid_users_supported_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_rfid_users_supported_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_week_day_schedules_supported_per_user/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_week_day_schedules_supported_per_user_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_week_day_schedules_supported_per_user_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_year_day_schedules_supported_per_user/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_year_day_schedules_supported_per_user_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_year_day_schedules_supported_per_user_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_holiday_schedules_supported/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_holiday_schedules_supported_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_holiday_schedules_supported_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/max_pin_code_length/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_max_pin_code_length_callback_set(const uic_mqtt_dotdot_door_lock_attribute_max_pin_code_length_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/min_pin_code_length/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_min_pin_code_length_callback_set(const uic_mqtt_dotdot_door_lock_attribute_min_pin_code_length_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/max_rfid_code_length/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_max_rfid_code_length_callback_set(const uic_mqtt_dotdot_door_lock_attribute_max_rfid_code_length_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/min_rfid_code_length/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_min_rfid_code_length_callback_set(const uic_mqtt_dotdot_door_lock_attribute_min_rfid_code_length_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/credential_rules_support/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_credential_rules_support_callback_set(const uic_mqtt_dotdot_door_lock_attribute_credential_rules_support_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/number_of_credentials_supported_per_user/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_number_of_credentials_supported_per_user_callback_set(const uic_mqtt_dotdot_door_lock_attribute_number_of_credentials_supported_per_user_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/enable_logging/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_enable_logging_callback_set(const uic_mqtt_dotdot_door_lock_attribute_enable_logging_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/language/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_language_callback_set(const uic_mqtt_dotdot_door_lock_attribute_language_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/led_settings/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_led_settings_callback_set(const uic_mqtt_dotdot_door_lock_attribute_led_settings_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/auto_relock_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_auto_relock_time_callback_set(const uic_mqtt_dotdot_door_lock_attribute_auto_relock_time_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/sound_volume/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_sound_volume_callback_set(const uic_mqtt_dotdot_door_lock_attribute_sound_volume_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/operating_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_operating_mode_callback_set(const uic_mqtt_dotdot_door_lock_attribute_operating_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/supported_operating_modes/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_supported_operating_modes_callback_set(const uic_mqtt_dotdot_door_lock_attribute_supported_operating_modes_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/default_configuration_register/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_default_configuration_register_callback_set(const uic_mqtt_dotdot_door_lock_attribute_default_configuration_register_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/enable_local_programming/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_enable_local_programming_callback_set(const uic_mqtt_dotdot_door_lock_attribute_enable_local_programming_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/enable_one_touch_locking/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_enable_one_touch_locking_callback_set(const uic_mqtt_dotdot_door_lock_attribute_enable_one_touch_locking_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/enable_inside_statusled/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_enable_inside_statusled_callback_set(const uic_mqtt_dotdot_door_lock_attribute_enable_inside_statusled_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/enable_privacy_mode_button/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_enable_privacy_mode_button_callback_set(const uic_mqtt_dotdot_door_lock_attribute_enable_privacy_mode_button_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/local_programming_features/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_local_programming_features_callback_set(const uic_mqtt_dotdot_door_lock_attribute_local_programming_features_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/wrong_code_entry_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_wrong_code_entry_limit_callback_set(const uic_mqtt_dotdot_door_lock_attribute_wrong_code_entry_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/user_code_temporary_disable_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_user_code_temporary_disable_time_callback_set(const uic_mqtt_dotdot_door_lock_attribute_user_code_temporary_disable_time_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/send_pin_over_the_air/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_send_pin_over_the_air_callback_set(const uic_mqtt_dotdot_door_lock_attribute_send_pin_over_the_air_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/require_pi_nfor_rf_operation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_require_pi_nfor_rf_operation_callback_set(const uic_mqtt_dotdot_door_lock_attribute_require_pi_nfor_rf_operation_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/security_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_security_level_callback_set(const uic_mqtt_dotdot_door_lock_attribute_security_level_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/expiring_user_timeout/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_expiring_user_timeout_callback_set(const uic_mqtt_dotdot_door_lock_attribute_expiring_user_timeout_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_alarm_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/keypad_operation_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_keypad_operation_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_keypad_operation_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/rf_operation_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_rf_operation_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_rf_operation_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/manual_operation_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_manual_operation_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_manual_operation_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/rfid_operation_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_rfid_operation_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_rfid_operation_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/keypad_programming_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_keypad_programming_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_keypad_programming_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/rf_programming_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_rf_programming_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_rf_programming_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/rfid_programming_event_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_rfid_programming_event_mask_callback_set(const uic_mqtt_dotdot_door_lock_attribute_rfid_programming_event_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * DoorLock/Attributes/feature_map/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_door_lock_attribute_feature_map_callback_set(const uic_mqtt_dotdot_door_lock_attribute_feature_map_callback_t callback);


/**
 *  Initializes the attributes features for the WindowCovering cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_window_covering_attributes_init();

/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/window_covering_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_window_covering_type_callback_set(const uic_mqtt_dotdot_window_covering_attribute_window_covering_type_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/physical_closed_limit_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/physical_closed_limit_tilt/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_tilt_callback_set(const uic_mqtt_dotdot_window_covering_attribute_physical_closed_limit_tilt_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/current_position_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_current_position_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_current_position_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/current_position_tilt/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_callback_set(const uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/number_of_actuations_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/number_of_actuations_tilt/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_tilt_callback_set(const uic_mqtt_dotdot_window_covering_attribute_number_of_actuations_tilt_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/config_or_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_config_or_status_callback_set(const uic_mqtt_dotdot_window_covering_attribute_config_or_status_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/current_position_lift_percentage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_current_position_lift_percentage_callback_set(const uic_mqtt_dotdot_window_covering_attribute_current_position_lift_percentage_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/current_position_tilt_percentage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_percentage_callback_set(const uic_mqtt_dotdot_window_covering_attribute_current_position_tilt_percentage_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/installed_open_limit_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/installed_closed_limit_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/installed_open_limit_tilt/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_tilt_callback_set(const uic_mqtt_dotdot_window_covering_attribute_installed_open_limit_tilt_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/installed_closed_limit_tilt/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_tilt_callback_set(const uic_mqtt_dotdot_window_covering_attribute_installed_closed_limit_tilt_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/velocity_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_velocity_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_velocity_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/acceleration_time_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_acceleration_time_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_acceleration_time_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/deceleration_time_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_deceleration_time_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_deceleration_time_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_mode_callback_set(const uic_mqtt_dotdot_window_covering_attribute_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/intermediate_setpoints_lift/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_lift_callback_set(const uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_lift_callback_t callback);
/**
 * Setup callback to be called when a
 * WindowCovering/Attributes/intermediate_setpoints_tilt/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_tilt_callback_set(const uic_mqtt_dotdot_window_covering_attribute_intermediate_setpoints_tilt_callback_t callback);


/**
 *  Initializes the attributes features for the BarrierControl cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_barrier_control_attributes_init();

/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/moving_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_moving_state_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_moving_state_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/safety_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_safety_status_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_safety_status_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/capabilities/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_capabilities_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_capabilities_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/open_events/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_open_events_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_open_events_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/close_events/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_close_events_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_close_events_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/command_open_events/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_command_open_events_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_command_open_events_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/command_close_events/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_command_close_events_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_command_close_events_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/open_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_open_period_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_open_period_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/close_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_close_period_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_close_period_callback_t callback);
/**
 * Setup callback to be called when a
 * BarrierControl/Attributes/barrier_position/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_barrier_control_attribute_barrier_position_callback_set(const uic_mqtt_dotdot_barrier_control_attribute_barrier_position_callback_t callback);


/**
 *  Initializes the attributes features for the PumpConfigurationAndControl cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_pump_configuration_and_control_attributes_init();

/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_pressure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_pressure_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_pressure_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_speed/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_speed_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_speed_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_flow/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_flow_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_flow_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/min_const_pressure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_pressure_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_pressure_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_const_pressure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_pressure_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_pressure_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/min_comp_pressure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_comp_pressure_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_comp_pressure_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_comp_pressure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_comp_pressure_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_comp_pressure_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/min_const_speed/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_speed_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_speed_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_const_speed/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_speed_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_speed_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/min_const_flow/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_flow_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_flow_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_const_flow/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_flow_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_flow_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/min_const_temp/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_temp_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_min_const_temp_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/max_const_temp/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_temp_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_max_const_temp_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/pump_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_pump_status_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_pump_status_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/effective_operation_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_effective_operation_mode_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_effective_operation_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/effective_control_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_effective_control_mode_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_effective_control_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/capacity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_capacity_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_capacity_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/speed/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_speed_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_speed_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/lifetime_running_hours/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_running_hours_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_running_hours_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_power_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_power_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/lifetime_energy_consumed/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_energy_consumed_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_lifetime_energy_consumed_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/operation_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_operation_mode_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_operation_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/control_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_control_mode_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_control_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * PumpConfigurationAndControl/Attributes/alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pump_configuration_and_control_attribute_alarm_mask_callback_set(const uic_mqtt_dotdot_pump_configuration_and_control_attribute_alarm_mask_callback_t callback);


/**
 *  Initializes the attributes features for the Thermostat cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_thermostat_attributes_init();

/**
 * Setup callback to be called when a
 * Thermostat/Attributes/local_temperature/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_local_temperature_callback_set(const uic_mqtt_dotdot_thermostat_attribute_local_temperature_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/outdoor_temperature/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_outdoor_temperature_callback_set(const uic_mqtt_dotdot_thermostat_attribute_outdoor_temperature_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/occupancy/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_occupancy_callback_set(const uic_mqtt_dotdot_thermostat_attribute_occupancy_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/abs_min_heat_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_abs_min_heat_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_abs_min_heat_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/abs_max_heat_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_abs_max_heat_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_abs_max_heat_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/abs_min_cool_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_abs_min_cool_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_abs_min_cool_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/abs_max_cool_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_abs_max_cool_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_abs_max_cool_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/pi_cooling_demand/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_pi_cooling_demand_callback_set(const uic_mqtt_dotdot_thermostat_attribute_pi_cooling_demand_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/pi_heating_demand/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_pi_heating_demand_callback_set(const uic_mqtt_dotdot_thermostat_attribute_pi_heating_demand_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/hvac_system_type_configuration/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_hvac_system_type_configuration_callback_set(const uic_mqtt_dotdot_thermostat_attribute_hvac_system_type_configuration_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/local_temperature_calibration/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_local_temperature_calibration_callback_set(const uic_mqtt_dotdot_thermostat_attribute_local_temperature_calibration_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/occupied_cooling_setpoint/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_occupied_cooling_setpoint_callback_set(const uic_mqtt_dotdot_thermostat_attribute_occupied_cooling_setpoint_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/occupied_heating_setpoint/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_occupied_heating_setpoint_callback_set(const uic_mqtt_dotdot_thermostat_attribute_occupied_heating_setpoint_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/unoccupied_cooling_setpoint/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_unoccupied_cooling_setpoint_callback_set(const uic_mqtt_dotdot_thermostat_attribute_unoccupied_cooling_setpoint_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/unoccupied_heating_setpoint/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_unoccupied_heating_setpoint_callback_set(const uic_mqtt_dotdot_thermostat_attribute_unoccupied_heating_setpoint_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/min_heat_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_min_heat_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_min_heat_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/max_heat_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_max_heat_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_max_heat_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/min_cool_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_min_cool_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_min_cool_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/max_cool_setpoint_limit/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_max_cool_setpoint_limit_callback_set(const uic_mqtt_dotdot_thermostat_attribute_max_cool_setpoint_limit_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/min_setpoint_dead_band/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_min_setpoint_dead_band_callback_set(const uic_mqtt_dotdot_thermostat_attribute_min_setpoint_dead_band_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/remote_sensing/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_remote_sensing_callback_set(const uic_mqtt_dotdot_thermostat_attribute_remote_sensing_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/control_sequence_of_operation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_control_sequence_of_operation_callback_set(const uic_mqtt_dotdot_thermostat_attribute_control_sequence_of_operation_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/system_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_system_mode_callback_set(const uic_mqtt_dotdot_thermostat_attribute_system_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/alarm_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_alarm_mask_callback_set(const uic_mqtt_dotdot_thermostat_attribute_alarm_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/thermostat_running_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_thermostat_running_mode_callback_set(const uic_mqtt_dotdot_thermostat_attribute_thermostat_running_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/start_of_week/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_start_of_week_callback_set(const uic_mqtt_dotdot_thermostat_attribute_start_of_week_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/number_of_weekly_transitions/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_number_of_weekly_transitions_callback_set(const uic_mqtt_dotdot_thermostat_attribute_number_of_weekly_transitions_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/number_of_daily_transitions/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_number_of_daily_transitions_callback_set(const uic_mqtt_dotdot_thermostat_attribute_number_of_daily_transitions_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/temperature_setpoint_hold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_callback_set(const uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/temperature_setpoint_hold_duration/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_duration_callback_set(const uic_mqtt_dotdot_thermostat_attribute_temperature_setpoint_hold_duration_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/thermostat_programming_operation_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_thermostat_programming_operation_mode_callback_set(const uic_mqtt_dotdot_thermostat_attribute_thermostat_programming_operation_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/thermostat_running_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_thermostat_running_state_callback_set(const uic_mqtt_dotdot_thermostat_attribute_thermostat_running_state_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/setpoint_change_source/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_setpoint_change_source_callback_set(const uic_mqtt_dotdot_thermostat_attribute_setpoint_change_source_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/setpoint_change_amount/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_setpoint_change_amount_callback_set(const uic_mqtt_dotdot_thermostat_attribute_setpoint_change_amount_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/setpoint_change_source_timestamp/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_setpoint_change_source_timestamp_callback_set(const uic_mqtt_dotdot_thermostat_attribute_setpoint_change_source_timestamp_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/occupied_setback/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_occupied_setback_callback_set(const uic_mqtt_dotdot_thermostat_attribute_occupied_setback_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/occupied_setback_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_occupied_setback_min_callback_set(const uic_mqtt_dotdot_thermostat_attribute_occupied_setback_min_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/occupied_setback_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_occupied_setback_max_callback_set(const uic_mqtt_dotdot_thermostat_attribute_occupied_setback_max_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/unoccupied_setback/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_callback_set(const uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/unoccupied_setback_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_min_callback_set(const uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_min_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/unoccupied_setback_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_max_callback_set(const uic_mqtt_dotdot_thermostat_attribute_unoccupied_setback_max_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/emergency_heat_delta/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_emergency_heat_delta_callback_set(const uic_mqtt_dotdot_thermostat_attribute_emergency_heat_delta_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_type_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_type_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_capacity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_capacity_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_capacity_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_refrigerant_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_refrigerant_type_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_refrigerant_type_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_compressor_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_compressor_type_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_compressor_type_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_error_code/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_error_code_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_error_code_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_louver_position/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_louver_position_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_louver_position_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_coil_temperature/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_coil_temperature_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_coil_temperature_callback_t callback);
/**
 * Setup callback to be called when a
 * Thermostat/Attributes/ac_capacity_format/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_attribute_ac_capacity_format_callback_set(const uic_mqtt_dotdot_thermostat_attribute_ac_capacity_format_callback_t callback);


/**
 *  Initializes the attributes features for the FanControl cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_fan_control_attributes_init();

/**
 * Setup callback to be called when a
 * FanControl/Attributes/fan_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_fan_control_attribute_fan_mode_callback_set(const uic_mqtt_dotdot_fan_control_attribute_fan_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * FanControl/Attributes/fan_mode_sequence/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_fan_control_attribute_fan_mode_sequence_callback_set(const uic_mqtt_dotdot_fan_control_attribute_fan_mode_sequence_callback_t callback);


/**
 *  Initializes the attributes features for the DehumidificationControl cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_dehumidification_control_attributes_init();

/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/relative_humidity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/dehumidification_cooling/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_cooling_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_cooling_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/rh_dehumidification_setpoint/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_rh_dehumidification_setpoint_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_rh_dehumidification_setpoint_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/relative_humidity_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_mode_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/dehumidification_lockout/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_lockout_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_lockout_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/dehumidification_hysteresis/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_hysteresis_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_hysteresis_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/dehumidification_max_cool/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_max_cool_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_dehumidification_max_cool_callback_t callback);
/**
 * Setup callback to be called when a
 * DehumidificationControl/Attributes/relative_humidity_display/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_display_callback_set(const uic_mqtt_dotdot_dehumidification_control_attribute_relative_humidity_display_callback_t callback);


/**
 *  Initializes the attributes features for the ThermostatUserInterfaceConfiguration cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_thermostat_user_interface_configuration_attributes_init();

/**
 * Setup callback to be called when a
 * ThermostatUserInterfaceConfiguration/Attributes/temperature_display_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_temperature_display_mode_callback_set(const uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_temperature_display_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * ThermostatUserInterfaceConfiguration/Attributes/keypad_lockout/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_keypad_lockout_callback_set(const uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_keypad_lockout_callback_t callback);
/**
 * Setup callback to be called when a
 * ThermostatUserInterfaceConfiguration/Attributes/schedule_programming_visibility/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_schedule_programming_visibility_callback_set(const uic_mqtt_dotdot_thermostat_user_interface_configuration_attribute_schedule_programming_visibility_callback_t callback);


/**
 *  Initializes the attributes features for the ColorControl cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_color_control_attributes_init();

/**
 * Setup callback to be called when a
 * ColorControl/Attributes/current_hue/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_current_hue_callback_set(const uic_mqtt_dotdot_color_control_attribute_current_hue_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/current_saturation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_current_saturation_callback_set(const uic_mqtt_dotdot_color_control_attribute_current_saturation_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/remaining_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_remaining_time_callback_set(const uic_mqtt_dotdot_color_control_attribute_remaining_time_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/currentx/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_currentx_callback_set(const uic_mqtt_dotdot_color_control_attribute_currentx_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/currenty/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_currenty_callback_set(const uic_mqtt_dotdot_color_control_attribute_currenty_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/drift_compensation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_drift_compensation_callback_set(const uic_mqtt_dotdot_color_control_attribute_drift_compensation_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/compensation_text/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_compensation_text_callback_set(const uic_mqtt_dotdot_color_control_attribute_compensation_text_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_temperature_mireds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_temperature_mireds_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_temperature_mireds_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_mode_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/options/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_options_callback_set(const uic_mqtt_dotdot_color_control_attribute_options_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/number_of_primaries/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_number_of_primaries_callback_set(const uic_mqtt_dotdot_color_control_attribute_number_of_primaries_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary1x/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary1x_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary1x_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary1y/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary1y_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary1y_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary1_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary1_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary1_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary2x/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary2x_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary2x_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary2y/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary2y_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary2y_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary2_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary2_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary2_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary3x/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary3x_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary3x_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary3y/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary3y_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary3y_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary3_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary3_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary3_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary4x/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary4x_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary4x_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary4y/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary4y_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary4y_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary4_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary4_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary4_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary5x/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary5x_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary5x_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary5y/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary5y_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary5y_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary5_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary5_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary5_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary6x/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary6x_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary6x_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary6y/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary6y_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary6y_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/primary6_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_primary6_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_primary6_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/white_pointx/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_white_pointx_callback_set(const uic_mqtt_dotdot_color_control_attribute_white_pointx_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/white_pointy/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_white_pointy_callback_set(const uic_mqtt_dotdot_color_control_attribute_white_pointy_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointrx/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointrx_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointrx_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointry/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointry_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointry_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointr_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointr_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointr_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointgx/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointgx_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointgx_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointgy/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointgy_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointgy_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointg_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointg_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointg_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointbx/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointbx_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointbx_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointby/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointby_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointby_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_pointb_intensity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_pointb_intensity_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_pointb_intensity_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/enhanced_current_hue/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_enhanced_current_hue_callback_set(const uic_mqtt_dotdot_color_control_attribute_enhanced_current_hue_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/enhanced_color_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_enhanced_color_mode_callback_set(const uic_mqtt_dotdot_color_control_attribute_enhanced_color_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_loop_active/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_loop_active_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_loop_active_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_loop_direction/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_loop_direction_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_loop_direction_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_loop_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_loop_time_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_loop_time_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_loop_start_enhanced_hue/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_loop_start_enhanced_hue_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_loop_start_enhanced_hue_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_loop_stored_enhanced_hue/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_loop_stored_enhanced_hue_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_loop_stored_enhanced_hue_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_capabilities/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_capabilities_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_capabilities_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_temp_physical_min_mireds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_temp_physical_min_mireds_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_temp_physical_min_mireds_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/color_temp_physical_max_mireds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_color_temp_physical_max_mireds_callback_set(const uic_mqtt_dotdot_color_control_attribute_color_temp_physical_max_mireds_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/couple_color_temp_to_level_min_mireds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_couple_color_temp_to_level_min_mireds_callback_set(const uic_mqtt_dotdot_color_control_attribute_couple_color_temp_to_level_min_mireds_callback_t callback);
/**
 * Setup callback to be called when a
 * ColorControl/Attributes/start_up_color_temperature_mireds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_color_control_attribute_start_up_color_temperature_mireds_callback_set(const uic_mqtt_dotdot_color_control_attribute_start_up_color_temperature_mireds_callback_t callback);


/**
 *  Initializes the attributes features for the BallastConfiguration cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_ballast_configuration_attributes_init();

/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/physical_min_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_physical_min_level_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_physical_min_level_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/physical_max_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_physical_max_level_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_physical_max_level_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/ballast_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_ballast_status_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_ballast_status_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/min_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_min_level_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_min_level_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/max_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_max_level_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_max_level_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/power_on_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_power_on_level_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_power_on_level_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/power_on_fade_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_power_on_fade_time_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_power_on_fade_time_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/intrinsic_ballast_factor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_intrinsic_ballast_factor_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_intrinsic_ballast_factor_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/ballast_factor_adjustment/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_ballast_factor_adjustment_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_ballast_factor_adjustment_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_quantity/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_quantity_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_quantity_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_type_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_type_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_manufacturer/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_manufacturer_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_manufacturer_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_rated_hours/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_rated_hours_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_rated_hours_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_burn_hours/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_alarm_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_alarm_mode_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_alarm_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * BallastConfiguration/Attributes/lamp_burn_hours_trip_point/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_trip_point_callback_set(const uic_mqtt_dotdot_ballast_configuration_attribute_lamp_burn_hours_trip_point_callback_t callback);


/**
 *  Initializes the attributes features for the IlluminanceMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_illuminance_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * IlluminanceMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_illuminance_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * IlluminanceMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_illuminance_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * IlluminanceMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_illuminance_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * IlluminanceMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_illuminance_measurement_attribute_tolerance_callback_t callback);
/**
 * Setup callback to be called when a
 * IlluminanceMeasurement/Attributes/light_sensor_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_measurement_attribute_light_sensor_type_callback_set(const uic_mqtt_dotdot_illuminance_measurement_attribute_light_sensor_type_callback_t callback);


/**
 *  Initializes the attributes features for the IlluminanceLevelSensing cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_illuminance_level_sensing_attributes_init();

/**
 * Setup callback to be called when a
 * IlluminanceLevelSensing/Attributes/level_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_level_sensing_attribute_level_status_callback_set(const uic_mqtt_dotdot_illuminance_level_sensing_attribute_level_status_callback_t callback);
/**
 * Setup callback to be called when a
 * IlluminanceLevelSensing/Attributes/light_sensor_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_level_sensing_attribute_light_sensor_type_callback_set(const uic_mqtt_dotdot_illuminance_level_sensing_attribute_light_sensor_type_callback_t callback);
/**
 * Setup callback to be called when a
 * IlluminanceLevelSensing/Attributes/illuminance_target_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_illuminance_level_sensing_attribute_illuminance_target_level_callback_set(const uic_mqtt_dotdot_illuminance_level_sensing_attribute_illuminance_target_level_callback_t callback);


/**
 *  Initializes the attributes features for the TemperatureMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_temperature_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * TemperatureMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_temperature_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_temperature_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * TemperatureMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_temperature_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_temperature_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * TemperatureMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_temperature_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_temperature_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * TemperatureMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_temperature_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_temperature_measurement_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the PressureMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_pressure_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_tolerance_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/scaled_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_scaled_value_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_scaled_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/min_scaled_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_min_scaled_value_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_min_scaled_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/max_scaled_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_max_scaled_value_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_max_scaled_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/scaled_tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_scaled_tolerance_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_scaled_tolerance_callback_t callback);
/**
 * Setup callback to be called when a
 * PressureMeasurement/Attributes/scale/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pressure_measurement_attribute_scale_callback_set(const uic_mqtt_dotdot_pressure_measurement_attribute_scale_callback_t callback);


/**
 *  Initializes the attributes features for the FlowMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_flow_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * FlowMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_flow_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_flow_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * FlowMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_flow_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_flow_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * FlowMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_flow_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_flow_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * FlowMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_flow_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_flow_measurement_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the RelativityHumidity cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_relativity_humidity_attributes_init();

/**
 * Setup callback to be called when a
 * RelativityHumidity/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_relativity_humidity_attribute_measured_value_callback_set(const uic_mqtt_dotdot_relativity_humidity_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * RelativityHumidity/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_relativity_humidity_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_relativity_humidity_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * RelativityHumidity/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_relativity_humidity_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_relativity_humidity_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * RelativityHumidity/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_relativity_humidity_attribute_tolerance_callback_set(const uic_mqtt_dotdot_relativity_humidity_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the OccupancySensing cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_occupancy_sensing_attributes_init();

/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/occupancy/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/occupancy_sensor_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_sensor_type_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_sensor_type_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/occupancy_sensor_type_bitmap/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_sensor_type_bitmap_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_occupancy_sensor_type_bitmap_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/pir_occupied_to_unoccupied_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_pir_occupied_to_unoccupied_delay_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_pir_occupied_to_unoccupied_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/pir_unoccupied_to_occupied_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_delay_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/pir_unoccupied_to_occupied_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_threshold_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_pir_unoccupied_to_occupied_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/ultrasonic_occupied_to_unoccupied_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_occupied_to_unoccupied_delay_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_occupied_to_unoccupied_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/ultrasonic_unoccupied_to_occupied_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_delay_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/ultrasonic_unoccupied_to_occupied_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_threshold_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_ultrasonic_unoccupied_to_occupied_threshold_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/physical_contact_occupied_to_unoccupied_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_occupied_to_unoccupied_delay_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_occupied_to_unoccupied_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/physical_contact_unoccupied_to_occupied_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_delay_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * OccupancySensing/Attributes/physical_contact_unoccupied_to_occupied_threshold/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_threshold_callback_set(const uic_mqtt_dotdot_occupancy_sensing_attribute_physical_contact_unoccupied_to_occupied_threshold_callback_t callback);


/**
 *  Initializes the attributes features for the SoilMoisture cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_soil_moisture_attributes_init();

/**
 * Setup callback to be called when a
 * SoilMoisture/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_soil_moisture_attribute_measured_value_callback_set(const uic_mqtt_dotdot_soil_moisture_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * SoilMoisture/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_soil_moisture_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_soil_moisture_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * SoilMoisture/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_soil_moisture_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_soil_moisture_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * SoilMoisture/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_soil_moisture_attribute_tolerance_callback_set(const uic_mqtt_dotdot_soil_moisture_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the PhMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_ph_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * PhMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ph_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_ph_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PhMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ph_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_ph_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PhMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ph_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_ph_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PhMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ph_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_ph_measurement_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the ElectricalConductivityMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_electrical_conductivity_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * ElectricalConductivityMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalConductivityMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalConductivityMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalConductivityMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_electrical_conductivity_measurement_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the WindSpeedMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_wind_speed_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * WindSpeedMeasurement/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_wind_speed_measurement_attribute_measured_value_callback_set(const uic_mqtt_dotdot_wind_speed_measurement_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * WindSpeedMeasurement/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_wind_speed_measurement_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_wind_speed_measurement_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * WindSpeedMeasurement/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_wind_speed_measurement_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_wind_speed_measurement_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * WindSpeedMeasurement/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_wind_speed_measurement_attribute_tolerance_callback_set(const uic_mqtt_dotdot_wind_speed_measurement_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the CarbonMonoxide cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_carbon_monoxide_attributes_init();

/**
 * Setup callback to be called when a
 * CarbonMonoxide/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_monoxide_attribute_measured_value_callback_set(const uic_mqtt_dotdot_carbon_monoxide_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * CarbonMonoxide/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_monoxide_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_carbon_monoxide_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * CarbonMonoxide/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_monoxide_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_carbon_monoxide_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * CarbonMonoxide/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_monoxide_attribute_tolerance_callback_set(const uic_mqtt_dotdot_carbon_monoxide_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the CarbonDioxide cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_carbon_dioxide_attributes_init();

/**
 * Setup callback to be called when a
 * CarbonDioxide/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_dioxide_attribute_measured_value_callback_set(const uic_mqtt_dotdot_carbon_dioxide_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * CarbonDioxide/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_dioxide_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_carbon_dioxide_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * CarbonDioxide/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_dioxide_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_carbon_dioxide_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * CarbonDioxide/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_carbon_dioxide_attribute_tolerance_callback_set(const uic_mqtt_dotdot_carbon_dioxide_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the PM25 cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_pm25_attributes_init();

/**
 * Setup callback to be called when a
 * PM25/Attributes/measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pm25_attribute_measured_value_callback_set(const uic_mqtt_dotdot_pm25_attribute_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PM25/Attributes/min_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pm25_attribute_min_measured_value_callback_set(const uic_mqtt_dotdot_pm25_attribute_min_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PM25/Attributes/max_measured_value/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pm25_attribute_max_measured_value_callback_set(const uic_mqtt_dotdot_pm25_attribute_max_measured_value_callback_t callback);
/**
 * Setup callback to be called when a
 * PM25/Attributes/tolerance/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_pm25_attribute_tolerance_callback_set(const uic_mqtt_dotdot_pm25_attribute_tolerance_callback_t callback);


/**
 *  Initializes the attributes features for the IASZone cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_ias_zone_attributes_init();

/**
 * Setup callback to be called when a
 * IASZone/Attributes/zone_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_zone_state_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_zone_state_callback_t callback);
/**
 * Setup callback to be called when a
 * IASZone/Attributes/zone_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_zone_type_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_zone_type_callback_t callback);
/**
 * Setup callback to be called when a
 * IASZone/Attributes/zone_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_zone_status_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_zone_status_callback_t callback);
/**
 * Setup callback to be called when a
 * IASZone/Attributes/iascie_address/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_iascie_address_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_iascie_address_callback_t callback);
/**
 * Setup callback to be called when a
 * IASZone/Attributes/zoneid/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_zoneid_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_zoneid_callback_t callback);
/**
 * Setup callback to be called when a
 * IASZone/Attributes/number_of_zone_sensitivity_levels_supported/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_number_of_zone_sensitivity_levels_supported_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_number_of_zone_sensitivity_levels_supported_callback_t callback);
/**
 * Setup callback to be called when a
 * IASZone/Attributes/current_zone_sensitivity_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_ias_zone_attribute_current_zone_sensitivity_level_callback_set(const uic_mqtt_dotdot_ias_zone_attribute_current_zone_sensitivity_level_callback_t callback);


/**
 *  Initializes the attributes features for the IASWD cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_iaswd_attributes_init();

/**
 * Setup callback to be called when a
 * IASWD/Attributes/max_duration/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_iaswd_attribute_max_duration_callback_set(const uic_mqtt_dotdot_iaswd_attribute_max_duration_callback_t callback);


/**
 *  Initializes the attributes features for the Metering cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_metering_attributes_init();

/**
 * Setup callback to be called when a
 * Metering/Attributes/current_summation_delivered/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_summation_delivered_callback_set(const uic_mqtt_dotdot_metering_attribute_current_summation_delivered_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_summation_received/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_summation_received_callback_set(const uic_mqtt_dotdot_metering_attribute_current_summation_received_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_max_demand_delivered/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_callback_set(const uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_max_demand_received/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_max_demand_received_callback_set(const uic_mqtt_dotdot_metering_attribute_current_max_demand_received_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/power_factor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_power_factor_callback_set(const uic_mqtt_dotdot_metering_attribute_power_factor_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/reading_snap_shot_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_reading_snap_shot_time_callback_set(const uic_mqtt_dotdot_metering_attribute_reading_snap_shot_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_max_demand_delivered_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_time_callback_set(const uic_mqtt_dotdot_metering_attribute_current_max_demand_delivered_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_max_demand_received_time/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_max_demand_received_time_callback_set(const uic_mqtt_dotdot_metering_attribute_current_max_demand_received_time_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/default_update_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_default_update_period_callback_set(const uic_mqtt_dotdot_metering_attribute_default_update_period_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/supply_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_supply_status_callback_set(const uic_mqtt_dotdot_metering_attribute_supply_status_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_inlet_energy_carrier_summation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_inlet_energy_carrier_summation_callback_set(const uic_mqtt_dotdot_metering_attribute_current_inlet_energy_carrier_summation_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/current_outlet_energy_carrier_summation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_current_outlet_energy_carrier_summation_callback_set(const uic_mqtt_dotdot_metering_attribute_current_outlet_energy_carrier_summation_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/inlet_temperature/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_inlet_temperature_callback_set(const uic_mqtt_dotdot_metering_attribute_inlet_temperature_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/outlet_temperature/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_outlet_temperature_callback_set(const uic_mqtt_dotdot_metering_attribute_outlet_temperature_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/unitof_measure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_unitof_measure_callback_set(const uic_mqtt_dotdot_metering_attribute_unitof_measure_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_multiplier_callback_set(const uic_mqtt_dotdot_metering_attribute_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_divisor_callback_set(const uic_mqtt_dotdot_metering_attribute_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/summation_formatting/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_summation_formatting_callback_set(const uic_mqtt_dotdot_metering_attribute_summation_formatting_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/demand_formatting/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_demand_formatting_callback_set(const uic_mqtt_dotdot_metering_attribute_demand_formatting_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/historical_consumption_formatting/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_historical_consumption_formatting_callback_set(const uic_mqtt_dotdot_metering_attribute_historical_consumption_formatting_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/metering_device_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_metering_device_type_callback_set(const uic_mqtt_dotdot_metering_attribute_metering_device_type_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/energy_carrier_unit_of_measure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_energy_carrier_unit_of_measure_callback_set(const uic_mqtt_dotdot_metering_attribute_energy_carrier_unit_of_measure_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/energy_carrier_summation_formatting/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_energy_carrier_summation_formatting_callback_set(const uic_mqtt_dotdot_metering_attribute_energy_carrier_summation_formatting_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/energy_carrier_demand_formatting/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_energy_carrier_demand_formatting_callback_set(const uic_mqtt_dotdot_metering_attribute_energy_carrier_demand_formatting_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/temperature_unit_of_measure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_temperature_unit_of_measure_callback_set(const uic_mqtt_dotdot_metering_attribute_temperature_unit_of_measure_callback_t callback);
/**
 * Setup callback to be called when a
 * Metering/Attributes/temperature_formatting/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_metering_attribute_temperature_formatting_callback_set(const uic_mqtt_dotdot_metering_attribute_temperature_formatting_callback_t callback);


/**
 *  Initializes the attributes features for the ElectricalMeasurement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_electrical_measurement_attributes_init();

/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measurement_type/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measurement_type_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measurement_type_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_voltage_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_voltage_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_current_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_current_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_power_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_power_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_voltage_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_voltage_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_current_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_current_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_power_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_power_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_power_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_frequency/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_frequency_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_frequency_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/neutral_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_neutral_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_neutral_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/total_active_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_total_active_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_total_active_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/total_reactive_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_total_reactive_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_total_reactive_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/total_apparent_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_total_apparent_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_total_apparent_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured1st_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured1st_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured1st_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured3rd_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured3rd_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured3rd_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured5th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured5th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured5th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured7th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured7th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured7th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured9th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured9th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured9th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured11th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured11th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured11th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured_phase1st_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase1st_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase1st_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured_phase3rd_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase3rd_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase3rd_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured_phase5th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase5th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase5th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured_phase7th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase7th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase7th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured_phase9th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase9th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase9th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/measured_phase11th_harmonic_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase11th_harmonic_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_measured_phase11th_harmonic_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_frequency_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_frequency_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_frequency_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/power_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_power_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_power_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/power_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_power_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_power_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/harmonic_current_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_harmonic_current_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_harmonic_current_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/phase_harmonic_current_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_phase_harmonic_current_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_phase_harmonic_current_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/line_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_line_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_line_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/reactive_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_min/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_max/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/reactive_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/apparent_power/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/power_factor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_voltage_measurement_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_over_voltage_counter/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_under_voltage_counter/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_over_voltage_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_under_voltage_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_sag_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_swell_period/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_voltage_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_voltage_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_current_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_current_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_power_multiplier/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_multiplier_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_multiplier_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_power_divisor/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_divisor_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_power_divisor_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_overload_alarms_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_overload_alarms_mask_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_overload_alarms_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_voltage_overload/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_overload_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_voltage_overload_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/dc_current_overload/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_overload_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_dc_current_overload_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_alarms_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_alarms_mask_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_alarms_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_voltage_overload/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_overload_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_voltage_overload_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_current_overload/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_overload_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_current_overload_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_active_power_overload/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_active_power_overload_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_active_power_overload_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/ac_reactive_power_overload/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_ac_reactive_power_overload_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_ac_reactive_power_overload_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_over_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_under_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_over_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_under_voltage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_sag/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_swell/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/line_current_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_current_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/reactive_current_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_min_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_max_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_min_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_max_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_min_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_max_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/reactive_power_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/apparent_power_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/power_factor_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_voltage_measurement_period_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_over_voltage_counter_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_under_voltage_counter_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_over_voltage_period_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_under_voltage_period_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_sag_period_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_swell_period_phb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phb_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phb_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/line_current_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_line_current_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_current_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_current_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/reactive_current_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_reactive_current_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_min_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_min_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_max_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_max_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_min_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_min_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_current_max_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_current_max_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_min_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_min_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/active_power_max_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_active_power_max_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/reactive_power_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_reactive_power_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/apparent_power_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_apparent_power_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/power_factor_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_power_factor_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_voltage_measurement_period_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_voltage_measurement_period_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_over_voltage_counter_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_over_voltage_counter_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/average_rms_under_voltage_counter_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_average_rms_under_voltage_counter_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_over_voltage_period_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_over_voltage_period_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_extreme_under_voltage_period_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_extreme_under_voltage_period_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_sag_period_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_sag_period_phc_callback_t callback);
/**
 * Setup callback to be called when a
 * ElectricalMeasurement/Attributes/rms_voltage_swell_period_phc/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phc_callback_set(const uic_mqtt_dotdot_electrical_measurement_attribute_rms_voltage_swell_period_phc_callback_t callback);


/**
 *  Initializes the attributes features for the Diagnostics cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_diagnostics_attributes_init();

/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/number_of_resets/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_number_of_resets_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_number_of_resets_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/persistent_memory_writes/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_persistent_memory_writes_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_persistent_memory_writes_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/mac_rx_bcast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_mac_rx_bcast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_mac_rx_bcast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/mac_tx_bcast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_mac_tx_bcast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_mac_tx_bcast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/mac_rx_ucast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_mac_rx_ucast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_mac_rx_ucast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/mac_tx_ucast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/mac_tx_ucast_retry/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_retry_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_retry_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/mac_tx_ucast_fail/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_fail_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_mac_tx_ucast_fail_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_rx_bcast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_rx_bcast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_rx_bcast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_tx_bcast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_tx_bcast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_tx_bcast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_rx_ucast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_rx_ucast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_rx_ucast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_tx_ucast_success/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_success_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_success_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_tx_ucast_retry/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_retry_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_retry_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_tx_ucast_fail/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_fail_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_tx_ucast_fail_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/route_disc_initiated/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_route_disc_initiated_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_route_disc_initiated_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/neighbor_added/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_neighbor_added_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_neighbor_added_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/neighbor_removed/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_neighbor_removed_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_neighbor_removed_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/neighbor_stale/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_neighbor_stale_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_neighbor_stale_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/join_indication/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_join_indication_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_join_indication_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/child_moved/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_child_moved_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_child_moved_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/nwkfc_failure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_nwkfc_failure_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_nwkfc_failure_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/apsfc_failure/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_apsfc_failure_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_apsfc_failure_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_unauthorized_key/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_unauthorized_key_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_unauthorized_key_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/nwk_decrypt_failures/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_nwk_decrypt_failures_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_nwk_decrypt_failures_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/aps_decrypt_failures/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_aps_decrypt_failures_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_aps_decrypt_failures_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/packet_buffer_allocate_failures/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_packet_buffer_allocate_failures_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_packet_buffer_allocate_failures_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/relayed_ucast/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_relayed_ucast_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_relayed_ucast_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/phy_to_mac_queue_limit_reached/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_phy_to_mac_queue_limit_reached_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_phy_to_mac_queue_limit_reached_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/packet_validate_drop_count/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_packet_validate_drop_count_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_packet_validate_drop_count_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/average_mac_retry_per_aps_message_sent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_average_mac_retry_per_aps_message_sent_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_average_mac_retry_per_aps_message_sent_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/last_messagelqi/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_last_messagelqi_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_last_messagelqi_callback_t callback);
/**
 * Setup callback to be called when a
 * Diagnostics/Attributes/last_messagerssi/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_diagnostics_attribute_last_messagerssi_callback_set(const uic_mqtt_dotdot_diagnostics_attribute_last_messagerssi_callback_t callback);


/**
 *  Initializes the attributes features for the ProtocolController-RFTelemetry cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_rf_telemetry_attributes_init();

/**
 * Setup callback to be called when a
 * ProtocolController-RFTelemetry/Attributes/tx_report_enabled/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_attribute_tx_report_enabled_callback_set(const uic_mqtt_dotdot_protocol_controller_rf_telemetry_attribute_tx_report_enabled_callback_t callback);
/**
 * Setup callback to be called when a
 * ProtocolController-RFTelemetry/Attributes/pti_enabled/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_protocol_controller_rf_telemetry_attribute_pti_enabled_callback_set(const uic_mqtt_dotdot_protocol_controller_rf_telemetry_attribute_pti_enabled_callback_t callback);


/**
 *  Initializes the attributes features for the State cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_state_attributes_init();

/**
 * Setup callback to be called when a
 * State/Attributes/endpoint_id_list/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_state_attribute_endpoint_id_list_callback_set(const uic_mqtt_dotdot_state_attribute_endpoint_id_list_callback_t callback);
/**
 * Setup callback to be called when a
 * State/Attributes/network_status/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_state_attribute_network_status_callback_set(const uic_mqtt_dotdot_state_attribute_network_status_callback_t callback);
/**
 * Setup callback to be called when a
 * State/Attributes/security/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_state_attribute_security_callback_set(const uic_mqtt_dotdot_state_attribute_security_callback_t callback);
/**
 * Setup callback to be called when a
 * State/Attributes/maximum_command_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_state_attribute_maximum_command_delay_callback_set(const uic_mqtt_dotdot_state_attribute_maximum_command_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * State/Attributes/network_list/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_state_attribute_network_list_callback_set(const uic_mqtt_dotdot_state_attribute_network_list_callback_t callback);


/**
 *  Initializes the attributes features for the Binding cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_binding_attributes_init();

/**
 * Setup callback to be called when a
 * Binding/Attributes/binding_table_full/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_binding_attribute_binding_table_full_callback_set(const uic_mqtt_dotdot_binding_attribute_binding_table_full_callback_t callback);
/**
 * Setup callback to be called when a
 * Binding/Attributes/bindable_cluster_list/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_binding_attribute_bindable_cluster_list_callback_set(const uic_mqtt_dotdot_binding_attribute_bindable_cluster_list_callback_t callback);
/**
 * Setup callback to be called when a
 * Binding/Attributes/binding_table/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_binding_attribute_binding_table_callback_set(const uic_mqtt_dotdot_binding_attribute_binding_table_callback_t callback);


/**
 *  Initializes the attributes features for the SystemMetrics cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_system_metrics_attributes_init();

/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/reporting_interval_seconds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_reporting_interval_seconds_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_reporting_interval_seconds_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/cpu_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_cpu_usage_percent_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_cpu_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/cpu_frequencym_hz/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_cpu_frequencym_hz_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_cpu_frequencym_hz_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/cpu_average_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_cpu_average_usage_percent_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_cpu_average_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/cpu_min_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_cpu_min_usage_percent_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_cpu_min_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/cpu_max_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_cpu_max_usage_percent_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_cpu_max_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/ram_totalmb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_ram_totalmb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_ram_totalmb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/ram_freemb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_ram_freemb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_ram_freemb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/ram_availablemb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_ram_availablemb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_ram_availablemb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/swap_memory_totalmb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_swap_memory_totalmb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_swap_memory_totalmb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/swap_memory_usedmb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_swap_memory_usedmb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_swap_memory_usedmb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/virtual_memory_totalmb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_virtual_memory_totalmb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_virtual_memory_totalmb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/virtual_memory_usedmb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_virtual_memory_usedmb_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_virtual_memory_usedmb_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/disks_usage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_disks_usage_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_disks_usage_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/disks_counters/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_disks_counters_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_disks_counters_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/network_interfaces_data/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_network_interfaces_data_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_network_interfaces_data_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/wireless_network_interfaces_data/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_wireless_network_interfaces_data_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_wireless_network_interfaces_data_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/hostname/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_hostname_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_hostname_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/fqdn/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_fqdn_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_fqdn_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/uptime_minutes/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_uptime_minutes_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_uptime_minutes_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/current_temperature_celcius/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_current_temperature_celcius_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_current_temperature_celcius_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/average_temperature_celcius/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_average_temperature_celcius_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_average_temperature_celcius_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/min_temperature_celcius/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_min_temperature_celcius_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_min_temperature_celcius_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/max_temperature_celcius/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_max_temperature_celcius_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_max_temperature_celcius_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/power_plugged/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_power_plugged_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_power_plugged_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/battery_percentage/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_battery_percentage_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_battery_percentage_callback_t callback);
/**
 * Setup callback to be called when a
 * SystemMetrics/Attributes/system_interrupts/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_system_metrics_attribute_system_interrupts_callback_set(const uic_mqtt_dotdot_system_metrics_attribute_system_interrupts_callback_t callback);


/**
 *  Initializes the attributes features for the ApplicationMonitoring cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_application_monitoring_attributes_init();

/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_name/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_name_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_name_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_version/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_version_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_version_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_connected/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_connected_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_connected_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_mqtt_topics/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_mqtt_topics_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_mqtt_topics_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/uptime_minutes/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_uptime_minutes_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_uptime_minutes_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/process_id/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_process_id_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_process_id_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/hostname/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_hostname_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_hostname_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/fqdn/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_fqdn_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_fqdn_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_logging_enabled/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_logging_enabled_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_logging_enabled_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_logging_level/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_logging_level_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_logging_level_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_statistics_reporting_interval_seconds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_statistics_reporting_interval_seconds_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_statistics_reporting_interval_seconds_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_messages_sent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_sent_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_sent_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_messages_received/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_received_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_messages_received_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_subscription_count/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_subscription_count_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_subscription_count_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_average_delivery_time_seconds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_average_delivery_time_seconds_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_average_delivery_time_seconds_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_min_delivery_time_seconds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_min_delivery_time_seconds_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_min_delivery_time_seconds_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/mqtt_max_delivery_time_seconds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_mqtt_max_delivery_time_seconds_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_mqtt_max_delivery_time_seconds_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_statistics_reporting_interval_seconds/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_statistics_reporting_interval_seconds_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_statistics_reporting_interval_seconds_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_cpu_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_usage_percent_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_cpu_average_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_average_usage_percent_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_average_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_cpu_min_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_min_usage_percent_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_min_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_cpu_max_usage_percent/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_max_usage_percent_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_cpu_max_usage_percent_callback_t callback);
/**
 * Setup callback to be called when a
 * ApplicationMonitoring/Attributes/application_ram_usagemb/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_application_monitoring_attribute_application_ram_usagemb_callback_set(const uic_mqtt_dotdot_application_monitoring_attribute_application_ram_usagemb_callback_t callback);


/**
 *  Initializes the attributes features for the NameAndLocation cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_name_and_location_attributes_init();

/**
 * Setup callback to be called when a
 * NameAndLocation/Attributes/name/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_name_and_location_attribute_name_callback_set(const uic_mqtt_dotdot_name_and_location_attribute_name_callback_t callback);
/**
 * Setup callback to be called when a
 * NameAndLocation/Attributes/location/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_name_and_location_attribute_location_callback_set(const uic_mqtt_dotdot_name_and_location_attribute_location_callback_t callback);


/**
 *  Initializes the attributes features for the ConfigurationParameters cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_configuration_parameters_attributes_init();

/**
 * Setup callback to be called when a
 * ConfigurationParameters/Attributes/configuration_parameters/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_configuration_parameters_attribute_configuration_parameters_callback_set(const uic_mqtt_dotdot_configuration_parameters_attribute_configuration_parameters_callback_t callback);


/**
 *  Initializes the attributes features for the AoXLocator cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_aox_locator_attributes_init();

/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/reporting_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_reporting_mode_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_reporting_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/position_and_orientation_valid/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_position_and_orientation_valid_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_position_and_orientation_valid_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/position_and_orientation/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_position_and_orientation_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_position_and_orientation_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/azimuth_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_azimuth_mask_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_azimuth_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/elevation_mask/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_elevation_mask_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_elevation_mask_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/allow_list/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_allow_list_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_allow_list_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/aox_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_aox_mode_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_aox_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/antenna_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_antenna_mode_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_antenna_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/antenna_array/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_antenna_array_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_antenna_array_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/period_samples/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_period_samples_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_period_samples_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/angle_filtering/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_angle_filtering_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_angle_filtering_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/angle_filtering_weight/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_angle_filtering_weight_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_angle_filtering_weight_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/angle_correction_timeout/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_angle_correction_timeout_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_angle_correction_timeout_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/angle_correction_delay/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_angle_correction_delay_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_angle_correction_delay_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/cte_mode/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_cte_mode_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_cte_mode_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/cte_sampling_interval/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_cte_sampling_interval_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_cte_sampling_interval_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/cte_length/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_cte_length_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_cte_length_callback_t callback);
/**
 * Setup callback to be called when a
 * AoXLocator/Attributes/slot_duration/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_locator_attribute_slot_duration_callback_set(const uic_mqtt_dotdot_aox_locator_attribute_slot_duration_callback_t callback);


/**
 *  Initializes the attributes features for the AoXPositionEstimation cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_aox_position_estimation_attributes_init();

/**
 * Setup callback to be called when a
 * AoXPositionEstimation/Attributes/position/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_aox_position_estimation_attribute_position_callback_set(const uic_mqtt_dotdot_aox_position_estimation_attribute_position_callback_t callback);


/**
 *  Initializes the attributes features for the ProtocolController-NetworkManagement cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_protocol_controller_network_management_attributes_init();

/**
 * Setup callback to be called when a
 * ProtocolController-NetworkManagement/Attributes/network_management_state/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_protocol_controller_network_management_attribute_network_management_state_callback_set(const uic_mqtt_dotdot_protocol_controller_network_management_attribute_network_management_state_callback_t callback);


/**
 *  Initializes the attributes features for the Descriptor cluster,
 *  allowing to receive attribute updates from other UNIDs.
 */
sl_status_t uic_mqtt_dotdot_descriptor_attributes_init();

/**
 * Setup callback to be called when a
 * Descriptor/Attributes/device_type_list/# is received. Setting
 * this callback will overwrite the previous set callback
 */
void uic_mqtt_dotdot_descriptor_attribute_device_type_list_callback_set(const uic_mqtt_dotdot_descriptor_attribute_device_type_list_callback_t callback);


#ifdef __cplusplus
}
#endif // __cplusplus

#endif // DOTDOT_MQTT_ATTRIBUTES_H
/** @} end dotdot_mqtt_attributes */
