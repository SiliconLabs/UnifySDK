/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

/**
 * @defgroup dotdot_mqtt_command_helpers Internal C++ Command parsing helpers
 * @ingroup dotdot_mqtt
 * @brief C++ Helpers and definitions for parsing DotDot MQTT commands
 *
 * @{
 */

#ifndef DOTDOT_MQTT_COMMAND_HELPERS_HPP
#define DOTDOT_MQTT_COMMAND_HELPERS_HPP

#include "dotdot_mqtt.h"
#include <string>

////////////////////////////////////////////////////////////////////////////////
// Sending Commands functions
////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Basic ResetToFactoryDefaults command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_basic_reset_to_factory_defaults_command(
  
);




/**
 * @brief JSON parser for Basic WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_basic_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_basic_state_t &new_state,
  uic_mqtt_dotdot_basic_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for PowerConfiguration WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_power_configuration_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_power_configuration_state_t &new_state,
  uic_mqtt_dotdot_power_configuration_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for DeviceTemperatureConfiguration WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_device_temperature_configuration_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_device_temperature_configuration_state_t &new_state,
  uic_mqtt_dotdot_device_temperature_configuration_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Identify Identify command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_identify_identify_command(
  
  const uic_mqtt_dotdot_identify_command_identify_fields_t *fields
  
);


/**
 * @brief JSON parser for Identify Identify command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_identify_identify(
  nlohmann::json &jsn,
  uint16_t &identify_time

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Identify IdentifyQueryResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_identify_identify_query_response_command(
  
  const uic_mqtt_dotdot_identify_command_identify_query_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Identify IdentifyQueryResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_identify_identify_query_response(
  nlohmann::json &jsn,
  uint16_t &timeout

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Identify IdentifyQuery command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_identify_identify_query_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Identify TriggerEffect command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_identify_trigger_effect_command(
  
  const uic_mqtt_dotdot_identify_command_trigger_effect_fields_t *fields
  
);


/**
 * @brief JSON parser for Identify TriggerEffect command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_identify_trigger_effect(
  nlohmann::json &jsn,
  TriggerEffectEffectIdentifier &effect_identifier,

  TriggerEffectEffectVariant &effect_variant

);



/**
 * @brief JSON parser for Identify WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_identify_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_identify_state_t &new_state,
  uic_mqtt_dotdot_identify_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups AddGroup command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_add_group_command(
  
  const uic_mqtt_dotdot_groups_command_add_group_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups AddGroup command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_add_group(
  nlohmann::json &jsn,
  uint16_t &group_id,

  std::string &group_name

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups AddGroupResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_add_group_response_command(
  
  const uic_mqtt_dotdot_groups_command_add_group_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups AddGroupResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_add_group_response(
  nlohmann::json &jsn,
  uint8_t &status,

  uint16_t &group_id

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups ViewGroup command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_view_group_command(
  
  const uic_mqtt_dotdot_groups_command_view_group_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups ViewGroup command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_view_group(
  nlohmann::json &jsn,
  uint16_t &group_id

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups ViewGroupResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_view_group_response_command(
  
  const uic_mqtt_dotdot_groups_command_view_group_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups ViewGroupResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_view_group_response(
  nlohmann::json &jsn,
  uint8_t &status,

  uint16_t &group_id,

  std::string &group_name

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups GetGroupMembership command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_get_group_membership_command(
  
  const uic_mqtt_dotdot_groups_command_get_group_membership_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups GetGroupMembership command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_get_group_membership(
  nlohmann::json &jsn,
  std::vector<uint16_t> &group_list

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups GetGroupMembershipResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_get_group_membership_response_command(
  
  const uic_mqtt_dotdot_groups_command_get_group_membership_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups GetGroupMembershipResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_get_group_membership_response(
  nlohmann::json &jsn,
  uint8_t &capacity,

  std::vector<uint16_t> &group_list

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups RemoveGroup command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_remove_group_command(
  
  const uic_mqtt_dotdot_groups_command_remove_group_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups RemoveGroup command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_remove_group(
  nlohmann::json &jsn,
  uint16_t &group_id

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups RemoveGroupResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_remove_group_response_command(
  
  const uic_mqtt_dotdot_groups_command_remove_group_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups RemoveGroupResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_remove_group_response(
  nlohmann::json &jsn,
  uint8_t &status,

  uint16_t &group_id

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups RemoveAllGroups command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_remove_all_groups_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Groups AddGroupIfIdentifying command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_groups_add_group_if_identifying_command(
  
  const uic_mqtt_dotdot_groups_command_add_group_if_identifying_fields_t *fields
  
);


/**
 * @brief JSON parser for Groups AddGroupIfIdentifying command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_add_group_if_identifying(
  nlohmann::json &jsn,
  uint16_t &group_id,

  std::string &group_name

);



/**
 * @brief JSON parser for Groups WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_groups_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_groups_state_t &new_state,
  uic_mqtt_dotdot_groups_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes AddScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_add_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_add_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes AddScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_add_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid,

  uint16_t &transition_time,

  std::string &scene_name,

  std::vector<SExtensionFieldSetList> &extension_field_sets,

  uint8_t &transition_time100ms

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes AddSceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_add_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_add_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes AddSceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_add_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes ViewScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_view_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_view_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes ViewScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_view_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes ViewSceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_view_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_view_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes ViewSceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_view_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid,

  uint8_t &sceneid,

  uint16_t &transition_time,

  std::string &scene_name,

  std::vector<SExtensionFieldSetList> &extension_field_sets

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes RemoveScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_remove_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_remove_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes RemoveScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_remove_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes RemoveSceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_remove_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_remove_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes RemoveSceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_remove_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes RemoveAllScenes command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_remove_all_scenes_command(
  
  const uic_mqtt_dotdot_scenes_command_remove_all_scenes_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes RemoveAllScenes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_remove_all_scenes(
  nlohmann::json &jsn,
  SGroupId &groupid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes RemoveAllScenesResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_remove_all_scenes_response_command(
  
  const uic_mqtt_dotdot_scenes_command_remove_all_scenes_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes RemoveAllScenesResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_remove_all_scenes_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes StoreScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_store_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_store_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes StoreScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_store_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes StoreSceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_store_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_store_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes StoreSceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_store_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes RecallScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_recall_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_recall_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes RecallScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_recall_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid,

  uint16_t &transition_time

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes GetSceneMembership command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_get_scene_membership_command(
  
  const uic_mqtt_dotdot_scenes_command_get_scene_membership_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes GetSceneMembership command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_get_scene_membership(
  nlohmann::json &jsn,
  SGroupId &groupid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes GetSceneMembershipResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_get_scene_membership_response_command(
  
  const uic_mqtt_dotdot_scenes_command_get_scene_membership_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes GetSceneMembershipResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_get_scene_membership_response(
  nlohmann::json &jsn,
  zclStatus &status,

  uint8_t &capacity,

  SGroupId &groupid,

  std::vector<uint8_t> &scene_list

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes EnhancedAddScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_enhanced_add_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_enhanced_add_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes EnhancedAddScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid,

  uint16_t &transition_time,

  std::string &scene_name,

  std::vector<SExtensionFieldSetList> &extension_field_sets

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes EnhancedAddSceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_enhanced_add_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_enhanced_add_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes EnhancedAddSceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_enhanced_add_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes EnhancedViewScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_enhanced_view_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_enhanced_view_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes EnhancedViewScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene(
  nlohmann::json &jsn,
  SGroupId &groupid,

  uint8_t &sceneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes EnhancedViewSceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_enhanced_view_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_enhanced_view_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes EnhancedViewSceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_enhanced_view_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &groupid,

  uint8_t &sceneid,

  uint16_t &transition_time,

  std::string &scene_name,

  std::vector<SExtensionFieldSetList> &extension_field_sets

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes CopyScene command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_copy_scene_command(
  
  const uic_mqtt_dotdot_scenes_command_copy_scene_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes CopyScene command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_copy_scene(
  nlohmann::json &jsn,
  uint8_t &mode,

  SGroupId &group_identifier_from,

  uint8_t &scene_identifier_from,

  SGroupId &group_identifier_to,

  uint8_t &scene_identifier_to

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Scenes CopySceneResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_scenes_copy_scene_response_command(
  
  const uic_mqtt_dotdot_scenes_command_copy_scene_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Scenes CopySceneResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_copy_scene_response(
  nlohmann::json &jsn,
  zclStatus &status,

  SGroupId &group_identifier_from,

  uint8_t &scene_identifier_from

);



/**
 * @brief JSON parser for Scenes WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_scenes_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_scenes_state_t &new_state,
  uic_mqtt_dotdot_scenes_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a OnOff Off command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_on_off_off_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a OnOff On command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_on_off_on_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a OnOff Toggle command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_on_off_toggle_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a OnOff OffWithEffect command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_on_off_off_with_effect_command(
  
  const uic_mqtt_dotdot_on_off_command_off_with_effect_fields_t *fields
  
);


/**
 * @brief JSON parser for OnOff OffWithEffect command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_on_off_off_with_effect(
  nlohmann::json &jsn,
  OffWithEffectEffectIdentifier &effect_identifier,

  uint8_t &effect_variant

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a OnOff OnWithRecallGlobalScene command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_on_off_on_with_recall_global_scene_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a OnOff OnWithTimedOff command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_on_off_on_with_timed_off_command(
  
  const uic_mqtt_dotdot_on_off_command_on_with_timed_off_fields_t *fields
  
);


/**
 * @brief JSON parser for OnOff OnWithTimedOff command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_on_off_on_with_timed_off(
  nlohmann::json &jsn,
  uint8_t &on_off_control,

  uint16_t &on_time,

  uint16_t &off_wait_time

);



/**
 * @brief JSON parser for OnOff WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_on_off_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_on_off_state_t &new_state,
  uic_mqtt_dotdot_on_off_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level MoveToLevel command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_move_to_level_command(
  
  const uic_mqtt_dotdot_level_command_move_to_level_fields_t *fields
  
);


/**
 * @brief JSON parser for Level MoveToLevel command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_move_to_level(
  nlohmann::json &jsn,
  uint8_t &level,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level Move command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_move_command(
  
  const uic_mqtt_dotdot_level_command_move_fields_t *fields
  
);


/**
 * @brief JSON parser for Level Move command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_move(
  nlohmann::json &jsn,
  MoveStepMode &move_mode,

  uint8_t &rate,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level Step command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_step_command(
  
  const uic_mqtt_dotdot_level_command_step_fields_t *fields
  
);


/**
 * @brief JSON parser for Level Step command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_step(
  nlohmann::json &jsn,
  MoveStepMode &step_mode,

  uint8_t &step_size,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level Stop command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_stop_command(
  
  const uic_mqtt_dotdot_level_command_stop_fields_t *fields
  
);


/**
 * @brief JSON parser for Level Stop command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_stop(
  nlohmann::json &jsn,
  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level MoveToLevelWithOnOff command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_move_to_level_with_on_off_command(
  
  const uic_mqtt_dotdot_level_command_move_to_level_with_on_off_fields_t *fields
  
);


/**
 * @brief JSON parser for Level MoveToLevelWithOnOff command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_move_to_level_with_on_off(
  nlohmann::json &jsn,
  uint8_t &level,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level MoveWithOnOff command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_move_with_on_off_command(
  
  const uic_mqtt_dotdot_level_command_move_with_on_off_fields_t *fields
  
);


/**
 * @brief JSON parser for Level MoveWithOnOff command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_move_with_on_off(
  nlohmann::json &jsn,
  MoveStepMode &move_mode,

  uint8_t &rate,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level StepWithOnOff command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_step_with_on_off_command(
  
  const uic_mqtt_dotdot_level_command_step_with_on_off_fields_t *fields
  
);


/**
 * @brief JSON parser for Level StepWithOnOff command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_step_with_on_off(
  nlohmann::json &jsn,
  MoveStepMode &step_mode,

  uint8_t &step_size,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level StopWithOnOff command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_stop_with_on_off_command(
  
  const uic_mqtt_dotdot_level_command_stop_with_on_off_fields_t *fields
  
);


/**
 * @brief JSON parser for Level StopWithOnOff command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_stop_with_on_off(
  nlohmann::json &jsn,
  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Level MoveToClosestFrequency command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_level_move_to_closest_frequency_command(
  
  const uic_mqtt_dotdot_level_command_move_to_closest_frequency_fields_t *fields
  
);


/**
 * @brief JSON parser for Level MoveToClosestFrequency command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_move_to_closest_frequency(
  nlohmann::json &jsn,
  uint16_t &frequency

);



/**
 * @brief JSON parser for Level WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_level_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_level_state_t &new_state,
  uic_mqtt_dotdot_level_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Alarms ResetAlarm command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_alarms_reset_alarm_command(
  
  const uic_mqtt_dotdot_alarms_command_reset_alarm_fields_t *fields
  
);


/**
 * @brief JSON parser for Alarms ResetAlarm command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_alarms_reset_alarm(
  nlohmann::json &jsn,
  uint8_t &alarm_code,

  clusterId &cluster_identifier

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Alarms Alarm command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_alarms_alarm_command(
  
  const uic_mqtt_dotdot_alarms_command_alarm_fields_t *fields
  
);


/**
 * @brief JSON parser for Alarms Alarm command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_alarms_alarm(
  nlohmann::json &jsn,
  uint8_t &alarm_code,

  clusterId &cluster_identifier

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Alarms ResetAllAlarms command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_alarms_reset_all_alarms_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Alarms GetAlarmResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_alarms_get_alarm_response_command(
  
  const uic_mqtt_dotdot_alarms_command_get_alarm_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Alarms GetAlarmResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_alarms_get_alarm_response(
  nlohmann::json &jsn,
  zclStatus &status,

  uint8_t &alarm_code,

  clusterId &cluster_identifier,

  uint32_t &time_stamp

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Alarms GetAlarm command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_alarms_get_alarm_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Alarms ResetAlarmLog command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_alarms_reset_alarm_log_command(
  
);




/**
 * @brief JSON parser for Alarms WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_alarms_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_alarms_state_t &new_state,
  uic_mqtt_dotdot_alarms_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for Time WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_time_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_time_state_t &new_state,
  uic_mqtt_dotdot_time_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a PollControl CheckIn command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_poll_control_check_in_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a PollControl CheckInResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_poll_control_check_in_response_command(
  
  const uic_mqtt_dotdot_poll_control_command_check_in_response_fields_t *fields
  
);


/**
 * @brief JSON parser for PollControl CheckInResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_poll_control_check_in_response(
  nlohmann::json &jsn,
  bool &start_fast_polling,

  uint16_t &fast_poll_timeout

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a PollControl FastPollStop command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_poll_control_fast_poll_stop_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a PollControl SetLongPollInterval command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_poll_control_set_long_poll_interval_command(
  
  const uic_mqtt_dotdot_poll_control_command_set_long_poll_interval_fields_t *fields
  
);


/**
 * @brief JSON parser for PollControl SetLongPollInterval command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_poll_control_set_long_poll_interval(
  nlohmann::json &jsn,
  uint32_t &new_long_poll_interval

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a PollControl SetShortPollInterval command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_poll_control_set_short_poll_interval_command(
  
  const uic_mqtt_dotdot_poll_control_command_set_short_poll_interval_fields_t *fields
  
);


/**
 * @brief JSON parser for PollControl SetShortPollInterval command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_poll_control_set_short_poll_interval(
  nlohmann::json &jsn,
  uint16_t &new_short_poll_interval

);



/**
 * @brief JSON parser for PollControl WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_poll_control_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_poll_control_state_t &new_state,
  uic_mqtt_dotdot_poll_control_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for ShadeConfiguration WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_shade_configuration_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_shade_configuration_state_t &new_state,
  uic_mqtt_dotdot_shade_configuration_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock LockDoor command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_lock_door_command(
  
  const uic_mqtt_dotdot_door_lock_command_lock_door_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock LockDoor command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_lock_door(
  nlohmann::json &jsn,
  std::string &pin_orrfid_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock LockDoorResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_lock_door_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_lock_door_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock LockDoorResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_lock_door_response(
  nlohmann::json &jsn,
  zclStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock UnlockDoor command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_unlock_door_command(
  
  const uic_mqtt_dotdot_door_lock_command_unlock_door_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock UnlockDoor command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_unlock_door(
  nlohmann::json &jsn,
  std::string &pin_orrfid_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock UnlockDoorResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_unlock_door_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_unlock_door_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock UnlockDoorResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_unlock_door_response(
  nlohmann::json &jsn,
  zclStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock Toggle command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_toggle_command(
  
  const uic_mqtt_dotdot_door_lock_command_toggle_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock Toggle command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_toggle(
  nlohmann::json &jsn,
  std::string &pin_orrfid_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ToggleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_toggle_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_toggle_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ToggleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_toggle_response(
  nlohmann::json &jsn,
  zclStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock UnlockWithTimeout command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_unlock_with_timeout_command(
  
  const uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock UnlockWithTimeout command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_unlock_with_timeout(
  nlohmann::json &jsn,
  uint16_t &timeout_in_seconds,

  std::string &pin_orrfid_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock UnlockWithTimeoutResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_unlock_with_timeout_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_unlock_with_timeout_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock UnlockWithTimeoutResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_unlock_with_timeout_response(
  nlohmann::json &jsn,
  zclStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetLogRecord command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_log_record_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_log_record_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetLogRecord command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_log_record(
  nlohmann::json &jsn,
  uint16_t &log_index

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetLogRecordResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_log_record_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_log_record_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetLogRecordResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_log_record_response(
  nlohmann::json &jsn,
  uint16_t &log_entryid,

  uint32_t &timestamp,

  GetLogRecordResponseEventType &event_type,

  DrlkOperEventSource &source_operation_event,

  uint8_t &eventid_or_alarm_code,

  uint16_t &userid,

  std::string &pin

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetPINCode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_setpin_code_command(
  
  const uic_mqtt_dotdot_door_lock_command_setpin_code_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetPINCode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_setpin_code(
  nlohmann::json &jsn,
  DrlkPINUserID &userid,

  DrlkSettableUserStatus &user_status,

  DrlkUserType &user_type,

  std::string &pin

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetPINCodeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_setpin_code_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_setpin_code_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetPINCodeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_setpin_code_response(
  nlohmann::json &jsn,
  DrlkSetCodeStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetPINCode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_getpin_code_command(
  
  const uic_mqtt_dotdot_door_lock_command_getpin_code_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetPINCode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_getpin_code(
  nlohmann::json &jsn,
  DrlkPINUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetPINCodeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_getpin_code_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_pin_code_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetPINCodeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_getpin_code_response(
  nlohmann::json &jsn,
  uint16_t &userid,

  DrlkUserStatus &user_status,

  DrlkUserType &user_type,

  std::string &code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearPINCode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clearpin_code_command(
  
  const uic_mqtt_dotdot_door_lock_command_clearpin_code_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearPINCode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clearpin_code(
  nlohmann::json &jsn,
  DrlkPINUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearPINCodeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clearpin_code_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clearpin_code_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearPINCodeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clearpin_code_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearAllPINCodes command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_allpin_codes_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearAllPINCodesResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_allpin_codes_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_allpin_codes_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearAllPINCodesResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_allpin_codes_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetUserStatus command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_user_status_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_user_status_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetUserStatus command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_user_status(
  nlohmann::json &jsn,
  DrlkTotalUserID &userid,

  DrlkSettableUserStatus &user_status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetUserStatusResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_user_status_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_user_status_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetUserStatusResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_user_status_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetUserStatus command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_user_status_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_user_status_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetUserStatus command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_user_status(
  nlohmann::json &jsn,
  DrlkTotalUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetUserStatusResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_user_status_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_user_status_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetUserStatusResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_user_status_response(
  nlohmann::json &jsn,
  uint16_t &userid,

  DrlkUserStatus &user_status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetWeekdaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_weekday_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetWeekdaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_weekday_schedule(
  nlohmann::json &jsn,
  DrlkWeekDayScheduleID &scheduleid,

  DrlkTotalUserID &userid,

  uint8_t &days_mask,

  uint8_t &start_hour,

  uint8_t &start_minute,

  uint8_t &end_hour,

  uint8_t &end_minute

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetWeekdayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_weekday_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_weekday_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetWeekdayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_weekday_schedule_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetWeekdaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_weekday_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetWeekdaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule(
  nlohmann::json &jsn,
  DrlkWeekDayScheduleID &scheduleid,

  DrlkTotalUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetWeekdayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_weekday_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_weekday_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetWeekdayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_weekday_schedule_response(
  nlohmann::json &jsn,
  uint8_t &scheduleid,

  uint16_t &userid,

  zclStatus &status,

  uint8_t &days_mask,

  uint8_t &start_hour,

  uint8_t &start_minute,

  uint8_t &end_hour,

  uint8_t &end_minute

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearWeekdaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_weekday_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearWeekdaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_weekday_schedule(
  nlohmann::json &jsn,
  DrlkWeekDayScheduleID &scheduleid,

  DrlkTotalUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearWeekdayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_weekday_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_weekday_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearWeekdayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_weekday_schedule_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetYearDaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_year_day_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetYearDaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_year_day_schedule(
  nlohmann::json &jsn,
  DrlkYearDayScheduleID &scheduleid,

  DrlkTotalUserID &userid,

  uint32_t &local_start_time,

  uint32_t &local_end_time

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetYearDayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_year_day_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_year_day_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetYearDayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_year_day_schedule_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetYearDaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_year_day_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetYearDaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule(
  nlohmann::json &jsn,
  DrlkYearDayScheduleID &scheduleid,

  DrlkTotalUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetYearDayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_year_day_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_year_day_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetYearDayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_year_day_schedule_response(
  nlohmann::json &jsn,
  uint8_t &scheduleid,

  uint16_t &userid,

  zclStatus &status,

  uint32_t &local_start_time,

  uint32_t &local_end_time

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearYearDaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_year_day_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearYearDaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_year_day_schedule(
  nlohmann::json &jsn,
  DrlkYearDayScheduleID &scheduleid,

  DrlkTotalUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearYearDayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_year_day_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_year_day_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearYearDayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_year_day_schedule_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetHolidaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_holiday_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetHolidaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_holiday_schedule(
  nlohmann::json &jsn,
  DrlkHolidayScheduleID &holiday_scheduleid,

  uint32_t &local_start_time,

  uint32_t &local_end_time,

  DrlkOperMode &operating_mode_during_holiday

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetHolidayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_holiday_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_holiday_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetHolidayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_holiday_schedule_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetHolidaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_holiday_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetHolidaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule(
  nlohmann::json &jsn,
  DrlkHolidayScheduleID &holiday_scheduleid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetHolidayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_holiday_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_holiday_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetHolidayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_holiday_schedule_response(
  nlohmann::json &jsn,
  uint8_t &holiday_scheduleid,

  zclStatus &status,

  uint32_t &local_start_time,

  uint32_t &local_end_time,

  DrlkOperMode &operating_mode_during_holiday

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearHolidaySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_holiday_schedule_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearHolidaySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_holiday_schedule(
  nlohmann::json &jsn,
  DrlkHolidayScheduleID &holiday_scheduleid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearHolidayScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_holiday_schedule_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_holiday_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearHolidayScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_holiday_schedule_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetUserType command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_user_type_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_user_type_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetUserType command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_user_type(
  nlohmann::json &jsn,
  DrlkTotalUserID &userid,

  DrlkUserType &user_type

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetUserTypeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_set_user_type_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_set_user_type_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetUserTypeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_set_user_type_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetUserType command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_user_type_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_user_type_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetUserType command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_user_type(
  nlohmann::json &jsn,
  DrlkTotalUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetUserTypeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_user_type_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_get_user_type_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetUserTypeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_get_user_type_response(
  nlohmann::json &jsn,
  uint16_t &userid,

  DrlkUserType &user_type

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetRFIDCode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_setrfid_code_command(
  
  const uic_mqtt_dotdot_door_lock_command_setrfid_code_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetRFIDCode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_setrfid_code(
  nlohmann::json &jsn,
  DrlkRFIDUserID &userid,

  DrlkSettableUserStatus &user_status,

  DrlkUserType &user_type,

  std::string &rfid_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock SetRFIDCodeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_setrfid_code_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_setrfid_code_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock SetRFIDCodeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_setrfid_code_response(
  nlohmann::json &jsn,
  DrlkSetCodeStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetRFIDCode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_getrfid_code_command(
  
  const uic_mqtt_dotdot_door_lock_command_getrfid_code_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetRFIDCode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_getrfid_code(
  nlohmann::json &jsn,
  DrlkRFIDUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetRFIDCodeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_getrfid_code_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_getrfid_code_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock GetRFIDCodeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_getrfid_code_response(
  nlohmann::json &jsn,
  uint16_t &userid,

  DrlkUserStatus &user_status,

  DrlkUserType &user_type,

  std::string &rfid_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearRFIDCode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clearrfid_code_command(
  
  const uic_mqtt_dotdot_door_lock_command_clearrfid_code_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearRFIDCode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clearrfid_code(
  nlohmann::json &jsn,
  DrlkRFIDUserID &userid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearRFIDCodeResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clearrfid_code_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clearrfid_code_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearRFIDCodeResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clearrfid_code_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearAllRFIDCodes command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_allrfid_codes_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ClearAllRFIDCodesResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_clear_allrfid_codes_response_command(
  
  const uic_mqtt_dotdot_door_lock_command_clear_allrfid_codes_response_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ClearAllRFIDCodesResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_clear_allrfid_codes_response(
  nlohmann::json &jsn,
  DrlkPassFailStatus &status

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock OperatingEventNotification command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_operating_event_notification_command(
  
  const uic_mqtt_dotdot_door_lock_command_operating_event_notification_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock OperatingEventNotification command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_operating_event_notification(
  nlohmann::json &jsn,
  DrlkOperEventSource &operation_event_source,

  OperatingEventNotificationOperationEventCode &operation_event_code,

  uint16_t &userid,

  std::string &pin,

  uint32_t &local_time,

  std::string &data

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock ProgrammingEventNotification command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_programming_event_notification_command(
  
  const uic_mqtt_dotdot_door_lock_command_programming_event_notification_fields_t *fields
  
);


/**
 * @brief JSON parser for DoorLock ProgrammingEventNotification command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_programming_event_notification(
  nlohmann::json &jsn,
  ProgrammingEventNotificationProgramEventSource &program_event_source,

  ProgrammingEventNotificationProgramEventCode &program_event_code,

  uint16_t &userid,

  std::string &pin,

  DrlkUserType &user_type,

  DrlkUserStatus &user_status,

  uint32_t &local_time,

  std::string &data

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a DoorLock GetAllPINCodes command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_door_lock_get_all_pin_codes_command(
  
);




/**
 * @brief JSON parser for DoorLock WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_door_lock_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_door_lock_state_t &new_state,
  uic_mqtt_dotdot_door_lock_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering UpOrOpen command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_up_or_open_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering DownOrClose command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_down_or_close_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering Stop command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_stop_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering GoToLiftValue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_go_to_lift_value_command(
  
  const uic_mqtt_dotdot_window_covering_command_go_to_lift_value_fields_t *fields
  
);


/**
 * @brief JSON parser for WindowCovering GoToLiftValue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_window_covering_go_to_lift_value(
  nlohmann::json &jsn,
  uint16_t &lift_value

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering GoToLiftPercentage command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_go_to_lift_percentage_command(
  
  const uic_mqtt_dotdot_window_covering_command_go_to_lift_percentage_fields_t *fields
  
);


/**
 * @brief JSON parser for WindowCovering GoToLiftPercentage command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_window_covering_go_to_lift_percentage(
  nlohmann::json &jsn,
  uint8_t &percentage_lift_value

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering GoToTiltValue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_go_to_tilt_value_command(
  
  const uic_mqtt_dotdot_window_covering_command_go_to_tilt_value_fields_t *fields
  
);


/**
 * @brief JSON parser for WindowCovering GoToTiltValue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_value(
  nlohmann::json &jsn,
  uint16_t &tilt_value

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a WindowCovering GoToTiltPercentage command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_window_covering_go_to_tilt_percentage_command(
  
  const uic_mqtt_dotdot_window_covering_command_go_to_tilt_percentage_fields_t *fields
  
);


/**
 * @brief JSON parser for WindowCovering GoToTiltPercentage command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_window_covering_go_to_tilt_percentage(
  nlohmann::json &jsn,
  uint8_t &percentage_tilt_value

);



/**
 * @brief JSON parser for WindowCovering WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_window_covering_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_window_covering_state_t &new_state,
  uic_mqtt_dotdot_window_covering_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a BarrierControl GoToPercent command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_barrier_control_go_to_percent_command(
  
  const uic_mqtt_dotdot_barrier_control_command_go_to_percent_fields_t *fields
  
);


/**
 * @brief JSON parser for BarrierControl GoToPercent command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_barrier_control_go_to_percent(
  nlohmann::json &jsn,
  uint8_t &percent_open

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a BarrierControl Stop command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_barrier_control_stop_command(
  
);




/**
 * @brief JSON parser for BarrierControl WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_barrier_control_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_barrier_control_state_t &new_state,
  uic_mqtt_dotdot_barrier_control_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for PumpConfigurationAndControl WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_pump_configuration_and_control_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_pump_configuration_and_control_state_t &new_state,
  uic_mqtt_dotdot_pump_configuration_and_control_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat SetpointRaiseOrLower command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_setpoint_raise_or_lower_command(
  
  const uic_mqtt_dotdot_thermostat_command_setpoint_raise_or_lower_fields_t *fields
  
);


/**
 * @brief JSON parser for Thermostat SetpointRaiseOrLower command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_setpoint_raise_or_lower(
  nlohmann::json &jsn,
  SetpointRaiseOrLowerMode &mode,

  int8_t &amount

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat GetWeeklyScheduleResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_get_weekly_schedule_response_command(
  
  const uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Thermostat GetWeeklyScheduleResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_get_weekly_schedule_response(
  nlohmann::json &jsn,
  uint8_t &number_of_transitions,

  uint8_t &day_of_week,

  uint8_t &mode,

  std::vector<TransitionType> &transitions

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat SetWeeklySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_set_weekly_schedule_command(
  
  const uic_mqtt_dotdot_thermostat_command_set_weekly_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for Thermostat SetWeeklySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_set_weekly_schedule(
  nlohmann::json &jsn,
  uint8_t &number_of_transitions,

  uint8_t &day_of_week,

  uint8_t &mode,

  std::vector<TransitionType> &transitions

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat GetRelayStatusLogResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_get_relay_status_log_response_command(
  
  const uic_mqtt_dotdot_thermostat_command_get_relay_status_log_response_fields_t *fields
  
);


/**
 * @brief JSON parser for Thermostat GetRelayStatusLogResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_get_relay_status_log_response(
  nlohmann::json &jsn,
  uint16_t &time_of_day,

  uint8_t &relay_status,

  int16_t &local_temperature,

  uint8_t &humidity_percentage,

  int16_t &set_point,

  uint16_t &unread_entries

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat GetWeeklySchedule command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_get_weekly_schedule_command(
  
  const uic_mqtt_dotdot_thermostat_command_get_weekly_schedule_fields_t *fields
  
);


/**
 * @brief JSON parser for Thermostat GetWeeklySchedule command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_get_weekly_schedule(
  nlohmann::json &jsn,
  uint8_t &days_to_return,

  uint8_t &mode_to_return

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat ClearWeeklySchedule command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_clear_weekly_schedule_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Thermostat GetRelayStatusLog command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_thermostat_get_relay_status_log_command(
  
);




/**
 * @brief JSON parser for Thermostat WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_thermostat_state_t &new_state,
  uic_mqtt_dotdot_thermostat_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for FanControl WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_fan_control_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_fan_control_state_t &new_state,
  uic_mqtt_dotdot_fan_control_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for DehumidificationControl WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_dehumidification_control_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_dehumidification_control_state_t &new_state,
  uic_mqtt_dotdot_dehumidification_control_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for ThermostatUserInterfaceConfiguration WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_thermostat_user_interface_configuration_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_thermostat_user_interface_configuration_state_t &new_state,
  uic_mqtt_dotdot_thermostat_user_interface_configuration_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveToHue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_to_hue_command(
  
  const uic_mqtt_dotdot_color_control_command_move_to_hue_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveToHue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_to_hue(
  nlohmann::json &jsn,
  uint8_t &hue,

  CCDirection &direction,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveHue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_hue_command(
  
  const uic_mqtt_dotdot_color_control_command_move_hue_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveHue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_hue(
  nlohmann::json &jsn,
  CCMoveMode &move_mode,

  uint8_t &rate,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl StepHue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_step_hue_command(
  
  const uic_mqtt_dotdot_color_control_command_step_hue_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl StepHue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_step_hue(
  nlohmann::json &jsn,
  CCStepMode &step_mode,

  uint8_t &step_size,

  uint8_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveToSaturation command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_to_saturation_command(
  
  const uic_mqtt_dotdot_color_control_command_move_to_saturation_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveToSaturation command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_to_saturation(
  nlohmann::json &jsn,
  uint8_t &saturation,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveSaturation command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_saturation_command(
  
  const uic_mqtt_dotdot_color_control_command_move_saturation_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveSaturation command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_saturation(
  nlohmann::json &jsn,
  CCMoveMode &move_mode,

  uint8_t &rate,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl StepSaturation command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_step_saturation_command(
  
  const uic_mqtt_dotdot_color_control_command_step_saturation_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl StepSaturation command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_step_saturation(
  nlohmann::json &jsn,
  CCStepMode &step_mode,

  uint8_t &step_size,

  uint8_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveToHueAndSaturation command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_to_hue_and_saturation_command(
  
  const uic_mqtt_dotdot_color_control_command_move_to_hue_and_saturation_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveToHueAndSaturation command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_to_hue_and_saturation(
  nlohmann::json &jsn,
  uint8_t &hue,

  uint8_t &saturation,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveToColor command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_to_color_command(
  
  const uic_mqtt_dotdot_color_control_command_move_to_color_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveToColor command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_to_color(
  nlohmann::json &jsn,
  uint16_t &colorx,

  uint16_t &colory,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveColor command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_color_command(
  
  const uic_mqtt_dotdot_color_control_command_move_color_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveColor command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_color(
  nlohmann::json &jsn,
  int16_t &ratex,

  int16_t &ratey,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl StepColor command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_step_color_command(
  
  const uic_mqtt_dotdot_color_control_command_step_color_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl StepColor command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_step_color(
  nlohmann::json &jsn,
  int16_t &stepx,

  int16_t &stepy,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveToColorTemperature command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_to_color_temperature_command(
  
  const uic_mqtt_dotdot_color_control_command_move_to_color_temperature_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveToColorTemperature command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_to_color_temperature(
  nlohmann::json &jsn,
  uint16_t &color_temperature_mireds,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl EnhancedMoveToHue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_enhanced_move_to_hue_command(
  
  const uic_mqtt_dotdot_color_control_command_enhanced_move_to_hue_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl EnhancedMoveToHue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue(
  nlohmann::json &jsn,
  uint16_t &enhanced_hue,

  CCDirection &direction,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl EnhancedMoveHue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_enhanced_move_hue_command(
  
  const uic_mqtt_dotdot_color_control_command_enhanced_move_hue_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl EnhancedMoveHue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_enhanced_move_hue(
  nlohmann::json &jsn,
  CCMoveMode &move_mode,

  uint16_t &rate,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl EnhancedStepHue command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_enhanced_step_hue_command(
  
  const uic_mqtt_dotdot_color_control_command_enhanced_step_hue_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl EnhancedStepHue command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_enhanced_step_hue(
  nlohmann::json &jsn,
  CCStepMode &step_mode,

  uint16_t &step_size,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl EnhancedMoveToHueAndSaturation command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_enhanced_move_to_hue_and_saturation_command(
  
  const uic_mqtt_dotdot_color_control_command_enhanced_move_to_hue_and_saturation_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl EnhancedMoveToHueAndSaturation command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_enhanced_move_to_hue_and_saturation(
  nlohmann::json &jsn,
  uint16_t &enhanced_hue,

  uint8_t &saturation,

  uint16_t &transition_time,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl ColorLoopSet command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_color_loop_set_command(
  
  const uic_mqtt_dotdot_color_control_command_color_loop_set_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl ColorLoopSet command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_color_loop_set(
  nlohmann::json &jsn,
  uint8_t &update_flags,

  ColorLoopSetAction &action,

  CCColorLoopDirection &direction,

  uint16_t &time,

  uint16_t &start_hue,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl StopMoveStep command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_stop_move_step_command(
  
  const uic_mqtt_dotdot_color_control_command_stop_move_step_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl StopMoveStep command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_stop_move_step(
  nlohmann::json &jsn,
  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl MoveColorTemperature command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_move_color_temperature_command(
  
  const uic_mqtt_dotdot_color_control_command_move_color_temperature_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl MoveColorTemperature command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_move_color_temperature(
  nlohmann::json &jsn,
  CCMoveMode &move_mode,

  uint16_t &rate,

  CCMinMiredsField &color_temperature_minimum_mireds,

  CCMaxMiredsField &color_temperature_maximum_mireds,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ColorControl StepColorTemperature command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_color_control_step_color_temperature_command(
  
  const uic_mqtt_dotdot_color_control_command_step_color_temperature_fields_t *fields
  
);


/**
 * @brief JSON parser for ColorControl StepColorTemperature command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_step_color_temperature(
  nlohmann::json &jsn,
  CCStepMode &step_mode,

  uint16_t &step_size,

  uint16_t &transition_time,

  CCMinMiredsField &color_temperature_minimum_mireds,

  CCMaxMiredsField &color_temperature_maximum_mireds,

  uint8_t &options_mask,

  uint8_t &options_override

);



/**
 * @brief JSON parser for ColorControl WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_color_control_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_color_control_state_t &new_state,
  uic_mqtt_dotdot_color_control_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for BallastConfiguration WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ballast_configuration_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_ballast_configuration_state_t &new_state,
  uic_mqtt_dotdot_ballast_configuration_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for IlluminanceMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_illuminance_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_illuminance_measurement_state_t &new_state,
  uic_mqtt_dotdot_illuminance_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for IlluminanceLevelSensing WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_illuminance_level_sensing_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_illuminance_level_sensing_state_t &new_state,
  uic_mqtt_dotdot_illuminance_level_sensing_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for TemperatureMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_temperature_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_temperature_measurement_state_t &new_state,
  uic_mqtt_dotdot_temperature_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for PressureMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_pressure_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_pressure_measurement_state_t &new_state,
  uic_mqtt_dotdot_pressure_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for FlowMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_flow_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_flow_measurement_state_t &new_state,
  uic_mqtt_dotdot_flow_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for RelativityHumidity WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_relativity_humidity_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_relativity_humidity_state_t &new_state,
  uic_mqtt_dotdot_relativity_humidity_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for OccupancySensing WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_occupancy_sensing_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_occupancy_sensing_state_t &new_state,
  uic_mqtt_dotdot_occupancy_sensing_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for SoilMoisture WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_soil_moisture_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_soil_moisture_state_t &new_state,
  uic_mqtt_dotdot_soil_moisture_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for PhMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ph_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_ph_measurement_state_t &new_state,
  uic_mqtt_dotdot_ph_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for ElectricalConductivityMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_electrical_conductivity_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_electrical_conductivity_measurement_state_t &new_state,
  uic_mqtt_dotdot_electrical_conductivity_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for WindSpeedMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_wind_speed_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_wind_speed_measurement_state_t &new_state,
  uic_mqtt_dotdot_wind_speed_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for CarbonMonoxide WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_carbon_monoxide_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_carbon_monoxide_state_t &new_state,
  uic_mqtt_dotdot_carbon_monoxide_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for CarbonDioxide WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_carbon_dioxide_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_carbon_dioxide_state_t &new_state,
  uic_mqtt_dotdot_carbon_dioxide_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for PM25 WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_pm25_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_pm25_state_t &new_state,
  uic_mqtt_dotdot_pm25_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASZone ZoneEnrollResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_ias_zone_zone_enroll_response_command(
  
  const uic_mqtt_dotdot_ias_zone_command_zone_enroll_response_fields_t *fields
  
);


/**
 * @brief JSON parser for IASZone ZoneEnrollResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_response(
  nlohmann::json &jsn,
  ZoneEnrollResponseEnrollResponseCode &enroll_response_code,

  uint8_t &zoneid

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASZone ZoneStatusChangeNotification command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_ias_zone_zone_status_change_notification_command(
  
  const uic_mqtt_dotdot_ias_zone_command_zone_status_change_notification_fields_t *fields
  
);


/**
 * @brief JSON parser for IASZone ZoneStatusChangeNotification command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ias_zone_zone_status_change_notification(
  nlohmann::json &jsn,
  uint16_t &zone_status,

  uint8_t &extended_status,

  uint8_t &zoneid,

  uint16_t &delay

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASZone InitiateNormalOperationMode command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_ias_zone_initiate_normal_operation_mode_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASZone ZoneEnrollRequest command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_ias_zone_zone_enroll_request_command(
  
  const uic_mqtt_dotdot_ias_zone_command_zone_enroll_request_fields_t *fields
  
);


/**
 * @brief JSON parser for IASZone ZoneEnrollRequest command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ias_zone_zone_enroll_request(
  nlohmann::json &jsn,
  IasZoneType &zone_type,

  uint16_t &manufacturer_code

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASZone InitiateTestMode command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_ias_zone_initiate_test_mode_command(
  
  const uic_mqtt_dotdot_ias_zone_command_initiate_test_mode_fields_t *fields
  
);


/**
 * @brief JSON parser for IASZone InitiateTestMode command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ias_zone_initiate_test_mode(
  nlohmann::json &jsn,
  uint8_t &test_mode_duration,

  uint8_t &current_zone_sensitivity_level

);



/**
 * @brief JSON parser for IASZone WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_ias_zone_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_ias_zone_state_t &new_state,
  uic_mqtt_dotdot_ias_zone_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASWD StartWarning command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_iaswd_start_warning_command(
  
  const uic_mqtt_dotdot_iaswd_command_start_warning_fields_t *fields
  
);


/**
 * @brief JSON parser for IASWD StartWarning command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_iaswd_start_warning(
  nlohmann::json &jsn,
  uint8_t &siren_configuration,

  uint16_t &warning_duration,

  uint8_t &strobe_duty_cycle,

  IaswdLevel &strobe_level

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a IASWD Squawk command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_iaswd_squawk_command(
  
  const uic_mqtt_dotdot_iaswd_command_squawk_fields_t *fields
  
);


/**
 * @brief JSON parser for IASWD Squawk command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_iaswd_squawk(
  nlohmann::json &jsn,
  uint8_t &squawk_configuration

);



/**
 * @brief JSON parser for IASWD WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_iaswd_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_iaswd_state_t &new_state,
  uic_mqtt_dotdot_iaswd_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for Metering WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_metering_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_metering_state_t &new_state,
  uic_mqtt_dotdot_metering_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ElectricalMeasurement GetProfileInfoResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_electrical_measurement_get_profile_info_response_command(
  
  const uic_mqtt_dotdot_electrical_measurement_command_get_profile_info_response_fields_t *fields
  
);


/**
 * @brief JSON parser for ElectricalMeasurement GetProfileInfoResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_electrical_measurement_get_profile_info_response(
  nlohmann::json &jsn,
  uint8_t &profile_count,

  ProfileIntervalPeriod &profile_interval_period,

  uint8_t &max_number_of_intervals,

  std::vector<uint16_t> &list_of_attributes

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ElectricalMeasurement GetProfileInfo command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_electrical_measurement_get_profile_info_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ElectricalMeasurement GetMeasurementProfileResponse command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_electrical_measurement_get_measurement_profile_response_command(
  
  const uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_response_fields_t *fields
  
);


/**
 * @brief JSON parser for ElectricalMeasurement GetMeasurementProfileResponse command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile_response(
  nlohmann::json &jsn,
  UTC &start_time,

  GetMeasurementProfileResponseStatus &status,

  ProfileIntervalPeriod &profile_interval_period,

  uint8_t &number_of_intervals_delivered,

  uint16_t &attribute_id,

  std::vector<uint8_t> &intervals

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ElectricalMeasurement GetMeasurementProfile command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_electrical_measurement_get_measurement_profile_command(
  
  const uic_mqtt_dotdot_electrical_measurement_command_get_measurement_profile_fields_t *fields
  
);


/**
 * @brief JSON parser for ElectricalMeasurement GetMeasurementProfile command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_electrical_measurement_get_measurement_profile(
  nlohmann::json &jsn,
  uint16_t &attributeid,

  UTC &start_time,

  uint8_t &number_of_intervals

);



/**
 * @brief JSON parser for ElectricalMeasurement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_electrical_measurement_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_electrical_measurement_state_t &new_state,
  uic_mqtt_dotdot_electrical_measurement_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for Diagnostics WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_diagnostics_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_diagnostics_state_t &new_state,
  uic_mqtt_dotdot_diagnostics_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ProtocolController/RFTelemetry TxReport command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_protocol_controller_rf_telemetry_tx_report_command(
  
  const uic_mqtt_dotdot_protocol_controller_rf_telemetry_command_tx_report_fields_t *fields
  
);


/**
 * @brief JSON parser for ProtocolController-RFTelemetry TxReport command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_tx_report(
  nlohmann::json &jsn,
  std::string &sourceunid,

  std::string &destinationunid,

  bool &transmission_successful,

  uint16_t &transmission_time_ms,

  int8_t &tx_powerd_bm,

  uint8_t &tx_channel,

  uint8_t &routing_attempts,

  bool &route_changed,

  TxReportTransmissionSpeed &transmission_speed,

  int8_t &measured_noise_floord_bm,

  std::vector<std::string> &last_route_repeaters,

  std::vector<int8_t> &incomingrssi_repeaters,

  int8_t &ackrssi,

  uint8_t &ack_channel,

  std::string &last_route_failed_link_functionalunid,

  std::string &last_route_failed_link_non_functionalunid,

  int8_t &destination_ack_tx_powerd_bm,

  int8_t &destination_ack_measuredrssi,

  int8_t &destination_ack_measured_noise_floor

);



/**
 * @brief JSON parser for ProtocolController-RFTelemetry WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_protocol_controller_rf_telemetry_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_protocol_controller_rf_telemetry_state_t &new_state,
  uic_mqtt_dotdot_protocol_controller_rf_telemetry_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a State Remove command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_state_remove_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a State RemoveOffline command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_state_remove_offline_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a State DiscoverNeighbors command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_state_discover_neighbors_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a State Interview command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_state_interview_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a State DiscoverSecurity command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_state_discover_security_command(
  
);




/**
 * @brief JSON parser for State WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_state_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_state_state_t &new_state,
  uic_mqtt_dotdot_state_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Binding Bind command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_binding_bind_command(
  
  const uic_mqtt_dotdot_binding_command_bind_fields_t *fields
  
);


/**
 * @brief JSON parser for Binding Bind command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_binding_bind(
  nlohmann::json &jsn,
  std::string &cluster_name,

  std::string &destination_unid,

  uint8_t &destination_ep

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Binding Unbind command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_binding_unbind_command(
  
  const uic_mqtt_dotdot_binding_command_unbind_fields_t *fields
  
);


/**
 * @brief JSON parser for Binding Unbind command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_binding_unbind(
  nlohmann::json &jsn,
  std::string &cluster_name,

  std::string &destination_unid,

  uint8_t &destination_ep

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Binding BindToProtocolController command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_binding_bind_to_protocol_controller_command(
  
  const uic_mqtt_dotdot_binding_command_bind_to_protocol_controller_fields_t *fields
  
);


/**
 * @brief JSON parser for Binding BindToProtocolController command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_binding_bind_to_protocol_controller(
  nlohmann::json &jsn,
  std::string &cluster_name

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a Binding UnbindFromProtocolController command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_binding_unbind_from_protocol_controller_command(
  
  const uic_mqtt_dotdot_binding_command_unbind_from_protocol_controller_fields_t *fields
  
);


/**
 * @brief JSON parser for Binding UnbindFromProtocolController command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_binding_unbind_from_protocol_controller(
  nlohmann::json &jsn,
  std::string &cluster_name

);



/**
 * @brief JSON parser for Binding WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_binding_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_binding_state_t &new_state,
  uic_mqtt_dotdot_binding_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for SystemMetrics WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_system_metrics_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_system_metrics_state_t &new_state,
  uic_mqtt_dotdot_system_metrics_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ApplicationMonitoring LogEntry command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_application_monitoring_log_entry_command(
  
  const uic_mqtt_dotdot_application_monitoring_command_log_entry_fields_t *fields
  
);


/**
 * @brief JSON parser for ApplicationMonitoring LogEntry command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_application_monitoring_log_entry(
  nlohmann::json &jsn,
  std::string &timestamp,

  LoggingLevelEnum &log_level,

  std::string &log_tag,

  std::string &log_message

);



/**
 * @brief JSON parser for ApplicationMonitoring WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_application_monitoring_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_application_monitoring_state_t &new_state,
  uic_mqtt_dotdot_application_monitoring_updated_state_t &new_updated_state
);


/**
 * @brief JSON parser for NameAndLocation WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_name_and_location_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_name_and_location_state_t &new_state,
  uic_mqtt_dotdot_name_and_location_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ConfigurationParameters DiscoverParameter command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_configuration_parameters_discover_parameter_command(
  
  const uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_fields_t *fields
  
);


/**
 * @brief JSON parser for ConfigurationParameters DiscoverParameter command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter(
  nlohmann::json &jsn,
  uint16_t &parameter_id

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ConfigurationParameters DefaultResetAllParameters command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_configuration_parameters_default_reset_all_parameters_command(
  
);




/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ConfigurationParameters SetParameter command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_configuration_parameters_set_parameter_command(
  
  const uic_mqtt_dotdot_configuration_parameters_command_set_parameter_fields_t *fields
  
);


/**
 * @brief JSON parser for ConfigurationParameters SetParameter command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_configuration_parameters_set_parameter(
  nlohmann::json &jsn,
  uint16_t &parameter_id,

  int64_t &value

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ConfigurationParameters DiscoverParameterRange command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_configuration_parameters_discover_parameter_range_command(
  
  const uic_mqtt_dotdot_configuration_parameters_command_discover_parameter_range_fields_t *fields
  
);


/**
 * @brief JSON parser for ConfigurationParameters DiscoverParameterRange command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_configuration_parameters_discover_parameter_range(
  nlohmann::json &jsn,
  uint16_t &first_parameter_id,

  uint16_t &last_parameter_id

);



/**
 * @brief JSON parser for ConfigurationParameters WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_configuration_parameters_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_configuration_parameters_state_t &new_state,
  uic_mqtt_dotdot_configuration_parameters_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a AoXLocator IQReport command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_aox_locator_iq_report_command(
  
  const uic_mqtt_dotdot_aox_locator_command_iq_report_fields_t *fields
  
);


/**
 * @brief JSON parser for AoXLocator IQReport command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_aox_locator_iq_report(
  nlohmann::json &jsn,
  std::string &tag_unid,

  uint8_t &channel,

  int8_t &rssi,

  std::vector<int8_t> &samples,

  int32_t &sequence

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a AoXLocator AngleReport command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_aox_locator_angle_report_command(
  
  const uic_mqtt_dotdot_aox_locator_command_angle_report_fields_t *fields
  
);


/**
 * @brief JSON parser for AoXLocator AngleReport command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_aox_locator_angle_report(
  nlohmann::json &jsn,
  std::string &tag_unid,

  SphericalCoordinates &direction,

  SphericalCoordinates &deviation,

  int32_t &sequence

);



/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a AoXLocator AngleCorrection command
 * 
 * @param fields       Struct pointer with the list of fields for the command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_aox_locator_angle_correction_command(
  
  const uic_mqtt_dotdot_aox_locator_command_angle_correction_fields_t *fields
  
);


/**
 * @brief JSON parser for AoXLocator AngleCorrection command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_aox_locator_angle_correction(
  nlohmann::json &jsn,
  std::string &tag_unid,

  SphericalCoordinates &direction,

  SphericalCoordinates &deviation,

  int32_t &sequence

);



/**
 * @brief JSON parser for AoXLocator WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_aox_locator_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_aox_locator_state_t &new_state,
  uic_mqtt_dotdot_aox_locator_updated_state_t &new_updated_state,
  std::vector<MinMaxPair> &azimuth_mask,
  std::vector<MinMaxPair> &elevation_mask,
  std::vector<const char*> &allow_list,
  std::vector<int8_t> &antenna_array
);


/**
 * @brief JSON parser for AoXPositionEstimation WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_aox_position_estimation_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_aox_position_estimation_state_t &new_state,
  uic_mqtt_dotdot_aox_position_estimation_updated_state_t &new_updated_state
);


/**
 * @brief Private helper function that will create a JSON string based on the
 * fields of a ProtocolController/NetworkManagement Write command
 * 
 * @returns std::string that contains JSON payload
 */
std::string get_json_payload_for_protocol_controller_network_management_write_command(
  
);




/**
 * @brief JSON parser for ProtocolController-NetworkManagement WriteAttributes command arguments.
 *
 * Parse incoming JSON object to populate command arguments passed in by reference.
 */
void uic_mqtt_dotdot_parse_protocol_controller_network_management_write_attributes(
  nlohmann::json &jsn,
  uic_mqtt_dotdot_protocol_controller_network_management_state_t &new_state,
  uic_mqtt_dotdot_protocol_controller_network_management_updated_state_t &new_updated_state
);



#endif  //DOTDOT_MQTT_COMMAND_HELPERS_HPP
/** @} end dotdot_mqtt_command_helpers */
