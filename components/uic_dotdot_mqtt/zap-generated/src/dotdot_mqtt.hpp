/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/




// clang-format off
// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
// clang-format on

/**
 * @defgroup dotdot_mqtt_hpp Internal C++ ZAP definitions
 * @brief C++ Helpers and definitions for DotDot MQTT
 *
 * @{
 */

#ifndef DOTDOT_MQTT_HPP
#define DOTDOT_MQTT_HPP

#include "dotdot_mqtt.h"
#include "dotdot_bitmap.hpp"
#include "dotdot_mqtt_helpers.hpp"

#include <set>
#include <map>
#include <string>

// clang-format off

/**
 * @brief Initialize Basic dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_basic_init();

/**
 * @brief Initialize PowerConfiguration dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_power_configuration_init();

/**
 * @brief Initialize DeviceTemperatureConfiguration dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_device_temperature_configuration_init();

/**
 * @brief Initialize Identify dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_identify_init();

/**
 * @brief Initialize Groups dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_groups_init();

/**
 * @brief Initialize Scenes dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_scenes_init();

/**
 * @brief Initialize OnOff dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_on_off_init();

/**
 * @brief Initialize Level dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_level_init();

/**
 * @brief Initialize Alarms dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_alarms_init();

/**
 * @brief Initialize Time dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_time_init();

/**
 * @brief Initialize PollControl dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_poll_control_init();

/**
 * @brief Initialize ShadeConfiguration dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_shade_configuration_init();

/**
 * @brief Initialize DoorLock dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_door_lock_init();

/**
 * @brief Initialize WindowCovering dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_window_covering_init();

/**
 * @brief Initialize BarrierControl dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_barrier_control_init();

/**
 * @brief Initialize PumpConfigurationAndControl dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_pump_configuration_and_control_init();

/**
 * @brief Initialize Thermostat dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_thermostat_init();

/**
 * @brief Initialize FanControl dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_fan_control_init();

/**
 * @brief Initialize DehumidificationControl dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_dehumidification_control_init();

/**
 * @brief Initialize ThermostatUserInterfaceConfiguration dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_thermostat_user_interface_configuration_init();

/**
 * @brief Initialize ColorControl dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_color_control_init();

/**
 * @brief Initialize BallastConfiguration dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_ballast_configuration_init();

/**
 * @brief Initialize IlluminanceMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_illuminance_measurement_init();

/**
 * @brief Initialize IlluminanceLevelSensing dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_illuminance_level_sensing_init();

/**
 * @brief Initialize TemperatureMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_temperature_measurement_init();

/**
 * @brief Initialize PressureMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_pressure_measurement_init();

/**
 * @brief Initialize FlowMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_flow_measurement_init();

/**
 * @brief Initialize RelativityHumidity dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_relativity_humidity_init();

/**
 * @brief Initialize OccupancySensing dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_occupancy_sensing_init();

/**
 * @brief Initialize SoilMoisture dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_soil_moisture_init();

/**
 * @brief Initialize PhMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_ph_measurement_init();

/**
 * @brief Initialize ElectricalConductivityMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_electrical_conductivity_measurement_init();

/**
 * @brief Initialize WindSpeedMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_wind_speed_measurement_init();

/**
 * @brief Initialize CarbonMonoxide dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_carbon_monoxide_init();

/**
 * @brief Initialize CarbonDioxide dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_carbon_dioxide_init();

/**
 * @brief Initialize PM25 dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_pm25_init();

/**
 * @brief Initialize IASZone dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_ias_zone_init();

/**
 * @brief Initialize IASWD dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_iaswd_init();

/**
 * @brief Initialize Metering dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_metering_init();

/**
 * @brief Initialize ElectricalMeasurement dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_electrical_measurement_init();

/**
 * @brief Initialize Diagnostics dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_diagnostics_init();

/**
 * @brief Initialize Binding dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_binding_init();

/**
 * @brief Initialize NameAndLocation dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_name_and_location_init();

/**
 * @brief Initialize ConfigurationParameters dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_configuration_parameters_init();

/**
 * @brief Initialize AoXLocator dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_aox_locator_init();

/**
 * @brief Initialize AoXPositionEstimation dotdot bygroup command handlers
 *
 * @returns SL_STATUS_OK on success, error otherwise.
 */
sl_status_t uic_mqtt_dotdot_by_group_aox_position_estimation_init();



// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Basic/Commands/ResetToFactoryDefaults messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback_t> &get_uic_mqtt_dotdot_basic_reset_to_factory_defaults_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Basic/Commands/ResetToFactoryDefaults
 */
// clang-format off
void uic_mqtt_dotdot_on_basic_reset_to_factory_defaults(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_basic_write_attributes_callback_t> & get_uic_mqtt_dotdot_basic_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Basic/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_basic_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_power_configuration_write_attributes_callback_t> & get_uic_mqtt_dotdot_power_configuration_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PowerConfiguration/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_power_configuration_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_device_temperature_configuration_write_attributes_callback_t> & get_uic_mqtt_dotdot_device_temperature_configuration_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DeviceTemperatureConfiguration/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_device_temperature_configuration_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Identify/Commands/Identify messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_identify_identify_callback_t> &get_uic_mqtt_dotdot_identify_identify_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Identify/Commands/Identify
 */
// clang-format off
void uic_mqtt_dotdot_on_identify_identify(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Identify/Commands/IdentifyQueryResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_identify_identify_query_response_callback_t> &get_uic_mqtt_dotdot_identify_identify_query_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Identify/Commands/IdentifyQueryResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_identify_identify_query_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Identify/Commands/IdentifyQuery messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_identify_identify_query_callback_t> &get_uic_mqtt_dotdot_identify_identify_query_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Identify/Commands/IdentifyQuery
 */
// clang-format off
void uic_mqtt_dotdot_on_identify_identify_query(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Identify/Commands/TriggerEffect messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_identify_trigger_effect_callback_t> &get_uic_mqtt_dotdot_identify_trigger_effect_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Identify/Commands/TriggerEffect
 */
// clang-format off
void uic_mqtt_dotdot_on_identify_trigger_effect(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_identify_write_attributes_callback_t> & get_uic_mqtt_dotdot_identify_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Identify/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_identify_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/AddGroup messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_add_group_callback_t> &get_uic_mqtt_dotdot_groups_add_group_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/AddGroup
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_add_group(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/AddGroupResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_add_group_response_callback_t> &get_uic_mqtt_dotdot_groups_add_group_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/AddGroupResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_add_group_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/ViewGroup messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_view_group_callback_t> &get_uic_mqtt_dotdot_groups_view_group_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/ViewGroup
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_view_group(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/ViewGroupResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_view_group_response_callback_t> &get_uic_mqtt_dotdot_groups_view_group_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/ViewGroupResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_view_group_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/GetGroupMembership messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_get_group_membership_callback_t> &get_uic_mqtt_dotdot_groups_get_group_membership_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/GetGroupMembership
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_get_group_membership(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/GetGroupMembershipResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_get_group_membership_response_callback_t> &get_uic_mqtt_dotdot_groups_get_group_membership_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/GetGroupMembershipResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_get_group_membership_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/RemoveGroup messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_remove_group_callback_t> &get_uic_mqtt_dotdot_groups_remove_group_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/RemoveGroup
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_remove_group(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/RemoveGroupResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_remove_group_response_callback_t> &get_uic_mqtt_dotdot_groups_remove_group_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/RemoveGroupResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_remove_group_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/RemoveAllGroups messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_remove_all_groups_callback_t> &get_uic_mqtt_dotdot_groups_remove_all_groups_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/RemoveAllGroups
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_remove_all_groups(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Groups/Commands/AddGroupIfIdentifying messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_add_group_if_identifying_callback_t> &get_uic_mqtt_dotdot_groups_add_group_if_identifying_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/AddGroupIfIdentifying
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_add_group_if_identifying(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_groups_write_attributes_callback_t> & get_uic_mqtt_dotdot_groups_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Groups/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_groups_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/AddScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_add_scene_callback_t> &get_uic_mqtt_dotdot_scenes_add_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/AddScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_add_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/AddSceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_add_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_add_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/AddSceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_add_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/ViewScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_view_scene_callback_t> &get_uic_mqtt_dotdot_scenes_view_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/ViewScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_view_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/ViewSceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_view_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_view_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/ViewSceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_view_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/RemoveScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_remove_scene_callback_t> &get_uic_mqtt_dotdot_scenes_remove_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/RemoveScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_remove_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/RemoveSceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_remove_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_remove_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/RemoveSceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_remove_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/RemoveAllScenes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_remove_all_scenes_callback_t> &get_uic_mqtt_dotdot_scenes_remove_all_scenes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/RemoveAllScenes
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_remove_all_scenes(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/RemoveAllScenesResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback_t> &get_uic_mqtt_dotdot_scenes_remove_all_scenes_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/RemoveAllScenesResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_remove_all_scenes_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/StoreScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_store_scene_callback_t> &get_uic_mqtt_dotdot_scenes_store_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/StoreScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_store_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/StoreSceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_store_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_store_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/StoreSceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_store_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/RecallScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_recall_scene_callback_t> &get_uic_mqtt_dotdot_scenes_recall_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/RecallScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_recall_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/GetSceneMembership messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_get_scene_membership_callback_t> &get_uic_mqtt_dotdot_scenes_get_scene_membership_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/GetSceneMembership
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_get_scene_membership(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/GetSceneMembershipResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_get_scene_membership_response_callback_t> &get_uic_mqtt_dotdot_scenes_get_scene_membership_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/GetSceneMembershipResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_get_scene_membership_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/EnhancedAddScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_enhanced_add_scene_callback_t> &get_uic_mqtt_dotdot_scenes_enhanced_add_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/EnhancedAddScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_enhanced_add_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/EnhancedAddSceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_enhanced_add_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/EnhancedAddSceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_enhanced_add_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/EnhancedViewScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_enhanced_view_scene_callback_t> &get_uic_mqtt_dotdot_scenes_enhanced_view_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/EnhancedViewScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_enhanced_view_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/EnhancedViewSceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_enhanced_view_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/EnhancedViewSceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_enhanced_view_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/CopyScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_copy_scene_callback_t> &get_uic_mqtt_dotdot_scenes_copy_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/CopyScene
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_copy_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Scenes/Commands/CopySceneResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_copy_scene_response_callback_t> &get_uic_mqtt_dotdot_scenes_copy_scene_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/CopySceneResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_copy_scene_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_scenes_write_attributes_callback_t> & get_uic_mqtt_dotdot_scenes_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Scenes/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_scenes_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid OnOff/Commands/Off messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_off_callback_t> &get_uic_mqtt_dotdot_on_off_off_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/Off
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_off(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid OnOff/Commands/On messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_on_callback_t> &get_uic_mqtt_dotdot_on_off_on_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/On
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_on(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid OnOff/Commands/Toggle messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_toggle_callback_t> &get_uic_mqtt_dotdot_on_off_toggle_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/Toggle
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_toggle(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid OnOff/Commands/OffWithEffect messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_off_with_effect_callback_t> &get_uic_mqtt_dotdot_on_off_off_with_effect_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/OffWithEffect
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_off_with_effect(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid OnOff/Commands/OnWithRecallGlobalScene messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback_t> &get_uic_mqtt_dotdot_on_off_on_with_recall_global_scene_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/OnWithRecallGlobalScene
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_on_with_recall_global_scene(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid OnOff/Commands/OnWithTimedOff messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_on_with_timed_off_callback_t> &get_uic_mqtt_dotdot_on_off_on_with_timed_off_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/OnWithTimedOff
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_on_with_timed_off(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_on_off_write_attributes_callback_t> & get_uic_mqtt_dotdot_on_off_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OnOff/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_on_off_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/MoveToLevel messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_move_to_level_callback_t> &get_uic_mqtt_dotdot_level_move_to_level_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/MoveToLevel
 */
// clang-format off
void uic_mqtt_dotdot_on_level_move_to_level(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/Move messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_move_callback_t> &get_uic_mqtt_dotdot_level_move_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/Move
 */
// clang-format off
void uic_mqtt_dotdot_on_level_move(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/Step messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_step_callback_t> &get_uic_mqtt_dotdot_level_step_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/Step
 */
// clang-format off
void uic_mqtt_dotdot_on_level_step(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/Stop messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_stop_callback_t> &get_uic_mqtt_dotdot_level_stop_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/Stop
 */
// clang-format off
void uic_mqtt_dotdot_on_level_stop(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/MoveToLevelWithOnOff messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_move_to_level_with_on_off_callback_t> &get_uic_mqtt_dotdot_level_move_to_level_with_on_off_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/MoveToLevelWithOnOff
 */
// clang-format off
void uic_mqtt_dotdot_on_level_move_to_level_with_on_off(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/MoveWithOnOff messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_move_with_on_off_callback_t> &get_uic_mqtt_dotdot_level_move_with_on_off_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/MoveWithOnOff
 */
// clang-format off
void uic_mqtt_dotdot_on_level_move_with_on_off(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/StepWithOnOff messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_step_with_on_off_callback_t> &get_uic_mqtt_dotdot_level_step_with_on_off_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/StepWithOnOff
 */
// clang-format off
void uic_mqtt_dotdot_on_level_step_with_on_off(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/StopWithOnOff messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_stop_with_on_off_callback_t> &get_uic_mqtt_dotdot_level_stop_with_on_off_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/StopWithOnOff
 */
// clang-format off
void uic_mqtt_dotdot_on_level_stop_with_on_off(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Level/Commands/MoveToClosestFrequency messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_move_to_closest_frequency_callback_t> &get_uic_mqtt_dotdot_level_move_to_closest_frequency_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/MoveToClosestFrequency
 */
// clang-format off
void uic_mqtt_dotdot_on_level_move_to_closest_frequency(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_level_write_attributes_callback_t> & get_uic_mqtt_dotdot_level_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Level/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_level_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Alarms/Commands/ResetAlarm messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_reset_alarm_callback_t> &get_uic_mqtt_dotdot_alarms_reset_alarm_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/ResetAlarm
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_reset_alarm(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Alarms/Commands/Alarm messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_alarm_callback_t> &get_uic_mqtt_dotdot_alarms_alarm_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/Alarm
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_alarm(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Alarms/Commands/ResetAllAlarms messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_reset_all_alarms_callback_t> &get_uic_mqtt_dotdot_alarms_reset_all_alarms_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/ResetAllAlarms
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_reset_all_alarms(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Alarms/Commands/GetAlarmResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_get_alarm_response_callback_t> &get_uic_mqtt_dotdot_alarms_get_alarm_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/GetAlarmResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_get_alarm_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Alarms/Commands/GetAlarm messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_get_alarm_callback_t> &get_uic_mqtt_dotdot_alarms_get_alarm_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/GetAlarm
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_get_alarm(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Alarms/Commands/ResetAlarmLog messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_reset_alarm_log_callback_t> &get_uic_mqtt_dotdot_alarms_reset_alarm_log_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/ResetAlarmLog
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_reset_alarm_log(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_alarms_write_attributes_callback_t> & get_uic_mqtt_dotdot_alarms_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Alarms/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_alarms_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_time_write_attributes_callback_t> & get_uic_mqtt_dotdot_time_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Time/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_time_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid PollControl/Commands/CheckIn messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_poll_control_check_in_callback_t> &get_uic_mqtt_dotdot_poll_control_check_in_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PollControl/Commands/CheckIn
 */
// clang-format off
void uic_mqtt_dotdot_on_poll_control_check_in(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid PollControl/Commands/CheckInResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_poll_control_check_in_response_callback_t> &get_uic_mqtt_dotdot_poll_control_check_in_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PollControl/Commands/CheckInResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_poll_control_check_in_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid PollControl/Commands/FastPollStop messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_poll_control_fast_poll_stop_callback_t> &get_uic_mqtt_dotdot_poll_control_fast_poll_stop_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PollControl/Commands/FastPollStop
 */
// clang-format off
void uic_mqtt_dotdot_on_poll_control_fast_poll_stop(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid PollControl/Commands/SetLongPollInterval messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback_t> &get_uic_mqtt_dotdot_poll_control_set_long_poll_interval_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PollControl/Commands/SetLongPollInterval
 */
// clang-format off
void uic_mqtt_dotdot_on_poll_control_set_long_poll_interval(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid PollControl/Commands/SetShortPollInterval messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback_t> &get_uic_mqtt_dotdot_poll_control_set_short_poll_interval_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PollControl/Commands/SetShortPollInterval
 */
// clang-format off
void uic_mqtt_dotdot_on_poll_control_set_short_poll_interval(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_poll_control_write_attributes_callback_t> & get_uic_mqtt_dotdot_poll_control_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PollControl/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_poll_control_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_shade_configuration_write_attributes_callback_t> & get_uic_mqtt_dotdot_shade_configuration_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ShadeConfiguration/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_shade_configuration_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/LockDoor messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_lock_door_callback_t> &get_uic_mqtt_dotdot_door_lock_lock_door_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/LockDoor
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_lock_door(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/LockDoorResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_lock_door_response_callback_t> &get_uic_mqtt_dotdot_door_lock_lock_door_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/LockDoorResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_lock_door_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/UnlockDoor messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_unlock_door_callback_t> &get_uic_mqtt_dotdot_door_lock_unlock_door_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/UnlockDoor
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_unlock_door(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/UnlockDoorResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_unlock_door_response_callback_t> &get_uic_mqtt_dotdot_door_lock_unlock_door_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/UnlockDoorResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_unlock_door_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/Toggle messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_toggle_callback_t> &get_uic_mqtt_dotdot_door_lock_toggle_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/Toggle
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_toggle(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ToggleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_toggle_response_callback_t> &get_uic_mqtt_dotdot_door_lock_toggle_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ToggleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_toggle_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/UnlockWithTimeout messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback_t> &get_uic_mqtt_dotdot_door_lock_unlock_with_timeout_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/UnlockWithTimeout
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_unlock_with_timeout(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/UnlockWithTimeoutResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback_t> &get_uic_mqtt_dotdot_door_lock_unlock_with_timeout_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/UnlockWithTimeoutResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_unlock_with_timeout_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetLogRecord messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_log_record_callback_t> &get_uic_mqtt_dotdot_door_lock_get_log_record_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetLogRecord
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_log_record(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetLogRecordResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_log_record_response_callback_t> &get_uic_mqtt_dotdot_door_lock_get_log_record_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetLogRecordResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_log_record_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetPINCode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_setpin_code_callback_t> &get_uic_mqtt_dotdot_door_lock_setpin_code_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetPINCode
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_setpin_code(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetPINCodeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_setpin_code_response_callback_t> &get_uic_mqtt_dotdot_door_lock_setpin_code_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetPINCodeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_setpin_code_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetPINCode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_getpin_code_callback_t> &get_uic_mqtt_dotdot_door_lock_getpin_code_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetPINCode
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_getpin_code(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetPINCodeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_getpin_code_response_callback_t> &get_uic_mqtt_dotdot_door_lock_getpin_code_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetPINCodeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_getpin_code_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearPINCode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clearpin_code_callback_t> &get_uic_mqtt_dotdot_door_lock_clearpin_code_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearPINCode
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clearpin_code(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearPINCodeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clearpin_code_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clearpin_code_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearPINCodeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clearpin_code_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearAllPINCodes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_allpin_codes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearAllPINCodes
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_allpin_codes(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearAllPINCodesResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_allpin_codes_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearAllPINCodesResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_allpin_codes_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetUserStatus messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_user_status_callback_t> &get_uic_mqtt_dotdot_door_lock_set_user_status_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetUserStatus
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_user_status(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetUserStatusResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_user_status_response_callback_t> &get_uic_mqtt_dotdot_door_lock_set_user_status_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetUserStatusResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_user_status_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetUserStatus messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_user_status_callback_t> &get_uic_mqtt_dotdot_door_lock_get_user_status_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetUserStatus
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_user_status(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetUserStatusResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_user_status_response_callback_t> &get_uic_mqtt_dotdot_door_lock_get_user_status_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetUserStatusResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_user_status_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetWeekdaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_set_weekday_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetWeekdaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_weekday_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetWeekdayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_set_weekday_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetWeekdayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_weekday_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetWeekdaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_get_weekday_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetWeekdaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_weekday_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetWeekdayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_get_weekday_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetWeekdayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_weekday_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearWeekdaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_weekday_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearWeekdaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_weekday_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearWeekdayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_weekday_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearWeekdayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_weekday_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetYearDaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_set_year_day_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetYearDaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_year_day_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetYearDayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_set_year_day_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetYearDayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_year_day_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetYearDaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_get_year_day_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetYearDaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_year_day_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetYearDayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_get_year_day_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetYearDayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_year_day_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearYearDaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_year_day_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearYearDaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_year_day_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearYearDayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_year_day_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearYearDayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_year_day_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetHolidaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_set_holiday_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetHolidaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_holiday_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetHolidayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_set_holiday_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetHolidayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_holiday_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetHolidaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_get_holiday_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetHolidaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_holiday_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetHolidayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_get_holiday_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetHolidayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_holiday_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearHolidaySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_holiday_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearHolidaySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_holiday_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearHolidayScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_holiday_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearHolidayScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_holiday_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetUserType messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_user_type_callback_t> &get_uic_mqtt_dotdot_door_lock_set_user_type_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetUserType
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_user_type(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetUserTypeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_set_user_type_response_callback_t> &get_uic_mqtt_dotdot_door_lock_set_user_type_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetUserTypeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_set_user_type_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetUserType messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_user_type_callback_t> &get_uic_mqtt_dotdot_door_lock_get_user_type_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetUserType
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_user_type(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetUserTypeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_user_type_response_callback_t> &get_uic_mqtt_dotdot_door_lock_get_user_type_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetUserTypeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_user_type_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetRFIDCode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_setrfid_code_callback_t> &get_uic_mqtt_dotdot_door_lock_setrfid_code_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetRFIDCode
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_setrfid_code(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/SetRFIDCodeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_setrfid_code_response_callback_t> &get_uic_mqtt_dotdot_door_lock_setrfid_code_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/SetRFIDCodeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_setrfid_code_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetRFIDCode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_getrfid_code_callback_t> &get_uic_mqtt_dotdot_door_lock_getrfid_code_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetRFIDCode
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_getrfid_code(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetRFIDCodeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_getrfid_code_response_callback_t> &get_uic_mqtt_dotdot_door_lock_getrfid_code_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetRFIDCodeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_getrfid_code_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearRFIDCode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clearrfid_code_callback_t> &get_uic_mqtt_dotdot_door_lock_clearrfid_code_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearRFIDCode
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clearrfid_code(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearRFIDCodeResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clearrfid_code_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearRFIDCodeResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clearrfid_code_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearAllRFIDCodes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_allrfid_codes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearAllRFIDCodes
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_allrfid_codes(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ClearAllRFIDCodesResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback_t> &get_uic_mqtt_dotdot_door_lock_clear_allrfid_codes_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ClearAllRFIDCodesResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_clear_allrfid_codes_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/OperatingEventNotification messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_operating_event_notification_callback_t> &get_uic_mqtt_dotdot_door_lock_operating_event_notification_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/OperatingEventNotification
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_operating_event_notification(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/ProgrammingEventNotification messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_programming_event_notification_callback_t> &get_uic_mqtt_dotdot_door_lock_programming_event_notification_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/ProgrammingEventNotification
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_programming_event_notification(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid DoorLock/Commands/GetAllPINCodes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_get_all_pin_codes_callback_t> &get_uic_mqtt_dotdot_door_lock_get_all_pin_codes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/GetAllPINCodes
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_get_all_pin_codes(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_door_lock_write_attributes_callback_t> & get_uic_mqtt_dotdot_door_lock_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DoorLock/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_door_lock_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/UpOrOpen messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_up_or_open_callback_t> &get_uic_mqtt_dotdot_window_covering_up_or_open_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/UpOrOpen
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_up_or_open(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/DownOrClose messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_down_or_close_callback_t> &get_uic_mqtt_dotdot_window_covering_down_or_close_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/DownOrClose
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_down_or_close(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/Stop messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_stop_callback_t> &get_uic_mqtt_dotdot_window_covering_stop_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/Stop
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_stop(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/GoToLiftValue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_go_to_lift_value_callback_t> &get_uic_mqtt_dotdot_window_covering_go_to_lift_value_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/GoToLiftValue
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_go_to_lift_value(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/GoToLiftPercentage messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback_t> &get_uic_mqtt_dotdot_window_covering_go_to_lift_percentage_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/GoToLiftPercentage
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_go_to_lift_percentage(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/GoToTiltValue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback_t> &get_uic_mqtt_dotdot_window_covering_go_to_tilt_value_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/GoToTiltValue
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_go_to_tilt_value(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid WindowCovering/Commands/GoToTiltPercentage messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback_t> &get_uic_mqtt_dotdot_window_covering_go_to_tilt_percentage_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/GoToTiltPercentage
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_go_to_tilt_percentage(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_window_covering_write_attributes_callback_t> & get_uic_mqtt_dotdot_window_covering_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindowCovering/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_window_covering_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid BarrierControl/Commands/GoToPercent messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_barrier_control_go_to_percent_callback_t> &get_uic_mqtt_dotdot_barrier_control_go_to_percent_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/BarrierControl/Commands/GoToPercent
 */
// clang-format off
void uic_mqtt_dotdot_on_barrier_control_go_to_percent(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid BarrierControl/Commands/Stop messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_barrier_control_stop_callback_t> &get_uic_mqtt_dotdot_barrier_control_stop_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/BarrierControl/Commands/Stop
 */
// clang-format off
void uic_mqtt_dotdot_on_barrier_control_stop(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_barrier_control_write_attributes_callback_t> & get_uic_mqtt_dotdot_barrier_control_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/BarrierControl/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_barrier_control_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_pump_configuration_and_control_write_attributes_callback_t> & get_uic_mqtt_dotdot_pump_configuration_and_control_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PumpConfigurationAndControl/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_pump_configuration_and_control_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/SetpointRaiseOrLower messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback_t> &get_uic_mqtt_dotdot_thermostat_setpoint_raise_or_lower_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/SetpointRaiseOrLower
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_setpoint_raise_or_lower(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/GetWeeklyScheduleResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback_t> &get_uic_mqtt_dotdot_thermostat_get_weekly_schedule_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/GetWeeklyScheduleResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_get_weekly_schedule_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/SetWeeklySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback_t> &get_uic_mqtt_dotdot_thermostat_set_weekly_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/SetWeeklySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_set_weekly_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/GetRelayStatusLogResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback_t> &get_uic_mqtt_dotdot_thermostat_get_relay_status_log_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/GetRelayStatusLogResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_get_relay_status_log_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/GetWeeklySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback_t> &get_uic_mqtt_dotdot_thermostat_get_weekly_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/GetWeeklySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_get_weekly_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/ClearWeeklySchedule messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback_t> &get_uic_mqtt_dotdot_thermostat_clear_weekly_schedule_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/ClearWeeklySchedule
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_clear_weekly_schedule(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Thermostat/Commands/GetRelayStatusLog messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_get_relay_status_log_callback_t> &get_uic_mqtt_dotdot_thermostat_get_relay_status_log_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/GetRelayStatusLog
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_get_relay_status_log(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_write_attributes_callback_t> & get_uic_mqtt_dotdot_thermostat_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Thermostat/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_fan_control_write_attributes_callback_t> & get_uic_mqtt_dotdot_fan_control_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/FanControl/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_fan_control_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_dehumidification_control_write_attributes_callback_t> & get_uic_mqtt_dotdot_dehumidification_control_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/DehumidificationControl/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_dehumidification_control_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_thermostat_user_interface_configuration_write_attributes_callback_t> & get_uic_mqtt_dotdot_thermostat_user_interface_configuration_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ThermostatUserInterfaceConfiguration/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_thermostat_user_interface_configuration_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveToHue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_to_hue_callback_t> &get_uic_mqtt_dotdot_color_control_move_to_hue_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveToHue
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_to_hue(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveHue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_hue_callback_t> &get_uic_mqtt_dotdot_color_control_move_hue_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveHue
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_hue(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/StepHue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_step_hue_callback_t> &get_uic_mqtt_dotdot_color_control_step_hue_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/StepHue
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_step_hue(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveToSaturation messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_to_saturation_callback_t> &get_uic_mqtt_dotdot_color_control_move_to_saturation_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveToSaturation
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_to_saturation(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveSaturation messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_saturation_callback_t> &get_uic_mqtt_dotdot_color_control_move_saturation_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveSaturation
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_saturation(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/StepSaturation messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_step_saturation_callback_t> &get_uic_mqtt_dotdot_color_control_step_saturation_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/StepSaturation
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_step_saturation(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveToHueAndSaturation messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback_t> &get_uic_mqtt_dotdot_color_control_move_to_hue_and_saturation_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveToHueAndSaturation
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_to_hue_and_saturation(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveToColor messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_to_color_callback_t> &get_uic_mqtt_dotdot_color_control_move_to_color_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveToColor
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_to_color(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveColor messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_color_callback_t> &get_uic_mqtt_dotdot_color_control_move_color_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveColor
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_color(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/StepColor messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_step_color_callback_t> &get_uic_mqtt_dotdot_color_control_step_color_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/StepColor
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_step_color(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveToColorTemperature messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_to_color_temperature_callback_t> &get_uic_mqtt_dotdot_color_control_move_to_color_temperature_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveToColorTemperature
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_to_color_temperature(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/EnhancedMoveToHue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback_t> &get_uic_mqtt_dotdot_color_control_enhanced_move_to_hue_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/EnhancedMoveToHue
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_enhanced_move_to_hue(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/EnhancedMoveHue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_enhanced_move_hue_callback_t> &get_uic_mqtt_dotdot_color_control_enhanced_move_hue_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/EnhancedMoveHue
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_enhanced_move_hue(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/EnhancedStepHue messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_enhanced_step_hue_callback_t> &get_uic_mqtt_dotdot_color_control_enhanced_step_hue_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/EnhancedStepHue
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_enhanced_step_hue(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/EnhancedMoveToHueAndSaturation messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback_t> &get_uic_mqtt_dotdot_color_control_enhanced_move_to_hue_and_saturation_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/EnhancedMoveToHueAndSaturation
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_enhanced_move_to_hue_and_saturation(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/ColorLoopSet messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_color_loop_set_callback_t> &get_uic_mqtt_dotdot_color_control_color_loop_set_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/ColorLoopSet
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_color_loop_set(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/StopMoveStep messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_stop_move_step_callback_t> &get_uic_mqtt_dotdot_color_control_stop_move_step_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/StopMoveStep
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_stop_move_step(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/MoveColorTemperature messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_move_color_temperature_callback_t> &get_uic_mqtt_dotdot_color_control_move_color_temperature_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/MoveColorTemperature
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_move_color_temperature(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ColorControl/Commands/StepColorTemperature messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_step_color_temperature_callback_t> &get_uic_mqtt_dotdot_color_control_step_color_temperature_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/StepColorTemperature
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_step_color_temperature(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_color_control_write_attributes_callback_t> & get_uic_mqtt_dotdot_color_control_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ColorControl/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_color_control_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ballast_configuration_write_attributes_callback_t> & get_uic_mqtt_dotdot_ballast_configuration_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/BallastConfiguration/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_ballast_configuration_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_illuminance_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_illuminance_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IlluminanceMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_illuminance_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_illuminance_level_sensing_write_attributes_callback_t> & get_uic_mqtt_dotdot_illuminance_level_sensing_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IlluminanceLevelSensing/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_illuminance_level_sensing_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_temperature_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_temperature_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/TemperatureMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_temperature_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_pressure_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_pressure_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PressureMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_pressure_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_flow_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_flow_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/FlowMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_flow_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_relativity_humidity_write_attributes_callback_t> & get_uic_mqtt_dotdot_relativity_humidity_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/RelativityHumidity/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_relativity_humidity_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_occupancy_sensing_write_attributes_callback_t> & get_uic_mqtt_dotdot_occupancy_sensing_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/OccupancySensing/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_occupancy_sensing_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_soil_moisture_write_attributes_callback_t> & get_uic_mqtt_dotdot_soil_moisture_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/SoilMoisture/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_soil_moisture_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ph_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_ph_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PhMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_ph_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_electrical_conductivity_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_electrical_conductivity_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ElectricalConductivityMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_electrical_conductivity_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_wind_speed_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_wind_speed_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/WindSpeedMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_wind_speed_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_carbon_monoxide_write_attributes_callback_t> & get_uic_mqtt_dotdot_carbon_monoxide_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/CarbonMonoxide/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_carbon_monoxide_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_carbon_dioxide_write_attributes_callback_t> & get_uic_mqtt_dotdot_carbon_dioxide_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/CarbonDioxide/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_carbon_dioxide_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_pm25_write_attributes_callback_t> & get_uic_mqtt_dotdot_pm25_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/PM25/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_pm25_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASZone/Commands/ZoneEnrollResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback_t> &get_uic_mqtt_dotdot_ias_zone_zone_enroll_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASZone/Commands/ZoneEnrollResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_ias_zone_zone_enroll_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASZone/Commands/ZoneStatusChangeNotification messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback_t> &get_uic_mqtt_dotdot_ias_zone_zone_status_change_notification_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASZone/Commands/ZoneStatusChangeNotification
 */
// clang-format off
void uic_mqtt_dotdot_on_ias_zone_zone_status_change_notification(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASZone/Commands/InitiateNormalOperationMode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback_t> &get_uic_mqtt_dotdot_ias_zone_initiate_normal_operation_mode_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASZone/Commands/InitiateNormalOperationMode
 */
// clang-format off
void uic_mqtt_dotdot_on_ias_zone_initiate_normal_operation_mode(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASZone/Commands/ZoneEnrollRequest messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback_t> &get_uic_mqtt_dotdot_ias_zone_zone_enroll_request_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASZone/Commands/ZoneEnrollRequest
 */
// clang-format off
void uic_mqtt_dotdot_on_ias_zone_zone_enroll_request(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASZone/Commands/InitiateTestMode messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback_t> &get_uic_mqtt_dotdot_ias_zone_initiate_test_mode_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASZone/Commands/InitiateTestMode
 */
// clang-format off
void uic_mqtt_dotdot_on_ias_zone_initiate_test_mode(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_ias_zone_write_attributes_callback_t> & get_uic_mqtt_dotdot_ias_zone_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASZone/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_ias_zone_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASWD/Commands/StartWarning messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_iaswd_start_warning_callback_t> &get_uic_mqtt_dotdot_iaswd_start_warning_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASWD/Commands/StartWarning
 */
// clang-format off
void uic_mqtt_dotdot_on_iaswd_start_warning(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid IASWD/Commands/Squawk messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_iaswd_squawk_callback_t> &get_uic_mqtt_dotdot_iaswd_squawk_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASWD/Commands/Squawk
 */
// clang-format off
void uic_mqtt_dotdot_on_iaswd_squawk(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_iaswd_write_attributes_callback_t> & get_uic_mqtt_dotdot_iaswd_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/IASWD/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_iaswd_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_metering_write_attributes_callback_t> & get_uic_mqtt_dotdot_metering_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Metering/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_metering_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ElectricalMeasurement/Commands/GetProfileInfoResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback_t> &get_uic_mqtt_dotdot_electrical_measurement_get_profile_info_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ElectricalMeasurement/Commands/GetProfileInfoResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_electrical_measurement_get_profile_info_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ElectricalMeasurement/Commands/GetProfileInfo messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback_t> &get_uic_mqtt_dotdot_electrical_measurement_get_profile_info_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ElectricalMeasurement/Commands/GetProfileInfo
 */
// clang-format off
void uic_mqtt_dotdot_on_electrical_measurement_get_profile_info(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ElectricalMeasurement/Commands/GetMeasurementProfileResponse messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback_t> &get_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_response_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ElectricalMeasurement/Commands/GetMeasurementProfileResponse
 */
// clang-format off
void uic_mqtt_dotdot_on_electrical_measurement_get_measurement_profile_response(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ElectricalMeasurement/Commands/GetMeasurementProfile messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback_t> &get_uic_mqtt_dotdot_electrical_measurement_get_measurement_profile_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ElectricalMeasurement/Commands/GetMeasurementProfile
 */
// clang-format off
void uic_mqtt_dotdot_on_electrical_measurement_get_measurement_profile(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_electrical_measurement_write_attributes_callback_t> & get_uic_mqtt_dotdot_electrical_measurement_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ElectricalMeasurement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_electrical_measurement_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_diagnostics_write_attributes_callback_t> & get_uic_mqtt_dotdot_diagnostics_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Diagnostics/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_diagnostics_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ProtocolController-RFTelemetry/Commands/TxReport messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback_t> &get_uic_mqtt_dotdot_protocol_controller_rf_telemetry_tx_report_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ProtocolController-RFTelemetry/Commands/TxReport
 */
// clang-format off
void uic_mqtt_dotdot_on_protocol_controller_rf_telemetry_tx_report(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_protocol_controller_rf_telemetry_write_attributes_callback_t> & get_uic_mqtt_dotdot_protocol_controller_rf_telemetry_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ProtocolController-RFTelemetry/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_protocol_controller_rf_telemetry_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid State/Commands/Remove messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_state_remove_callback_t> &get_uic_mqtt_dotdot_state_remove_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/State/Commands/Remove
 */
// clang-format off
void uic_mqtt_dotdot_on_state_remove(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid State/Commands/RemoveOffline messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_state_remove_offline_callback_t> &get_uic_mqtt_dotdot_state_remove_offline_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/State/Commands/RemoveOffline
 */
// clang-format off
void uic_mqtt_dotdot_on_state_remove_offline(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid State/Commands/DiscoverNeighbors messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_state_discover_neighbors_callback_t> &get_uic_mqtt_dotdot_state_discover_neighbors_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/State/Commands/DiscoverNeighbors
 */
// clang-format off
void uic_mqtt_dotdot_on_state_discover_neighbors(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid State/Commands/Interview messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_state_interview_callback_t> &get_uic_mqtt_dotdot_state_interview_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/State/Commands/Interview
 */
// clang-format off
void uic_mqtt_dotdot_on_state_interview(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid State/Commands/DiscoverSecurity messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_state_discover_security_callback_t> &get_uic_mqtt_dotdot_state_discover_security_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/State/Commands/DiscoverSecurity
 */
// clang-format off
void uic_mqtt_dotdot_on_state_discover_security(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_state_write_attributes_callback_t> & get_uic_mqtt_dotdot_state_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/State/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_state_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Binding/Commands/Bind messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_binding_bind_callback_t> &get_uic_mqtt_dotdot_binding_bind_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Binding/Commands/Bind
 */
// clang-format off
void uic_mqtt_dotdot_on_binding_bind(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Binding/Commands/Unbind messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_binding_unbind_callback_t> &get_uic_mqtt_dotdot_binding_unbind_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Binding/Commands/Unbind
 */
// clang-format off
void uic_mqtt_dotdot_on_binding_unbind(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Binding/Commands/BindToProtocolController messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback_t> &get_uic_mqtt_dotdot_binding_bind_to_protocol_controller_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Binding/Commands/BindToProtocolController
 */
// clang-format off
void uic_mqtt_dotdot_on_binding_bind_to_protocol_controller(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid Binding/Commands/UnbindFromProtocolController messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback_t> &get_uic_mqtt_dotdot_binding_unbind_from_protocol_controller_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Binding/Commands/UnbindFromProtocolController
 */
// clang-format off
void uic_mqtt_dotdot_on_binding_unbind_from_protocol_controller(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_binding_write_attributes_callback_t> & get_uic_mqtt_dotdot_binding_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/Binding/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_binding_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_system_metrics_write_attributes_callback_t> & get_uic_mqtt_dotdot_system_metrics_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/SystemMetrics/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_system_metrics_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ApplicationMonitoring/Commands/LogEntry messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_application_monitoring_log_entry_callback_t> &get_uic_mqtt_dotdot_application_monitoring_log_entry_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ApplicationMonitoring/Commands/LogEntry
 */
// clang-format off
void uic_mqtt_dotdot_on_application_monitoring_log_entry(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_application_monitoring_write_attributes_callback_t> & get_uic_mqtt_dotdot_application_monitoring_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ApplicationMonitoring/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_application_monitoring_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_name_and_location_write_attributes_callback_t> & get_uic_mqtt_dotdot_name_and_location_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/NameAndLocation/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_name_and_location_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ConfigurationParameters/Commands/DiscoverParameter messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback_t> &get_uic_mqtt_dotdot_configuration_parameters_discover_parameter_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ConfigurationParameters/Commands/DiscoverParameter
 */
// clang-format off
void uic_mqtt_dotdot_on_configuration_parameters_discover_parameter(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ConfigurationParameters/Commands/DefaultResetAllParameters messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback_t> &get_uic_mqtt_dotdot_configuration_parameters_default_reset_all_parameters_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ConfigurationParameters/Commands/DefaultResetAllParameters
 */
// clang-format off
void uic_mqtt_dotdot_on_configuration_parameters_default_reset_all_parameters(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ConfigurationParameters/Commands/SetParameter messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_configuration_parameters_set_parameter_callback_t> &get_uic_mqtt_dotdot_configuration_parameters_set_parameter_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ConfigurationParameters/Commands/SetParameter
 */
// clang-format off
void uic_mqtt_dotdot_on_configuration_parameters_set_parameter(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ConfigurationParameters/Commands/DiscoverParameterRange messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback_t> &get_uic_mqtt_dotdot_configuration_parameters_discover_parameter_range_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ConfigurationParameters/Commands/DiscoverParameterRange
 */
// clang-format off
void uic_mqtt_dotdot_on_configuration_parameters_discover_parameter_range(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_configuration_parameters_write_attributes_callback_t> & get_uic_mqtt_dotdot_configuration_parameters_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ConfigurationParameters/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_configuration_parameters_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid AoXLocator/Commands/IQReport messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_aox_locator_iq_report_callback_t> &get_uic_mqtt_dotdot_aox_locator_iq_report_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/AoXLocator/Commands/IQReport
 */
// clang-format off
void uic_mqtt_dotdot_on_aox_locator_iq_report(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid AoXLocator/Commands/AngleReport messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_aox_locator_angle_report_callback_t> &get_uic_mqtt_dotdot_aox_locator_angle_report_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/AoXLocator/Commands/AngleReport
 */
// clang-format off
void uic_mqtt_dotdot_on_aox_locator_angle_report(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid AoXLocator/Commands/AngleCorrection messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_aox_locator_angle_correction_callback_t> &get_uic_mqtt_dotdot_aox_locator_angle_correction_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/AoXLocator/Commands/AngleCorrection
 */
// clang-format off
void uic_mqtt_dotdot_on_aox_locator_angle_correction(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_aox_locator_write_attributes_callback_t> & get_uic_mqtt_dotdot_aox_locator_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/AoXLocator/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_aox_locator_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_aox_position_estimation_write_attributes_callback_t> & get_uic_mqtt_dotdot_aox_position_estimation_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/AoXPositionEstimation/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_aox_position_estimation_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);


// clang-format on

/**
 * @brief Retrieves the container with callbacks pointer for
 * by-unid ProtocolController-NetworkManagement/Commands/Write messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_protocol_controller_network_management_write_callback_t> &get_uic_mqtt_dotdot_protocol_controller_network_management_write_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ProtocolController-NetworkManagement/Commands/Write
 */
// clang-format off
void uic_mqtt_dotdot_on_protocol_controller_network_management_write(
  const char *topic,
  const char *message,
  const size_t message_length);
// clang-format on

/**
 * @brief Retrieves the container with callback pointers for by-unid
 * /Commands/WriteAttributes messages
 *
 * @returns std::set of callbacks.
 */
std::set<uic_mqtt_dotdot_protocol_controller_network_management_write_attributes_callback_t> & get_uic_mqtt_dotdot_protocol_controller_network_management_write_attributes_callback();

/**
 * @brief MQTT Subscribe handler for incoming publications on:
 * ucl/by-unid/+/+/ProtocolController-NetworkManagement/Commands/WriteAttributes
 */
// clang-format off
void uic_mqtt_dotdot_on_protocol_controller_network_management_WriteAttributes(
  const char *topic,
  const char *message,
  const size_t message_length);




// All bitmaps are defined as the cluster label for the bitmap plus the command/attribute name

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BallastConfigurationBallastStatus_bitmap_data {
{ {"BallastNonOperational", "bool", "0x1", "0"}, {
} },
{ {"LampFailure", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap BallastConfigurationBallastStatus("BallastConfigurationBallastStatus", "map8", BallastConfigurationBallastStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BallastConfigurationLampAlarmMode_bitmap_data {
{ {"LampBurnHours", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap BallastConfigurationLampAlarmMode("BallastConfigurationLampAlarmMode", "map8", BallastConfigurationLampAlarmMode_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BarrierControlCapabilities_bitmap_data {
{ {"PartialBarrier", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap BarrierControlCapabilities("BarrierControlCapabilities", "map8", BarrierControlCapabilities_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BarrierControlSafetyStatus_bitmap_data {
{ {"RemoteLockout", "bool", "0x1", "0"}, {
} },
{ {"TamperDetected", "bool", "0x2", "1"}, {
} },
{ {"FailedCommunication", "bool", "0x4", "2"}, {
} },
{ {"PositionFailure", "bool", "0x8", "3"}, {
} }
};
const dotdot_bitmap BarrierControlSafetyStatus("BarrierControlSafetyStatus", "map16", BarrierControlSafetyStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BasicAlarmMask_bitmap_data {
{ {"GeneralHardwareFault", "bool", "0x1", "0"}, {
} },
{ {"GeneralSoftwareFault", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap BasicAlarmMask("BasicAlarmMask", "map8", BasicAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BasicDisableLocalConfig_bitmap_data {
{ {"DisableResetToFactoryDefaults", "bool", "0x1", "0"}, {
} },
{ {"DisableDeviceConfiguration", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap BasicDisableLocalConfig("BasicDisableLocalConfig", "map8", BasicDisableLocalConfig_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BatteryAlarmMask_bitmap_data {
{ {"BatteryVoltageTooLow", "bool", "0x1", "0"}, {
} },
{ {"BatteryAlarm1", "bool", "0x2", "1"}, {
} },
{ {"BatteryAlarm2", "bool", "0x4", "2"}, {
} },
{ {"BatteryAlarm3", "bool", "0x8", "3"}, {
} }
};
const dotdot_bitmap BatteryAlarmMask("BatteryAlarmMask", "map8", BatteryAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> BatteryAlarmState_bitmap_data {
{ {"Battery1MinThreshold", "bool", "0x1", "0"}, {
} },
{ {"Battery1Threshold1", "bool", "0x2", "1"}, {
} },
{ {"Battery1Threshold2", "bool", "0x4", "2"}, {
} },
{ {"Battery1Threshold3", "bool", "0x8", "3"}, {
} },
{ {"Battery2MinThreshold", "bool", "0x400", "10"}, {
} },
{ {"Battery2Threshold1", "bool", "0x800", "11"}, {
} },
{ {"Battery2Threshold2", "bool", "0x1000", "12"}, {
} },
{ {"Battery2Threshold3", "bool", "0x2000", "13"}, {
} },
{ {"Battery3MinThreshold", "bool", "0x100000", "20"}, {
} },
{ {"Battery3Threshold1", "bool", "0x200000", "21"}, {
} },
{ {"Battery3Threshold2", "bool", "0x400000", "22"}, {
} },
{ {"Battery3Threshold3", "bool", "0x800000", "23"}, {
} },
{ {"MainsPowerSupplyLost", "bool", "0x40000000", "30"}, {
} }
};
const dotdot_bitmap BatteryAlarmState("BatteryAlarmState", "map32", BatteryAlarmState_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> CCColorOptions_bitmap_data {
{ {"ExecuteIfOff", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap CCColorOptions("CCColorOptions", "map8", CCColorOptions_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ColorControlColorCapabilities_bitmap_data {
{ {"HueSaturationSupported", "bool", "0x1", "0"}, {
} },
{ {"EnhancedHueSupported", "bool", "0x2", "1"}, {
} },
{ {"ColorLoopSupported", "bool", "0x4", "2"}, {
} },
{ {"XYSupported", "bool", "0x8", "3"}, {
} },
{ {"ColorTemperatureSupported", "bool", "0x10", "4"}, {
} }
};
const dotdot_bitmap ColorControlColorCapabilities("ColorControlColorCapabilities", "map16", ColorControlColorCapabilities_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ColorLoopSetUpdateFlags_bitmap_data {
{ {"UpdateAction", "bool", "0x1", "0"}, {
} },
{ {"UpdateDirection", "bool", "0x2", "1"}, {
} },
{ {"UpdateTime", "bool", "0x4", "2"}, {
} },
{ {"UpdateStartHue", "bool", "0x8", "3"}, {
} }
};
const dotdot_bitmap ColorLoopSetUpdateFlags("ColorLoopSetUpdateFlags", "map8", ColorLoopSetUpdateFlags_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> CopySceneMode_bitmap_data {
{ {"CopyAllScenes", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap CopySceneMode("CopySceneMode", "uint8", CopySceneMode_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DeviceTemperatureConfigurationDeviceTempAlarmMask_bitmap_data {
{ {"DeviceTemperatureTooLow", "bool", "0x1", "0"}, {
} },
{ {"DeviceTemperatureTooHigh", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap DeviceTemperatureConfigurationDeviceTempAlarmMask("DeviceTemperatureConfigurationDeviceTempAlarmMask", "map8", DeviceTemperatureConfigurationDeviceTempAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockAlarmMask_bitmap_data {
{ {"DeadboltJammed", "bool", "0x1", "0"}, {
} },
{ {"LockResetToFactoryDefaults", "bool", "0x2", "1"}, {
} },
{ {"RFPowerModuleCycled", "bool", "0x8", "3"}, {
} },
{ {"TamperAlarmWrongCodeEntryLimit", "bool", "0x10", "4"}, {
} },
{ {"TamperAlarmFrontEscutcheonRemovedFromMain", "bool", "0x20", "5"}, {
} },
{ {"ForcedDoorOpenUnderDoorLockedCondition", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap DoorLockAlarmMask("DoorLockAlarmMask", "map16", DoorLockAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockDefaultConfigurationRegister_bitmap_data {
{ {"DefaultEnableLocalProgrammingAttributeIsEnabled", "bool", "0x1", "0"}, {
} },
{ {"DefaultKeypadInterfaceIsEnabled", "bool", "0x2", "1"}, {
} },
{ {"DefaultRFInterfaceIsEnabled", "bool", "0x4", "2"}, {
} },
{ {"DefaultSoundVolumeIsEnabled", "bool", "0x20", "5"}, {
} },
{ {"DefaultAutoRelockTimeIsEnabled", "bool", "0x40", "6"}, {
} },
{ {"DefaultLEDSettingsIsEnabled", "bool", "0x80", "7"}, {
} }
};
const dotdot_bitmap DoorLockDefaultConfigurationRegister("DoorLockDefaultConfigurationRegister", "map16", DoorLockDefaultConfigurationRegister_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockKeypadOperationEventMask_bitmap_data {
{ {"KeypadOpUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"KeypadOpLock", "bool", "0x2", "1"}, {
} },
{ {"KeypadOpUnlock", "bool", "0x4", "2"}, {
} },
{ {"KeypadOpLockErrorInvalidPIN", "bool", "0x8", "3"}, {
} },
{ {"KeypadOpLockErrorInvalidSchedule", "bool", "0x10", "4"}, {
} },
{ {"KeypadOpUnlockInvalidPIN", "bool", "0x20", "5"}, {
} },
{ {"KeypadOpUnlockInvalidSchedule", "bool", "0x40", "6"}, {
} },
{ {"KeypadOpNonAccessUser", "bool", "0x80", "7"}, {
} }
};
const dotdot_bitmap DoorLockKeypadOperationEventMask("DoorLockKeypadOperationEventMask", "map16", DoorLockKeypadOperationEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockKeypadProgrammingEventMask_bitmap_data {
{ {"KeypadProgUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"KeypadProgMasterCodeChanged", "bool", "0x2", "1"}, {
} },
{ {"KeypadProgPINAdded", "bool", "0x4", "2"}, {
} },
{ {"KeypadProgPINDeleted", "bool", "0x8", "3"}, {
} },
{ {"KeypadProgPINChanged", "bool", "0x10", "4"}, {
} }
};
const dotdot_bitmap DoorLockKeypadProgrammingEventMask("DoorLockKeypadProgrammingEventMask", "map16", DoorLockKeypadProgrammingEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockManualOperationEventMask_bitmap_data {
{ {"ManualOpUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"ManualOpThumbturnLock", "bool", "0x2", "1"}, {
} },
{ {"ManualOpThumbturnUnlock", "bool", "0x4", "2"}, {
} },
{ {"ManualOpOneTouchLock", "bool", "0x8", "3"}, {
} },
{ {"ManualOpKeyLock", "bool", "0x10", "4"}, {
} },
{ {"ManualOpKeyUnlock", "bool", "0x20", "5"}, {
} },
{ {"ManualOpAutoLock", "bool", "0x40", "6"}, {
} },
{ {"ManualOpScheduleLock", "bool", "0x80", "7"}, {
} },
{ {"ManualOpScheduleUnlock", "bool", "0x100", "8"}, {
} },
{ {"ManualOpLock", "bool", "0x200", "9"}, {
} },
{ {"ManualOpUnlock", "bool", "0x400", "10"}, {
} }
};
const dotdot_bitmap DoorLockManualOperationEventMask("DoorLockManualOperationEventMask", "map16", DoorLockManualOperationEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockRFIDOperationEventMask_bitmap_data {
{ {"RFIDOpUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"RFIDOpLock", "bool", "0x2", "1"}, {
} },
{ {"RFIDOpUnlock", "bool", "0x4", "2"}, {
} },
{ {"RFIDOpLockErrorInvalidRFID", "bool", "0x8", "3"}, {
} },
{ {"RFIDOpLockErrorInvalidSchedule", "bool", "0x10", "4"}, {
} },
{ {"RFIDOpUnlockErrorInvalidRFID", "bool", "0x20", "5"}, {
} },
{ {"RFIDOpUnlockErrorInvalidSchedule", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap DoorLockRFIDOperationEventMask("DoorLockRFIDOperationEventMask", "map16", DoorLockRFIDOperationEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockRFIDProgrammingEventMask_bitmap_data {
{ {"RFIDProgUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"RFIDProgRFIDAdded", "bool", "0x20", "5"}, {
} },
{ {"RFIDProgRFIDDeleted", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap DoorLockRFIDProgrammingEventMask("DoorLockRFIDProgrammingEventMask", "map16", DoorLockRFIDProgrammingEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockRFOperationEventMask_bitmap_data {
{ {"RFOpUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"RFOpLock", "bool", "0x2", "1"}, {
} },
{ {"RFOpUnlock", "bool", "0x4", "2"}, {
} },
{ {"RFOpLockErrorInvalidCode", "bool", "0x8", "3"}, {
} },
{ {"RFOpLockErrorInvalidSchedule", "bool", "0x10", "4"}, {
} },
{ {"RFOpUnlockInvalidCode", "bool", "0x20", "5"}, {
} },
{ {"RFOpUnlockInvalidSchedule", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap DoorLockRFOperationEventMask("DoorLockRFOperationEventMask", "map16", DoorLockRFOperationEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockRFProgrammingEventMask_bitmap_data {
{ {"RFProgUnknownOrMS", "bool", "0x1", "0"}, {
} },
{ {"RFProgPINAdded", "bool", "0x4", "2"}, {
} },
{ {"RFProgPINDeleted", "bool", "0x8", "3"}, {
} },
{ {"RFProgPINChanged", "bool", "0x10", "4"}, {
} },
{ {"RFProgRFIDAdded", "bool", "0x20", "5"}, {
} },
{ {"RFProgRFIDDeleted", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap DoorLockRFProgrammingEventMask("DoorLockRFProgrammingEventMask", "map16", DoorLockRFProgrammingEventMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DoorLockSupportedOperatingModes_bitmap_data {
{ {"NormalModeSupported", "bool", "0x1", "0"}, {
} },
{ {"VacationModeSupported", "bool", "0x2", "1"}, {
} },
{ {"PrivacyModeSupported", "bool", "0x4", "2"}, {
} },
{ {"NoRFLockOrUnlockModeSupported", "bool", "0x8", "3"}, {
} },
{ {"PassageModeSupported", "bool", "0x10", "4"}, {
} }
};
const dotdot_bitmap DoorLockSupportedOperatingModes("DoorLockSupportedOperatingModes", "map16", DoorLockSupportedOperatingModes_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> DrlkDaysMask_bitmap_data {
{ {"Sun", "bool", "0x1", "0"}, {
} },
{ {"Mon", "bool", "0x2", "1"}, {
} },
{ {"Tue", "bool", "0x4", "2"}, {
} },
{ {"Wed", "bool", "0x8", "3"}, {
} },
{ {"Thu", "bool", "0x10", "4"}, {
} },
{ {"Fri", "bool", "0x20", "5"}, {
} },
{ {"Sat", "bool", "0x40", "6"}, {
} },
{ {"Enable", "bool", "0x80", "7"}, {
} }
};
const dotdot_bitmap DrlkDaysMask("DrlkDaysMask", "map8", DrlkDaysMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ElectricalMeasurementACAlarmsMask_bitmap_data {
{ {"VoltageOverload", "bool", "0x1", "0"}, {
} },
{ {"CurrentOverload", "bool", "0x2", "1"}, {
} },
{ {"ActivePowerOverload", "bool", "0x4", "2"}, {
} },
{ {"ReactivePowerOverload", "bool", "0x8", "3"}, {
} },
{ {"AverageRMSOverVoltage", "bool", "0x10", "4"}, {
} },
{ {"AverageRMSUnderVoltage", "bool", "0x20", "5"}, {
} },
{ {"RMSExtremeOverVoltage", "bool", "0x40", "6"}, {
} },
{ {"RMSExtremeUnderVoltage", "bool", "0x80", "7"}, {
} },
{ {"RMSVoltageSag", "bool", "0x100", "8"}, {
} },
{ {"RMSVoltageSwell", "bool", "0x200", "9"}, {
} }
};
const dotdot_bitmap ElectricalMeasurementACAlarmsMask("ElectricalMeasurementACAlarmsMask", "map16", ElectricalMeasurementACAlarmsMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ElectricalMeasurementDCOverloadAlarmsMask_bitmap_data {
{ {"VoltageOverload", "bool", "0x1", "0"}, {
} },
{ {"CurrentOverload", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap ElectricalMeasurementDCOverloadAlarmsMask("ElectricalMeasurementDCOverloadAlarmsMask", "map8", ElectricalMeasurementDCOverloadAlarmsMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ElectricalMeasurementMeasurementType_bitmap_data {
{ {"ActiveMeasurementAC", "bool", "0x1", "0"}, {
} },
{ {"ReactiveMeasurementAC", "bool", "0x2", "1"}, {
} },
{ {"ApparentMeasurementAC", "bool", "0x4", "2"}, {
} },
{ {"PhaseAMeasurement", "bool", "0x8", "3"}, {
} },
{ {"PhaseBMeasurement", "bool", "0x10", "4"}, {
} },
{ {"PhaseCMeasurement", "bool", "0x20", "5"}, {
} },
{ {"DCMeasurement", "bool", "0x40", "6"}, {
} },
{ {"HarmonicsMeasurement", "bool", "0x80", "7"}, {
} },
{ {"PowerQualityMeasurement", "bool", "0x100", "8"}, {
} }
};
const dotdot_bitmap ElectricalMeasurementMeasurementType("ElectricalMeasurementMeasurementType", "map32", ElectricalMeasurementMeasurementType_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> GroupsNameSupport_bitmap_data {
{ {"Supported", "bool", "0x80", "7"}, {
} }
};
const dotdot_bitmap GroupsNameSupport("GroupsNameSupport", "map8", GroupsNameSupport_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> IasZoneStatus_bitmap_data {
{ {"Alarm1", "bool", "0x1", "0"}, {
} },
{ {"Alarm2", "bool", "0x2", "1"}, {
} },
{ {"Tamper", "bool", "0x4", "2"}, {
} },
{ {"BatteryLow", "bool", "0x8", "3"}, {
} },
{ {"SupervisionNotify", "bool", "0x10", "4"}, {
} },
{ {"RestoreNotify", "bool", "0x20", "5"}, {
} },
{ {"Trouble", "bool", "0x40", "6"}, {
} },
{ {"ACMainsFault", "bool", "0x80", "7"}, {
} },
{ {"Test", "bool", "0x100", "8"}, {
} },
{ {"BatteryDefect", "bool", "0x200", "9"}, {
} }
};
const dotdot_bitmap IasZoneStatus("IasZoneStatus", "map16", IasZoneStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ImageBlockRequestFieldControl_bitmap_data {
{ {"RequestNodeIEEEAddressPresent", "bool", "0x1", "0"}, {
} },
{ {"MinimumBlockPeriodPresent", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap ImageBlockRequestFieldControl("ImageBlockRequestFieldControl", "map8", ImageBlockRequestFieldControl_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ImagePageRequestFieldControl_bitmap_data {
{ {"RequestNodeIEEEAddressPresent", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap ImagePageRequestFieldControl("ImagePageRequestFieldControl", "map8", ImagePageRequestFieldControl_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> LevelOptions_bitmap_data {
{ {"ExecuteIfOff", "bool", "0x1", "0"}, {
} },
{ {"CoupleColorTempToLevel", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap LevelOptions("LevelOptions", "map8", LevelOptions_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> MeteringDemandFormatting_bitmap_data {
{ {"SuppressLeadingZeros", "bool", "0x1", "0"}, {
} },
{ {"NumberOfDigitsToTheRightOfDecimalPoint", "bool", "0xE0", "5"}, {
} },
{ {"NumberOfDigitsToTheLeftOfTheDecimalPoint", "bool", "0x1E", "1"}, {
} }
};
const dotdot_bitmap MeteringDemandFormatting("MeteringDemandFormatting", "map8", MeteringDemandFormatting_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> MeteringEnergyCarrierDemandFormatting_bitmap_data {
{ {"SuppressLeadingZeros", "bool", "0x1", "0"}, {
} },
{ {"NumberOfDigitsToTheRightOfDecimalPoint", "bool", "0xE0", "5"}, {
} },
{ {"NumberOfDigitsToTheLeftOfTheDecimalPoint", "bool", "0x1E", "1"}, {
} }
};
const dotdot_bitmap MeteringEnergyCarrierDemandFormatting("MeteringEnergyCarrierDemandFormatting", "map8", MeteringEnergyCarrierDemandFormatting_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> MeteringEnergyCarrierSummationFormatting_bitmap_data {
{ {"SuppressLeadingZeros", "bool", "0x1", "0"}, {
} },
{ {"NumberOfDigitsToTheRightOfDecimalPoint", "bool", "0xE0", "5"}, {
} },
{ {"NumberOfDigitsToTheLeftOfTheDecimalPoint", "bool", "0x1E", "1"}, {
} }
};
const dotdot_bitmap MeteringEnergyCarrierSummationFormatting("MeteringEnergyCarrierSummationFormatting", "map8", MeteringEnergyCarrierSummationFormatting_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> MeteringHistoricalConsumptionFormatting_bitmap_data {
{ {"SuppressLeadingZeros", "bool", "0x1", "0"}, {
} },
{ {"NumberOfDigitsToTheRightOfDecimalPoint", "bool", "0xE0", "5"}, {
} },
{ {"NumberOfDigitsToTheLeftOfTheDecimalPoint", "bool", "0x1E", "1"}, {
} }
};
const dotdot_bitmap MeteringHistoricalConsumptionFormatting("MeteringHistoricalConsumptionFormatting", "map8", MeteringHistoricalConsumptionFormatting_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> MeteringSummationFormatting_bitmap_data {
{ {"SuppressLeadingZeros", "bool", "0x1", "0"}, {
} },
{ {"NumberOfDigitsToTheRightOfDecimalPoint", "bool", "0xE0", "5"}, {
} },
{ {"NumberOfDigitsToTheLeftOfTheDecimalPoint", "bool", "0x1E", "1"}, {
} }
};
const dotdot_bitmap MeteringSummationFormatting("MeteringSummationFormatting", "map8", MeteringSummationFormatting_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> MeteringTemperatureFormatting_bitmap_data {
{ {"SuppressLeadingZeros", "bool", "0x1", "0"}, {
} },
{ {"NumberOfDigitsToTheRightOfDecimalPoint", "bool", "0xE0", "5"}, {
} },
{ {"NumberOfDigitsToTheLeftOfTheDecimalPoint", "bool", "0x1E", "1"}, {
} }
};
const dotdot_bitmap MeteringTemperatureFormatting("MeteringTemperatureFormatting", "map8", MeteringTemperatureFormatting_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> OccupancySensingOccupancy_bitmap_data {
{ {"SensedOccupancy", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap OccupancySensingOccupancy("OccupancySensingOccupancy", "map8", OccupancySensingOccupancy_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> OccupancySensingOccupancySensorTypeBitmap_bitmap_data {
{ {"PIR", "bool", "0x1", "0"}, {
} },
{ {"Ultrasonic", "bool", "0x2", "1"}, {
} },
{ {"PhysicalContact", "bool", "0x4", "2"}, {
} }
};
const dotdot_bitmap OccupancySensingOccupancySensorTypeBitmap("OccupancySensingOccupancySensorTypeBitmap", "map8", OccupancySensingOccupancySensorTypeBitmap_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> OnWithTimedOffOnOffControl_bitmap_data {
{ {"AcceptOnlyWhenOn", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap OnWithTimedOffOnOffControl("OnWithTimedOffOnOffControl", "uint8", OnWithTimedOffOnOffControl_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> PowerConfigurationMainsAlarmMask_bitmap_data {
{ {"MainsVoltageTooLow", "bool", "0x1", "0"}, {
} },
{ {"MainsVoltageTooHigh", "bool", "0x2", "1"}, {
} },
{ {"MainsPowerSupplyLost", "bool", "0x4", "2"}, {
} }
};
const dotdot_bitmap PowerConfigurationMainsAlarmMask("PowerConfigurationMainsAlarmMask", "map8", PowerConfigurationMainsAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> PumpConfigurationAndControlAlarmMask_bitmap_data {
{ {"SupplyVoltageTooLow", "bool", "0x1", "0"}, {
} },
{ {"SupplyVoltageTooHigh", "bool", "0x2", "1"}, {
} },
{ {"PowerMissingPhase", "bool", "0x4", "2"}, {
} },
{ {"SystemPressureTooLow", "bool", "0x8", "3"}, {
} },
{ {"SystemPressureTooHigh", "bool", "0x10", "4"}, {
} },
{ {"DryRunning", "bool", "0x20", "5"}, {
} },
{ {"MotorTemperatureTooHigh", "bool", "0x40", "6"}, {
} },
{ {"PumpMotorHasFatalFailure", "bool", "0x80", "7"}, {
} },
{ {"ElectronicTemperatureTooHigh", "bool", "0x100", "8"}, {
} },
{ {"PumpBlocked", "bool", "0x200", "9"}, {
} },
{ {"SensorFailure", "bool", "0x400", "10"}, {
} },
{ {"ElectronicNonFatalFailure", "bool", "0x800", "11"}, {
} },
{ {"ElectronicFatalFailure", "bool", "0x1000", "12"}, {
} },
{ {"GeneralFault", "bool", "0x2000", "13"}, {
} }
};
const dotdot_bitmap PumpConfigurationAndControlAlarmMask("PumpConfigurationAndControlAlarmMask", "map16", PumpConfigurationAndControlAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> PumpConfigurationAndControlPumpStatus_bitmap_data {
{ {"DeviceFault", "bool", "0x1", "0"}, {
} },
{ {"SupplyFault", "bool", "0x2", "1"}, {
} },
{ {"SpeedLow", "bool", "0x4", "2"}, {
} },
{ {"SpeedHigh", "bool", "0x8", "3"}, {
} },
{ {"LocalOverride", "bool", "0x10", "4"}, {
} },
{ {"Running", "bool", "0x20", "5"}, {
} },
{ {"RemotePressure", "bool", "0x40", "6"}, {
} },
{ {"RemoteFlow", "bool", "0x80", "7"}, {
} },
{ {"RemoteTemperature", "bool", "0x100", "8"}, {
} }
};
const dotdot_bitmap PumpConfigurationAndControlPumpStatus("PumpConfigurationAndControlPumpStatus", "map16", PumpConfigurationAndControlPumpStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> QueryNextImageRequestFieldControl_bitmap_data {
{ {"HardwareVersionPresent", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap QueryNextImageRequestFieldControl("QueryNextImageRequestFieldControl", "map8", QueryNextImageRequestFieldControl_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ResetStartupParametersOptions_bitmap_data {
{ {"ResetCurrent", "bool", "0x1", "0"}, {
} },
{ {"ResetAll", "bool", "0x2", "1"}, {
} },
{ {"EraseIndex", "bool", "0x4", "2"}, {
} }
};
const dotdot_bitmap ResetStartupParametersOptions("ResetStartupParametersOptions", "map8", ResetStartupParametersOptions_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> RestartDeviceOptions_bitmap_data {
{ {"StartupMode", "enum8", "0x7", "0"}, {
{"RestartUsingStartupParameters", "0"},
{"RestartUsingCurrentState", "1"}
} },
{ {"Immediate", "bool", "0x8", "3"}, {
} }
};
const dotdot_bitmap RestartDeviceOptions("RestartDeviceOptions", "map8", RestartDeviceOptions_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ScenesNameSupport_bitmap_data {
{ {"SceneNamesSupported", "bool", "0x80", "7"}, {
} }
};
const dotdot_bitmap ScenesNameSupport("ScenesNameSupport", "map8", ScenesNameSupport_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ShadeConfigurationStatus_bitmap_data {
{ {"ShadeOperational", "bool", "0x1", "0"}, {
} },
{ {"ShadeAdjusting", "bool", "0x2", "1"}, {
} },
{ {"ShadeDirection", "enum8", "0x4", "2"}, {
} },
{ {"ForwardDirectionOfMotor", "enum8", "0x8", "3"}, {
} }
};
const dotdot_bitmap ShadeConfigurationStatus("ShadeConfigurationStatus", "map8", ShadeConfigurationStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> SquawkSquawkConfiguration_bitmap_data {
{ {"SquawkLevel", "enum8", "0x3", "0"}, {
} },
{ {"SquawkStrobeActive", "bool", "0x8", "3"}, {
} },
{ {"SquawkMode", "enum8", "0xF0", "4"}, {
{"SoundForSystemIsArmed", "0"},
{"SoundForSystemIsDisarmed", "1"}
} }
};
const dotdot_bitmap SquawkSquawkConfiguration("SquawkSquawkConfiguration", "map8", SquawkSquawkConfiguration_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> StartWarningSirenConfiguration_bitmap_data {
{ {"SirenLevel", "enum8", "0x3", "0"}, {
} },
{ {"Strobe", "enum8", "0xC", "2"}, {
{"NoStrobe", "0"},
{"UseStrobe", "1"}
} },
{ {"WarningMode", "enum8", "0xF0", "4"}, {
{"Stop", "0"},
{"Burgler", "1"},
{"Fire", "2"},
{"Emergency", "3"},
{"PolicePanic", "4"},
{"FirePanic", "5"},
{"EmergencyPanic", "6"}
} }
};
const dotdot_bitmap StartWarningSirenConfiguration("StartWarningSirenConfiguration", "map8", StartWarningSirenConfiguration_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatACErrorCode_bitmap_data {
{ {"CompressorFailureOrRefrigerantLeakage", "bool", "0x1", "0"}, {
} },
{ {"RoomTemperatureSensorFailure", "bool", "0x2", "1"}, {
} },
{ {"OutdoorTemperatureSensorFailure", "bool", "0x4", "2"}, {
} },
{ {"IndoorCoilTemperatureSensorFailure", "bool", "0x8", "3"}, {
} },
{ {"FanFailure", "bool", "0x10", "4"}, {
} }
};
const dotdot_bitmap ThermostatACErrorCode("ThermostatACErrorCode", "map32", ThermostatACErrorCode_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatAlarmMask_bitmap_data {
{ {"InitializationFailure", "bool", "0x1", "0"}, {
} },
{ {"HardwareFailure", "bool", "0x2", "1"}, {
} },
{ {"SelfCalibrationFailure", "bool", "0x4", "2"}, {
} }
};
const dotdot_bitmap ThermostatAlarmMask("ThermostatAlarmMask", "map8", ThermostatAlarmMask_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatHVACSystemTypeConfiguration_bitmap_data {
{ {"CoolingSystemStage", "enum8", "0x3", "0"}, {
{"CoolStage1", "0"},
{"CoolStage2", "1"},
{"CoolStage3", "2"}
} },
{ {"HeatingSystemStage", "enum8", "0xC", "2"}, {
{"HeatStage1", "0"},
{"HeatStage2", "1"},
{"HeatStage3", "2"}
} },
{ {"HeatingSystemType", "enum8", "0x10", "4"}, {
{"Conventional", "0"},
{"HeatPump", "1"}
} },
{ {"HeatingFuelSource", "enum8", "0x20", "5"}, {
{"ElectricOrB", "0"},
{"GasOrO", "1"}
} }
};
const dotdot_bitmap ThermostatHVACSystemTypeConfiguration("ThermostatHVACSystemTypeConfiguration", "map8", ThermostatHVACSystemTypeConfiguration_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatOccupancy_bitmap_data {
{ {"Occupied", "bool", "0x1", "0"}, {
} }
};
const dotdot_bitmap ThermostatOccupancy("ThermostatOccupancy", "map8", ThermostatOccupancy_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatRemoteSensing_bitmap_data {
{ {"LocalTemperatureRemote", "bool", "0x1", "0"}, {
} },
{ {"OutdoorTemperatureRemote", "bool", "0x2", "1"}, {
} },
{ {"OccupancyRemote", "bool", "0x4", "2"}, {
} }
};
const dotdot_bitmap ThermostatRemoteSensing("ThermostatRemoteSensing", "map8", ThermostatRemoteSensing_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatThermostatProgrammingOperationMode_bitmap_data {
{ {"ProgrammingMode", "enum8", "0x1", "0"}, {
{"SimpleOrSetpoint", "0"},
{"Schedule", "1"}
} },
{ {"AutoOrRecovery", "bool", "0x2", "1"}, {
} },
{ {"EconomyOrEnergyStar", "bool", "0x4", "2"}, {
} }
};
const dotdot_bitmap ThermostatThermostatProgrammingOperationMode("ThermostatThermostatProgrammingOperationMode", "map8", ThermostatThermostatProgrammingOperationMode_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> ThermostatThermostatRunningState_bitmap_data {
{ {"HeatOn", "bool", "0x1", "0"}, {
} },
{ {"CoolOn", "bool", "0x2", "1"}, {
} },
{ {"FanOn", "bool", "0x4", "2"}, {
} },
{ {"HeatSecondStageOn", "bool", "0x8", "3"}, {
} },
{ {"CoolSecondStageOn", "bool", "0x10", "4"}, {
} },
{ {"FanSecondStageOn", "bool", "0x20", "5"}, {
} },
{ {"FanThirdStageOn", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap ThermostatThermostatRunningState("ThermostatThermostatRunningState", "map16", ThermostatThermostatRunningState_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> TimeTimeStatus_bitmap_data {
{ {"Master", "bool", "0x1", "0"}, {
} },
{ {"Synchronized", "bool", "0x2", "1"}, {
} },
{ {"MasterZoneDst", "bool", "0x4", "2"}, {
} },
{ {"Superseding", "bool", "0x8", "3"}, {
} }
};
const dotdot_bitmap TimeTimeStatus("TimeTimeStatus", "map8", TimeTimeStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> TstatScheduleDOW_bitmap_data {
{ {"Sunday", "bool", "0x1", "0"}, {
} },
{ {"Monday", "bool", "0x2", "1"}, {
} },
{ {"Tuesday", "bool", "0x4", "2"}, {
} },
{ {"Wednesday", "bool", "0x8", "3"}, {
} },
{ {"Thursday", "bool", "0x10", "4"}, {
} },
{ {"Friday", "bool", "0x20", "5"}, {
} },
{ {"Saturday", "bool", "0x40", "6"}, {
} },
{ {"AwayOrVacation", "bool", "0x80", "7"}, {
} }
};
const dotdot_bitmap TstatScheduleDOW("TstatScheduleDOW", "map8", TstatScheduleDOW_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> TstatScheduleMode_bitmap_data {
{ {"Heat", "bool", "0x1", "0"}, {
} },
{ {"Cool", "bool", "0x2", "1"}, {
} }
};
const dotdot_bitmap TstatScheduleMode("TstatScheduleMode", "map8", TstatScheduleMode_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> WindowCoveringConfigOrStatus_bitmap_data {
{ {"Operational", "bool", "0x1", "0"}, {
} },
{ {"Online", "bool", "0x2", "1"}, {
} },
{ {"OpenAndUpCommandsReversed", "bool", "0x4", "2"}, {
} },
{ {"LiftClosedLoop", "bool", "0x8", "3"}, {
} },
{ {"TiltClosedLoop", "bool", "0x10", "4"}, {
} },
{ {"LiftEncoderControlled", "bool", "0x20", "5"}, {
} },
{ {"TiltEncoderControlled", "bool", "0x40", "6"}, {
} }
};
const dotdot_bitmap WindowCoveringConfigOrStatus("WindowCoveringConfigOrStatus", "map8", WindowCoveringConfigOrStatus_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> WindowCoveringMode_bitmap_data {
{ {"MotorDirectionReversed", "bool", "0x1", "0"}, {
} },
{ {"CalibrationMode", "bool", "0x2", "1"}, {
} },
{ {"MaintenanceMode", "bool", "0x4", "2"}, {
} },
{ {"LEDFeedback", "bool", "0x8", "3"}, {
} }
};
const dotdot_bitmap WindowCoveringMode("WindowCoveringMode", "map8", WindowCoveringMode_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map16_bitmap_data {
};
const dotdot_bitmap map16("map16", "map16", map16_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map24_bitmap_data {
};
const dotdot_bitmap map24("map24", "map32", map24_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map32_bitmap_data {
};
const dotdot_bitmap map32("map32", "map32", map32_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map40_bitmap_data {
};
const dotdot_bitmap map40("map40", "map32", map40_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map48_bitmap_data {
};
const dotdot_bitmap map48("map48", "map32", map48_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map56_bitmap_data {
};
const dotdot_bitmap map56("map56", "map32", map56_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map64_bitmap_data {
};
const dotdot_bitmap map64("map64", "map32", map64_bitmap_data);

const std::vector<std::pair<std::vector<std::string>, std::vector<std::vector<std::string>>>> map8_bitmap_data {
};
const dotdot_bitmap map8("map8", "map8", map8_bitmap_data);

#endif  //DOTDOT_MQTT_HPP
/** @} end dotdot_mqtt_hpp */
